// SPDX-License-Identifier: MIT
// Copyright (C) 2018-present iced project and contributors

// ⚠️This file was generated by GENERATOR!🦹‍♂️

#nullable enable

#if ENCODER && BLOCK_ENCODER && CODE_ASSEMBLER
namespace UnitTests.Intel.AssemblerTests {
	using Blazed.Intel;
	using Xunit;
	using static Blazed.Intel.AssemblerRegisters;
	public sealed partial class AssemblerTests64 : AssemblerTestsBase {
		public AssemblerTests64() : base(64) { }

		[Fact]
		public void adc_r8_r8() {
			TestAssembler(c => c.adc(dl, bl), Instruction.Create(Code.Adc_rm8_r8, Register.DL, Register.BL));
		}

		[Fact]
		public void adc_m_r8() {
			TestAssembler(c => c.adc(__byte_ptr[rcx], bl), Instruction.Create(Code.Adc_rm8_r8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BL));
		}

		[Fact]
		public void adc_r16_r16() {
			TestAssembler(c => c.adc(dx, bx), Instruction.Create(Code.Adc_rm16_r16, Register.DX, Register.BX));
		}

		[Fact]
		public void adc_m_r16() {
			TestAssembler(c => c.adc(__word_ptr[rcx], bx), Instruction.Create(Code.Adc_rm16_r16, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX));
		}

		[Fact]
		public void adc_r32_r32() {
			TestAssembler(c => c.adc(edx, ebx), Instruction.Create(Code.Adc_rm32_r32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void adc_m_r32() {
			TestAssembler(c => c.adc(__dword_ptr[rcx], ebx), Instruction.Create(Code.Adc_rm32_r32, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX));
		}

		[Fact]
		public void adc_r64_r64() {
			TestAssembler(c => c.adc(rdx, rbx), Instruction.Create(Code.Adc_rm64_r64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void adc_m_r64() {
			TestAssembler(c => c.adc(__qword_ptr[rcx], rbx), Instruction.Create(Code.Adc_rm64_r64, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX));
		}

		[Fact]
		public void adc_r8_m() {
			TestAssembler(c => c.adc(dl, __byte_ptr[rcx]), Instruction.Create(Code.Adc_r8_rm8, Register.DL, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void adc_r16_m() {
			TestAssembler(c => c.adc(dx, __word_ptr[rcx]), Instruction.Create(Code.Adc_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void adc_r32_m() {
			TestAssembler(c => c.adc(edx, __dword_ptr[rcx]), Instruction.Create(Code.Adc_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void adc_r64_m() {
			TestAssembler(c => c.adc(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Adc_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void adc_r8_i() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.adc(al, -5), Instruction.Create(Code.Adc_AL_imm8, Register.AL, -5));
			} /* else */ TestAssembler(c => c.adc(dl, -5), Instruction.Create(Code.Adc_rm8_imm8, Register.DL, -5));
		}

		[Fact]
		public void adc_r16_i() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.adc(ax, 0x40B7), Instruction.Create(Code.Adc_AX_imm16, Register.AX, 0x40B7));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.adc(dx, -0x80), Instruction.Create(Code.Adc_rm16_imm8, Register.DX, -0x80));
				TestAssembler(c => c.adc(dx, 0x7F), Instruction.Create(Code.Adc_rm16_imm8, Register.DX, 0x7F));
			} /* else */ TestAssembler(c => c.adc(dx, 0x40B7), Instruction.Create(Code.Adc_rm16_imm16, Register.DX, 0x40B7));
		}

		[Fact]
		public void adc_r32_i() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.adc(eax, 0x7FFFFFFF), Instruction.Create(Code.Adc_EAX_imm32, Register.EAX, 0x7FFFFFFF));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.adc(edx, -0x80), Instruction.Create(Code.Adc_rm32_imm8, Register.EDX, -0x80));
				TestAssembler(c => c.adc(edx, 0x7F), Instruction.Create(Code.Adc_rm32_imm8, Register.EDX, 0x7F));
			} /* else */ TestAssembler(c => c.adc(edx, 0x7FFFFFFF), Instruction.Create(Code.Adc_rm32_imm32, Register.EDX, 0x7FFFFFFF));
		}

		[Fact]
		public void adc_r64_i() {
			{ /* if (dst == Register.RAX) */
				TestAssembler(c => c.adc(rax, -0x80000000), Instruction.Create(Code.Adc_RAX_imm32, Register.RAX, -0x80000000));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.adc(rdx, -0x80), Instruction.Create(Code.Adc_rm64_imm8, Register.RDX, -0x80));
				TestAssembler(c => c.adc(rdx, 0x7F), Instruction.Create(Code.Adc_rm64_imm8, Register.RDX, 0x7F));
			} /* else */ TestAssembler(c => c.adc(rdx, -0x80000000), Instruction.Create(Code.Adc_rm64_imm32, Register.RDX, -0x80000000));
		}

		[Fact]
		public void adc_m_i() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.adc(__qword_ptr[rdx], -0x80), Instruction.Create(Code.Adc_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80));
					TestAssembler(c => c.adc(__qword_ptr[rdx], 0x7F), Instruction.Create(Code.Adc_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7F));
				} /* else */ TestAssembler(c => c.adc(__qword_ptr[rdx], -0x80000000), Instruction.Create(Code.Adc_rm64_imm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80000000));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.adc(__dword_ptr[rdx], -0x80), Instruction.Create(Code.Adc_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80));
					TestAssembler(c => c.adc(__dword_ptr[rdx], 0x7F), Instruction.Create(Code.Adc_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7F));
				} /* else */ TestAssembler(c => c.adc(__dword_ptr[rdx], 0x7FFFFFFF), Instruction.Create(Code.Adc_rm32_imm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFF));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.adc(__word_ptr[rdx], -0x80), Instruction.Create(Code.Adc_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80));
					TestAssembler(c => c.adc(__word_ptr[rdx], 0x7F), Instruction.Create(Code.Adc_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7F));
				} /* else */ TestAssembler(c => c.adc(__word_ptr[rdx], 0x40B7), Instruction.Create(Code.Adc_rm16_imm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x40B7));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.adc(__byte_ptr[rdx], -5), Instruction.Create(Code.Adc_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.adc(__zmmword_ptr[rdx], -5), Instruction.Create(Code.Adc_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
				});
			}
		}

		[Fact]
		public void adc_r8_u() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.adc(al, (byte)0x7F), Instruction.Create(Code.Adc_AL_imm8, Register.AL, 0x7FU));
			} /* else */ TestAssembler(c => c.adc(dl, (byte)0x7F), Instruction.Create(Code.Adc_rm8_imm8, Register.DL, 0x7FU));
		}

		[Fact]
		public void adc_r16_u() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.adc(ax, (ushort)0x40B7), Instruction.Create(Code.Adc_AX_imm16, Register.AX, 0x40B7U));
			} /* else */ { /* if (imm <= (ushort)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
				TestAssembler(c => c.adc(dx, (ushort)0xFF80), Instruction.Create(Code.Adc_rm16_imm8, Register.DX, 0xFF80U));
				TestAssembler(c => c.adc(dx, (ushort)0x7F), Instruction.Create(Code.Adc_rm16_imm8, Register.DX, 0x7FU));
			} /* else */ TestAssembler(c => c.adc(dx, (ushort)0x40B7), Instruction.Create(Code.Adc_rm16_imm16, Register.DX, 0x40B7U));
		}

		[Fact]
		public void adc_r32_u() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.adc(eax, 0x7FFFFFFFU), Instruction.Create(Code.Adc_EAX_imm32, Register.EAX, 0x7FFFFFFFU));
			} /* else */ { /* if (imm <= (uint)sbyte.MaxValue || 0xFFFF_FF80 <= imm) */
				TestAssembler(c => c.adc(edx, 0xFFFFFF80U), Instruction.Create(Code.Adc_rm32_imm8, Register.EDX, 0xFFFFFF80U));
				TestAssembler(c => c.adc(edx, 0x7FU), Instruction.Create(Code.Adc_rm32_imm8, Register.EDX, 0x7FU));
			} /* else */ TestAssembler(c => c.adc(edx, 0x7FFFFFFFU), Instruction.Create(Code.Adc_rm32_imm32, Register.EDX, 0x7FFFFFFFU));
		}

		[Fact]
		public void adc_m_u() {
			{ /* if (dst.Size == MemoryOperandSize.Dword) */
				{ /* if (imm <= (uint)sbyte.MaxValue || 0xFFFF_FF80 <= imm) */
					TestAssembler(c => c.adc(__dword_ptr[rdx], 0xFFFFFF80U), Instruction.Create(Code.Adc_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0xFFFFFF80U));
					TestAssembler(c => c.adc(__dword_ptr[rdx], 0x7FU), Instruction.Create(Code.Adc_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
				} /* else */ TestAssembler(c => c.adc(__dword_ptr[rdx], 0x7FFFFFFFU), Instruction.Create(Code.Adc_rm32_imm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFFU));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				{ /* if (imm <= (uint)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
					TestAssembler(c => c.adc(__word_ptr[rdx], 0xFF80U), Instruction.Create(Code.Adc_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0xFF80U));
					TestAssembler(c => c.adc(__word_ptr[rdx], 0x7FU), Instruction.Create(Code.Adc_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
				} /* else */ TestAssembler(c => c.adc(__word_ptr[rdx], 0x40B7U), Instruction.Create(Code.Adc_rm16_imm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x40B7U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.adc(__byte_ptr[rdx], 0x7FU), Instruction.Create(Code.Adc_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.adc(__zmmword_ptr[rdx], 0x7FU), Instruction.Create(Code.Adc_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
				});
			}
		}

		[Fact]
		public void adcx_r32_r32() {
			TestAssembler(c => c.adcx(edx, ebx), Instruction.Create(Code.Adcx_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void adcx_r64_r64() {
			TestAssembler(c => c.adcx(rdx, rbx), Instruction.Create(Code.Adcx_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void adcx_r32_m() {
			TestAssembler(c => c.adcx(edx, __dword_ptr[rcx]), Instruction.Create(Code.Adcx_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void adcx_r64_m() {
			TestAssembler(c => c.adcx(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Adcx_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void add_r8_r8() {
			TestAssembler(c => c.add(dl, bl), Instruction.Create(Code.Add_rm8_r8, Register.DL, Register.BL));
		}

		[Fact]
		public void add_m_r8() {
			TestAssembler(c => c.add(__byte_ptr[rcx], bl), Instruction.Create(Code.Add_rm8_r8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BL));
		}

		[Fact]
		public void add_r16_r16() {
			TestAssembler(c => c.add(dx, bx), Instruction.Create(Code.Add_rm16_r16, Register.DX, Register.BX));
		}

		[Fact]
		public void add_m_r16() {
			TestAssembler(c => c.add(__word_ptr[rcx], bx), Instruction.Create(Code.Add_rm16_r16, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX));
		}

		[Fact]
		public void add_r32_r32() {
			TestAssembler(c => c.add(edx, ebx), Instruction.Create(Code.Add_rm32_r32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void add_m_r32() {
			TestAssembler(c => c.add(__dword_ptr[rcx], ebx), Instruction.Create(Code.Add_rm32_r32, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX));
		}

		[Fact]
		public void add_r64_r64() {
			TestAssembler(c => c.add(rdx, rbx), Instruction.Create(Code.Add_rm64_r64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void add_m_r64() {
			TestAssembler(c => c.add(__qword_ptr[rcx], rbx), Instruction.Create(Code.Add_rm64_r64, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX));
		}

		[Fact]
		public void add_r8_m() {
			TestAssembler(c => c.add(dl, __byte_ptr[rcx]), Instruction.Create(Code.Add_r8_rm8, Register.DL, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void add_r16_m() {
			TestAssembler(c => c.add(dx, __word_ptr[rcx]), Instruction.Create(Code.Add_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void add_r32_m() {
			TestAssembler(c => c.add(edx, __dword_ptr[rcx]), Instruction.Create(Code.Add_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void add_r64_m() {
			TestAssembler(c => c.add(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Add_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void add_r8_i() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.add(al, -5), Instruction.Create(Code.Add_AL_imm8, Register.AL, -5));
			} /* else */ TestAssembler(c => c.add(dl, -5), Instruction.Create(Code.Add_rm8_imm8, Register.DL, -5));
		}

		[Fact]
		public void add_r16_i() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.add(ax, 0x40B7), Instruction.Create(Code.Add_AX_imm16, Register.AX, 0x40B7));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.add(dx, -0x80), Instruction.Create(Code.Add_rm16_imm8, Register.DX, -0x80));
				TestAssembler(c => c.add(dx, 0x7F), Instruction.Create(Code.Add_rm16_imm8, Register.DX, 0x7F));
			} /* else */ TestAssembler(c => c.add(dx, 0x40B7), Instruction.Create(Code.Add_rm16_imm16, Register.DX, 0x40B7));
		}

		[Fact]
		public void add_r32_i() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.add(eax, 0x7FFFFFFF), Instruction.Create(Code.Add_EAX_imm32, Register.EAX, 0x7FFFFFFF));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.add(edx, -0x80), Instruction.Create(Code.Add_rm32_imm8, Register.EDX, -0x80));
				TestAssembler(c => c.add(edx, 0x7F), Instruction.Create(Code.Add_rm32_imm8, Register.EDX, 0x7F));
			} /* else */ TestAssembler(c => c.add(edx, 0x7FFFFFFF), Instruction.Create(Code.Add_rm32_imm32, Register.EDX, 0x7FFFFFFF));
		}

		[Fact]
		public void add_r64_i() {
			{ /* if (dst == Register.RAX) */
				TestAssembler(c => c.add(rax, -0x80000000), Instruction.Create(Code.Add_RAX_imm32, Register.RAX, -0x80000000));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.add(rdx, -0x80), Instruction.Create(Code.Add_rm64_imm8, Register.RDX, -0x80));
				TestAssembler(c => c.add(rdx, 0x7F), Instruction.Create(Code.Add_rm64_imm8, Register.RDX, 0x7F));
			} /* else */ TestAssembler(c => c.add(rdx, -0x80000000), Instruction.Create(Code.Add_rm64_imm32, Register.RDX, -0x80000000));
		}

		[Fact]
		public void add_m_i() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.add(__qword_ptr[rdx], -0x80), Instruction.Create(Code.Add_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80));
					TestAssembler(c => c.add(__qword_ptr[rdx], 0x7F), Instruction.Create(Code.Add_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7F));
				} /* else */ TestAssembler(c => c.add(__qword_ptr[rdx], -0x80000000), Instruction.Create(Code.Add_rm64_imm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80000000));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.add(__dword_ptr[rdx], -0x80), Instruction.Create(Code.Add_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80));
					TestAssembler(c => c.add(__dword_ptr[rdx], 0x7F), Instruction.Create(Code.Add_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7F));
				} /* else */ TestAssembler(c => c.add(__dword_ptr[rdx], 0x7FFFFFFF), Instruction.Create(Code.Add_rm32_imm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFF));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.add(__word_ptr[rdx], -0x80), Instruction.Create(Code.Add_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80));
					TestAssembler(c => c.add(__word_ptr[rdx], 0x7F), Instruction.Create(Code.Add_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7F));
				} /* else */ TestAssembler(c => c.add(__word_ptr[rdx], 0x40B7), Instruction.Create(Code.Add_rm16_imm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x40B7));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.add(__byte_ptr[rdx], -5), Instruction.Create(Code.Add_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.add(__zmmword_ptr[rdx], -5), Instruction.Create(Code.Add_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
				});
			}
		}

		[Fact]
		public void add_r8_u() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.add(al, (byte)0x7F), Instruction.Create(Code.Add_AL_imm8, Register.AL, 0x7FU));
			} /* else */ TestAssembler(c => c.add(dl, (byte)0x7F), Instruction.Create(Code.Add_rm8_imm8, Register.DL, 0x7FU));
		}

		[Fact]
		public void add_r16_u() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.add(ax, (ushort)0x40B7), Instruction.Create(Code.Add_AX_imm16, Register.AX, 0x40B7U));
			} /* else */ { /* if (imm <= (ushort)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
				TestAssembler(c => c.add(dx, (ushort)0xFF80), Instruction.Create(Code.Add_rm16_imm8, Register.DX, 0xFF80U));
				TestAssembler(c => c.add(dx, (ushort)0x7F), Instruction.Create(Code.Add_rm16_imm8, Register.DX, 0x7FU));
			} /* else */ TestAssembler(c => c.add(dx, (ushort)0x40B7), Instruction.Create(Code.Add_rm16_imm16, Register.DX, 0x40B7U));
		}

		[Fact]
		public void add_r32_u() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.add(eax, 0x7FFFFFFFU), Instruction.Create(Code.Add_EAX_imm32, Register.EAX, 0x7FFFFFFFU));
			} /* else */ { /* if (imm <= (uint)sbyte.MaxValue || 0xFFFF_FF80 <= imm) */
				TestAssembler(c => c.add(edx, 0xFFFFFF80U), Instruction.Create(Code.Add_rm32_imm8, Register.EDX, 0xFFFFFF80U));
				TestAssembler(c => c.add(edx, 0x7FU), Instruction.Create(Code.Add_rm32_imm8, Register.EDX, 0x7FU));
			} /* else */ TestAssembler(c => c.add(edx, 0x7FFFFFFFU), Instruction.Create(Code.Add_rm32_imm32, Register.EDX, 0x7FFFFFFFU));
		}

		[Fact]
		public void add_m_u() {
			{ /* if (dst.Size == MemoryOperandSize.Dword) */
				{ /* if (imm <= (uint)sbyte.MaxValue || 0xFFFF_FF80 <= imm) */
					TestAssembler(c => c.add(__dword_ptr[rdx], 0xFFFFFF80U), Instruction.Create(Code.Add_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0xFFFFFF80U));
					TestAssembler(c => c.add(__dword_ptr[rdx], 0x7FU), Instruction.Create(Code.Add_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
				} /* else */ TestAssembler(c => c.add(__dword_ptr[rdx], 0x7FFFFFFFU), Instruction.Create(Code.Add_rm32_imm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFFU));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				{ /* if (imm <= (uint)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
					TestAssembler(c => c.add(__word_ptr[rdx], 0xFF80U), Instruction.Create(Code.Add_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0xFF80U));
					TestAssembler(c => c.add(__word_ptr[rdx], 0x7FU), Instruction.Create(Code.Add_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
				} /* else */ TestAssembler(c => c.add(__word_ptr[rdx], 0x40B7U), Instruction.Create(Code.Add_rm16_imm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x40B7U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.add(__byte_ptr[rdx], 0x7FU), Instruction.Create(Code.Add_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.add(__zmmword_ptr[rdx], 0x7FU), Instruction.Create(Code.Add_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
				});
			}
		}

		[Fact]
		public void addpd_xmm_xmm() {
			TestAssembler(c => c.addpd(xmm2, xmm3), Instruction.Create(Code.Addpd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void addpd_xmm_m() {
			TestAssembler(c => c.addpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Addpd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void addps_xmm_xmm() {
			TestAssembler(c => c.addps(xmm2, xmm3), Instruction.Create(Code.Addps_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void addps_xmm_m() {
			TestAssembler(c => c.addps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Addps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void addsd_xmm_xmm() {
			TestAssembler(c => c.addsd(xmm2, xmm3), Instruction.Create(Code.Addsd_xmm_xmmm64, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void addsd_xmm_m() {
			TestAssembler(c => c.addsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Addsd_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void addss_xmm_xmm() {
			TestAssembler(c => c.addss(xmm2, xmm3), Instruction.Create(Code.Addss_xmm_xmmm32, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void addss_xmm_m() {
			TestAssembler(c => c.addss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Addss_xmm_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void addsubpd_xmm_xmm() {
			TestAssembler(c => c.addsubpd(xmm2, xmm3), Instruction.Create(Code.Addsubpd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void addsubpd_xmm_m() {
			TestAssembler(c => c.addsubpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Addsubpd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void addsubps_xmm_xmm() {
			TestAssembler(c => c.addsubps(xmm2, xmm3), Instruction.Create(Code.Addsubps_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void addsubps_xmm_m() {
			TestAssembler(c => c.addsubps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Addsubps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void adox_r32_r32() {
			TestAssembler(c => c.adox(edx, ebx), Instruction.Create(Code.Adox_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void adox_r64_r64() {
			TestAssembler(c => c.adox(rdx, rbx), Instruction.Create(Code.Adox_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void adox_r32_m() {
			TestAssembler(c => c.adox(edx, __dword_ptr[rcx]), Instruction.Create(Code.Adox_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void adox_r64_m() {
			TestAssembler(c => c.adox(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Adox_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void aesdec_xmm_xmm() {
			TestAssembler(c => c.aesdec(xmm2, xmm3), Instruction.Create(Code.Aesdec_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void aesdec_xmm_m() {
			TestAssembler(c => c.aesdec(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Aesdec_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void aesdec128kl_xmm_m() {
			TestAssembler(c => c.aesdec128kl(xmm2, __[rcx]), Instruction.Create(Code.Aesdec128kl_xmm_m384, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void aesdec256kl_xmm_m() {
			TestAssembler(c => c.aesdec256kl(xmm2, __[rcx]), Instruction.Create(Code.Aesdec256kl_xmm_m512, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void aesdeclast_xmm_xmm() {
			TestAssembler(c => c.aesdeclast(xmm2, xmm3), Instruction.Create(Code.Aesdeclast_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void aesdeclast_xmm_m() {
			TestAssembler(c => c.aesdeclast(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Aesdeclast_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void aesdecwide128kl_m() {
			TestAssembler(c => c.aesdecwide128kl(__[rcx]), Instruction.Create(Code.Aesdecwide128kl_m384, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void aesdecwide256kl_m() {
			TestAssembler(c => c.aesdecwide256kl(__[rcx]), Instruction.Create(Code.Aesdecwide256kl_m512, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void aesenc_xmm_xmm() {
			TestAssembler(c => c.aesenc(xmm2, xmm3), Instruction.Create(Code.Aesenc_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void aesenc_xmm_m() {
			TestAssembler(c => c.aesenc(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Aesenc_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void aesenc128kl_xmm_m() {
			TestAssembler(c => c.aesenc128kl(xmm2, __[rcx]), Instruction.Create(Code.Aesenc128kl_xmm_m384, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void aesenc256kl_xmm_m() {
			TestAssembler(c => c.aesenc256kl(xmm2, __[rcx]), Instruction.Create(Code.Aesenc256kl_xmm_m512, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void aesenclast_xmm_xmm() {
			TestAssembler(c => c.aesenclast(xmm2, xmm3), Instruction.Create(Code.Aesenclast_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void aesenclast_xmm_m() {
			TestAssembler(c => c.aesenclast(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Aesenclast_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void aesencwide128kl_m() {
			TestAssembler(c => c.aesencwide128kl(__[rcx]), Instruction.Create(Code.Aesencwide128kl_m384, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void aesencwide256kl_m() {
			TestAssembler(c => c.aesencwide256kl(__[rcx]), Instruction.Create(Code.Aesencwide256kl_m512, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void aesimc_xmm_xmm() {
			TestAssembler(c => c.aesimc(xmm2, xmm3), Instruction.Create(Code.Aesimc_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void aesimc_xmm_m() {
			TestAssembler(c => c.aesimc(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Aesimc_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void aeskeygenassist_xmm_xmm_i() {
			TestAssembler(c => c.aeskeygenassist(xmm2, xmm3, -5), Instruction.Create(Code.Aeskeygenassist_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void aeskeygenassist_xmm_m_i() {
			TestAssembler(c => c.aeskeygenassist(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Aeskeygenassist_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void aeskeygenassist_xmm_xmm_u() {
			TestAssembler(c => c.aeskeygenassist(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Aeskeygenassist_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void aeskeygenassist_xmm_m_u() {
			TestAssembler(c => c.aeskeygenassist(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Aeskeygenassist_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void and_r8_r8() {
			TestAssembler(c => c.and(dl, bl), Instruction.Create(Code.And_rm8_r8, Register.DL, Register.BL));
		}

		[Fact]
		public void and_m_r8() {
			TestAssembler(c => c.and(__byte_ptr[rcx], bl), Instruction.Create(Code.And_rm8_r8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BL));
		}

		[Fact]
		public void and_r16_r16() {
			TestAssembler(c => c.and(dx, bx), Instruction.Create(Code.And_rm16_r16, Register.DX, Register.BX));
		}

		[Fact]
		public void and_m_r16() {
			TestAssembler(c => c.and(__word_ptr[rcx], bx), Instruction.Create(Code.And_rm16_r16, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX));
		}

		[Fact]
		public void and_r32_r32() {
			TestAssembler(c => c.and(edx, ebx), Instruction.Create(Code.And_rm32_r32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void and_m_r32() {
			TestAssembler(c => c.and(__dword_ptr[rcx], ebx), Instruction.Create(Code.And_rm32_r32, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX));
		}

		[Fact]
		public void and_r64_r64() {
			TestAssembler(c => c.and(rdx, rbx), Instruction.Create(Code.And_rm64_r64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void and_m_r64() {
			TestAssembler(c => c.and(__qword_ptr[rcx], rbx), Instruction.Create(Code.And_rm64_r64, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX));
		}

		[Fact]
		public void and_r8_m() {
			TestAssembler(c => c.and(dl, __byte_ptr[rcx]), Instruction.Create(Code.And_r8_rm8, Register.DL, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void and_r16_m() {
			TestAssembler(c => c.and(dx, __word_ptr[rcx]), Instruction.Create(Code.And_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void and_r32_m() {
			TestAssembler(c => c.and(edx, __dword_ptr[rcx]), Instruction.Create(Code.And_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void and_r64_m() {
			TestAssembler(c => c.and(rdx, __qword_ptr[rcx]), Instruction.Create(Code.And_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void and_r8_i() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.and(al, -5), Instruction.Create(Code.And_AL_imm8, Register.AL, -5));
			} /* else */ TestAssembler(c => c.and(dl, -5), Instruction.Create(Code.And_rm8_imm8, Register.DL, -5));
		}

		[Fact]
		public void and_r16_i() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.and(ax, 0x40B7), Instruction.Create(Code.And_AX_imm16, Register.AX, 0x40B7));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.and(dx, -0x80), Instruction.Create(Code.And_rm16_imm8, Register.DX, -0x80));
				TestAssembler(c => c.and(dx, 0x7F), Instruction.Create(Code.And_rm16_imm8, Register.DX, 0x7F));
			} /* else */ TestAssembler(c => c.and(dx, 0x40B7), Instruction.Create(Code.And_rm16_imm16, Register.DX, 0x40B7));
		}

		[Fact]
		public void and_r32_i() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.and(eax, 0x7FFFFFFF), Instruction.Create(Code.And_EAX_imm32, Register.EAX, 0x7FFFFFFF));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.and(edx, -0x80), Instruction.Create(Code.And_rm32_imm8, Register.EDX, -0x80));
				TestAssembler(c => c.and(edx, 0x7F), Instruction.Create(Code.And_rm32_imm8, Register.EDX, 0x7F));
			} /* else */ TestAssembler(c => c.and(edx, 0x7FFFFFFF), Instruction.Create(Code.And_rm32_imm32, Register.EDX, 0x7FFFFFFF));
		}

		[Fact]
		public void and_r64_i() {
			{ /* if (dst == Register.RAX) */
				TestAssembler(c => c.and(rax, -0x80000000), Instruction.Create(Code.And_RAX_imm32, Register.RAX, -0x80000000));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.and(rdx, -0x80), Instruction.Create(Code.And_rm64_imm8, Register.RDX, -0x80));
				TestAssembler(c => c.and(rdx, 0x7F), Instruction.Create(Code.And_rm64_imm8, Register.RDX, 0x7F));
			} /* else */ TestAssembler(c => c.and(rdx, -0x80000000), Instruction.Create(Code.And_rm64_imm32, Register.RDX, -0x80000000));
		}

		[Fact]
		public void and_m_i() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.and(__qword_ptr[rdx], -0x80), Instruction.Create(Code.And_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80));
					TestAssembler(c => c.and(__qword_ptr[rdx], 0x7F), Instruction.Create(Code.And_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7F));
				} /* else */ TestAssembler(c => c.and(__qword_ptr[rdx], -0x80000000), Instruction.Create(Code.And_rm64_imm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80000000));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.and(__dword_ptr[rdx], -0x80), Instruction.Create(Code.And_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80));
					TestAssembler(c => c.and(__dword_ptr[rdx], 0x7F), Instruction.Create(Code.And_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7F));
				} /* else */ TestAssembler(c => c.and(__dword_ptr[rdx], 0x7FFFFFFF), Instruction.Create(Code.And_rm32_imm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFF));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.and(__word_ptr[rdx], -0x80), Instruction.Create(Code.And_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80));
					TestAssembler(c => c.and(__word_ptr[rdx], 0x7F), Instruction.Create(Code.And_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7F));
				} /* else */ TestAssembler(c => c.and(__word_ptr[rdx], 0x40B7), Instruction.Create(Code.And_rm16_imm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x40B7));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.and(__byte_ptr[rdx], -5), Instruction.Create(Code.And_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.and(__zmmword_ptr[rdx], -5), Instruction.Create(Code.And_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
				});
			}
		}

		[Fact]
		public void and_r8_u() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.and(al, (byte)0x7F), Instruction.Create(Code.And_AL_imm8, Register.AL, 0x7FU));
			} /* else */ TestAssembler(c => c.and(dl, (byte)0x7F), Instruction.Create(Code.And_rm8_imm8, Register.DL, 0x7FU));
		}

		[Fact]
		public void and_r16_u() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.and(ax, (ushort)0x40B7), Instruction.Create(Code.And_AX_imm16, Register.AX, 0x40B7U));
			} /* else */ { /* if (imm <= (ushort)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
				TestAssembler(c => c.and(dx, (ushort)0xFF80), Instruction.Create(Code.And_rm16_imm8, Register.DX, 0xFF80U));
				TestAssembler(c => c.and(dx, (ushort)0x7F), Instruction.Create(Code.And_rm16_imm8, Register.DX, 0x7FU));
			} /* else */ TestAssembler(c => c.and(dx, (ushort)0x40B7), Instruction.Create(Code.And_rm16_imm16, Register.DX, 0x40B7U));
		}

		[Fact]
		public void and_r32_u() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.and(eax, 0x7FFFFFFFU), Instruction.Create(Code.And_EAX_imm32, Register.EAX, 0x7FFFFFFFU));
			} /* else */ { /* if (imm <= (uint)sbyte.MaxValue || 0xFFFF_FF80 <= imm) */
				TestAssembler(c => c.and(edx, 0xFFFFFF80U), Instruction.Create(Code.And_rm32_imm8, Register.EDX, 0xFFFFFF80U));
				TestAssembler(c => c.and(edx, 0x7FU), Instruction.Create(Code.And_rm32_imm8, Register.EDX, 0x7FU));
			} /* else */ TestAssembler(c => c.and(edx, 0x7FFFFFFFU), Instruction.Create(Code.And_rm32_imm32, Register.EDX, 0x7FFFFFFFU));
		}

		[Fact]
		public void and_m_u() {
			{ /* if (dst.Size == MemoryOperandSize.Dword) */
				{ /* if (imm <= (uint)sbyte.MaxValue || 0xFFFF_FF80 <= imm) */
					TestAssembler(c => c.and(__dword_ptr[rdx], 0xFFFFFF80U), Instruction.Create(Code.And_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0xFFFFFF80U));
					TestAssembler(c => c.and(__dword_ptr[rdx], 0x7FU), Instruction.Create(Code.And_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
				} /* else */ TestAssembler(c => c.and(__dword_ptr[rdx], 0x7FFFFFFFU), Instruction.Create(Code.And_rm32_imm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFFU));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				{ /* if (imm <= (uint)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
					TestAssembler(c => c.and(__word_ptr[rdx], 0xFF80U), Instruction.Create(Code.And_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0xFF80U));
					TestAssembler(c => c.and(__word_ptr[rdx], 0x7FU), Instruction.Create(Code.And_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
				} /* else */ TestAssembler(c => c.and(__word_ptr[rdx], 0x40B7U), Instruction.Create(Code.And_rm16_imm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x40B7U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.and(__byte_ptr[rdx], 0x7FU), Instruction.Create(Code.And_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.and(__zmmword_ptr[rdx], 0x7FU), Instruction.Create(Code.And_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
				});
			}
		}

		[Fact]
		public void andn_r32_r32_r32() {
			TestAssembler(c => c.andn(edx, ebx, esp), Instruction.Create(Code.VEX_Andn_r32_r32_rm32, Register.EDX, Register.EBX, Register.ESP));
		}

		[Fact]
		public void andn_r64_r64_r64() {
			TestAssembler(c => c.andn(rdx, rbx, rsp), Instruction.Create(Code.VEX_Andn_r64_r64_rm64, Register.RDX, Register.RBX, Register.RSP));
		}

		[Fact]
		public void andn_r32_r32_m() {
			TestAssembler(c => c.andn(edx, ebx, __dword_ptr[rcx]), Instruction.Create(Code.VEX_Andn_r32_r32_rm32, Register.EDX, Register.EBX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void andn_r64_r64_m() {
			TestAssembler(c => c.andn(rdx, rbx, __qword_ptr[rcx]), Instruction.Create(Code.VEX_Andn_r64_r64_rm64, Register.RDX, Register.RBX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void andnpd_xmm_xmm() {
			TestAssembler(c => c.andnpd(xmm2, xmm3), Instruction.Create(Code.Andnpd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void andnpd_xmm_m() {
			TestAssembler(c => c.andnpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Andnpd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void andnps_xmm_xmm() {
			TestAssembler(c => c.andnps(xmm2, xmm3), Instruction.Create(Code.Andnps_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void andnps_xmm_m() {
			TestAssembler(c => c.andnps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Andnps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void andpd_xmm_xmm() {
			TestAssembler(c => c.andpd(xmm2, xmm3), Instruction.Create(Code.Andpd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void andpd_xmm_m() {
			TestAssembler(c => c.andpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Andpd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void andps_xmm_xmm() {
			TestAssembler(c => c.andps(xmm2, xmm3), Instruction.Create(Code.Andps_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void andps_xmm_m() {
			TestAssembler(c => c.andps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Andps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void bextr_r32_r32_r32() {
			TestAssembler(c => c.bextr(edx, ebx, esp), Instruction.Create(Code.VEX_Bextr_r32_rm32_r32, Register.EDX, Register.EBX, Register.ESP));
		}

		[Fact]
		public void bextr_r32_m_r32() {
			TestAssembler(c => c.bextr(edx, __dword_ptr[rcx], esp), Instruction.Create(Code.VEX_Bextr_r32_rm32_r32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ESP));
		}

		[Fact]
		public void bextr_r64_r64_r64() {
			TestAssembler(c => c.bextr(rdx, rbx, rsp), Instruction.Create(Code.VEX_Bextr_r64_rm64_r64, Register.RDX, Register.RBX, Register.RSP));
		}

		[Fact]
		public void bextr_r64_m_r64() {
			TestAssembler(c => c.bextr(rdx, __qword_ptr[rcx], rsp), Instruction.Create(Code.VEX_Bextr_r64_rm64_r64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RSP));
		}

		[Fact]
		public void bextr_r32_r32_i() {
			TestAssembler(c => c.bextr(edx, ebx, 0x7FFFFFFF), Instruction.Create(Code.XOP_Bextr_r32_rm32_imm32, Register.EDX, Register.EBX, 0x7FFFFFFF));
		}

		[Fact]
		public void bextr_r64_r64_i() {
			TestAssembler(c => c.bextr(rdx, rbx, 0x7FFFFFFF), Instruction.Create(Code.XOP_Bextr_r64_rm64_imm32, Register.RDX, Register.RBX, 0x7FFFFFFF));
		}

		[Fact]
		public void bextr_r32_m_i() {
			TestAssembler(c => c.bextr(edx, __dword_ptr[rcx], 0x7FFFFFFF), Instruction.Create(Code.XOP_Bextr_r32_rm32_imm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFF));
		}

		[Fact]
		public void bextr_r64_m_i() {
			TestAssembler(c => c.bextr(rdx, __qword_ptr[rcx], 0x7FFFFFFF), Instruction.Create(Code.XOP_Bextr_r64_rm64_imm32, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFF));
		}

		[Fact]
		public void bextr_r32_r32_u() {
			TestAssembler(c => c.bextr(edx, ebx, 0x7FFFFFFFU), Instruction.Create(Code.XOP_Bextr_r32_rm32_imm32, Register.EDX, Register.EBX, 0x7FFFFFFFU));
		}

		[Fact]
		public void bextr_r64_r64_u() {
			TestAssembler(c => c.bextr(rdx, rbx, 0x7FFFFFFFU), Instruction.Create(Code.XOP_Bextr_r64_rm64_imm32, Register.RDX, Register.RBX, 0x7FFFFFFFU));
		}

		[Fact]
		public void bextr_r32_m_u() {
			TestAssembler(c => c.bextr(edx, __dword_ptr[rcx], 0x7FFFFFFFU), Instruction.Create(Code.XOP_Bextr_r32_rm32_imm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFFU));
		}

		[Fact]
		public void bextr_r64_m_u() {
			TestAssembler(c => c.bextr(rdx, __qword_ptr[rcx], 0x7FFFFFFFU), Instruction.Create(Code.XOP_Bextr_r64_rm64_imm32, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFFU));
		}

		[Fact]
		public void blcfill_r32_r32() {
			TestAssembler(c => c.blcfill(edx, ebx), Instruction.Create(Code.XOP_Blcfill_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void blcfill_r64_r64() {
			TestAssembler(c => c.blcfill(rdx, rbx), Instruction.Create(Code.XOP_Blcfill_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void blcfill_r32_m() {
			TestAssembler(c => c.blcfill(edx, __dword_ptr[rcx]), Instruction.Create(Code.XOP_Blcfill_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void blcfill_r64_m() {
			TestAssembler(c => c.blcfill(rdx, __qword_ptr[rcx]), Instruction.Create(Code.XOP_Blcfill_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void blci_r32_r32() {
			TestAssembler(c => c.blci(edx, ebx), Instruction.Create(Code.XOP_Blci_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void blci_r64_r64() {
			TestAssembler(c => c.blci(rdx, rbx), Instruction.Create(Code.XOP_Blci_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void blci_r32_m() {
			TestAssembler(c => c.blci(edx, __dword_ptr[rcx]), Instruction.Create(Code.XOP_Blci_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void blci_r64_m() {
			TestAssembler(c => c.blci(rdx, __qword_ptr[rcx]), Instruction.Create(Code.XOP_Blci_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void blcic_r32_r32() {
			TestAssembler(c => c.blcic(edx, ebx), Instruction.Create(Code.XOP_Blcic_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void blcic_r64_r64() {
			TestAssembler(c => c.blcic(rdx, rbx), Instruction.Create(Code.XOP_Blcic_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void blcic_r32_m() {
			TestAssembler(c => c.blcic(edx, __dword_ptr[rcx]), Instruction.Create(Code.XOP_Blcic_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void blcic_r64_m() {
			TestAssembler(c => c.blcic(rdx, __qword_ptr[rcx]), Instruction.Create(Code.XOP_Blcic_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void blcmsk_r32_r32() {
			TestAssembler(c => c.blcmsk(edx, ebx), Instruction.Create(Code.XOP_Blcmsk_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void blcmsk_r64_r64() {
			TestAssembler(c => c.blcmsk(rdx, rbx), Instruction.Create(Code.XOP_Blcmsk_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void blcmsk_r32_m() {
			TestAssembler(c => c.blcmsk(edx, __dword_ptr[rcx]), Instruction.Create(Code.XOP_Blcmsk_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void blcmsk_r64_m() {
			TestAssembler(c => c.blcmsk(rdx, __qword_ptr[rcx]), Instruction.Create(Code.XOP_Blcmsk_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void blcs_r32_r32() {
			TestAssembler(c => c.blcs(edx, ebx), Instruction.Create(Code.XOP_Blcs_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void blcs_r64_r64() {
			TestAssembler(c => c.blcs(rdx, rbx), Instruction.Create(Code.XOP_Blcs_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void blcs_r32_m() {
			TestAssembler(c => c.blcs(edx, __dword_ptr[rcx]), Instruction.Create(Code.XOP_Blcs_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void blcs_r64_m() {
			TestAssembler(c => c.blcs(rdx, __qword_ptr[rcx]), Instruction.Create(Code.XOP_Blcs_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void blendpd_xmm_xmm_i() {
			TestAssembler(c => c.blendpd(xmm2, xmm3, -5), Instruction.Create(Code.Blendpd_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void blendpd_xmm_m_i() {
			TestAssembler(c => c.blendpd(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Blendpd_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void blendpd_xmm_xmm_u() {
			TestAssembler(c => c.blendpd(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Blendpd_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void blendpd_xmm_m_u() {
			TestAssembler(c => c.blendpd(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Blendpd_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void blendps_xmm_xmm_i() {
			TestAssembler(c => c.blendps(xmm2, xmm3, -5), Instruction.Create(Code.Blendps_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void blendps_xmm_m_i() {
			TestAssembler(c => c.blendps(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Blendps_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void blendps_xmm_xmm_u() {
			TestAssembler(c => c.blendps(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Blendps_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void blendps_xmm_m_u() {
			TestAssembler(c => c.blendps(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Blendps_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void blendvpd_xmm_xmm() {
			TestAssembler(c => c.blendvpd(xmm2, xmm3), Instruction.Create(Code.Blendvpd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void blendvpd_xmm_m() {
			TestAssembler(c => c.blendvpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Blendvpd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void blendvps_xmm_xmm() {
			TestAssembler(c => c.blendvps(xmm2, xmm3), Instruction.Create(Code.Blendvps_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void blendvps_xmm_m() {
			TestAssembler(c => c.blendvps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Blendvps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void blsfill_r32_r32() {
			TestAssembler(c => c.blsfill(edx, ebx), Instruction.Create(Code.XOP_Blsfill_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void blsfill_r64_r64() {
			TestAssembler(c => c.blsfill(rdx, rbx), Instruction.Create(Code.XOP_Blsfill_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void blsfill_r32_m() {
			TestAssembler(c => c.blsfill(edx, __dword_ptr[rcx]), Instruction.Create(Code.XOP_Blsfill_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void blsfill_r64_m() {
			TestAssembler(c => c.blsfill(rdx, __qword_ptr[rcx]), Instruction.Create(Code.XOP_Blsfill_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void blsi_r32_r32() {
			TestAssembler(c => c.blsi(edx, ebx), Instruction.Create(Code.VEX_Blsi_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void blsi_r64_r64() {
			TestAssembler(c => c.blsi(rdx, rbx), Instruction.Create(Code.VEX_Blsi_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void blsi_r32_m() {
			TestAssembler(c => c.blsi(edx, __dword_ptr[rcx]), Instruction.Create(Code.VEX_Blsi_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void blsi_r64_m() {
			TestAssembler(c => c.blsi(rdx, __qword_ptr[rcx]), Instruction.Create(Code.VEX_Blsi_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void blsic_r32_r32() {
			TestAssembler(c => c.blsic(edx, ebx), Instruction.Create(Code.XOP_Blsic_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void blsic_r64_r64() {
			TestAssembler(c => c.blsic(rdx, rbx), Instruction.Create(Code.XOP_Blsic_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void blsic_r32_m() {
			TestAssembler(c => c.blsic(edx, __dword_ptr[rcx]), Instruction.Create(Code.XOP_Blsic_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void blsic_r64_m() {
			TestAssembler(c => c.blsic(rdx, __qword_ptr[rcx]), Instruction.Create(Code.XOP_Blsic_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void blsmsk_r32_r32() {
			TestAssembler(c => c.blsmsk(edx, ebx), Instruction.Create(Code.VEX_Blsmsk_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void blsmsk_r64_r64() {
			TestAssembler(c => c.blsmsk(rdx, rbx), Instruction.Create(Code.VEX_Blsmsk_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void blsmsk_r32_m() {
			TestAssembler(c => c.blsmsk(edx, __dword_ptr[rcx]), Instruction.Create(Code.VEX_Blsmsk_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void blsmsk_r64_m() {
			TestAssembler(c => c.blsmsk(rdx, __qword_ptr[rcx]), Instruction.Create(Code.VEX_Blsmsk_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void blsr_r32_r32() {
			TestAssembler(c => c.blsr(edx, ebx), Instruction.Create(Code.VEX_Blsr_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void blsr_r64_r64() {
			TestAssembler(c => c.blsr(rdx, rbx), Instruction.Create(Code.VEX_Blsr_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void blsr_r32_m() {
			TestAssembler(c => c.blsr(edx, __dword_ptr[rcx]), Instruction.Create(Code.VEX_Blsr_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void blsr_r64_m() {
			TestAssembler(c => c.blsr(rdx, __qword_ptr[rcx]), Instruction.Create(Code.VEX_Blsr_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void bndcl_bnd_r64() {
			TestAssembler(c => c.bndcl(bnd2, rbx), Instruction.Create(Code.Bndcl_bnd_rm64, Register.BND2, Register.RBX), decoderOptions: DecoderOptions.MPX);
		}

		[Fact]
		public void bndcl_bnd_m() {
			{ /* if (src.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.bndcl(bnd2, __qword_ptr[rdx]), Instruction.Create(Code.Bndcl_bnd_rm64, Register.BND2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), decoderOptions: DecoderOptions.MPX);
			} /* else */ { /* if (src.Size == MemoryOperandSize.Dword) */
				// Skipping Bndcl_bnd_rm32 - Not supported by current bitness
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.bndcl(bnd2, __zmmword_ptr[edx]), Instruction.Create(Code.Bndcl_bnd_rm32, Register.BND2, new MemoryOperand(Register.EDX, Register.None, 1, 0x0, 0, false, Register.None)), decoderOptions: DecoderOptions.MPX);
				});
			}
		}

		[Fact]
		public void bndcn_bnd_r64() {
			TestAssembler(c => c.bndcn(bnd2, rbx), Instruction.Create(Code.Bndcn_bnd_rm64, Register.BND2, Register.RBX), decoderOptions: DecoderOptions.MPX);
		}

		[Fact]
		public void bndcn_bnd_m() {
			{ /* if (src.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.bndcn(bnd2, __qword_ptr[rdx]), Instruction.Create(Code.Bndcn_bnd_rm64, Register.BND2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), decoderOptions: DecoderOptions.MPX);
			} /* else */ { /* if (src.Size == MemoryOperandSize.Dword) */
				// Skipping Bndcn_bnd_rm32 - Not supported by current bitness
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.bndcn(bnd2, __zmmword_ptr[edx]), Instruction.Create(Code.Bndcn_bnd_rm32, Register.BND2, new MemoryOperand(Register.EDX, Register.None, 1, 0x0, 0, false, Register.None)), decoderOptions: DecoderOptions.MPX);
				});
			}
		}

		[Fact]
		public void bndcu_bnd_r64() {
			TestAssembler(c => c.bndcu(bnd2, rbx), Instruction.Create(Code.Bndcu_bnd_rm64, Register.BND2, Register.RBX), decoderOptions: DecoderOptions.MPX);
		}

		[Fact]
		public void bndcu_bnd_m() {
			{ /* if (src.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.bndcu(bnd2, __qword_ptr[rdx]), Instruction.Create(Code.Bndcu_bnd_rm64, Register.BND2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), decoderOptions: DecoderOptions.MPX);
			} /* else */ { /* if (src.Size == MemoryOperandSize.Dword) */
				// Skipping Bndcu_bnd_rm32 - Not supported by current bitness
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.bndcu(bnd2, __zmmword_ptr[edx]), Instruction.Create(Code.Bndcu_bnd_rm32, Register.BND2, new MemoryOperand(Register.EDX, Register.None, 1, 0x0, 0, false, Register.None)), decoderOptions: DecoderOptions.MPX);
				});
			}
		}

		[Fact]
		public void bndldx_bnd_m() {
			TestAssembler(c => c.bndldx(bnd2, __[rcx]), Instruction.Create(Code.Bndldx_bnd_mib, Register.BND2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), decoderOptions: DecoderOptions.MPX);
		}

		[Fact]
		public void bndmk_bnd_m() {
			{ /* if (src.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.bndmk(bnd2, __qword_ptr[rdx]), Instruction.Create(Code.Bndmk_bnd_m64, Register.BND2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), decoderOptions: DecoderOptions.MPX);
			} /* else */ { /* if (src.Size == MemoryOperandSize.Dword) */
				// Skipping Bndmk_bnd_m32 - Not supported by current bitness
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.bndmk(bnd2, __zmmword_ptr[edx]), Instruction.Create(Code.Bndmk_bnd_m32, Register.BND2, new MemoryOperand(Register.EDX, Register.None, 1, 0x0, 0, false, Register.None)), decoderOptions: DecoderOptions.MPX);
				});
			}
		}

		[Fact]
		public void bndmov_bnd_bnd() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.bndmov(bnd2, bnd3), Instruction.Create(Code.Bndmov_bnd_bndm128, Register.BND2, Register.BND3), decoderOptions: DecoderOptions.MPX);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void bndmov_m_bnd() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.bndmov(__[rcx], bnd3), Instruction.Create(Code.Bndmov_bndm128_bnd, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BND3), decoderOptions: DecoderOptions.MPX);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void bndmov_bnd_m() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.bndmov(bnd2, __[rcx]), Instruction.Create(Code.Bndmov_bnd_bndm128, Register.BND2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), decoderOptions: DecoderOptions.MPX);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void bndstx_m_bnd() {
			TestAssembler(c => c.bndstx(__[rcx], bnd3), Instruction.Create(Code.Bndstx_mib_bnd, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BND3), decoderOptions: DecoderOptions.MPX);
		}

		[Fact]
		public void bsf_r16_r16() {
			TestAssembler(c => c.bsf(dx, bx), Instruction.Create(Code.Bsf_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void bsf_r32_r32() {
			TestAssembler(c => c.bsf(edx, ebx), Instruction.Create(Code.Bsf_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void bsf_r64_r64() {
			TestAssembler(c => c.bsf(rdx, rbx), Instruction.Create(Code.Bsf_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void bsf_r16_m() {
			TestAssembler(c => c.bsf(dx, __word_ptr[rcx]), Instruction.Create(Code.Bsf_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void bsf_r32_m() {
			TestAssembler(c => c.bsf(edx, __dword_ptr[rcx]), Instruction.Create(Code.Bsf_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void bsf_r64_m() {
			TestAssembler(c => c.bsf(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Bsf_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void bsr_r16_r16() {
			TestAssembler(c => c.bsr(dx, bx), Instruction.Create(Code.Bsr_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void bsr_r32_r32() {
			TestAssembler(c => c.bsr(edx, ebx), Instruction.Create(Code.Bsr_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void bsr_r64_r64() {
			TestAssembler(c => c.bsr(rdx, rbx), Instruction.Create(Code.Bsr_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void bsr_r16_m() {
			TestAssembler(c => c.bsr(dx, __word_ptr[rcx]), Instruction.Create(Code.Bsr_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void bsr_r32_m() {
			TestAssembler(c => c.bsr(edx, __dword_ptr[rcx]), Instruction.Create(Code.Bsr_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void bsr_r64_m() {
			TestAssembler(c => c.bsr(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Bsr_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void bswap_r16() {
			TestAssembler(c => c.bswap(dx), Instruction.Create(Code.Bswap_r16, Register.DX));
		}

		[Fact]
		public void bswap_r32() {
			TestAssembler(c => c.bswap(edx), Instruction.Create(Code.Bswap_r32, Register.EDX));
		}

		[Fact]
		public void bswap_r64() {
			TestAssembler(c => c.bswap(rdx), Instruction.Create(Code.Bswap_r64, Register.RDX));
		}

		[Fact]
		public void bt_r16_r16() {
			TestAssembler(c => c.bt(dx, bx), Instruction.Create(Code.Bt_rm16_r16, Register.DX, Register.BX));
		}

		[Fact]
		public void bt_m_r16() {
			TestAssembler(c => c.bt(__word_ptr[rcx], bx), Instruction.Create(Code.Bt_rm16_r16, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX));
		}

		[Fact]
		public void bt_r32_r32() {
			TestAssembler(c => c.bt(edx, ebx), Instruction.Create(Code.Bt_rm32_r32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void bt_m_r32() {
			TestAssembler(c => c.bt(__dword_ptr[rcx], ebx), Instruction.Create(Code.Bt_rm32_r32, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX));
		}

		[Fact]
		public void bt_r64_r64() {
			TestAssembler(c => c.bt(rdx, rbx), Instruction.Create(Code.Bt_rm64_r64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void bt_m_r64() {
			TestAssembler(c => c.bt(__qword_ptr[rcx], rbx), Instruction.Create(Code.Bt_rm64_r64, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX));
		}

		[Fact]
		public void bt_r16_i() {
			TestAssembler(c => c.bt(dx, -5), Instruction.Create(Code.Bt_rm16_imm8, Register.DX, -5));
		}

		[Fact]
		public void bt_r32_i() {
			TestAssembler(c => c.bt(edx, -5), Instruction.Create(Code.Bt_rm32_imm8, Register.EDX, -5));
		}

		[Fact]
		public void bt_r64_i() {
			TestAssembler(c => c.bt(rdx, -5), Instruction.Create(Code.Bt_rm64_imm8, Register.RDX, -5));
		}

		[Fact]
		public void bt_m_i() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.bt(__qword_ptr[rdx], -5), Instruction.Create(Code.Bt_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.bt(__dword_ptr[rdx], -5), Instruction.Create(Code.Bt_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.bt(__word_ptr[rdx], -5), Instruction.Create(Code.Bt_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.bt(__zmmword_ptr[rdx], -5), Instruction.Create(Code.Bt_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
				});
			}
		}

		[Fact]
		public void bt_r16_u() {
			TestAssembler(c => c.bt(dx, (byte)0x7F), Instruction.Create(Code.Bt_rm16_imm8, Register.DX, 0x7FU));
		}

		[Fact]
		public void bt_r32_u() {
			TestAssembler(c => c.bt(edx, (byte)0x7F), Instruction.Create(Code.Bt_rm32_imm8, Register.EDX, 0x7FU));
		}

		[Fact]
		public void bt_r64_u() {
			TestAssembler(c => c.bt(rdx, (byte)0x7F), Instruction.Create(Code.Bt_rm64_imm8, Register.RDX, 0x7FU));
		}

		[Fact]
		public void bt_m_u() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.bt(__qword_ptr[rdx], (byte)0x7F), Instruction.Create(Code.Bt_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.bt(__dword_ptr[rdx], (byte)0x7F), Instruction.Create(Code.Bt_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.bt(__word_ptr[rdx], (byte)0x7F), Instruction.Create(Code.Bt_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.bt(__zmmword_ptr[rdx], (byte)0x7F), Instruction.Create(Code.Bt_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
				});
			}
		}

		[Fact]
		public void btc_r16_r16() {
			TestAssembler(c => c.btc(dx, bx), Instruction.Create(Code.Btc_rm16_r16, Register.DX, Register.BX));
		}

		[Fact]
		public void btc_m_r16() {
			TestAssembler(c => c.btc(__word_ptr[rcx], bx), Instruction.Create(Code.Btc_rm16_r16, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX));
		}

		[Fact]
		public void btc_r32_r32() {
			TestAssembler(c => c.btc(edx, ebx), Instruction.Create(Code.Btc_rm32_r32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void btc_m_r32() {
			TestAssembler(c => c.btc(__dword_ptr[rcx], ebx), Instruction.Create(Code.Btc_rm32_r32, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX));
		}

		[Fact]
		public void btc_r64_r64() {
			TestAssembler(c => c.btc(rdx, rbx), Instruction.Create(Code.Btc_rm64_r64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void btc_m_r64() {
			TestAssembler(c => c.btc(__qword_ptr[rcx], rbx), Instruction.Create(Code.Btc_rm64_r64, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX));
		}

		[Fact]
		public void btc_r16_i() {
			TestAssembler(c => c.btc(dx, -5), Instruction.Create(Code.Btc_rm16_imm8, Register.DX, -5));
		}

		[Fact]
		public void btc_r32_i() {
			TestAssembler(c => c.btc(edx, -5), Instruction.Create(Code.Btc_rm32_imm8, Register.EDX, -5));
		}

		[Fact]
		public void btc_r64_i() {
			TestAssembler(c => c.btc(rdx, -5), Instruction.Create(Code.Btc_rm64_imm8, Register.RDX, -5));
		}

		[Fact]
		public void btc_m_i() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.btc(__qword_ptr[rdx], -5), Instruction.Create(Code.Btc_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.btc(__dword_ptr[rdx], -5), Instruction.Create(Code.Btc_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.btc(__word_ptr[rdx], -5), Instruction.Create(Code.Btc_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.btc(__zmmword_ptr[rdx], -5), Instruction.Create(Code.Btc_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
				});
			}
		}

		[Fact]
		public void btc_r16_u() {
			TestAssembler(c => c.btc(dx, (byte)0x7F), Instruction.Create(Code.Btc_rm16_imm8, Register.DX, 0x7FU));
		}

		[Fact]
		public void btc_r32_u() {
			TestAssembler(c => c.btc(edx, (byte)0x7F), Instruction.Create(Code.Btc_rm32_imm8, Register.EDX, 0x7FU));
		}

		[Fact]
		public void btc_r64_u() {
			TestAssembler(c => c.btc(rdx, (byte)0x7F), Instruction.Create(Code.Btc_rm64_imm8, Register.RDX, 0x7FU));
		}

		[Fact]
		public void btc_m_u() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.btc(__qword_ptr[rdx], (byte)0x7F), Instruction.Create(Code.Btc_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.btc(__dword_ptr[rdx], (byte)0x7F), Instruction.Create(Code.Btc_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.btc(__word_ptr[rdx], (byte)0x7F), Instruction.Create(Code.Btc_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.btc(__zmmword_ptr[rdx], (byte)0x7F), Instruction.Create(Code.Btc_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
				});
			}
		}

		[Fact]
		public void btr_r16_r16() {
			TestAssembler(c => c.btr(dx, bx), Instruction.Create(Code.Btr_rm16_r16, Register.DX, Register.BX));
		}

		[Fact]
		public void btr_m_r16() {
			TestAssembler(c => c.btr(__word_ptr[rcx], bx), Instruction.Create(Code.Btr_rm16_r16, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX));
		}

		[Fact]
		public void btr_r32_r32() {
			TestAssembler(c => c.btr(edx, ebx), Instruction.Create(Code.Btr_rm32_r32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void btr_m_r32() {
			TestAssembler(c => c.btr(__dword_ptr[rcx], ebx), Instruction.Create(Code.Btr_rm32_r32, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX));
		}

		[Fact]
		public void btr_r64_r64() {
			TestAssembler(c => c.btr(rdx, rbx), Instruction.Create(Code.Btr_rm64_r64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void btr_m_r64() {
			TestAssembler(c => c.btr(__qword_ptr[rcx], rbx), Instruction.Create(Code.Btr_rm64_r64, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX));
		}

		[Fact]
		public void btr_r16_i() {
			TestAssembler(c => c.btr(dx, -5), Instruction.Create(Code.Btr_rm16_imm8, Register.DX, -5));
		}

		[Fact]
		public void btr_r32_i() {
			TestAssembler(c => c.btr(edx, -5), Instruction.Create(Code.Btr_rm32_imm8, Register.EDX, -5));
		}

		[Fact]
		public void btr_r64_i() {
			TestAssembler(c => c.btr(rdx, -5), Instruction.Create(Code.Btr_rm64_imm8, Register.RDX, -5));
		}

		[Fact]
		public void btr_m_i() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.btr(__qword_ptr[rdx], -5), Instruction.Create(Code.Btr_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.btr(__dword_ptr[rdx], -5), Instruction.Create(Code.Btr_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.btr(__word_ptr[rdx], -5), Instruction.Create(Code.Btr_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.btr(__zmmword_ptr[rdx], -5), Instruction.Create(Code.Btr_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
				});
			}
		}

		[Fact]
		public void btr_r16_u() {
			TestAssembler(c => c.btr(dx, (byte)0x7F), Instruction.Create(Code.Btr_rm16_imm8, Register.DX, 0x7FU));
		}

		[Fact]
		public void btr_r32_u() {
			TestAssembler(c => c.btr(edx, (byte)0x7F), Instruction.Create(Code.Btr_rm32_imm8, Register.EDX, 0x7FU));
		}

		[Fact]
		public void btr_r64_u() {
			TestAssembler(c => c.btr(rdx, (byte)0x7F), Instruction.Create(Code.Btr_rm64_imm8, Register.RDX, 0x7FU));
		}

		[Fact]
		public void btr_m_u() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.btr(__qword_ptr[rdx], (byte)0x7F), Instruction.Create(Code.Btr_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.btr(__dword_ptr[rdx], (byte)0x7F), Instruction.Create(Code.Btr_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.btr(__word_ptr[rdx], (byte)0x7F), Instruction.Create(Code.Btr_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.btr(__zmmword_ptr[rdx], (byte)0x7F), Instruction.Create(Code.Btr_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
				});
			}
		}

		[Fact]
		public void bts_r16_r16() {
			TestAssembler(c => c.bts(dx, bx), Instruction.Create(Code.Bts_rm16_r16, Register.DX, Register.BX));
		}

		[Fact]
		public void bts_m_r16() {
			TestAssembler(c => c.bts(__word_ptr[rcx], bx), Instruction.Create(Code.Bts_rm16_r16, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX));
		}

		[Fact]
		public void bts_r32_r32() {
			TestAssembler(c => c.bts(edx, ebx), Instruction.Create(Code.Bts_rm32_r32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void bts_m_r32() {
			TestAssembler(c => c.bts(__dword_ptr[rcx], ebx), Instruction.Create(Code.Bts_rm32_r32, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX));
		}

		[Fact]
		public void bts_r64_r64() {
			TestAssembler(c => c.bts(rdx, rbx), Instruction.Create(Code.Bts_rm64_r64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void bts_m_r64() {
			TestAssembler(c => c.bts(__qword_ptr[rcx], rbx), Instruction.Create(Code.Bts_rm64_r64, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX));
		}

		[Fact]
		public void bts_r16_i() {
			TestAssembler(c => c.bts(dx, -5), Instruction.Create(Code.Bts_rm16_imm8, Register.DX, -5));
		}

		[Fact]
		public void bts_r32_i() {
			TestAssembler(c => c.bts(edx, -5), Instruction.Create(Code.Bts_rm32_imm8, Register.EDX, -5));
		}

		[Fact]
		public void bts_r64_i() {
			TestAssembler(c => c.bts(rdx, -5), Instruction.Create(Code.Bts_rm64_imm8, Register.RDX, -5));
		}

		[Fact]
		public void bts_m_i() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.bts(__qword_ptr[rdx], -5), Instruction.Create(Code.Bts_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.bts(__dword_ptr[rdx], -5), Instruction.Create(Code.Bts_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.bts(__word_ptr[rdx], -5), Instruction.Create(Code.Bts_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.bts(__zmmword_ptr[rdx], -5), Instruction.Create(Code.Bts_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
				});
			}
		}

		[Fact]
		public void bts_r16_u() {
			TestAssembler(c => c.bts(dx, (byte)0x7F), Instruction.Create(Code.Bts_rm16_imm8, Register.DX, 0x7FU));
		}

		[Fact]
		public void bts_r32_u() {
			TestAssembler(c => c.bts(edx, (byte)0x7F), Instruction.Create(Code.Bts_rm32_imm8, Register.EDX, 0x7FU));
		}

		[Fact]
		public void bts_r64_u() {
			TestAssembler(c => c.bts(rdx, (byte)0x7F), Instruction.Create(Code.Bts_rm64_imm8, Register.RDX, 0x7FU));
		}

		[Fact]
		public void bts_m_u() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.bts(__qword_ptr[rdx], (byte)0x7F), Instruction.Create(Code.Bts_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.bts(__dword_ptr[rdx], (byte)0x7F), Instruction.Create(Code.Bts_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.bts(__word_ptr[rdx], (byte)0x7F), Instruction.Create(Code.Bts_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.bts(__zmmword_ptr[rdx], (byte)0x7F), Instruction.Create(Code.Bts_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
				});
			}
		}

		[Fact]
		public void bzhi_r32_r32_r32() {
			TestAssembler(c => c.bzhi(edx, ebx, esp), Instruction.Create(Code.VEX_Bzhi_r32_rm32_r32, Register.EDX, Register.EBX, Register.ESP));
		}

		[Fact]
		public void bzhi_r32_m_r32() {
			TestAssembler(c => c.bzhi(edx, __dword_ptr[rcx], esp), Instruction.Create(Code.VEX_Bzhi_r32_rm32_r32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ESP));
		}

		[Fact]
		public void bzhi_r64_r64_r64() {
			TestAssembler(c => c.bzhi(rdx, rbx, rsp), Instruction.Create(Code.VEX_Bzhi_r64_rm64_r64, Register.RDX, Register.RBX, Register.RSP));
		}

		[Fact]
		public void bzhi_r64_m_r64() {
			TestAssembler(c => c.bzhi(rdx, __qword_ptr[rcx], rsp), Instruction.Create(Code.VEX_Bzhi_r64_rm64_r64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RSP));
		}

		[Fact]
		public void call_r16() {
			TestAssembler(c => c.call(dx), Instruction.Create(Code.Call_rm16, Register.DX), decoderOptions: DecoderOptions.AMD);
		}

		[Fact]
		public void call_r64() {
			TestAssembler(c => c.call(rdx), Instruction.Create(Code.Call_rm64, Register.RDX));
		}

		[Fact]
		public void call_m() {
			{ /* if (dst.Size == MemoryOperandSize.Tbyte) */
				TestAssembler(c => c.call(__tword_ptr[rdx]), Instruction.Create(Code.Call_m1664, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.call(__qword_ptr[rdx]), Instruction.Create(Code.Call_rm64, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Fword) */
				TestAssembler(c => c.call(__fword_ptr[rdx]), Instruction.Create(Code.Call_m1632, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				{ /* if (Bitness >= 32) */
					// Skipping Call_rm32 - Not supported by current bitness
				} /* else skip !(Bitness >= 32) not supported by this Assembler bitness */
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.call(__word_ptr[rdx]), Instruction.Create(Code.Call_rm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), decoderOptions: DecoderOptions.AMD);
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.call(__zmmword_ptr[rdx]), Instruction.Create(Code.Call_rm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), decoderOptions: DecoderOptions.AMD);
				});
			}
		}

		[Fact]
		public void call_l() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.call(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Call_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void call_lu64() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.call(0x31D0UL), Instruction.CreateBranch(Code.Call_rel32_64, 0x31D0UL), TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void cbw() {
			TestAssembler(c => c.cbw(), Instruction.Create(Code.Cbw));
		}

		[Fact]
		public void cdq() {
			TestAssembler(c => c.cdq(), Instruction.Create(Code.Cdq));
		}

		[Fact]
		public void cdqe() {
			TestAssembler(c => c.cdqe(), Instruction.Create(Code.Cdqe));
		}

		[Fact]
		public void clac() {
			TestAssembler(c => c.clac(), Instruction.Create(Code.Clac));
		}

		[Fact]
		public void clc() {
			TestAssembler(c => c.clc(), Instruction.Create(Code.Clc));
		}

		[Fact]
		public void cld() {
			TestAssembler(c => c.cld(), Instruction.Create(Code.Cld));
		}

		[Fact]
		public void cldemote_m() {
			TestAssembler(c => c.cldemote(__[rcx]), Instruction.Create(Code.Cldemote_m8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void clflush_m() {
			TestAssembler(c => c.clflush(__[rcx]), Instruction.Create(Code.Clflush_m8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void clflushopt_m() {
			TestAssembler(c => c.clflushopt(__[rcx]), Instruction.Create(Code.Clflushopt_m8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void clgi() {
			TestAssembler(c => c.clgi(), Instruction.Create(Code.Clgi));
		}

		[Fact]
		public void cli() {
			TestAssembler(c => c.cli(), Instruction.Create(Code.Cli));
		}

		[Fact]
		public void clrssbsy_m() {
			TestAssembler(c => c.clrssbsy(__[rcx]), Instruction.Create(Code.Clrssbsy_m64, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void clts() {
			TestAssembler(c => c.clts(), Instruction.Create(Code.Clts));
		}

		[Fact]
		public void clui() {
			TestAssembler(c => c.clui(), Instruction.Create(Code.Clui));
		}

		[Fact]
		public void clwb_m() {
			TestAssembler(c => c.clwb(__[rcx]), Instruction.Create(Code.Clwb_m8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void clzero() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.clzero(), Instruction.Create(Code.Clzeroq));
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void cmc() {
			TestAssembler(c => c.cmc(), Instruction.Create(Code.Cmc));
		}

		[Fact]
		public void cmova_r16_r16() {
			TestAssembler(c => c.cmova(dx, bx), Instruction.Create(Code.Cmova_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmova_r32_r32() {
			TestAssembler(c => c.cmova(edx, ebx), Instruction.Create(Code.Cmova_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmova_r64_r64() {
			TestAssembler(c => c.cmova(rdx, rbx), Instruction.Create(Code.Cmova_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmova_r16_m() {
			TestAssembler(c => c.cmova(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmova_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmova_r32_m() {
			TestAssembler(c => c.cmova(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmova_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmova_r64_m() {
			TestAssembler(c => c.cmova(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmova_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovae_r16_r16() {
			TestAssembler(c => c.cmovae(dx, bx), Instruction.Create(Code.Cmovae_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmovae_r32_r32() {
			TestAssembler(c => c.cmovae(edx, ebx), Instruction.Create(Code.Cmovae_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmovae_r64_r64() {
			TestAssembler(c => c.cmovae(rdx, rbx), Instruction.Create(Code.Cmovae_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmovae_r16_m() {
			TestAssembler(c => c.cmovae(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovae_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovae_r32_m() {
			TestAssembler(c => c.cmovae(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovae_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovae_r64_m() {
			TestAssembler(c => c.cmovae(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovae_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovb_r16_r16() {
			TestAssembler(c => c.cmovb(dx, bx), Instruction.Create(Code.Cmovb_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmovb_r32_r32() {
			TestAssembler(c => c.cmovb(edx, ebx), Instruction.Create(Code.Cmovb_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmovb_r64_r64() {
			TestAssembler(c => c.cmovb(rdx, rbx), Instruction.Create(Code.Cmovb_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmovb_r16_m() {
			TestAssembler(c => c.cmovb(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovb_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovb_r32_m() {
			TestAssembler(c => c.cmovb(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovb_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovb_r64_m() {
			TestAssembler(c => c.cmovb(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovb_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovbe_r16_r16() {
			TestAssembler(c => c.cmovbe(dx, bx), Instruction.Create(Code.Cmovbe_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmovbe_r32_r32() {
			TestAssembler(c => c.cmovbe(edx, ebx), Instruction.Create(Code.Cmovbe_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmovbe_r64_r64() {
			TestAssembler(c => c.cmovbe(rdx, rbx), Instruction.Create(Code.Cmovbe_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmovbe_r16_m() {
			TestAssembler(c => c.cmovbe(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovbe_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovbe_r32_m() {
			TestAssembler(c => c.cmovbe(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovbe_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovbe_r64_m() {
			TestAssembler(c => c.cmovbe(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovbe_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovc_r16_r16() {
			TestAssembler(c => c.cmovc(dx, bx), Instruction.Create(Code.Cmovb_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmovc_r32_r32() {
			TestAssembler(c => c.cmovc(edx, ebx), Instruction.Create(Code.Cmovb_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmovc_r64_r64() {
			TestAssembler(c => c.cmovc(rdx, rbx), Instruction.Create(Code.Cmovb_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmovc_r16_m() {
			TestAssembler(c => c.cmovc(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovb_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovc_r32_m() {
			TestAssembler(c => c.cmovc(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovb_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovc_r64_m() {
			TestAssembler(c => c.cmovc(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovb_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmove_r16_r16() {
			TestAssembler(c => c.cmove(dx, bx), Instruction.Create(Code.Cmove_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmove_r32_r32() {
			TestAssembler(c => c.cmove(edx, ebx), Instruction.Create(Code.Cmove_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmove_r64_r64() {
			TestAssembler(c => c.cmove(rdx, rbx), Instruction.Create(Code.Cmove_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmove_r16_m() {
			TestAssembler(c => c.cmove(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmove_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmove_r32_m() {
			TestAssembler(c => c.cmove(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmove_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmove_r64_m() {
			TestAssembler(c => c.cmove(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmove_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovg_r16_r16() {
			TestAssembler(c => c.cmovg(dx, bx), Instruction.Create(Code.Cmovg_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmovg_r32_r32() {
			TestAssembler(c => c.cmovg(edx, ebx), Instruction.Create(Code.Cmovg_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmovg_r64_r64() {
			TestAssembler(c => c.cmovg(rdx, rbx), Instruction.Create(Code.Cmovg_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmovg_r16_m() {
			TestAssembler(c => c.cmovg(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovg_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovg_r32_m() {
			TestAssembler(c => c.cmovg(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovg_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovg_r64_m() {
			TestAssembler(c => c.cmovg(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovg_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovge_r16_r16() {
			TestAssembler(c => c.cmovge(dx, bx), Instruction.Create(Code.Cmovge_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmovge_r32_r32() {
			TestAssembler(c => c.cmovge(edx, ebx), Instruction.Create(Code.Cmovge_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmovge_r64_r64() {
			TestAssembler(c => c.cmovge(rdx, rbx), Instruction.Create(Code.Cmovge_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmovge_r16_m() {
			TestAssembler(c => c.cmovge(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovge_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovge_r32_m() {
			TestAssembler(c => c.cmovge(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovge_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovge_r64_m() {
			TestAssembler(c => c.cmovge(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovge_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovl_r16_r16() {
			TestAssembler(c => c.cmovl(dx, bx), Instruction.Create(Code.Cmovl_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmovl_r32_r32() {
			TestAssembler(c => c.cmovl(edx, ebx), Instruction.Create(Code.Cmovl_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmovl_r64_r64() {
			TestAssembler(c => c.cmovl(rdx, rbx), Instruction.Create(Code.Cmovl_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmovl_r16_m() {
			TestAssembler(c => c.cmovl(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovl_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovl_r32_m() {
			TestAssembler(c => c.cmovl(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovl_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovl_r64_m() {
			TestAssembler(c => c.cmovl(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovl_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovle_r16_r16() {
			TestAssembler(c => c.cmovle(dx, bx), Instruction.Create(Code.Cmovle_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmovle_r32_r32() {
			TestAssembler(c => c.cmovle(edx, ebx), Instruction.Create(Code.Cmovle_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmovle_r64_r64() {
			TestAssembler(c => c.cmovle(rdx, rbx), Instruction.Create(Code.Cmovle_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmovle_r16_m() {
			TestAssembler(c => c.cmovle(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovle_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovle_r32_m() {
			TestAssembler(c => c.cmovle(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovle_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovle_r64_m() {
			TestAssembler(c => c.cmovle(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovle_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovna_r16_r16() {
			TestAssembler(c => c.cmovna(dx, bx), Instruction.Create(Code.Cmovbe_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmovna_r32_r32() {
			TestAssembler(c => c.cmovna(edx, ebx), Instruction.Create(Code.Cmovbe_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmovna_r64_r64() {
			TestAssembler(c => c.cmovna(rdx, rbx), Instruction.Create(Code.Cmovbe_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmovna_r16_m() {
			TestAssembler(c => c.cmovna(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovbe_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovna_r32_m() {
			TestAssembler(c => c.cmovna(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovbe_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovna_r64_m() {
			TestAssembler(c => c.cmovna(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovbe_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovnae_r16_r16() {
			TestAssembler(c => c.cmovnae(dx, bx), Instruction.Create(Code.Cmovb_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmovnae_r32_r32() {
			TestAssembler(c => c.cmovnae(edx, ebx), Instruction.Create(Code.Cmovb_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmovnae_r64_r64() {
			TestAssembler(c => c.cmovnae(rdx, rbx), Instruction.Create(Code.Cmovb_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmovnae_r16_m() {
			TestAssembler(c => c.cmovnae(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovb_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovnae_r32_m() {
			TestAssembler(c => c.cmovnae(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovb_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovnae_r64_m() {
			TestAssembler(c => c.cmovnae(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovb_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovnb_r16_r16() {
			TestAssembler(c => c.cmovnb(dx, bx), Instruction.Create(Code.Cmovae_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmovnb_r32_r32() {
			TestAssembler(c => c.cmovnb(edx, ebx), Instruction.Create(Code.Cmovae_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmovnb_r64_r64() {
			TestAssembler(c => c.cmovnb(rdx, rbx), Instruction.Create(Code.Cmovae_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmovnb_r16_m() {
			TestAssembler(c => c.cmovnb(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovae_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovnb_r32_m() {
			TestAssembler(c => c.cmovnb(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovae_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovnb_r64_m() {
			TestAssembler(c => c.cmovnb(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovae_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovnbe_r16_r16() {
			TestAssembler(c => c.cmovnbe(dx, bx), Instruction.Create(Code.Cmova_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmovnbe_r32_r32() {
			TestAssembler(c => c.cmovnbe(edx, ebx), Instruction.Create(Code.Cmova_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmovnbe_r64_r64() {
			TestAssembler(c => c.cmovnbe(rdx, rbx), Instruction.Create(Code.Cmova_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmovnbe_r16_m() {
			TestAssembler(c => c.cmovnbe(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmova_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovnbe_r32_m() {
			TestAssembler(c => c.cmovnbe(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmova_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovnbe_r64_m() {
			TestAssembler(c => c.cmovnbe(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmova_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovnc_r16_r16() {
			TestAssembler(c => c.cmovnc(dx, bx), Instruction.Create(Code.Cmovae_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmovnc_r32_r32() {
			TestAssembler(c => c.cmovnc(edx, ebx), Instruction.Create(Code.Cmovae_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmovnc_r64_r64() {
			TestAssembler(c => c.cmovnc(rdx, rbx), Instruction.Create(Code.Cmovae_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmovnc_r16_m() {
			TestAssembler(c => c.cmovnc(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovae_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovnc_r32_m() {
			TestAssembler(c => c.cmovnc(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovae_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovnc_r64_m() {
			TestAssembler(c => c.cmovnc(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovae_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovne_r16_r16() {
			TestAssembler(c => c.cmovne(dx, bx), Instruction.Create(Code.Cmovne_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmovne_r32_r32() {
			TestAssembler(c => c.cmovne(edx, ebx), Instruction.Create(Code.Cmovne_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmovne_r64_r64() {
			TestAssembler(c => c.cmovne(rdx, rbx), Instruction.Create(Code.Cmovne_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmovne_r16_m() {
			TestAssembler(c => c.cmovne(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovne_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovne_r32_m() {
			TestAssembler(c => c.cmovne(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovne_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovne_r64_m() {
			TestAssembler(c => c.cmovne(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovne_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovng_r16_r16() {
			TestAssembler(c => c.cmovng(dx, bx), Instruction.Create(Code.Cmovle_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmovng_r32_r32() {
			TestAssembler(c => c.cmovng(edx, ebx), Instruction.Create(Code.Cmovle_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmovng_r64_r64() {
			TestAssembler(c => c.cmovng(rdx, rbx), Instruction.Create(Code.Cmovle_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmovng_r16_m() {
			TestAssembler(c => c.cmovng(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovle_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovng_r32_m() {
			TestAssembler(c => c.cmovng(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovle_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovng_r64_m() {
			TestAssembler(c => c.cmovng(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovle_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovnge_r16_r16() {
			TestAssembler(c => c.cmovnge(dx, bx), Instruction.Create(Code.Cmovl_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmovnge_r32_r32() {
			TestAssembler(c => c.cmovnge(edx, ebx), Instruction.Create(Code.Cmovl_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmovnge_r64_r64() {
			TestAssembler(c => c.cmovnge(rdx, rbx), Instruction.Create(Code.Cmovl_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmovnge_r16_m() {
			TestAssembler(c => c.cmovnge(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovl_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovnge_r32_m() {
			TestAssembler(c => c.cmovnge(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovl_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovnge_r64_m() {
			TestAssembler(c => c.cmovnge(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovl_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovnl_r16_r16() {
			TestAssembler(c => c.cmovnl(dx, bx), Instruction.Create(Code.Cmovge_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmovnl_r32_r32() {
			TestAssembler(c => c.cmovnl(edx, ebx), Instruction.Create(Code.Cmovge_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmovnl_r64_r64() {
			TestAssembler(c => c.cmovnl(rdx, rbx), Instruction.Create(Code.Cmovge_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmovnl_r16_m() {
			TestAssembler(c => c.cmovnl(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovge_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovnl_r32_m() {
			TestAssembler(c => c.cmovnl(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovge_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovnl_r64_m() {
			TestAssembler(c => c.cmovnl(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovge_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovnle_r16_r16() {
			TestAssembler(c => c.cmovnle(dx, bx), Instruction.Create(Code.Cmovg_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmovnle_r32_r32() {
			TestAssembler(c => c.cmovnle(edx, ebx), Instruction.Create(Code.Cmovg_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmovnle_r64_r64() {
			TestAssembler(c => c.cmovnle(rdx, rbx), Instruction.Create(Code.Cmovg_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmovnle_r16_m() {
			TestAssembler(c => c.cmovnle(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovg_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovnle_r32_m() {
			TestAssembler(c => c.cmovnle(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovg_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovnle_r64_m() {
			TestAssembler(c => c.cmovnle(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovg_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovno_r16_r16() {
			TestAssembler(c => c.cmovno(dx, bx), Instruction.Create(Code.Cmovno_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmovno_r32_r32() {
			TestAssembler(c => c.cmovno(edx, ebx), Instruction.Create(Code.Cmovno_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmovno_r64_r64() {
			TestAssembler(c => c.cmovno(rdx, rbx), Instruction.Create(Code.Cmovno_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmovno_r16_m() {
			TestAssembler(c => c.cmovno(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovno_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovno_r32_m() {
			TestAssembler(c => c.cmovno(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovno_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovno_r64_m() {
			TestAssembler(c => c.cmovno(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovno_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovnp_r16_r16() {
			TestAssembler(c => c.cmovnp(dx, bx), Instruction.Create(Code.Cmovnp_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmovnp_r32_r32() {
			TestAssembler(c => c.cmovnp(edx, ebx), Instruction.Create(Code.Cmovnp_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmovnp_r64_r64() {
			TestAssembler(c => c.cmovnp(rdx, rbx), Instruction.Create(Code.Cmovnp_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmovnp_r16_m() {
			TestAssembler(c => c.cmovnp(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovnp_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovnp_r32_m() {
			TestAssembler(c => c.cmovnp(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovnp_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovnp_r64_m() {
			TestAssembler(c => c.cmovnp(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovnp_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovns_r16_r16() {
			TestAssembler(c => c.cmovns(dx, bx), Instruction.Create(Code.Cmovns_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmovns_r32_r32() {
			TestAssembler(c => c.cmovns(edx, ebx), Instruction.Create(Code.Cmovns_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmovns_r64_r64() {
			TestAssembler(c => c.cmovns(rdx, rbx), Instruction.Create(Code.Cmovns_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmovns_r16_m() {
			TestAssembler(c => c.cmovns(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovns_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovns_r32_m() {
			TestAssembler(c => c.cmovns(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovns_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovns_r64_m() {
			TestAssembler(c => c.cmovns(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovns_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovnz_r16_r16() {
			TestAssembler(c => c.cmovnz(dx, bx), Instruction.Create(Code.Cmovne_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmovnz_r32_r32() {
			TestAssembler(c => c.cmovnz(edx, ebx), Instruction.Create(Code.Cmovne_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmovnz_r64_r64() {
			TestAssembler(c => c.cmovnz(rdx, rbx), Instruction.Create(Code.Cmovne_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmovnz_r16_m() {
			TestAssembler(c => c.cmovnz(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovne_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovnz_r32_m() {
			TestAssembler(c => c.cmovnz(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovne_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovnz_r64_m() {
			TestAssembler(c => c.cmovnz(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovne_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovo_r16_r16() {
			TestAssembler(c => c.cmovo(dx, bx), Instruction.Create(Code.Cmovo_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmovo_r32_r32() {
			TestAssembler(c => c.cmovo(edx, ebx), Instruction.Create(Code.Cmovo_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmovo_r64_r64() {
			TestAssembler(c => c.cmovo(rdx, rbx), Instruction.Create(Code.Cmovo_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmovo_r16_m() {
			TestAssembler(c => c.cmovo(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovo_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovo_r32_m() {
			TestAssembler(c => c.cmovo(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovo_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovo_r64_m() {
			TestAssembler(c => c.cmovo(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovo_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovp_r16_r16() {
			TestAssembler(c => c.cmovp(dx, bx), Instruction.Create(Code.Cmovp_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmovp_r32_r32() {
			TestAssembler(c => c.cmovp(edx, ebx), Instruction.Create(Code.Cmovp_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmovp_r64_r64() {
			TestAssembler(c => c.cmovp(rdx, rbx), Instruction.Create(Code.Cmovp_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmovp_r16_m() {
			TestAssembler(c => c.cmovp(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovp_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovp_r32_m() {
			TestAssembler(c => c.cmovp(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovp_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovp_r64_m() {
			TestAssembler(c => c.cmovp(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovp_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovpe_r16_r16() {
			TestAssembler(c => c.cmovpe(dx, bx), Instruction.Create(Code.Cmovp_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmovpe_r32_r32() {
			TestAssembler(c => c.cmovpe(edx, ebx), Instruction.Create(Code.Cmovp_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmovpe_r64_r64() {
			TestAssembler(c => c.cmovpe(rdx, rbx), Instruction.Create(Code.Cmovp_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmovpe_r16_m() {
			TestAssembler(c => c.cmovpe(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovp_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovpe_r32_m() {
			TestAssembler(c => c.cmovpe(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovp_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovpe_r64_m() {
			TestAssembler(c => c.cmovpe(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovp_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovpo_r16_r16() {
			TestAssembler(c => c.cmovpo(dx, bx), Instruction.Create(Code.Cmovnp_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmovpo_r32_r32() {
			TestAssembler(c => c.cmovpo(edx, ebx), Instruction.Create(Code.Cmovnp_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmovpo_r64_r64() {
			TestAssembler(c => c.cmovpo(rdx, rbx), Instruction.Create(Code.Cmovnp_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmovpo_r16_m() {
			TestAssembler(c => c.cmovpo(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovnp_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovpo_r32_m() {
			TestAssembler(c => c.cmovpo(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovnp_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovpo_r64_m() {
			TestAssembler(c => c.cmovpo(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovnp_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovs_r16_r16() {
			TestAssembler(c => c.cmovs(dx, bx), Instruction.Create(Code.Cmovs_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmovs_r32_r32() {
			TestAssembler(c => c.cmovs(edx, ebx), Instruction.Create(Code.Cmovs_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmovs_r64_r64() {
			TestAssembler(c => c.cmovs(rdx, rbx), Instruction.Create(Code.Cmovs_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmovs_r16_m() {
			TestAssembler(c => c.cmovs(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmovs_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovs_r32_m() {
			TestAssembler(c => c.cmovs(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmovs_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovs_r64_m() {
			TestAssembler(c => c.cmovs(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmovs_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovz_r16_r16() {
			TestAssembler(c => c.cmovz(dx, bx), Instruction.Create(Code.Cmove_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmovz_r32_r32() {
			TestAssembler(c => c.cmovz(edx, ebx), Instruction.Create(Code.Cmove_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmovz_r64_r64() {
			TestAssembler(c => c.cmovz(rdx, rbx), Instruction.Create(Code.Cmove_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmovz_r16_m() {
			TestAssembler(c => c.cmovz(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmove_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovz_r32_m() {
			TestAssembler(c => c.cmovz(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmove_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmovz_r64_m() {
			TestAssembler(c => c.cmovz(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmove_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmp_r8_r8() {
			TestAssembler(c => c.cmp(dl, bl), Instruction.Create(Code.Cmp_rm8_r8, Register.DL, Register.BL));
		}

		[Fact]
		public void cmp_m_r8() {
			TestAssembler(c => c.cmp(__byte_ptr[rcx], bl), Instruction.Create(Code.Cmp_rm8_r8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BL));
		}

		[Fact]
		public void cmp_r16_r16() {
			TestAssembler(c => c.cmp(dx, bx), Instruction.Create(Code.Cmp_rm16_r16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmp_m_r16() {
			TestAssembler(c => c.cmp(__word_ptr[rcx], bx), Instruction.Create(Code.Cmp_rm16_r16, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX));
		}

		[Fact]
		public void cmp_r32_r32() {
			TestAssembler(c => c.cmp(edx, ebx), Instruction.Create(Code.Cmp_rm32_r32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmp_m_r32() {
			TestAssembler(c => c.cmp(__dword_ptr[rcx], ebx), Instruction.Create(Code.Cmp_rm32_r32, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX));
		}

		[Fact]
		public void cmp_r64_r64() {
			TestAssembler(c => c.cmp(rdx, rbx), Instruction.Create(Code.Cmp_rm64_r64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmp_m_r64() {
			TestAssembler(c => c.cmp(__qword_ptr[rcx], rbx), Instruction.Create(Code.Cmp_rm64_r64, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX));
		}

		[Fact]
		public void cmp_r8_m() {
			TestAssembler(c => c.cmp(dl, __byte_ptr[rcx]), Instruction.Create(Code.Cmp_r8_rm8, Register.DL, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmp_r16_m() {
			TestAssembler(c => c.cmp(dx, __word_ptr[rcx]), Instruction.Create(Code.Cmp_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmp_r32_m() {
			TestAssembler(c => c.cmp(edx, __dword_ptr[rcx]), Instruction.Create(Code.Cmp_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmp_r64_m() {
			TestAssembler(c => c.cmp(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Cmp_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmp_r8_i() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.cmp(al, -5), Instruction.Create(Code.Cmp_AL_imm8, Register.AL, -5));
			} /* else */ TestAssembler(c => c.cmp(dl, -5), Instruction.Create(Code.Cmp_rm8_imm8, Register.DL, -5));
		}

		[Fact]
		public void cmp_r16_i() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.cmp(ax, 0x40B7), Instruction.Create(Code.Cmp_AX_imm16, Register.AX, 0x40B7));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.cmp(dx, -0x80), Instruction.Create(Code.Cmp_rm16_imm8, Register.DX, -0x80));
				TestAssembler(c => c.cmp(dx, 0x7F), Instruction.Create(Code.Cmp_rm16_imm8, Register.DX, 0x7F));
			} /* else */ TestAssembler(c => c.cmp(dx, 0x40B7), Instruction.Create(Code.Cmp_rm16_imm16, Register.DX, 0x40B7));
		}

		[Fact]
		public void cmp_r32_i() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.cmp(eax, 0x7FFFFFFF), Instruction.Create(Code.Cmp_EAX_imm32, Register.EAX, 0x7FFFFFFF));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.cmp(edx, -0x80), Instruction.Create(Code.Cmp_rm32_imm8, Register.EDX, -0x80));
				TestAssembler(c => c.cmp(edx, 0x7F), Instruction.Create(Code.Cmp_rm32_imm8, Register.EDX, 0x7F));
			} /* else */ TestAssembler(c => c.cmp(edx, 0x7FFFFFFF), Instruction.Create(Code.Cmp_rm32_imm32, Register.EDX, 0x7FFFFFFF));
		}

		[Fact]
		public void cmp_r64_i() {
			{ /* if (dst == Register.RAX) */
				TestAssembler(c => c.cmp(rax, -0x80000000), Instruction.Create(Code.Cmp_RAX_imm32, Register.RAX, -0x80000000));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.cmp(rdx, -0x80), Instruction.Create(Code.Cmp_rm64_imm8, Register.RDX, -0x80));
				TestAssembler(c => c.cmp(rdx, 0x7F), Instruction.Create(Code.Cmp_rm64_imm8, Register.RDX, 0x7F));
			} /* else */ TestAssembler(c => c.cmp(rdx, -0x80000000), Instruction.Create(Code.Cmp_rm64_imm32, Register.RDX, -0x80000000));
		}

		[Fact]
		public void cmp_m_i() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.cmp(__qword_ptr[rdx], -0x80), Instruction.Create(Code.Cmp_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80));
					TestAssembler(c => c.cmp(__qword_ptr[rdx], 0x7F), Instruction.Create(Code.Cmp_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7F));
				} /* else */ TestAssembler(c => c.cmp(__qword_ptr[rdx], -0x80000000), Instruction.Create(Code.Cmp_rm64_imm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80000000));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.cmp(__dword_ptr[rdx], -0x80), Instruction.Create(Code.Cmp_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80));
					TestAssembler(c => c.cmp(__dword_ptr[rdx], 0x7F), Instruction.Create(Code.Cmp_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7F));
				} /* else */ TestAssembler(c => c.cmp(__dword_ptr[rdx], 0x7FFFFFFF), Instruction.Create(Code.Cmp_rm32_imm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFF));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.cmp(__word_ptr[rdx], -0x80), Instruction.Create(Code.Cmp_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80));
					TestAssembler(c => c.cmp(__word_ptr[rdx], 0x7F), Instruction.Create(Code.Cmp_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7F));
				} /* else */ TestAssembler(c => c.cmp(__word_ptr[rdx], 0x40B7), Instruction.Create(Code.Cmp_rm16_imm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x40B7));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.cmp(__byte_ptr[rdx], -5), Instruction.Create(Code.Cmp_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.cmp(__zmmword_ptr[rdx], -5), Instruction.Create(Code.Cmp_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
				});
			}
		}

		[Fact]
		public void cmp_r8_u() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.cmp(al, (byte)0x7F), Instruction.Create(Code.Cmp_AL_imm8, Register.AL, 0x7FU));
			} /* else */ TestAssembler(c => c.cmp(dl, (byte)0x7F), Instruction.Create(Code.Cmp_rm8_imm8, Register.DL, 0x7FU));
		}

		[Fact]
		public void cmp_r16_u() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.cmp(ax, (ushort)0x40B7), Instruction.Create(Code.Cmp_AX_imm16, Register.AX, 0x40B7U));
			} /* else */ { /* if (imm <= (ushort)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
				TestAssembler(c => c.cmp(dx, (ushort)0xFF80), Instruction.Create(Code.Cmp_rm16_imm8, Register.DX, 0xFF80U));
				TestAssembler(c => c.cmp(dx, (ushort)0x7F), Instruction.Create(Code.Cmp_rm16_imm8, Register.DX, 0x7FU));
			} /* else */ TestAssembler(c => c.cmp(dx, (ushort)0x40B7), Instruction.Create(Code.Cmp_rm16_imm16, Register.DX, 0x40B7U));
		}

		[Fact]
		public void cmp_r32_u() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.cmp(eax, 0x7FFFFFFFU), Instruction.Create(Code.Cmp_EAX_imm32, Register.EAX, 0x7FFFFFFFU));
			} /* else */ { /* if (imm <= (uint)sbyte.MaxValue || 0xFFFF_FF80 <= imm) */
				TestAssembler(c => c.cmp(edx, 0xFFFFFF80U), Instruction.Create(Code.Cmp_rm32_imm8, Register.EDX, 0xFFFFFF80U));
				TestAssembler(c => c.cmp(edx, 0x7FU), Instruction.Create(Code.Cmp_rm32_imm8, Register.EDX, 0x7FU));
			} /* else */ TestAssembler(c => c.cmp(edx, 0x7FFFFFFFU), Instruction.Create(Code.Cmp_rm32_imm32, Register.EDX, 0x7FFFFFFFU));
		}

		[Fact]
		public void cmp_m_u() {
			{ /* if (dst.Size == MemoryOperandSize.Dword) */
				{ /* if (imm <= (uint)sbyte.MaxValue || 0xFFFF_FF80 <= imm) */
					TestAssembler(c => c.cmp(__dword_ptr[rdx], 0xFFFFFF80U), Instruction.Create(Code.Cmp_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0xFFFFFF80U));
					TestAssembler(c => c.cmp(__dword_ptr[rdx], 0x7FU), Instruction.Create(Code.Cmp_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
				} /* else */ TestAssembler(c => c.cmp(__dword_ptr[rdx], 0x7FFFFFFFU), Instruction.Create(Code.Cmp_rm32_imm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFFU));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				{ /* if (imm <= (uint)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
					TestAssembler(c => c.cmp(__word_ptr[rdx], 0xFF80U), Instruction.Create(Code.Cmp_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0xFF80U));
					TestAssembler(c => c.cmp(__word_ptr[rdx], 0x7FU), Instruction.Create(Code.Cmp_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
				} /* else */ TestAssembler(c => c.cmp(__word_ptr[rdx], 0x40B7U), Instruction.Create(Code.Cmp_rm16_imm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x40B7U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.cmp(__byte_ptr[rdx], 0x7FU), Instruction.Create(Code.Cmp_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.cmp(__zmmword_ptr[rdx], 0x7FU), Instruction.Create(Code.Cmp_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
				});
			}
		}

		[Fact]
		public void cmpeqpd_xmm_xmm() {
			TestAssembler(c => c.cmpeqpd(xmm2, xmm3), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0));
		}

		[Fact]
		public void cmpeqpd_xmm_m() {
			TestAssembler(c => c.cmpeqpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0));
		}

		[Fact]
		public void cmpeqps_xmm_xmm() {
			TestAssembler(c => c.cmpeqps(xmm2, xmm3), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0));
		}

		[Fact]
		public void cmpeqps_xmm_m() {
			TestAssembler(c => c.cmpeqps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0));
		}

		[Fact]
		public void cmpeqsd_xmm_xmm() {
			TestAssembler(c => c.cmpeqsd(xmm2, xmm3), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, 0));
		}

		[Fact]
		public void cmpeqsd_xmm_m() {
			TestAssembler(c => c.cmpeqsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0));
		}

		[Fact]
		public void cmpeqss_xmm_xmm() {
			TestAssembler(c => c.cmpeqss(xmm2, xmm3), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, 0));
		}

		[Fact]
		public void cmpeqss_xmm_m() {
			TestAssembler(c => c.cmpeqss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0));
		}

		[Fact]
		public void cmplepd_xmm_xmm() {
			TestAssembler(c => c.cmplepd(xmm2, xmm3), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 2));
		}

		[Fact]
		public void cmplepd_xmm_m() {
			TestAssembler(c => c.cmplepd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2));
		}

		[Fact]
		public void cmpleps_xmm_xmm() {
			TestAssembler(c => c.cmpleps(xmm2, xmm3), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 2));
		}

		[Fact]
		public void cmpleps_xmm_m() {
			TestAssembler(c => c.cmpleps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2));
		}

		[Fact]
		public void cmplesd_xmm_xmm() {
			TestAssembler(c => c.cmplesd(xmm2, xmm3), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, 2));
		}

		[Fact]
		public void cmplesd_xmm_m() {
			TestAssembler(c => c.cmplesd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2));
		}

		[Fact]
		public void cmpless_xmm_xmm() {
			TestAssembler(c => c.cmpless(xmm2, xmm3), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, 2));
		}

		[Fact]
		public void cmpless_xmm_m() {
			TestAssembler(c => c.cmpless(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2));
		}

		[Fact]
		public void cmpltpd_xmm_xmm() {
			TestAssembler(c => c.cmpltpd(xmm2, xmm3), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 1));
		}

		[Fact]
		public void cmpltpd_xmm_m() {
			TestAssembler(c => c.cmpltpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1));
		}

		[Fact]
		public void cmpltps_xmm_xmm() {
			TestAssembler(c => c.cmpltps(xmm2, xmm3), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 1));
		}

		[Fact]
		public void cmpltps_xmm_m() {
			TestAssembler(c => c.cmpltps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1));
		}

		[Fact]
		public void cmpltsd_xmm_xmm() {
			TestAssembler(c => c.cmpltsd(xmm2, xmm3), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, 1));
		}

		[Fact]
		public void cmpltsd_xmm_m() {
			TestAssembler(c => c.cmpltsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1));
		}

		[Fact]
		public void cmpltss_xmm_xmm() {
			TestAssembler(c => c.cmpltss(xmm2, xmm3), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, 1));
		}

		[Fact]
		public void cmpltss_xmm_m() {
			TestAssembler(c => c.cmpltss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1));
		}

		[Fact]
		public void cmpneqpd_xmm_xmm() {
			TestAssembler(c => c.cmpneqpd(xmm2, xmm3), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 4));
		}

		[Fact]
		public void cmpneqpd_xmm_m() {
			TestAssembler(c => c.cmpneqpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4));
		}

		[Fact]
		public void cmpneqps_xmm_xmm() {
			TestAssembler(c => c.cmpneqps(xmm2, xmm3), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 4));
		}

		[Fact]
		public void cmpneqps_xmm_m() {
			TestAssembler(c => c.cmpneqps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4));
		}

		[Fact]
		public void cmpneqsd_xmm_xmm() {
			TestAssembler(c => c.cmpneqsd(xmm2, xmm3), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, 4));
		}

		[Fact]
		public void cmpneqsd_xmm_m() {
			TestAssembler(c => c.cmpneqsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4));
		}

		[Fact]
		public void cmpneqss_xmm_xmm() {
			TestAssembler(c => c.cmpneqss(xmm2, xmm3), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, 4));
		}

		[Fact]
		public void cmpneqss_xmm_m() {
			TestAssembler(c => c.cmpneqss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4));
		}

		[Fact]
		public void cmpnlepd_xmm_xmm() {
			TestAssembler(c => c.cmpnlepd(xmm2, xmm3), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 6));
		}

		[Fact]
		public void cmpnlepd_xmm_m() {
			TestAssembler(c => c.cmpnlepd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6));
		}

		[Fact]
		public void cmpnleps_xmm_xmm() {
			TestAssembler(c => c.cmpnleps(xmm2, xmm3), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 6));
		}

		[Fact]
		public void cmpnleps_xmm_m() {
			TestAssembler(c => c.cmpnleps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6));
		}

		[Fact]
		public void cmpnlesd_xmm_xmm() {
			TestAssembler(c => c.cmpnlesd(xmm2, xmm3), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, 6));
		}

		[Fact]
		public void cmpnlesd_xmm_m() {
			TestAssembler(c => c.cmpnlesd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6));
		}

		[Fact]
		public void cmpnless_xmm_xmm() {
			TestAssembler(c => c.cmpnless(xmm2, xmm3), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, 6));
		}

		[Fact]
		public void cmpnless_xmm_m() {
			TestAssembler(c => c.cmpnless(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6));
		}

		[Fact]
		public void cmpnltpd_xmm_xmm() {
			TestAssembler(c => c.cmpnltpd(xmm2, xmm3), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 5));
		}

		[Fact]
		public void cmpnltpd_xmm_m() {
			TestAssembler(c => c.cmpnltpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5));
		}

		[Fact]
		public void cmpnltps_xmm_xmm() {
			TestAssembler(c => c.cmpnltps(xmm2, xmm3), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 5));
		}

		[Fact]
		public void cmpnltps_xmm_m() {
			TestAssembler(c => c.cmpnltps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5));
		}

		[Fact]
		public void cmpnltsd_xmm_xmm() {
			TestAssembler(c => c.cmpnltsd(xmm2, xmm3), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, 5));
		}

		[Fact]
		public void cmpnltsd_xmm_m() {
			TestAssembler(c => c.cmpnltsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5));
		}

		[Fact]
		public void cmpnltss_xmm_xmm() {
			TestAssembler(c => c.cmpnltss(xmm2, xmm3), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, 5));
		}

		[Fact]
		public void cmpnltss_xmm_m() {
			TestAssembler(c => c.cmpnltss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5));
		}

		[Fact]
		public void cmpordpd_xmm_xmm() {
			TestAssembler(c => c.cmpordpd(xmm2, xmm3), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 7));
		}

		[Fact]
		public void cmpordpd_xmm_m() {
			TestAssembler(c => c.cmpordpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7));
		}

		[Fact]
		public void cmpordps_xmm_xmm() {
			TestAssembler(c => c.cmpordps(xmm2, xmm3), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 7));
		}

		[Fact]
		public void cmpordps_xmm_m() {
			TestAssembler(c => c.cmpordps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7));
		}

		[Fact]
		public void cmpordsd_xmm_xmm() {
			TestAssembler(c => c.cmpordsd(xmm2, xmm3), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, 7));
		}

		[Fact]
		public void cmpordsd_xmm_m() {
			TestAssembler(c => c.cmpordsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7));
		}

		[Fact]
		public void cmpordss_xmm_xmm() {
			TestAssembler(c => c.cmpordss(xmm2, xmm3), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, 7));
		}

		[Fact]
		public void cmpordss_xmm_m() {
			TestAssembler(c => c.cmpordss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7));
		}

		[Fact]
		public void cmppd_xmm_xmm_i() {
			TestAssembler(c => c.cmppd(xmm2, xmm3, -5), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void cmppd_xmm_m_i() {
			TestAssembler(c => c.cmppd(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void cmppd_xmm_xmm_u() {
			TestAssembler(c => c.cmppd(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void cmppd_xmm_m_u() {
			TestAssembler(c => c.cmppd(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void cmpps_xmm_xmm_i() {
			TestAssembler(c => c.cmpps(xmm2, xmm3, -5), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void cmpps_xmm_m_i() {
			TestAssembler(c => c.cmpps(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void cmpps_xmm_xmm_u() {
			TestAssembler(c => c.cmpps(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void cmpps_xmm_m_u() {
			TestAssembler(c => c.cmpps(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void cmpsb() {
			TestAssembler(c => c.cmpsb(), Instruction.CreateCmpsb(64));
		}

		[Fact]
		public void cmpsd() {
			TestAssembler(c => c.cmpsd(), Instruction.CreateCmpsd(64));
		}

		[Fact]
		public void cmpsd_xmm_xmm_i() {
			TestAssembler(c => c.cmpsd(xmm2, xmm3, -5), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void cmpsd_xmm_m_i() {
			TestAssembler(c => c.cmpsd(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void cmpsd_xmm_xmm_u() {
			TestAssembler(c => c.cmpsd(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void cmpsd_xmm_m_u() {
			TestAssembler(c => c.cmpsd(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void cmpsq() {
			TestAssembler(c => c.cmpsq(), Instruction.CreateCmpsq(64));
		}

		[Fact]
		public void cmpss_xmm_xmm_i() {
			TestAssembler(c => c.cmpss(xmm2, xmm3, -5), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void cmpss_xmm_m_i() {
			TestAssembler(c => c.cmpss(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void cmpss_xmm_xmm_u() {
			TestAssembler(c => c.cmpss(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void cmpss_xmm_m_u() {
			TestAssembler(c => c.cmpss(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void cmpsw() {
			TestAssembler(c => c.cmpsw(), Instruction.CreateCmpsw(64));
		}

		[Fact]
		public void cmpunordpd_xmm_xmm() {
			TestAssembler(c => c.cmpunordpd(xmm2, xmm3), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 3));
		}

		[Fact]
		public void cmpunordpd_xmm_m() {
			TestAssembler(c => c.cmpunordpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmppd_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3));
		}

		[Fact]
		public void cmpunordps_xmm_xmm() {
			TestAssembler(c => c.cmpunordps(xmm2, xmm3), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 3));
		}

		[Fact]
		public void cmpunordps_xmm_m() {
			TestAssembler(c => c.cmpunordps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpps_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3));
		}

		[Fact]
		public void cmpunordsd_xmm_xmm() {
			TestAssembler(c => c.cmpunordsd(xmm2, xmm3), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, 3));
		}

		[Fact]
		public void cmpunordsd_xmm_m() {
			TestAssembler(c => c.cmpunordsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpsd_xmm_xmmm64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3));
		}

		[Fact]
		public void cmpunordss_xmm_xmm() {
			TestAssembler(c => c.cmpunordss(xmm2, xmm3), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, 3));
		}

		[Fact]
		public void cmpunordss_xmm_m() {
			TestAssembler(c => c.cmpunordss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cmpss_xmm_xmmm32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3));
		}

		[Fact]
		public void cmpxchg_r8_r8() {
			TestAssembler(c => c.cmpxchg(dl, bl), Instruction.Create(Code.Cmpxchg_rm8_r8, Register.DL, Register.BL));
		}

		[Fact]
		public void cmpxchg_m_r8() {
			TestAssembler(c => c.cmpxchg(__byte_ptr[rcx], bl), Instruction.Create(Code.Cmpxchg_rm8_r8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BL));
		}

		[Fact]
		public void cmpxchg_r16_r16() {
			TestAssembler(c => c.cmpxchg(dx, bx), Instruction.Create(Code.Cmpxchg_rm16_r16, Register.DX, Register.BX));
		}

		[Fact]
		public void cmpxchg_m_r16() {
			TestAssembler(c => c.cmpxchg(__word_ptr[rcx], bx), Instruction.Create(Code.Cmpxchg_rm16_r16, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX));
		}

		[Fact]
		public void cmpxchg_r32_r32() {
			TestAssembler(c => c.cmpxchg(edx, ebx), Instruction.Create(Code.Cmpxchg_rm32_r32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void cmpxchg_m_r32() {
			TestAssembler(c => c.cmpxchg(__dword_ptr[rcx], ebx), Instruction.Create(Code.Cmpxchg_rm32_r32, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX));
		}

		[Fact]
		public void cmpxchg_r64_r64() {
			TestAssembler(c => c.cmpxchg(rdx, rbx), Instruction.Create(Code.Cmpxchg_rm64_r64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void cmpxchg_m_r64() {
			TestAssembler(c => c.cmpxchg(__qword_ptr[rcx], rbx), Instruction.Create(Code.Cmpxchg_rm64_r64, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX));
		}

		[Fact]
		public void cmpxchg16b_m() {
			TestAssembler(c => c.cmpxchg16b(__[rcx]), Instruction.Create(Code.Cmpxchg16b_m128, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cmpxchg8b_m() {
			TestAssembler(c => c.cmpxchg8b(__[rcx]), Instruction.Create(Code.Cmpxchg8b_m64, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void comisd_xmm_xmm() {
			TestAssembler(c => c.comisd(xmm2, xmm3), Instruction.Create(Code.Comisd_xmm_xmmm64, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void comisd_xmm_m() {
			TestAssembler(c => c.comisd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Comisd_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void comiss_xmm_xmm() {
			TestAssembler(c => c.comiss(xmm2, xmm3), Instruction.Create(Code.Comiss_xmm_xmmm32, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void comiss_xmm_m() {
			TestAssembler(c => c.comiss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Comiss_xmm_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cpuid() {
			TestAssembler(c => c.cpuid(), Instruction.Create(Code.Cpuid));
		}

		[Fact]
		public void cqo() {
			TestAssembler(c => c.cqo(), Instruction.Create(Code.Cqo));
		}

		[Fact]
		public void crc32_r32_r8() {
			TestAssembler(c => c.crc32(edx, bl), Instruction.Create(Code.Crc32_r32_rm8, Register.EDX, Register.BL));
		}

		[Fact]
		public void crc32_r64_r8() {
			TestAssembler(c => c.crc32(rdx, bl), Instruction.Create(Code.Crc32_r64_rm8, Register.RDX, Register.BL));
		}

		[Fact]
		public void crc32_r32_r16() {
			TestAssembler(c => c.crc32(edx, bx), Instruction.Create(Code.Crc32_r32_rm16, Register.EDX, Register.BX));
		}

		[Fact]
		public void crc32_r32_r32() {
			TestAssembler(c => c.crc32(edx, ebx), Instruction.Create(Code.Crc32_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void crc32_r64_r64() {
			TestAssembler(c => c.crc32(rdx, rbx), Instruction.Create(Code.Crc32_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void crc32_r32_m() {
			{ /* if (src.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.crc32(edx, __dword_ptr[rdx]), Instruction.Create(Code.Crc32_r32_rm32, Register.EDX, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (src.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.crc32(edx, __word_ptr[rdx]), Instruction.Create(Code.Crc32_r32_rm16, Register.EDX, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (src.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.crc32(edx, __byte_ptr[rdx]), Instruction.Create(Code.Crc32_r32_rm8, Register.EDX, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.crc32(edx, __zmmword_ptr[rdx]), Instruction.Create(Code.Crc32_r32_rm8, Register.EDX, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void crc32_r64_m() {
			{ /* if (src.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.crc32(rdx, __qword_ptr[rdx]), Instruction.Create(Code.Crc32_r64_rm64, Register.RDX, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (src.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.crc32(rdx, __byte_ptr[rdx]), Instruction.Create(Code.Crc32_r64_rm8, Register.RDX, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.crc32(rdx, __zmmword_ptr[rdx]), Instruction.Create(Code.Crc32_r64_rm8, Register.RDX, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void cvtdq2pd_xmm_xmm() {
			TestAssembler(c => c.cvtdq2pd(xmm2, xmm3), Instruction.Create(Code.Cvtdq2pd_xmm_xmmm64, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void cvtdq2pd_xmm_m() {
			TestAssembler(c => c.cvtdq2pd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvtdq2pd_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cvtdq2ps_xmm_xmm() {
			TestAssembler(c => c.cvtdq2ps(xmm2, xmm3), Instruction.Create(Code.Cvtdq2ps_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void cvtdq2ps_xmm_m() {
			TestAssembler(c => c.cvtdq2ps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvtdq2ps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cvtpd2dq_xmm_xmm() {
			TestAssembler(c => c.cvtpd2dq(xmm2, xmm3), Instruction.Create(Code.Cvtpd2dq_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void cvtpd2dq_xmm_m() {
			TestAssembler(c => c.cvtpd2dq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvtpd2dq_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cvtpd2pi_mm_xmm() {
			TestAssembler(c => c.cvtpd2pi(mm2, xmm3), Instruction.Create(Code.Cvtpd2pi_mm_xmmm128, Register.MM2, Register.XMM3));
		}

		[Fact]
		public void cvtpd2pi_mm_m() {
			TestAssembler(c => c.cvtpd2pi(mm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvtpd2pi_mm_xmmm128, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cvtpd2ps_xmm_xmm() {
			TestAssembler(c => c.cvtpd2ps(xmm2, xmm3), Instruction.Create(Code.Cvtpd2ps_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void cvtpd2ps_xmm_m() {
			TestAssembler(c => c.cvtpd2ps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvtpd2ps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cvtpi2pd_xmm_mm() {
			TestAssembler(c => c.cvtpi2pd(xmm2, mm3), Instruction.Create(Code.Cvtpi2pd_xmm_mmm64, Register.XMM2, Register.MM3));
		}

		[Fact]
		public void cvtpi2pd_xmm_m() {
			TestAssembler(c => c.cvtpi2pd(xmm2, __qword_ptr[rcx]), Instruction.Create(Code.Cvtpi2pd_xmm_mmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cvtpi2ps_xmm_mm() {
			TestAssembler(c => c.cvtpi2ps(xmm2, mm3), Instruction.Create(Code.Cvtpi2ps_xmm_mmm64, Register.XMM2, Register.MM3));
		}

		[Fact]
		public void cvtpi2ps_xmm_m() {
			TestAssembler(c => c.cvtpi2ps(xmm2, __qword_ptr[rcx]), Instruction.Create(Code.Cvtpi2ps_xmm_mmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cvtps2dq_xmm_xmm() {
			TestAssembler(c => c.cvtps2dq(xmm2, xmm3), Instruction.Create(Code.Cvtps2dq_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void cvtps2dq_xmm_m() {
			TestAssembler(c => c.cvtps2dq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvtps2dq_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cvtps2pd_xmm_xmm() {
			TestAssembler(c => c.cvtps2pd(xmm2, xmm3), Instruction.Create(Code.Cvtps2pd_xmm_xmmm64, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void cvtps2pd_xmm_m() {
			TestAssembler(c => c.cvtps2pd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvtps2pd_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cvtps2pi_mm_xmm() {
			TestAssembler(c => c.cvtps2pi(mm2, xmm3), Instruction.Create(Code.Cvtps2pi_mm_xmmm64, Register.MM2, Register.XMM3));
		}

		[Fact]
		public void cvtps2pi_mm_m() {
			TestAssembler(c => c.cvtps2pi(mm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvtps2pi_mm_xmmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cvtsd2si_r32_xmm() {
			TestAssembler(c => c.cvtsd2si(edx, xmm3), Instruction.Create(Code.Cvtsd2si_r32_xmmm64, Register.EDX, Register.XMM3));
		}

		[Fact]
		public void cvtsd2si_r64_xmm() {
			TestAssembler(c => c.cvtsd2si(rdx, xmm3), Instruction.Create(Code.Cvtsd2si_r64_xmmm64, Register.RDX, Register.XMM3));
		}

		[Fact]
		public void cvtsd2si_r32_m() {
			TestAssembler(c => c.cvtsd2si(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvtsd2si_r32_xmmm64, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cvtsd2si_r64_m() {
			TestAssembler(c => c.cvtsd2si(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvtsd2si_r64_xmmm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cvtsd2ss_xmm_xmm() {
			TestAssembler(c => c.cvtsd2ss(xmm2, xmm3), Instruction.Create(Code.Cvtsd2ss_xmm_xmmm64, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void cvtsd2ss_xmm_m() {
			TestAssembler(c => c.cvtsd2ss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvtsd2ss_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cvtsi2sd_xmm_r32() {
			TestAssembler(c => c.cvtsi2sd(xmm2, ebx), Instruction.Create(Code.Cvtsi2sd_xmm_rm32, Register.XMM2, Register.EBX));
		}

		[Fact]
		public void cvtsi2sd_xmm_r64() {
			TestAssembler(c => c.cvtsi2sd(xmm2, rbx), Instruction.Create(Code.Cvtsi2sd_xmm_rm64, Register.XMM2, Register.RBX));
		}

		[Fact]
		public void cvtsi2sd_xmm_m() {
			{ /* if (src.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.cvtsi2sd(xmm2, __qword_ptr[rdx]), Instruction.Create(Code.Cvtsi2sd_xmm_rm64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (src.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.cvtsi2sd(xmm2, __dword_ptr[rdx]), Instruction.Create(Code.Cvtsi2sd_xmm_rm32, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.cvtsi2sd(xmm2, __zmmword_ptr[rdx]), Instruction.Create(Code.Cvtsi2sd_xmm_rm32, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void cvtsi2ss_xmm_r32() {
			TestAssembler(c => c.cvtsi2ss(xmm2, ebx), Instruction.Create(Code.Cvtsi2ss_xmm_rm32, Register.XMM2, Register.EBX));
		}

		[Fact]
		public void cvtsi2ss_xmm_r64() {
			TestAssembler(c => c.cvtsi2ss(xmm2, rbx), Instruction.Create(Code.Cvtsi2ss_xmm_rm64, Register.XMM2, Register.RBX));
		}

		[Fact]
		public void cvtsi2ss_xmm_m() {
			{ /* if (src.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.cvtsi2ss(xmm2, __qword_ptr[rdx]), Instruction.Create(Code.Cvtsi2ss_xmm_rm64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (src.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.cvtsi2ss(xmm2, __dword_ptr[rdx]), Instruction.Create(Code.Cvtsi2ss_xmm_rm32, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.cvtsi2ss(xmm2, __zmmword_ptr[rdx]), Instruction.Create(Code.Cvtsi2ss_xmm_rm32, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void cvtss2sd_xmm_xmm() {
			TestAssembler(c => c.cvtss2sd(xmm2, xmm3), Instruction.Create(Code.Cvtss2sd_xmm_xmmm32, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void cvtss2sd_xmm_m() {
			TestAssembler(c => c.cvtss2sd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvtss2sd_xmm_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cvtss2si_r32_xmm() {
			TestAssembler(c => c.cvtss2si(edx, xmm3), Instruction.Create(Code.Cvtss2si_r32_xmmm32, Register.EDX, Register.XMM3));
		}

		[Fact]
		public void cvtss2si_r64_xmm() {
			TestAssembler(c => c.cvtss2si(rdx, xmm3), Instruction.Create(Code.Cvtss2si_r64_xmmm32, Register.RDX, Register.XMM3));
		}

		[Fact]
		public void cvtss2si_r32_m() {
			TestAssembler(c => c.cvtss2si(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvtss2si_r32_xmmm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cvtss2si_r64_m() {
			TestAssembler(c => c.cvtss2si(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvtss2si_r64_xmmm32, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cvttpd2dq_xmm_xmm() {
			TestAssembler(c => c.cvttpd2dq(xmm2, xmm3), Instruction.Create(Code.Cvttpd2dq_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void cvttpd2dq_xmm_m() {
			TestAssembler(c => c.cvttpd2dq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvttpd2dq_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cvttpd2pi_mm_xmm() {
			TestAssembler(c => c.cvttpd2pi(mm2, xmm3), Instruction.Create(Code.Cvttpd2pi_mm_xmmm128, Register.MM2, Register.XMM3));
		}

		[Fact]
		public void cvttpd2pi_mm_m() {
			TestAssembler(c => c.cvttpd2pi(mm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvttpd2pi_mm_xmmm128, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cvttps2dq_xmm_xmm() {
			TestAssembler(c => c.cvttps2dq(xmm2, xmm3), Instruction.Create(Code.Cvttps2dq_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void cvttps2dq_xmm_m() {
			TestAssembler(c => c.cvttps2dq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvttps2dq_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cvttps2pi_mm_xmm() {
			TestAssembler(c => c.cvttps2pi(mm2, xmm3), Instruction.Create(Code.Cvttps2pi_mm_xmmm64, Register.MM2, Register.XMM3));
		}

		[Fact]
		public void cvttps2pi_mm_m() {
			TestAssembler(c => c.cvttps2pi(mm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvttps2pi_mm_xmmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cvttsd2si_r32_xmm() {
			TestAssembler(c => c.cvttsd2si(edx, xmm3), Instruction.Create(Code.Cvttsd2si_r32_xmmm64, Register.EDX, Register.XMM3));
		}

		[Fact]
		public void cvttsd2si_r64_xmm() {
			TestAssembler(c => c.cvttsd2si(rdx, xmm3), Instruction.Create(Code.Cvttsd2si_r64_xmmm64, Register.RDX, Register.XMM3));
		}

		[Fact]
		public void cvttsd2si_r32_m() {
			TestAssembler(c => c.cvttsd2si(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvttsd2si_r32_xmmm64, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cvttsd2si_r64_m() {
			TestAssembler(c => c.cvttsd2si(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvttsd2si_r64_xmmm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cvttss2si_r32_xmm() {
			TestAssembler(c => c.cvttss2si(edx, xmm3), Instruction.Create(Code.Cvttss2si_r32_xmmm32, Register.EDX, Register.XMM3));
		}

		[Fact]
		public void cvttss2si_r64_xmm() {
			TestAssembler(c => c.cvttss2si(rdx, xmm3), Instruction.Create(Code.Cvttss2si_r64_xmmm32, Register.RDX, Register.XMM3));
		}

		[Fact]
		public void cvttss2si_r32_m() {
			TestAssembler(c => c.cvttss2si(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvttss2si_r32_xmmm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cvttss2si_r64_m() {
			TestAssembler(c => c.cvttss2si(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.Cvttss2si_r64_xmmm32, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void cwd() {
			TestAssembler(c => c.cwd(), Instruction.Create(Code.Cwd));
		}

		[Fact]
		public void cwde() {
			TestAssembler(c => c.cwde(), Instruction.Create(Code.Cwde));
		}

		[Fact]
		public void dec_r8() {
			TestAssembler(c => c.dec(dl), Instruction.Create(Code.Dec_rm8, Register.DL));
		}

		[Fact]
		public void dec_r16() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.dec(dx), Instruction.Create(Code.Dec_rm16, Register.DX));
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void dec_r32() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.dec(edx), Instruction.Create(Code.Dec_rm32, Register.EDX));
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void dec_r64() {
			TestAssembler(c => c.dec(rdx), Instruction.Create(Code.Dec_rm64, Register.RDX));
		}

		[Fact]
		public void dec_m() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.dec(__qword_ptr[rdx]), Instruction.Create(Code.Dec_rm64, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.dec(__dword_ptr[rdx]), Instruction.Create(Code.Dec_rm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.dec(__word_ptr[rdx]), Instruction.Create(Code.Dec_rm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.dec(__byte_ptr[rdx]), Instruction.Create(Code.Dec_rm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.dec(__zmmword_ptr[rdx]), Instruction.Create(Code.Dec_rm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void div_r8() {
			TestAssembler(c => c.div(dl), Instruction.Create(Code.Div_rm8, Register.DL));
		}

		[Fact]
		public void div_r16() {
			TestAssembler(c => c.div(dx), Instruction.Create(Code.Div_rm16, Register.DX));
		}

		[Fact]
		public void div_r32() {
			TestAssembler(c => c.div(edx), Instruction.Create(Code.Div_rm32, Register.EDX));
		}

		[Fact]
		public void div_r64() {
			TestAssembler(c => c.div(rdx), Instruction.Create(Code.Div_rm64, Register.RDX));
		}

		[Fact]
		public void div_m() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.div(__qword_ptr[rdx]), Instruction.Create(Code.Div_rm64, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.div(__dword_ptr[rdx]), Instruction.Create(Code.Div_rm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.div(__word_ptr[rdx]), Instruction.Create(Code.Div_rm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.div(__byte_ptr[rdx]), Instruction.Create(Code.Div_rm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.div(__zmmword_ptr[rdx]), Instruction.Create(Code.Div_rm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void divpd_xmm_xmm() {
			TestAssembler(c => c.divpd(xmm2, xmm3), Instruction.Create(Code.Divpd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void divpd_xmm_m() {
			TestAssembler(c => c.divpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Divpd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void divps_xmm_xmm() {
			TestAssembler(c => c.divps(xmm2, xmm3), Instruction.Create(Code.Divps_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void divps_xmm_m() {
			TestAssembler(c => c.divps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Divps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void divsd_xmm_xmm() {
			TestAssembler(c => c.divsd(xmm2, xmm3), Instruction.Create(Code.Divsd_xmm_xmmm64, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void divsd_xmm_m() {
			TestAssembler(c => c.divsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Divsd_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void divss_xmm_xmm() {
			TestAssembler(c => c.divss(xmm2, xmm3), Instruction.Create(Code.Divss_xmm_xmmm32, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void divss_xmm_m() {
			TestAssembler(c => c.divss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Divss_xmm_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void dppd_xmm_xmm_i() {
			TestAssembler(c => c.dppd(xmm2, xmm3, -5), Instruction.Create(Code.Dppd_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void dppd_xmm_m_i() {
			TestAssembler(c => c.dppd(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Dppd_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void dppd_xmm_xmm_u() {
			TestAssembler(c => c.dppd(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Dppd_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void dppd_xmm_m_u() {
			TestAssembler(c => c.dppd(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Dppd_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void dpps_xmm_xmm_i() {
			TestAssembler(c => c.dpps(xmm2, xmm3, -5), Instruction.Create(Code.Dpps_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void dpps_xmm_m_i() {
			TestAssembler(c => c.dpps(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Dpps_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void dpps_xmm_xmm_u() {
			TestAssembler(c => c.dpps(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Dpps_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void dpps_xmm_m_u() {
			TestAssembler(c => c.dpps(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Dpps_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void emms() {
			TestAssembler(c => c.emms(), Instruction.Create(Code.Emms));
		}

		[Fact]
		public void encls() {
			TestAssembler(c => c.encls(), Instruction.Create(Code.Encls));
		}

		[Fact]
		public void enclu() {
			TestAssembler(c => c.enclu(), Instruction.Create(Code.Enclu));
		}

		[Fact]
		public void enclv() {
			TestAssembler(c => c.enclv(), Instruction.Create(Code.Enclv));
		}

		[Fact]
		public void encodekey128_r32_r32() {
			TestAssembler(c => c.encodekey128(edx, ebx), Instruction.Create(Code.Encodekey128_r32_r32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void encodekey256_r32_r32() {
			TestAssembler(c => c.encodekey256(edx, ebx), Instruction.Create(Code.Encodekey256_r32_r32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void endbr32() {
			TestAssembler(c => c.endbr32(), Instruction.Create(Code.Endbr32));
		}

		[Fact]
		public void endbr64() {
			TestAssembler(c => c.endbr64(), Instruction.Create(Code.Endbr64));
		}

		[Fact]
		public void enqcmd_r32_m() {
			TestAssembler(c => c.enqcmd(edx, __[ecx]), Instruction.Create(Code.Enqcmd_r32_m512, Register.EDX, new MemoryOperand(Register.ECX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void enqcmd_r64_m() {
			TestAssembler(c => c.enqcmd(rdx, __[rcx]), Instruction.Create(Code.Enqcmd_r64_m512, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void enqcmds_r32_m() {
			TestAssembler(c => c.enqcmds(edx, __[ecx]), Instruction.Create(Code.Enqcmds_r32_m512, Register.EDX, new MemoryOperand(Register.ECX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void enqcmds_r64_m() {
			TestAssembler(c => c.enqcmds(rdx, __[rcx]), Instruction.Create(Code.Enqcmds_r64_m512, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void enter_i_i() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.enter(0x40B7, -5), Instruction.Create(Code.Enterq_imm16_imm8, 0x40B7, -5));
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void enter_u_u() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.enter((ushort)0x40B7, (byte)0x7F), Instruction.Create(Code.Enterq_imm16_imm8, 0x40B7U, 0x7FU));
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void erets() {
			TestAssembler(c => c.erets(), Instruction.Create(Code.Erets));
		}

		[Fact]
		public void eretu() {
			TestAssembler(c => c.eretu(), Instruction.Create(Code.Eretu));
		}

		[Fact]
		public void extractps_r32_xmm_i() {
			TestAssembler(c => c.extractps(edx, xmm3, -5), Instruction.Create(Code.Extractps_rm32_xmm_imm8, Register.EDX, Register.XMM3, -5));
		}

		[Fact]
		public void extractps_r64_xmm_i() {
			TestAssembler(c => c.extractps(rdx, xmm3, -5), Instruction.Create(Code.Extractps_r64m32_xmm_imm8, Register.RDX, Register.XMM3, -5));
		}

		[Fact]
		public void extractps_m_xmm_i() {
			TestAssembler(c => c.extractps(__dword_ptr[rcx], xmm3, -5), Instruction.Create(Code.Extractps_rm32_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, -5));
		}

		[Fact]
		public void extractps_r32_xmm_u() {
			TestAssembler(c => c.extractps(edx, xmm3, (byte)0x7F), Instruction.Create(Code.Extractps_rm32_xmm_imm8, Register.EDX, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void extractps_r64_xmm_u() {
			TestAssembler(c => c.extractps(rdx, xmm3, (byte)0x7F), Instruction.Create(Code.Extractps_r64m32_xmm_imm8, Register.RDX, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void extractps_m_xmm_u() {
			TestAssembler(c => c.extractps(__dword_ptr[rcx], xmm3, (byte)0x7F), Instruction.Create(Code.Extractps_rm32_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, 0x7FU));
		}

		[Fact]
		public void extrq_xmm_xmm() {
			TestAssembler(c => c.extrq(xmm2, xmm3), Instruction.Create(Code.Extrq_xmm_xmm, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void extrq_xmm_i_i() {
			TestAssembler(c => c.extrq(xmm2, -5, -5), Instruction.Create(Code.Extrq_xmm_imm8_imm8, Register.XMM2, -5, -5));
		}

		[Fact]
		public void extrq_xmm_u_u() {
			TestAssembler(c => c.extrq(xmm2, (byte)0x7F, (byte)0x7F), Instruction.Create(Code.Extrq_xmm_imm8_imm8, Register.XMM2, 0x7FU, 0x7FU));
		}

		[Fact]
		public void f2xm1() {
			TestAssembler(c => c.f2xm1(), Instruction.Create(Code.F2xm1));
		}

		[Fact]
		public void fabs() {
			TestAssembler(c => c.fabs(), Instruction.Create(Code.Fabs));
		}

		[Fact]
		public void fadd_m() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.fadd(__qword_ptr[rdx]), Instruction.Create(Code.Fadd_m64fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.fadd(__dword_ptr[rdx]), Instruction.Create(Code.Fadd_m32fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.fadd(__zmmword_ptr[rdx]), Instruction.Create(Code.Fadd_m32fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void fadd_st_st() {
			{ /* if (dst == Register.ST0) */
				TestAssembler(c => c.fadd(st0, st1), Instruction.Create(Code.Fadd_st0_sti, Register.ST0, Register.ST1));
			} /* else */ TestAssembler(c => c.fadd(st1, st0), Instruction.Create(Code.Fadd_sti_st0, Register.ST1, Register.ST0));
		}

		[Fact]
		public void faddp_st_st() {
			TestAssembler(c => c.faddp(st1, st0), Instruction.Create(Code.Faddp_sti_st0, Register.ST1, Register.ST0));
		}

		[Fact]
		public void fbld_m() {
			TestAssembler(c => c.fbld(__[rcx]), Instruction.Create(Code.Fbld_m80bcd, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void fbstp_m() {
			TestAssembler(c => c.fbstp(__[rcx]), Instruction.Create(Code.Fbstp_m80bcd, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void fchs() {
			TestAssembler(c => c.fchs(), Instruction.Create(Code.Fchs));
		}

		[Fact]
		public void fclex() {
			TestAssembler(c => c.fclex(), Instruction.Create(Code.Fclex), TestInstrFlags.Fwait);
		}

		[Fact]
		public void fcmovb_st_st() {
			TestAssembler(c => c.fcmovb(st0, st1), Instruction.Create(Code.Fcmovb_st0_sti, Register.ST0, Register.ST1));
		}

		[Fact]
		public void fcmovbe_st_st() {
			TestAssembler(c => c.fcmovbe(st0, st1), Instruction.Create(Code.Fcmovbe_st0_sti, Register.ST0, Register.ST1));
		}

		[Fact]
		public void fcmove_st_st() {
			TestAssembler(c => c.fcmove(st0, st1), Instruction.Create(Code.Fcmove_st0_sti, Register.ST0, Register.ST1));
		}

		[Fact]
		public void fcmovnb_st_st() {
			TestAssembler(c => c.fcmovnb(st0, st1), Instruction.Create(Code.Fcmovnb_st0_sti, Register.ST0, Register.ST1));
		}

		[Fact]
		public void fcmovnbe_st_st() {
			TestAssembler(c => c.fcmovnbe(st0, st1), Instruction.Create(Code.Fcmovnbe_st0_sti, Register.ST0, Register.ST1));
		}

		[Fact]
		public void fcmovne_st_st() {
			TestAssembler(c => c.fcmovne(st0, st1), Instruction.Create(Code.Fcmovne_st0_sti, Register.ST0, Register.ST1));
		}

		[Fact]
		public void fcmovnu_st_st() {
			TestAssembler(c => c.fcmovnu(st0, st1), Instruction.Create(Code.Fcmovnu_st0_sti, Register.ST0, Register.ST1));
		}

		[Fact]
		public void fcmovu_st_st() {
			TestAssembler(c => c.fcmovu(st0, st1), Instruction.Create(Code.Fcmovu_st0_sti, Register.ST0, Register.ST1));
		}

		[Fact]
		public void fcom_m() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.fcom(__qword_ptr[rdx]), Instruction.Create(Code.Fcom_m64fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.fcom(__dword_ptr[rdx]), Instruction.Create(Code.Fcom_m32fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.fcom(__zmmword_ptr[rdx]), Instruction.Create(Code.Fcom_m32fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void fcom_st_st() {
			TestAssembler(c => c.fcom(st0, st1), Instruction.Create(Code.Fcom_st0_sti, Register.ST0, Register.ST1));
		}

		[Fact]
		public void fcomi_st_st() {
			TestAssembler(c => c.fcomi(st0, st1), Instruction.Create(Code.Fcomi_st0_sti, Register.ST0, Register.ST1));
		}

		[Fact]
		public void fcomip_st_st() {
			TestAssembler(c => c.fcomip(st0, st1), Instruction.Create(Code.Fcomip_st0_sti, Register.ST0, Register.ST1));
		}

		[Fact]
		public void fcomp_m() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.fcomp(__qword_ptr[rdx]), Instruction.Create(Code.Fcomp_m64fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.fcomp(__dword_ptr[rdx]), Instruction.Create(Code.Fcomp_m32fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.fcomp(__zmmword_ptr[rdx]), Instruction.Create(Code.Fcomp_m32fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void fcomp_st_st() {
			TestAssembler(c => c.fcomp(st0, st1), Instruction.Create(Code.Fcomp_st0_sti, Register.ST0, Register.ST1));
		}

		[Fact]
		public void fcompp() {
			TestAssembler(c => c.fcompp(), Instruction.Create(Code.Fcompp));
		}

		[Fact]
		public void fcos() {
			TestAssembler(c => c.fcos(), Instruction.Create(Code.Fcos));
		}

		[Fact]
		public void fdecstp() {
			TestAssembler(c => c.fdecstp(), Instruction.Create(Code.Fdecstp));
		}

		[Fact]
		public void fdisi() {
			TestAssembler(c => c.fdisi(), Instruction.Create(Code.Fdisi), TestInstrFlags.Fwait);
		}

		[Fact]
		public void fdiv_m() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.fdiv(__qword_ptr[rdx]), Instruction.Create(Code.Fdiv_m64fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.fdiv(__dword_ptr[rdx]), Instruction.Create(Code.Fdiv_m32fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.fdiv(__zmmword_ptr[rdx]), Instruction.Create(Code.Fdiv_m32fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void fdiv_st_st() {
			{ /* if (dst == Register.ST0) */
				TestAssembler(c => c.fdiv(st0, st1), Instruction.Create(Code.Fdiv_st0_sti, Register.ST0, Register.ST1));
			} /* else */ TestAssembler(c => c.fdiv(st1, st0), Instruction.Create(Code.Fdiv_sti_st0, Register.ST1, Register.ST0));
		}

		[Fact]
		public void fdivp_st_st() {
			TestAssembler(c => c.fdivp(st1, st0), Instruction.Create(Code.Fdivp_sti_st0, Register.ST1, Register.ST0));
		}

		[Fact]
		public void fdivr_m() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.fdivr(__qword_ptr[rdx]), Instruction.Create(Code.Fdivr_m64fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.fdivr(__dword_ptr[rdx]), Instruction.Create(Code.Fdivr_m32fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.fdivr(__zmmword_ptr[rdx]), Instruction.Create(Code.Fdivr_m32fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void fdivr_st_st() {
			{ /* if (dst == Register.ST0) */
				TestAssembler(c => c.fdivr(st0, st1), Instruction.Create(Code.Fdivr_st0_sti, Register.ST0, Register.ST1));
			} /* else */ TestAssembler(c => c.fdivr(st1, st0), Instruction.Create(Code.Fdivr_sti_st0, Register.ST1, Register.ST0));
		}

		[Fact]
		public void fdivrp_st_st() {
			TestAssembler(c => c.fdivrp(st1, st0), Instruction.Create(Code.Fdivrp_sti_st0, Register.ST1, Register.ST0));
		}

		[Fact]
		public void femms() {
			TestAssembler(c => c.femms(), Instruction.Create(Code.Femms));
		}

		[Fact]
		public void feni() {
			TestAssembler(c => c.feni(), Instruction.Create(Code.Feni), TestInstrFlags.Fwait);
		}

		[Fact]
		public void ffree_st() {
			TestAssembler(c => c.ffree(st1), Instruction.Create(Code.Ffree_sti, Register.ST1));
		}

		[Fact]
		public void ffreep_st() {
			TestAssembler(c => c.ffreep(st1), Instruction.Create(Code.Ffreep_sti, Register.ST1));
		}

		[Fact]
		public void fiadd_m() {
			{ /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.fiadd(__dword_ptr[rdx]), Instruction.Create(Code.Fiadd_m32int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.fiadd(__word_ptr[rdx]), Instruction.Create(Code.Fiadd_m16int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.fiadd(__zmmword_ptr[rdx]), Instruction.Create(Code.Fiadd_m16int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void ficom_m() {
			{ /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.ficom(__dword_ptr[rdx]), Instruction.Create(Code.Ficom_m32int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.ficom(__word_ptr[rdx]), Instruction.Create(Code.Ficom_m16int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.ficom(__zmmword_ptr[rdx]), Instruction.Create(Code.Ficom_m16int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void ficomp_m() {
			{ /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.ficomp(__dword_ptr[rdx]), Instruction.Create(Code.Ficomp_m32int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.ficomp(__word_ptr[rdx]), Instruction.Create(Code.Ficomp_m16int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.ficomp(__zmmword_ptr[rdx]), Instruction.Create(Code.Ficomp_m16int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void fidiv_m() {
			{ /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.fidiv(__dword_ptr[rdx]), Instruction.Create(Code.Fidiv_m32int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.fidiv(__word_ptr[rdx]), Instruction.Create(Code.Fidiv_m16int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.fidiv(__zmmword_ptr[rdx]), Instruction.Create(Code.Fidiv_m16int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void fidivr_m() {
			{ /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.fidivr(__dword_ptr[rdx]), Instruction.Create(Code.Fidivr_m32int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.fidivr(__word_ptr[rdx]), Instruction.Create(Code.Fidivr_m16int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.fidivr(__zmmword_ptr[rdx]), Instruction.Create(Code.Fidivr_m16int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void fild_m() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.fild(__qword_ptr[rdx]), Instruction.Create(Code.Fild_m64int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.fild(__dword_ptr[rdx]), Instruction.Create(Code.Fild_m32int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.fild(__word_ptr[rdx]), Instruction.Create(Code.Fild_m16int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.fild(__zmmword_ptr[rdx]), Instruction.Create(Code.Fild_m16int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void fimul_m() {
			{ /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.fimul(__dword_ptr[rdx]), Instruction.Create(Code.Fimul_m32int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.fimul(__word_ptr[rdx]), Instruction.Create(Code.Fimul_m16int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.fimul(__zmmword_ptr[rdx]), Instruction.Create(Code.Fimul_m16int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void fincstp() {
			TestAssembler(c => c.fincstp(), Instruction.Create(Code.Fincstp));
		}

		[Fact]
		public void finit() {
			TestAssembler(c => c.finit(), Instruction.Create(Code.Finit), TestInstrFlags.Fwait);
		}

		[Fact]
		public void fist_m() {
			{ /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.fist(__dword_ptr[rdx]), Instruction.Create(Code.Fist_m32int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.fist(__word_ptr[rdx]), Instruction.Create(Code.Fist_m16int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.fist(__zmmword_ptr[rdx]), Instruction.Create(Code.Fist_m16int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void fistp_m() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.fistp(__qword_ptr[rdx]), Instruction.Create(Code.Fistp_m64int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.fistp(__dword_ptr[rdx]), Instruction.Create(Code.Fistp_m32int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.fistp(__word_ptr[rdx]), Instruction.Create(Code.Fistp_m16int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.fistp(__zmmword_ptr[rdx]), Instruction.Create(Code.Fistp_m16int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void fisttp_m() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.fisttp(__qword_ptr[rdx]), Instruction.Create(Code.Fisttp_m64int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.fisttp(__dword_ptr[rdx]), Instruction.Create(Code.Fisttp_m32int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.fisttp(__word_ptr[rdx]), Instruction.Create(Code.Fisttp_m16int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.fisttp(__zmmword_ptr[rdx]), Instruction.Create(Code.Fisttp_m16int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void fisub_m() {
			{ /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.fisub(__dword_ptr[rdx]), Instruction.Create(Code.Fisub_m32int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.fisub(__word_ptr[rdx]), Instruction.Create(Code.Fisub_m16int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.fisub(__zmmword_ptr[rdx]), Instruction.Create(Code.Fisub_m16int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void fisubr_m() {
			{ /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.fisubr(__dword_ptr[rdx]), Instruction.Create(Code.Fisubr_m32int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.fisubr(__word_ptr[rdx]), Instruction.Create(Code.Fisubr_m16int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.fisubr(__zmmword_ptr[rdx]), Instruction.Create(Code.Fisubr_m16int, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void fld_st() {
			TestAssembler(c => c.fld(st1), Instruction.Create(Code.Fld_sti, Register.ST1));
		}

		[Fact]
		public void fld_m() {
			{ /* if (dst.Size == MemoryOperandSize.Tbyte) */
				TestAssembler(c => c.fld(__tword_ptr[rdx]), Instruction.Create(Code.Fld_m80fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.fld(__qword_ptr[rdx]), Instruction.Create(Code.Fld_m64fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.fld(__dword_ptr[rdx]), Instruction.Create(Code.Fld_m32fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.fld(__zmmword_ptr[rdx]), Instruction.Create(Code.Fld_m32fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void fld1() {
			TestAssembler(c => c.fld1(), Instruction.Create(Code.Fld1));
		}

		[Fact]
		public void fldcw_m() {
			TestAssembler(c => c.fldcw(__[rcx]), Instruction.Create(Code.Fldcw_m2byte, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void fldenv_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.fldenv(__[rcx]), Instruction.Create(Code.Fldenv_m28byte, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else skip !(Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void fldl2e() {
			TestAssembler(c => c.fldl2e(), Instruction.Create(Code.Fldl2e));
		}

		[Fact]
		public void fldl2t() {
			TestAssembler(c => c.fldl2t(), Instruction.Create(Code.Fldl2t));
		}

		[Fact]
		public void fldlg2() {
			TestAssembler(c => c.fldlg2(), Instruction.Create(Code.Fldlg2));
		}

		[Fact]
		public void fldln2() {
			TestAssembler(c => c.fldln2(), Instruction.Create(Code.Fldln2));
		}

		[Fact]
		public void fldpi() {
			TestAssembler(c => c.fldpi(), Instruction.Create(Code.Fldpi));
		}

		[Fact]
		public void fldz() {
			TestAssembler(c => c.fldz(), Instruction.Create(Code.Fldz));
		}

		[Fact]
		public void fmul_m() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.fmul(__qword_ptr[rdx]), Instruction.Create(Code.Fmul_m64fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.fmul(__dword_ptr[rdx]), Instruction.Create(Code.Fmul_m32fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.fmul(__zmmword_ptr[rdx]), Instruction.Create(Code.Fmul_m32fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void fmul_st_st() {
			{ /* if (dst == Register.ST0) */
				TestAssembler(c => c.fmul(st0, st1), Instruction.Create(Code.Fmul_st0_sti, Register.ST0, Register.ST1));
			} /* else */ TestAssembler(c => c.fmul(st1, st0), Instruction.Create(Code.Fmul_sti_st0, Register.ST1, Register.ST0));
		}

		[Fact]
		public void fmulp_st_st() {
			TestAssembler(c => c.fmulp(st1, st0), Instruction.Create(Code.Fmulp_sti_st0, Register.ST1, Register.ST0));
		}

		[Fact]
		public void fnclex() {
			TestAssembler(c => c.fnclex(), Instruction.Create(Code.Fnclex));
		}

		[Fact]
		public void fndisi() {
			TestAssembler(c => c.fndisi(), Instruction.Create(Code.Fndisi));
		}

		[Fact]
		public void fneni() {
			TestAssembler(c => c.fneni(), Instruction.Create(Code.Fneni));
		}

		[Fact]
		public void fninit() {
			TestAssembler(c => c.fninit(), Instruction.Create(Code.Fninit));
		}

		[Fact]
		public void fnop() {
			TestAssembler(c => c.fnop(), Instruction.Create(Code.Fnop));
		}

		[Fact]
		public void fnsave_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.fnsave(__[rcx]), Instruction.Create(Code.Fnsave_m108byte, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else skip !(Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void fnsetpm() {
			TestAssembler(c => c.fnsetpm(), Instruction.Create(Code.Fnsetpm));
		}

		[Fact]
		public void fnstcw_m() {
			TestAssembler(c => c.fnstcw(__[rcx]), Instruction.Create(Code.Fnstcw_m2byte, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void fnstenv_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.fnstenv(__[rcx]), Instruction.Create(Code.Fnstenv_m28byte, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else skip !(Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void fnstsw_r16() {
			TestAssembler(c => c.fnstsw(ax), Instruction.Create(Code.Fnstsw_AX, Register.AX));
		}

		[Fact]
		public void fnstsw_m() {
			TestAssembler(c => c.fnstsw(__[rcx]), Instruction.Create(Code.Fnstsw_m2byte, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void fpatan() {
			TestAssembler(c => c.fpatan(), Instruction.Create(Code.Fpatan));
		}

		[Fact]
		public void fprem() {
			TestAssembler(c => c.fprem(), Instruction.Create(Code.Fprem));
		}

		[Fact]
		public void fprem1() {
			TestAssembler(c => c.fprem1(), Instruction.Create(Code.Fprem1));
		}

		[Fact]
		public void fptan() {
			TestAssembler(c => c.fptan(), Instruction.Create(Code.Fptan));
		}

		[Fact]
		public void frndint() {
			TestAssembler(c => c.frndint(), Instruction.Create(Code.Frndint));
		}

		[Fact]
		public void frstor_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.frstor(__[rcx]), Instruction.Create(Code.Frstor_m108byte, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else skip !(Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void fsave_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.fsave(__[rcx]), Instruction.Create(Code.Fsave_m108byte, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.Fwait);
			} /* else skip !(Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void fscale() {
			TestAssembler(c => c.fscale(), Instruction.Create(Code.Fscale));
		}

		[Fact]
		public void fsetpm() {
			TestAssembler(c => c.fsetpm(), Instruction.Create(Code.Fsetpm), TestInstrFlags.Fwait);
		}

		[Fact]
		public void fsin() {
			TestAssembler(c => c.fsin(), Instruction.Create(Code.Fsin));
		}

		[Fact]
		public void fsincos() {
			TestAssembler(c => c.fsincos(), Instruction.Create(Code.Fsincos));
		}

		[Fact]
		public void fsqrt() {
			TestAssembler(c => c.fsqrt(), Instruction.Create(Code.Fsqrt));
		}

		[Fact]
		public void fst_st() {
			TestAssembler(c => c.fst(st1), Instruction.Create(Code.Fst_sti, Register.ST1));
		}

		[Fact]
		public void fst_m() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.fst(__qword_ptr[rdx]), Instruction.Create(Code.Fst_m64fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.fst(__dword_ptr[rdx]), Instruction.Create(Code.Fst_m32fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.fst(__zmmword_ptr[rdx]), Instruction.Create(Code.Fst_m32fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void fstcw_m() {
			TestAssembler(c => c.fstcw(__[rcx]), Instruction.Create(Code.Fstcw_m2byte, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.Fwait);
		}

		[Fact]
		public void fstenv_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.fstenv(__[rcx]), Instruction.Create(Code.Fstenv_m28byte, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.Fwait);
			} /* else skip !(Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void fstp_st() {
			TestAssembler(c => c.fstp(st1), Instruction.Create(Code.Fstp_sti, Register.ST1));
		}

		[Fact]
		public void fstp_m() {
			{ /* if (dst.Size == MemoryOperandSize.Tbyte) */
				TestAssembler(c => c.fstp(__tword_ptr[rdx]), Instruction.Create(Code.Fstp_m80fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.fstp(__qword_ptr[rdx]), Instruction.Create(Code.Fstp_m64fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.fstp(__dword_ptr[rdx]), Instruction.Create(Code.Fstp_m32fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.fstp(__zmmword_ptr[rdx]), Instruction.Create(Code.Fstp_m32fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void fstpnce_st() {
			TestAssembler(c => c.fstpnce(st1), Instruction.Create(Code.Fstpnce_sti, Register.ST1));
		}

		[Fact]
		public void fstsw_r16() {
			TestAssembler(c => c.fstsw(ax), Instruction.Create(Code.Fstsw_AX, Register.AX), TestInstrFlags.Fwait);
		}

		[Fact]
		public void fstsw_m() {
			TestAssembler(c => c.fstsw(__[rcx]), Instruction.Create(Code.Fstsw_m2byte, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.Fwait);
		}

		[Fact]
		public void fsub_m() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.fsub(__qword_ptr[rdx]), Instruction.Create(Code.Fsub_m64fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.fsub(__dword_ptr[rdx]), Instruction.Create(Code.Fsub_m32fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.fsub(__zmmword_ptr[rdx]), Instruction.Create(Code.Fsub_m32fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void fsub_st_st() {
			{ /* if (dst == Register.ST0) */
				TestAssembler(c => c.fsub(st0, st1), Instruction.Create(Code.Fsub_st0_sti, Register.ST0, Register.ST1));
			} /* else */ TestAssembler(c => c.fsub(st1, st0), Instruction.Create(Code.Fsub_sti_st0, Register.ST1, Register.ST0));
		}

		[Fact]
		public void fsubp_st_st() {
			TestAssembler(c => c.fsubp(st1, st0), Instruction.Create(Code.Fsubp_sti_st0, Register.ST1, Register.ST0));
		}

		[Fact]
		public void fsubr_m() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.fsubr(__qword_ptr[rdx]), Instruction.Create(Code.Fsubr_m64fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.fsubr(__dword_ptr[rdx]), Instruction.Create(Code.Fsubr_m32fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.fsubr(__zmmword_ptr[rdx]), Instruction.Create(Code.Fsubr_m32fp, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void fsubr_st_st() {
			{ /* if (dst == Register.ST0) */
				TestAssembler(c => c.fsubr(st0, st1), Instruction.Create(Code.Fsubr_st0_sti, Register.ST0, Register.ST1));
			} /* else */ TestAssembler(c => c.fsubr(st1, st0), Instruction.Create(Code.Fsubr_sti_st0, Register.ST1, Register.ST0));
		}

		[Fact]
		public void fsubrp_st_st() {
			TestAssembler(c => c.fsubrp(st1, st0), Instruction.Create(Code.Fsubrp_sti_st0, Register.ST1, Register.ST0));
		}

		[Fact]
		public void ftst() {
			TestAssembler(c => c.ftst(), Instruction.Create(Code.Ftst));
		}

		[Fact]
		public void fucom_st_st() {
			TestAssembler(c => c.fucom(st0, st1), Instruction.Create(Code.Fucom_st0_sti, Register.ST0, Register.ST1));
		}

		[Fact]
		public void fucomi_st_st() {
			TestAssembler(c => c.fucomi(st0, st1), Instruction.Create(Code.Fucomi_st0_sti, Register.ST0, Register.ST1));
		}

		[Fact]
		public void fucomip_st_st() {
			TestAssembler(c => c.fucomip(st0, st1), Instruction.Create(Code.Fucomip_st0_sti, Register.ST0, Register.ST1));
		}

		[Fact]
		public void fucomp_st_st() {
			TestAssembler(c => c.fucomp(st0, st1), Instruction.Create(Code.Fucomp_st0_sti, Register.ST0, Register.ST1));
		}

		[Fact]
		public void fucompp() {
			TestAssembler(c => c.fucompp(), Instruction.Create(Code.Fucompp));
		}

		[Fact]
		public void fxam() {
			TestAssembler(c => c.fxam(), Instruction.Create(Code.Fxam));
		}

		[Fact]
		public void fxch_st_st() {
			TestAssembler(c => c.fxch(st0, st1), Instruction.Create(Code.Fxch_st0_sti, Register.ST0, Register.ST1));
		}

		[Fact]
		public void fxrstor_m() {
			TestAssembler(c => c.fxrstor(__[rcx]), Instruction.Create(Code.Fxrstor_m512byte, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void fxrstor64_m() {
			TestAssembler(c => c.fxrstor64(__[rcx]), Instruction.Create(Code.Fxrstor64_m512byte, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void fxsave_m() {
			TestAssembler(c => c.fxsave(__[rcx]), Instruction.Create(Code.Fxsave_m512byte, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void fxsave64_m() {
			TestAssembler(c => c.fxsave64(__[rcx]), Instruction.Create(Code.Fxsave64_m512byte, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void fxtract() {
			TestAssembler(c => c.fxtract(), Instruction.Create(Code.Fxtract));
		}

		[Fact]
		public void fyl2x() {
			TestAssembler(c => c.fyl2x(), Instruction.Create(Code.Fyl2x));
		}

		[Fact]
		public void fyl2xp1() {
			TestAssembler(c => c.fyl2xp1(), Instruction.Create(Code.Fyl2xp1));
		}

		[Fact]
		public void getsec() {
			TestAssembler(c => c.getsec(), Instruction.Create(Code.Getsecd));
		}

		[Fact]
		public void getsecq() {
			TestAssembler(c => c.getsecq(), Instruction.Create(Code.Getsecq));
		}

		[Fact]
		public void gf2p8affineinvqb_xmm_xmm_i() {
			TestAssembler(c => c.gf2p8affineinvqb(xmm2, xmm3, -5), Instruction.Create(Code.Gf2p8affineinvqb_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void gf2p8affineinvqb_xmm_m_i() {
			TestAssembler(c => c.gf2p8affineinvqb(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Gf2p8affineinvqb_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void gf2p8affineinvqb_xmm_xmm_u() {
			TestAssembler(c => c.gf2p8affineinvqb(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Gf2p8affineinvqb_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void gf2p8affineinvqb_xmm_m_u() {
			TestAssembler(c => c.gf2p8affineinvqb(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Gf2p8affineinvqb_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void gf2p8affineqb_xmm_xmm_i() {
			TestAssembler(c => c.gf2p8affineqb(xmm2, xmm3, -5), Instruction.Create(Code.Gf2p8affineqb_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void gf2p8affineqb_xmm_m_i() {
			TestAssembler(c => c.gf2p8affineqb(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Gf2p8affineqb_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void gf2p8affineqb_xmm_xmm_u() {
			TestAssembler(c => c.gf2p8affineqb(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Gf2p8affineqb_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void gf2p8affineqb_xmm_m_u() {
			TestAssembler(c => c.gf2p8affineqb(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Gf2p8affineqb_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void gf2p8mulb_xmm_xmm() {
			TestAssembler(c => c.gf2p8mulb(xmm2, xmm3), Instruction.Create(Code.Gf2p8mulb_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void gf2p8mulb_xmm_m() {
			TestAssembler(c => c.gf2p8mulb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Gf2p8mulb_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void haddpd_xmm_xmm() {
			TestAssembler(c => c.haddpd(xmm2, xmm3), Instruction.Create(Code.Haddpd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void haddpd_xmm_m() {
			TestAssembler(c => c.haddpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Haddpd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void haddps_xmm_xmm() {
			TestAssembler(c => c.haddps(xmm2, xmm3), Instruction.Create(Code.Haddps_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void haddps_xmm_m() {
			TestAssembler(c => c.haddps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Haddps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void hlt() {
			TestAssembler(c => c.hlt(), Instruction.Create(Code.Hlt));
		}

		[Fact]
		public void hreset_i() {
			TestAssembler(c => c.hreset(-5), Instruction.Create(Code.Hreset_imm8, -5));
		}

		[Fact]
		public void hreset_u() {
			TestAssembler(c => c.hreset((byte)0x7F), Instruction.Create(Code.Hreset_imm8, 0x7FU));
		}

		[Fact]
		public void hsubpd_xmm_xmm() {
			TestAssembler(c => c.hsubpd(xmm2, xmm3), Instruction.Create(Code.Hsubpd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void hsubpd_xmm_m() {
			TestAssembler(c => c.hsubpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Hsubpd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void hsubps_xmm_xmm() {
			TestAssembler(c => c.hsubps(xmm2, xmm3), Instruction.Create(Code.Hsubps_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void hsubps_xmm_m() {
			TestAssembler(c => c.hsubps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Hsubps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void idiv_r8() {
			TestAssembler(c => c.idiv(dl), Instruction.Create(Code.Idiv_rm8, Register.DL));
		}

		[Fact]
		public void idiv_r16() {
			TestAssembler(c => c.idiv(dx), Instruction.Create(Code.Idiv_rm16, Register.DX));
		}

		[Fact]
		public void idiv_r32() {
			TestAssembler(c => c.idiv(edx), Instruction.Create(Code.Idiv_rm32, Register.EDX));
		}

		[Fact]
		public void idiv_r64() {
			TestAssembler(c => c.idiv(rdx), Instruction.Create(Code.Idiv_rm64, Register.RDX));
		}

		[Fact]
		public void idiv_m() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.idiv(__qword_ptr[rdx]), Instruction.Create(Code.Idiv_rm64, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.idiv(__dword_ptr[rdx]), Instruction.Create(Code.Idiv_rm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.idiv(__word_ptr[rdx]), Instruction.Create(Code.Idiv_rm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.idiv(__byte_ptr[rdx]), Instruction.Create(Code.Idiv_rm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.idiv(__zmmword_ptr[rdx]), Instruction.Create(Code.Idiv_rm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void imul_r8() {
			TestAssembler(c => c.imul(dl), Instruction.Create(Code.Imul_rm8, Register.DL));
		}

		[Fact]
		public void imul_r16() {
			TestAssembler(c => c.imul(dx), Instruction.Create(Code.Imul_rm16, Register.DX));
		}

		[Fact]
		public void imul_r32() {
			TestAssembler(c => c.imul(edx), Instruction.Create(Code.Imul_rm32, Register.EDX));
		}

		[Fact]
		public void imul_r64() {
			TestAssembler(c => c.imul(rdx), Instruction.Create(Code.Imul_rm64, Register.RDX));
		}

		[Fact]
		public void imul_m() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.imul(__qword_ptr[rdx]), Instruction.Create(Code.Imul_rm64, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.imul(__dword_ptr[rdx]), Instruction.Create(Code.Imul_rm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.imul(__word_ptr[rdx]), Instruction.Create(Code.Imul_rm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.imul(__byte_ptr[rdx]), Instruction.Create(Code.Imul_rm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.imul(__zmmword_ptr[rdx]), Instruction.Create(Code.Imul_rm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void imul_r16_r16() {
			TestAssembler(c => c.imul(dx, bx), Instruction.Create(Code.Imul_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void imul_r32_r32() {
			TestAssembler(c => c.imul(edx, ebx), Instruction.Create(Code.Imul_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void imul_r64_r64() {
			TestAssembler(c => c.imul(rdx, rbx), Instruction.Create(Code.Imul_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void imul_r16_m() {
			TestAssembler(c => c.imul(dx, __word_ptr[rcx]), Instruction.Create(Code.Imul_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void imul_r32_m() {
			TestAssembler(c => c.imul(edx, __dword_ptr[rcx]), Instruction.Create(Code.Imul_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void imul_r64_m() {
			TestAssembler(c => c.imul(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Imul_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void imul_r16_r16_i() {
			{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.imul(dx, bx, -0x80), Instruction.Create(Code.Imul_r16_rm16_imm8, Register.DX, Register.BX, -0x80));
				TestAssembler(c => c.imul(dx, bx, 0x7F), Instruction.Create(Code.Imul_r16_rm16_imm8, Register.DX, Register.BX, 0x7F));
			} /* else */ TestAssembler(c => c.imul(dx, bx, 0x40B7), Instruction.Create(Code.Imul_r16_rm16_imm16, Register.DX, Register.BX, 0x40B7));
		}

		[Fact]
		public void imul_r32_r32_i() {
			{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.imul(edx, ebx, -0x80), Instruction.Create(Code.Imul_r32_rm32_imm8, Register.EDX, Register.EBX, -0x80));
				TestAssembler(c => c.imul(edx, ebx, 0x7F), Instruction.Create(Code.Imul_r32_rm32_imm8, Register.EDX, Register.EBX, 0x7F));
			} /* else */ TestAssembler(c => c.imul(edx, ebx, 0x7FFFFFFF), Instruction.Create(Code.Imul_r32_rm32_imm32, Register.EDX, Register.EBX, 0x7FFFFFFF));
		}

		[Fact]
		public void imul_r64_r64_i() {
			{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.imul(rdx, rbx, -0x80), Instruction.Create(Code.Imul_r64_rm64_imm8, Register.RDX, Register.RBX, -0x80));
				TestAssembler(c => c.imul(rdx, rbx, 0x7F), Instruction.Create(Code.Imul_r64_rm64_imm8, Register.RDX, Register.RBX, 0x7F));
			} /* else */ TestAssembler(c => c.imul(rdx, rbx, -0x80000000), Instruction.Create(Code.Imul_r64_rm64_imm32, Register.RDX, Register.RBX, -0x80000000));
		}

		[Fact]
		public void imul_r16_m_i() {
			{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.imul(dx, __word_ptr[rcx], -0x80), Instruction.Create(Code.Imul_r16_rm16_imm8, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -0x80));
				TestAssembler(c => c.imul(dx, __word_ptr[rcx], 0x7F), Instruction.Create(Code.Imul_r16_rm16_imm8, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7F));
			} /* else */ TestAssembler(c => c.imul(dx, __word_ptr[rcx], 0x40B7), Instruction.Create(Code.Imul_r16_rm16_imm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x40B7));
		}

		[Fact]
		public void imul_r32_m_i() {
			{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.imul(edx, __dword_ptr[rcx], -0x80), Instruction.Create(Code.Imul_r32_rm32_imm8, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -0x80));
				TestAssembler(c => c.imul(edx, __dword_ptr[rcx], 0x7F), Instruction.Create(Code.Imul_r32_rm32_imm8, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7F));
			} /* else */ TestAssembler(c => c.imul(edx, __dword_ptr[rcx], 0x7FFFFFFF), Instruction.Create(Code.Imul_r32_rm32_imm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFF));
		}

		[Fact]
		public void imul_r64_m_i() {
			{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.imul(rdx, __qword_ptr[rcx], -0x80), Instruction.Create(Code.Imul_r64_rm64_imm8, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -0x80));
				TestAssembler(c => c.imul(rdx, __qword_ptr[rcx], 0x7F), Instruction.Create(Code.Imul_r64_rm64_imm8, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7F));
			} /* else */ TestAssembler(c => c.imul(rdx, __qword_ptr[rcx], -0x80000000), Instruction.Create(Code.Imul_r64_rm64_imm32, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -0x80000000));
		}

		[Fact]
		public void imul_r16_r16_u() {
			{ /* if (imm <= (ushort)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
				TestAssembler(c => c.imul(dx, bx, (ushort)0xFF80), Instruction.Create(Code.Imul_r16_rm16_imm8, Register.DX, Register.BX, 0xFF80U));
				TestAssembler(c => c.imul(dx, bx, (ushort)0x7F), Instruction.Create(Code.Imul_r16_rm16_imm8, Register.DX, Register.BX, 0x7FU));
			} /* else */ TestAssembler(c => c.imul(dx, bx, (ushort)0x40B7), Instruction.Create(Code.Imul_r16_rm16_imm16, Register.DX, Register.BX, 0x40B7U));
		}

		[Fact]
		public void imul_r32_r32_u() {
			{ /* if (imm <= (uint)sbyte.MaxValue || 0xFFFF_FF80 <= imm) */
				TestAssembler(c => c.imul(edx, ebx, 0xFFFFFF80U), Instruction.Create(Code.Imul_r32_rm32_imm8, Register.EDX, Register.EBX, 0xFFFFFF80U));
				TestAssembler(c => c.imul(edx, ebx, 0x7FU), Instruction.Create(Code.Imul_r32_rm32_imm8, Register.EDX, Register.EBX, 0x7FU));
			} /* else */ TestAssembler(c => c.imul(edx, ebx, 0x7FFFFFFFU), Instruction.Create(Code.Imul_r32_rm32_imm32, Register.EDX, Register.EBX, 0x7FFFFFFFU));
		}

		[Fact]
		public void imul_r16_m_u() {
			{ /* if (imm <= (ushort)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
				TestAssembler(c => c.imul(dx, __word_ptr[rcx], (ushort)0xFF80), Instruction.Create(Code.Imul_r16_rm16_imm8, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0xFF80U));
				TestAssembler(c => c.imul(dx, __word_ptr[rcx], (ushort)0x7F), Instruction.Create(Code.Imul_r16_rm16_imm8, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
			} /* else */ TestAssembler(c => c.imul(dx, __word_ptr[rcx], (ushort)0x40B7), Instruction.Create(Code.Imul_r16_rm16_imm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x40B7U));
		}

		[Fact]
		public void imul_r32_m_u() {
			{ /* if (imm <= (uint)sbyte.MaxValue || 0xFFFF_FF80 <= imm) */
				TestAssembler(c => c.imul(edx, __dword_ptr[rcx], 0xFFFFFF80U), Instruction.Create(Code.Imul_r32_rm32_imm8, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0xFFFFFF80U));
				TestAssembler(c => c.imul(edx, __dword_ptr[rcx], 0x7FU), Instruction.Create(Code.Imul_r32_rm32_imm8, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
			} /* else */ TestAssembler(c => c.imul(edx, __dword_ptr[rcx], 0x7FFFFFFFU), Instruction.Create(Code.Imul_r32_rm32_imm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFFU));
		}

		[Fact]
		public void @in_r8_r16() {
			TestAssembler(c => c.@in(al, dx), Instruction.Create(Code.In_AL_DX, Register.AL, Register.DX));
		}

		[Fact]
		public void @in_r16_r16() {
			TestAssembler(c => c.@in(ax, dx), Instruction.Create(Code.In_AX_DX, Register.AX, Register.DX));
		}

		[Fact]
		public void @in_r32_r16() {
			TestAssembler(c => c.@in(eax, dx), Instruction.Create(Code.In_EAX_DX, Register.EAX, Register.DX));
		}

		[Fact]
		public void @in_r8_i() {
			TestAssembler(c => c.@in(al, -5), Instruction.Create(Code.In_AL_imm8, Register.AL, -5));
		}

		[Fact]
		public void @in_r16_i() {
			TestAssembler(c => c.@in(ax, -5), Instruction.Create(Code.In_AX_imm8, Register.AX, -5));
		}

		[Fact]
		public void @in_r32_i() {
			TestAssembler(c => c.@in(eax, -5), Instruction.Create(Code.In_EAX_imm8, Register.EAX, -5));
		}

		[Fact]
		public void @in_r8_u() {
			TestAssembler(c => c.@in(al, (byte)0x7F), Instruction.Create(Code.In_AL_imm8, Register.AL, 0x7FU));
		}

		[Fact]
		public void @in_r16_u() {
			TestAssembler(c => c.@in(ax, (byte)0x7F), Instruction.Create(Code.In_AX_imm8, Register.AX, 0x7FU));
		}

		[Fact]
		public void @in_r32_u() {
			TestAssembler(c => c.@in(eax, (byte)0x7F), Instruction.Create(Code.In_EAX_imm8, Register.EAX, 0x7FU));
		}

		[Fact]
		public void inc_r8() {
			TestAssembler(c => c.inc(dl), Instruction.Create(Code.Inc_rm8, Register.DL));
		}

		[Fact]
		public void inc_r16() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.inc(dx), Instruction.Create(Code.Inc_rm16, Register.DX));
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void inc_r32() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.inc(edx), Instruction.Create(Code.Inc_rm32, Register.EDX));
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void inc_r64() {
			TestAssembler(c => c.inc(rdx), Instruction.Create(Code.Inc_rm64, Register.RDX));
		}

		[Fact]
		public void inc_m() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.inc(__qword_ptr[rdx]), Instruction.Create(Code.Inc_rm64, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.inc(__dword_ptr[rdx]), Instruction.Create(Code.Inc_rm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.inc(__word_ptr[rdx]), Instruction.Create(Code.Inc_rm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.inc(__byte_ptr[rdx]), Instruction.Create(Code.Inc_rm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.inc(__zmmword_ptr[rdx]), Instruction.Create(Code.Inc_rm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void incsspd_r32() {
			TestAssembler(c => c.incsspd(edx), Instruction.Create(Code.Incsspd_r32, Register.EDX));
		}

		[Fact]
		public void incsspq_r64() {
			TestAssembler(c => c.incsspq(rdx), Instruction.Create(Code.Incsspq_r64, Register.RDX));
		}

		[Fact]
		public void insb() {
			TestAssembler(c => c.insb(), Instruction.CreateInsb(64));
		}

		[Fact]
		public void insd() {
			TestAssembler(c => c.insd(), Instruction.CreateInsd(64));
		}

		[Fact]
		public void insertps_xmm_xmm_i() {
			TestAssembler(c => c.insertps(xmm2, xmm3, -5), Instruction.Create(Code.Insertps_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void insertps_xmm_m_i() {
			TestAssembler(c => c.insertps(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Insertps_xmm_xmmm32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void insertps_xmm_xmm_u() {
			TestAssembler(c => c.insertps(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Insertps_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void insertps_xmm_m_u() {
			TestAssembler(c => c.insertps(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Insertps_xmm_xmmm32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void insertq_xmm_xmm() {
			TestAssembler(c => c.insertq(xmm2, xmm3), Instruction.Create(Code.Insertq_xmm_xmm, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void insertq_xmm_xmm_i_i() {
			TestAssembler(c => c.insertq(xmm2, xmm3, -5, -5), Instruction.Create(Code.Insertq_xmm_xmm_imm8_imm8, Register.XMM2, Register.XMM3, -5, -5));
		}

		[Fact]
		public void insertq_xmm_xmm_u_u() {
			TestAssembler(c => c.insertq(xmm2, xmm3, (byte)0x7F, (byte)0x7F), Instruction.Create(Code.Insertq_xmm_xmm_imm8_imm8, Register.XMM2, Register.XMM3, 0x7FU, 0x7FU));
		}

		[Fact]
		public void insw() {
			TestAssembler(c => c.insw(), Instruction.CreateInsw(64));
		}

		[Fact]
		public void @int_i() {
			TestAssembler(c => c.@int(-5), Instruction.Create(Code.Int_imm8, -5));
		}

		[Fact]
		public void @int_u() {
			TestAssembler(c => c.@int((byte)0x7F), Instruction.Create(Code.Int_imm8, 0x7FU));
		}

		[Fact]
		public void int1() {
			TestAssembler(c => c.int1(), Instruction.Create(Code.Int1));
		}

		[Fact]
		public void int3() {
			TestAssembler(c => c.int3(), Instruction.Create(Code.Int3));
		}

		[Fact]
		public void invd() {
			TestAssembler(c => c.invd(), Instruction.Create(Code.Invd));
		}

		[Fact]
		public void invept_r64_m() {
			TestAssembler(c => c.invept(rdx, __[rcx]), Instruction.Create(Code.Invept_r64_m128, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void invlpg_m() {
			TestAssembler(c => c.invlpg(__[rcx]), Instruction.Create(Code.Invlpg_m, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void invlpga() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.invlpga(), Instruction.Create(Code.Invlpgaq));
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void invlpgb() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.invlpgb(), Instruction.Create(Code.Invlpgbq));
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void invpcid_r64_m() {
			TestAssembler(c => c.invpcid(rdx, __[rcx]), Instruction.Create(Code.Invpcid_r64_m128, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void invvpid_r64_m() {
			TestAssembler(c => c.invvpid(rdx, __[rcx]), Instruction.Create(Code.Invvpid_r64_m128, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void iret() {
			TestAssembler(c => c.iret(), Instruction.Create(Code.Iretw));
		}

		[Fact]
		public void iretd() {
			TestAssembler(c => c.iretd(), Instruction.Create(Code.Iretd));
		}

		[Fact]
		public void iretq() {
			TestAssembler(c => c.iretq(), Instruction.Create(Code.Iretq));
		}

		[Fact]
		public void ja_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.ja(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Ja_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.ja(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Ja_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void ja_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.ja(0x31D0UL), Instruction.CreateBranch(Code.Ja_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.ja(0x31D0UL), Instruction.CreateBranch(Code.Ja_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jae_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jae(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jae_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jae(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jae_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jae_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jae(0x31D0UL), Instruction.CreateBranch(Code.Jae_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jae(0x31D0UL), Instruction.CreateBranch(Code.Jae_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jb_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jb(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jb_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jb(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jb_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jb_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jb(0x31D0UL), Instruction.CreateBranch(Code.Jb_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jb(0x31D0UL), Instruction.CreateBranch(Code.Jb_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jbe_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jbe(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jbe_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jbe(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jbe_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jbe_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jbe(0x31D0UL), Instruction.CreateBranch(Code.Jbe_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jbe(0x31D0UL), Instruction.CreateBranch(Code.Jbe_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jc_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jc(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jb_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jc(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jb_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jc_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jc(0x31D0UL), Instruction.CreateBranch(Code.Jb_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jc(0x31D0UL), Instruction.CreateBranch(Code.Jb_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void je_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.je(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Je_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.je(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Je_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void je_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.je(0x31D0UL), Instruction.CreateBranch(Code.Je_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.je(0x31D0UL), Instruction.CreateBranch(Code.Je_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jg_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jg(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jg_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jg(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jg_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jg_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jg(0x31D0UL), Instruction.CreateBranch(Code.Jg_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jg(0x31D0UL), Instruction.CreateBranch(Code.Jg_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jge_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jge(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jge_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jge(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jge_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jge_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jge(0x31D0UL), Instruction.CreateBranch(Code.Jge_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jge(0x31D0UL), Instruction.CreateBranch(Code.Jge_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jl_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jl(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jl_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jl(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jl_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jl_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jl(0x31D0UL), Instruction.CreateBranch(Code.Jl_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jl(0x31D0UL), Instruction.CreateBranch(Code.Jl_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jle_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jle(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jle_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jle(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jle_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jle_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jle(0x31D0UL), Instruction.CreateBranch(Code.Jle_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jle(0x31D0UL), Instruction.CreateBranch(Code.Jle_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jmp_r16() {
			TestAssembler(c => c.jmp(dx), Instruction.Create(Code.Jmp_rm16, Register.DX), decoderOptions: DecoderOptions.AMD);
		}

		[Fact]
		public void jmp_r64() {
			TestAssembler(c => c.jmp(rdx), Instruction.Create(Code.Jmp_rm64, Register.RDX));
		}

		[Fact]
		public void jmp_m() {
			{ /* if (dst.Size == MemoryOperandSize.Tbyte) */
				TestAssembler(c => c.jmp(__tword_ptr[rdx]), Instruction.Create(Code.Jmp_m1664, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.jmp(__qword_ptr[rdx]), Instruction.Create(Code.Jmp_rm64, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Fword) */
				TestAssembler(c => c.jmp(__fword_ptr[rdx]), Instruction.Create(Code.Jmp_m1632, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				{ /* if (Bitness >= 32) */
					// Skipping Jmp_rm32 - Not supported by current bitness
				} /* else skip !(Bitness >= 32) not supported by this Assembler bitness */
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.jmp(__word_ptr[rdx]), Instruction.Create(Code.Jmp_rm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), decoderOptions: DecoderOptions.AMD);
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.jmp(__zmmword_ptr[rdx]), Instruction.Create(Code.Jmp_rm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), decoderOptions: DecoderOptions.AMD);
				});
			}
		}

		[Fact]
		public void jmp_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jmp(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jmp_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jmp(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jmp_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jmp_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jmp(0x31D0UL), Instruction.CreateBranch(Code.Jmp_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jmp(0x31D0UL), Instruction.CreateBranch(Code.Jmp_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jna_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jna(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jbe_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jna(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jbe_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jna_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jna(0x31D0UL), Instruction.CreateBranch(Code.Jbe_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jna(0x31D0UL), Instruction.CreateBranch(Code.Jbe_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jnae_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jnae(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jb_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jnae(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jb_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jnae_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jnae(0x31D0UL), Instruction.CreateBranch(Code.Jb_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jnae(0x31D0UL), Instruction.CreateBranch(Code.Jb_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jnb_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jnb(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jae_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jnb(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jae_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jnb_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jnb(0x31D0UL), Instruction.CreateBranch(Code.Jae_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jnb(0x31D0UL), Instruction.CreateBranch(Code.Jae_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jnbe_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jnbe(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Ja_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jnbe(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Ja_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jnbe_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jnbe(0x31D0UL), Instruction.CreateBranch(Code.Ja_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jnbe(0x31D0UL), Instruction.CreateBranch(Code.Ja_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jnc_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jnc(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jae_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jnc(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jae_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jnc_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jnc(0x31D0UL), Instruction.CreateBranch(Code.Jae_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jnc(0x31D0UL), Instruction.CreateBranch(Code.Jae_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jne_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jne(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jne_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jne(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jne_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jne_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jne(0x31D0UL), Instruction.CreateBranch(Code.Jne_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jne(0x31D0UL), Instruction.CreateBranch(Code.Jne_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jng_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jng(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jle_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jng(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jle_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jng_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jng(0x31D0UL), Instruction.CreateBranch(Code.Jle_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jng(0x31D0UL), Instruction.CreateBranch(Code.Jle_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jnge_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jnge(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jl_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jnge(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jl_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jnge_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jnge(0x31D0UL), Instruction.CreateBranch(Code.Jl_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jnge(0x31D0UL), Instruction.CreateBranch(Code.Jl_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jnl_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jnl(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jge_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jnl(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jge_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jnl_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jnl(0x31D0UL), Instruction.CreateBranch(Code.Jge_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jnl(0x31D0UL), Instruction.CreateBranch(Code.Jge_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jnle_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jnle(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jg_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jnle(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jg_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jnle_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jnle(0x31D0UL), Instruction.CreateBranch(Code.Jg_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jnle(0x31D0UL), Instruction.CreateBranch(Code.Jg_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jno_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jno(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jno_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jno(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jno_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jno_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jno(0x31D0UL), Instruction.CreateBranch(Code.Jno_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jno(0x31D0UL), Instruction.CreateBranch(Code.Jno_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jnp_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jnp(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jnp_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jnp(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jnp_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jnp_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jnp(0x31D0UL), Instruction.CreateBranch(Code.Jnp_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jnp(0x31D0UL), Instruction.CreateBranch(Code.Jnp_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jns_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jns(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jns_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jns(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jns_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jns_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jns(0x31D0UL), Instruction.CreateBranch(Code.Jns_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jns(0x31D0UL), Instruction.CreateBranch(Code.Jns_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jnz_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jnz(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jne_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jnz(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jne_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jnz_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jnz(0x31D0UL), Instruction.CreateBranch(Code.Jne_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jnz(0x31D0UL), Instruction.CreateBranch(Code.Jne_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jo_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jo(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jo_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jo(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jo_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jo_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jo(0x31D0UL), Instruction.CreateBranch(Code.Jo_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jo(0x31D0UL), Instruction.CreateBranch(Code.Jo_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jp_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jp(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jp_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jp(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jp_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jp_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jp(0x31D0UL), Instruction.CreateBranch(Code.Jp_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jp(0x31D0UL), Instruction.CreateBranch(Code.Jp_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jpe_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jpe(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jp_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jpe(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jp_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jpe_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jpe(0x31D0UL), Instruction.CreateBranch(Code.Jp_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jpe(0x31D0UL), Instruction.CreateBranch(Code.Jp_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jpo_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jpo(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jnp_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jpo(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jnp_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jpo_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jpo(0x31D0UL), Instruction.CreateBranch(Code.Jnp_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jpo(0x31D0UL), Instruction.CreateBranch(Code.Jnp_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jrcxz_l() {
			TestAssembler(c => c.jrcxz(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Jrcxz_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.Branch);
		}

		[Fact]
		public void jrcxz_lu64() {
			TestAssembler(c => c.jrcxz(0x31D0UL), Instruction.CreateBranch(Code.Jrcxz_rel8_64, 0x31D0UL), TestInstrFlags.BranchU64);
		}

		[Fact]
		public void js_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.js(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Js_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.js(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Js_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void js_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.js(0x31D0UL), Instruction.CreateBranch(Code.Js_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.js(0x31D0UL), Instruction.CreateBranch(Code.Js_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jz_l() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jz(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Je_rel8_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferShortBranch | TestInstrFlags.Branch);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jz(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Je_rel32_64, FirstLabelId), FirstLabelId), TestInstrFlags.PreferNearBranch | TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void jz_lu64() {
			{ /* if (PreferShortBranch) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.jz(0x31D0UL), Instruction.CreateBranch(Code.Je_rel8_64, 0x31D0UL), TestInstrFlags.PreferShortBranch | TestInstrFlags.BranchU64);
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (Bitness == 64) */
				TestAssembler(c => c.jz(0x31D0UL), Instruction.CreateBranch(Code.Je_rel32_64, 0x31D0UL), TestInstrFlags.PreferNearBranch | TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void kaddb_kr_kr_kr() {
			TestAssembler(c => c.kaddb(k2, k3, k4), Instruction.Create(Code.VEX_Kaddb_kr_kr_kr, Register.K2, Register.K3, Register.K4));
		}

		[Fact]
		public void kaddd_kr_kr_kr() {
			TestAssembler(c => c.kaddd(k2, k3, k4), Instruction.Create(Code.VEX_Kaddd_kr_kr_kr, Register.K2, Register.K3, Register.K4));
		}

		[Fact]
		public void kaddq_kr_kr_kr() {
			TestAssembler(c => c.kaddq(k2, k3, k4), Instruction.Create(Code.VEX_Kaddq_kr_kr_kr, Register.K2, Register.K3, Register.K4));
		}

		[Fact]
		public void kaddw_kr_kr_kr() {
			TestAssembler(c => c.kaddw(k2, k3, k4), Instruction.Create(Code.VEX_Kaddw_kr_kr_kr, Register.K2, Register.K3, Register.K4));
		}

		[Fact]
		public void kandb_kr_kr_kr() {
			TestAssembler(c => c.kandb(k2, k3, k4), Instruction.Create(Code.VEX_Kandb_kr_kr_kr, Register.K2, Register.K3, Register.K4));
		}

		[Fact]
		public void kandd_kr_kr_kr() {
			TestAssembler(c => c.kandd(k2, k3, k4), Instruction.Create(Code.VEX_Kandd_kr_kr_kr, Register.K2, Register.K3, Register.K4));
		}

		[Fact]
		public void kandnb_kr_kr_kr() {
			TestAssembler(c => c.kandnb(k2, k3, k4), Instruction.Create(Code.VEX_Kandnb_kr_kr_kr, Register.K2, Register.K3, Register.K4));
		}

		[Fact]
		public void kandnd_kr_kr_kr() {
			TestAssembler(c => c.kandnd(k2, k3, k4), Instruction.Create(Code.VEX_Kandnd_kr_kr_kr, Register.K2, Register.K3, Register.K4));
		}

		[Fact]
		public void kandnq_kr_kr_kr() {
			TestAssembler(c => c.kandnq(k2, k3, k4), Instruction.Create(Code.VEX_Kandnq_kr_kr_kr, Register.K2, Register.K3, Register.K4));
		}

		[Fact]
		public void kandnw_kr_kr_kr() {
			TestAssembler(c => c.kandnw(k2, k3, k4), Instruction.Create(Code.VEX_Kandnw_kr_kr_kr, Register.K2, Register.K3, Register.K4));
		}

		[Fact]
		public void kandq_kr_kr_kr() {
			TestAssembler(c => c.kandq(k2, k3, k4), Instruction.Create(Code.VEX_Kandq_kr_kr_kr, Register.K2, Register.K3, Register.K4));
		}

		[Fact]
		public void kandw_kr_kr_kr() {
			TestAssembler(c => c.kandw(k2, k3, k4), Instruction.Create(Code.VEX_Kandw_kr_kr_kr, Register.K2, Register.K3, Register.K4));
		}

		[Fact]
		public void kmovb_kr_r32() {
			TestAssembler(c => c.kmovb(k2, ebx), Instruction.Create(Code.VEX_Kmovb_kr_r32, Register.K2, Register.EBX));
		}

		[Fact]
		public void kmovb_r32_kr() {
			TestAssembler(c => c.kmovb(edx, k3), Instruction.Create(Code.VEX_Kmovb_r32_kr, Register.EDX, Register.K3));
		}

		[Fact]
		public void kmovb_kr_kr() {
			TestAssembler(c => c.kmovb(k2, k3), Instruction.Create(Code.VEX_Kmovb_kr_km8, Register.K2, Register.K3));
		}

		[Fact]
		public void kmovb_m_kr() {
			TestAssembler(c => c.kmovb(__[rcx], k3), Instruction.Create(Code.VEX_Kmovb_m8_kr, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.K3));
		}

		[Fact]
		public void kmovb_kr_m() {
			TestAssembler(c => c.kmovb(k2, __[rcx]), Instruction.Create(Code.VEX_Kmovb_kr_km8, Register.K2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void kmovd_kr_r32() {
			TestAssembler(c => c.kmovd(k2, ebx), Instruction.Create(Code.VEX_Kmovd_kr_r32, Register.K2, Register.EBX));
		}

		[Fact]
		public void kmovd_r32_kr() {
			TestAssembler(c => c.kmovd(edx, k3), Instruction.Create(Code.VEX_Kmovd_r32_kr, Register.EDX, Register.K3));
		}

		[Fact]
		public void kmovd_kr_kr() {
			TestAssembler(c => c.kmovd(k2, k3), Instruction.Create(Code.VEX_Kmovd_kr_km32, Register.K2, Register.K3));
		}

		[Fact]
		public void kmovd_m_kr() {
			TestAssembler(c => c.kmovd(__[rcx], k3), Instruction.Create(Code.VEX_Kmovd_m32_kr, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.K3));
		}

		[Fact]
		public void kmovd_kr_m() {
			TestAssembler(c => c.kmovd(k2, __[rcx]), Instruction.Create(Code.VEX_Kmovd_kr_km32, Register.K2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void kmovq_kr_r64() {
			TestAssembler(c => c.kmovq(k2, rbx), Instruction.Create(Code.VEX_Kmovq_kr_r64, Register.K2, Register.RBX));
		}

		[Fact]
		public void kmovq_r64_kr() {
			TestAssembler(c => c.kmovq(rdx, k3), Instruction.Create(Code.VEX_Kmovq_r64_kr, Register.RDX, Register.K3));
		}

		[Fact]
		public void kmovq_kr_kr() {
			TestAssembler(c => c.kmovq(k2, k3), Instruction.Create(Code.VEX_Kmovq_kr_km64, Register.K2, Register.K3));
		}

		[Fact]
		public void kmovq_m_kr() {
			TestAssembler(c => c.kmovq(__[rcx], k3), Instruction.Create(Code.VEX_Kmovq_m64_kr, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.K3));
		}

		[Fact]
		public void kmovq_kr_m() {
			TestAssembler(c => c.kmovq(k2, __[rcx]), Instruction.Create(Code.VEX_Kmovq_kr_km64, Register.K2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void kmovw_kr_r32() {
			TestAssembler(c => c.kmovw(k2, ebx), Instruction.Create(Code.VEX_Kmovw_kr_r32, Register.K2, Register.EBX));
		}

		[Fact]
		public void kmovw_r32_kr() {
			TestAssembler(c => c.kmovw(edx, k3), Instruction.Create(Code.VEX_Kmovw_r32_kr, Register.EDX, Register.K3));
		}

		[Fact]
		public void kmovw_kr_kr() {
			TestAssembler(c => c.kmovw(k2, k3), Instruction.Create(Code.VEX_Kmovw_kr_km16, Register.K2, Register.K3));
		}

		[Fact]
		public void kmovw_m_kr() {
			TestAssembler(c => c.kmovw(__[rcx], k3), Instruction.Create(Code.VEX_Kmovw_m16_kr, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.K3));
		}

		[Fact]
		public void kmovw_kr_m() {
			TestAssembler(c => c.kmovw(k2, __[rcx]), Instruction.Create(Code.VEX_Kmovw_kr_km16, Register.K2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void knotb_kr_kr() {
			TestAssembler(c => c.knotb(k2, k3), Instruction.Create(Code.VEX_Knotb_kr_kr, Register.K2, Register.K3));
		}

		[Fact]
		public void knotd_kr_kr() {
			TestAssembler(c => c.knotd(k2, k3), Instruction.Create(Code.VEX_Knotd_kr_kr, Register.K2, Register.K3));
		}

		[Fact]
		public void knotq_kr_kr() {
			TestAssembler(c => c.knotq(k2, k3), Instruction.Create(Code.VEX_Knotq_kr_kr, Register.K2, Register.K3));
		}

		[Fact]
		public void knotw_kr_kr() {
			TestAssembler(c => c.knotw(k2, k3), Instruction.Create(Code.VEX_Knotw_kr_kr, Register.K2, Register.K3));
		}

		[Fact]
		public void korb_kr_kr_kr() {
			TestAssembler(c => c.korb(k2, k3, k4), Instruction.Create(Code.VEX_Korb_kr_kr_kr, Register.K2, Register.K3, Register.K4));
		}

		[Fact]
		public void kord_kr_kr_kr() {
			TestAssembler(c => c.kord(k2, k3, k4), Instruction.Create(Code.VEX_Kord_kr_kr_kr, Register.K2, Register.K3, Register.K4));
		}

		[Fact]
		public void korq_kr_kr_kr() {
			TestAssembler(c => c.korq(k2, k3, k4), Instruction.Create(Code.VEX_Korq_kr_kr_kr, Register.K2, Register.K3, Register.K4));
		}

		[Fact]
		public void kortestb_kr_kr() {
			TestAssembler(c => c.kortestb(k2, k3), Instruction.Create(Code.VEX_Kortestb_kr_kr, Register.K2, Register.K3));
		}

		[Fact]
		public void kortestd_kr_kr() {
			TestAssembler(c => c.kortestd(k2, k3), Instruction.Create(Code.VEX_Kortestd_kr_kr, Register.K2, Register.K3));
		}

		[Fact]
		public void kortestq_kr_kr() {
			TestAssembler(c => c.kortestq(k2, k3), Instruction.Create(Code.VEX_Kortestq_kr_kr, Register.K2, Register.K3));
		}

		[Fact]
		public void kortestw_kr_kr() {
			TestAssembler(c => c.kortestw(k2, k3), Instruction.Create(Code.VEX_Kortestw_kr_kr, Register.K2, Register.K3));
		}

		[Fact]
		public void korw_kr_kr_kr() {
			TestAssembler(c => c.korw(k2, k3, k4), Instruction.Create(Code.VEX_Korw_kr_kr_kr, Register.K2, Register.K3, Register.K4));
		}

		[Fact]
		public void kshiftlb_kr_kr_i() {
			TestAssembler(c => c.kshiftlb(k2, k3, -5), Instruction.Create(Code.VEX_Kshiftlb_kr_kr_imm8, Register.K2, Register.K3, -5));
		}

		[Fact]
		public void kshiftlb_kr_kr_u() {
			TestAssembler(c => c.kshiftlb(k2, k3, (byte)0x7F), Instruction.Create(Code.VEX_Kshiftlb_kr_kr_imm8, Register.K2, Register.K3, 0x7FU));
		}

		[Fact]
		public void kshiftld_kr_kr_i() {
			TestAssembler(c => c.kshiftld(k2, k3, -5), Instruction.Create(Code.VEX_Kshiftld_kr_kr_imm8, Register.K2, Register.K3, -5));
		}

		[Fact]
		public void kshiftld_kr_kr_u() {
			TestAssembler(c => c.kshiftld(k2, k3, (byte)0x7F), Instruction.Create(Code.VEX_Kshiftld_kr_kr_imm8, Register.K2, Register.K3, 0x7FU));
		}

		[Fact]
		public void kshiftlq_kr_kr_i() {
			TestAssembler(c => c.kshiftlq(k2, k3, -5), Instruction.Create(Code.VEX_Kshiftlq_kr_kr_imm8, Register.K2, Register.K3, -5));
		}

		[Fact]
		public void kshiftlq_kr_kr_u() {
			TestAssembler(c => c.kshiftlq(k2, k3, (byte)0x7F), Instruction.Create(Code.VEX_Kshiftlq_kr_kr_imm8, Register.K2, Register.K3, 0x7FU));
		}

		[Fact]
		public void kshiftlw_kr_kr_i() {
			TestAssembler(c => c.kshiftlw(k2, k3, -5), Instruction.Create(Code.VEX_Kshiftlw_kr_kr_imm8, Register.K2, Register.K3, -5));
		}

		[Fact]
		public void kshiftlw_kr_kr_u() {
			TestAssembler(c => c.kshiftlw(k2, k3, (byte)0x7F), Instruction.Create(Code.VEX_Kshiftlw_kr_kr_imm8, Register.K2, Register.K3, 0x7FU));
		}

		[Fact]
		public void kshiftrb_kr_kr_i() {
			TestAssembler(c => c.kshiftrb(k2, k3, -5), Instruction.Create(Code.VEX_Kshiftrb_kr_kr_imm8, Register.K2, Register.K3, -5));
		}

		[Fact]
		public void kshiftrb_kr_kr_u() {
			TestAssembler(c => c.kshiftrb(k2, k3, (byte)0x7F), Instruction.Create(Code.VEX_Kshiftrb_kr_kr_imm8, Register.K2, Register.K3, 0x7FU));
		}

		[Fact]
		public void kshiftrd_kr_kr_i() {
			TestAssembler(c => c.kshiftrd(k2, k3, -5), Instruction.Create(Code.VEX_Kshiftrd_kr_kr_imm8, Register.K2, Register.K3, -5));
		}

		[Fact]
		public void kshiftrd_kr_kr_u() {
			TestAssembler(c => c.kshiftrd(k2, k3, (byte)0x7F), Instruction.Create(Code.VEX_Kshiftrd_kr_kr_imm8, Register.K2, Register.K3, 0x7FU));
		}

		[Fact]
		public void kshiftrq_kr_kr_i() {
			TestAssembler(c => c.kshiftrq(k2, k3, -5), Instruction.Create(Code.VEX_Kshiftrq_kr_kr_imm8, Register.K2, Register.K3, -5));
		}

		[Fact]
		public void kshiftrq_kr_kr_u() {
			TestAssembler(c => c.kshiftrq(k2, k3, (byte)0x7F), Instruction.Create(Code.VEX_Kshiftrq_kr_kr_imm8, Register.K2, Register.K3, 0x7FU));
		}

		[Fact]
		public void kshiftrw_kr_kr_i() {
			TestAssembler(c => c.kshiftrw(k2, k3, -5), Instruction.Create(Code.VEX_Kshiftrw_kr_kr_imm8, Register.K2, Register.K3, -5));
		}

		[Fact]
		public void kshiftrw_kr_kr_u() {
			TestAssembler(c => c.kshiftrw(k2, k3, (byte)0x7F), Instruction.Create(Code.VEX_Kshiftrw_kr_kr_imm8, Register.K2, Register.K3, 0x7FU));
		}

		[Fact]
		public void ktestb_kr_kr() {
			TestAssembler(c => c.ktestb(k2, k3), Instruction.Create(Code.VEX_Ktestb_kr_kr, Register.K2, Register.K3));
		}

		[Fact]
		public void ktestd_kr_kr() {
			TestAssembler(c => c.ktestd(k2, k3), Instruction.Create(Code.VEX_Ktestd_kr_kr, Register.K2, Register.K3));
		}

		[Fact]
		public void ktestq_kr_kr() {
			TestAssembler(c => c.ktestq(k2, k3), Instruction.Create(Code.VEX_Ktestq_kr_kr, Register.K2, Register.K3));
		}

		[Fact]
		public void ktestw_kr_kr() {
			TestAssembler(c => c.ktestw(k2, k3), Instruction.Create(Code.VEX_Ktestw_kr_kr, Register.K2, Register.K3));
		}

		[Fact]
		public void kunpckbw_kr_kr_kr() {
			TestAssembler(c => c.kunpckbw(k2, k3, k4), Instruction.Create(Code.VEX_Kunpckbw_kr_kr_kr, Register.K2, Register.K3, Register.K4));
		}

		[Fact]
		public void kunpckdq_kr_kr_kr() {
			TestAssembler(c => c.kunpckdq(k2, k3, k4), Instruction.Create(Code.VEX_Kunpckdq_kr_kr_kr, Register.K2, Register.K3, Register.K4));
		}

		[Fact]
		public void kunpckwd_kr_kr_kr() {
			TestAssembler(c => c.kunpckwd(k2, k3, k4), Instruction.Create(Code.VEX_Kunpckwd_kr_kr_kr, Register.K2, Register.K3, Register.K4));
		}

		[Fact]
		public void kxnorb_kr_kr_kr() {
			TestAssembler(c => c.kxnorb(k2, k3, k4), Instruction.Create(Code.VEX_Kxnorb_kr_kr_kr, Register.K2, Register.K3, Register.K4));
		}

		[Fact]
		public void kxnord_kr_kr_kr() {
			TestAssembler(c => c.kxnord(k2, k3, k4), Instruction.Create(Code.VEX_Kxnord_kr_kr_kr, Register.K2, Register.K3, Register.K4));
		}

		[Fact]
		public void kxnorq_kr_kr_kr() {
			TestAssembler(c => c.kxnorq(k2, k3, k4), Instruction.Create(Code.VEX_Kxnorq_kr_kr_kr, Register.K2, Register.K3, Register.K4));
		}

		[Fact]
		public void kxnorw_kr_kr_kr() {
			TestAssembler(c => c.kxnorw(k2, k3, k4), Instruction.Create(Code.VEX_Kxnorw_kr_kr_kr, Register.K2, Register.K3, Register.K4));
		}

		[Fact]
		public void kxorb_kr_kr_kr() {
			TestAssembler(c => c.kxorb(k2, k3, k4), Instruction.Create(Code.VEX_Kxorb_kr_kr_kr, Register.K2, Register.K3, Register.K4));
		}

		[Fact]
		public void kxord_kr_kr_kr() {
			TestAssembler(c => c.kxord(k2, k3, k4), Instruction.Create(Code.VEX_Kxord_kr_kr_kr, Register.K2, Register.K3, Register.K4));
		}

		[Fact]
		public void kxorq_kr_kr_kr() {
			TestAssembler(c => c.kxorq(k2, k3, k4), Instruction.Create(Code.VEX_Kxorq_kr_kr_kr, Register.K2, Register.K3, Register.K4));
		}

		[Fact]
		public void kxorw_kr_kr_kr() {
			TestAssembler(c => c.kxorw(k2, k3, k4), Instruction.Create(Code.VEX_Kxorw_kr_kr_kr, Register.K2, Register.K3, Register.K4));
		}

		[Fact]
		public void lahf() {
			TestAssembler(c => c.lahf(), Instruction.Create(Code.Lahf));
		}

		[Fact]
		public void lar_r16_r16() {
			TestAssembler(c => c.lar(dx, bx), Instruction.Create(Code.Lar_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void lar_r32_r32() {
			TestAssembler(c => c.lar(edx, ebx), Instruction.Create(Code.Lar_r32_r32m16, Register.EDX, Register.EBX));
		}

		[Fact]
		public void lar_r64_r64() {
			TestAssembler(c => c.lar(rdx, rbx), Instruction.Create(Code.Lar_r64_r64m16, Register.RDX, Register.RBX));
		}

		[Fact]
		public void lar_r16_m() {
			TestAssembler(c => c.lar(dx, __word_ptr[rcx]), Instruction.Create(Code.Lar_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void lar_r32_m() {
			TestAssembler(c => c.lar(edx, __dword_ptr[rcx]), Instruction.Create(Code.Lar_r32_r32m16, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void lddqu_xmm_m() {
			TestAssembler(c => c.lddqu(xmm2, __[rcx]), Instruction.Create(Code.Lddqu_xmm_m128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void ldmxcsr_m() {
			TestAssembler(c => c.ldmxcsr(__[rcx]), Instruction.Create(Code.Ldmxcsr_m32, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void ldtilecfg_m() {
			TestAssembler(c => c.ldtilecfg(__[rcx]), Instruction.Create(Code.VEX_Ldtilecfg_m512, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void lea_r16_m() {
			TestAssembler(c => c.lea(dx, __[rcx]), Instruction.Create(Code.Lea_r16_m, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void lea_r32_m() {
			TestAssembler(c => c.lea(edx, __[rcx]), Instruction.Create(Code.Lea_r32_m, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void lea_r64_m() {
			TestAssembler(c => c.lea(rdx, __[rcx]), Instruction.Create(Code.Lea_r64_m, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void leave() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.leave(), Instruction.Create(Code.Leaveq));
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void lfence() {
			TestAssembler(c => c.lfence(), Instruction.Create(Code.Lfence));
		}

		[Fact]
		public void lfs_r16_m() {
			TestAssembler(c => c.lfs(dx, __[rcx]), Instruction.Create(Code.Lfs_r16_m1616, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void lfs_r32_m() {
			TestAssembler(c => c.lfs(edx, __[rcx]), Instruction.Create(Code.Lfs_r32_m1632, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void lfs_r64_m() {
			TestAssembler(c => c.lfs(rdx, __[rcx]), Instruction.Create(Code.Lfs_r64_m1664, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void lgdt_m() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.lgdt(__[rcx]), Instruction.Create(Code.Lgdt_m1664, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void lgs_r16_m() {
			TestAssembler(c => c.lgs(dx, __[rcx]), Instruction.Create(Code.Lgs_r16_m1616, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void lgs_r32_m() {
			TestAssembler(c => c.lgs(edx, __[rcx]), Instruction.Create(Code.Lgs_r32_m1632, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void lgs_r64_m() {
			TestAssembler(c => c.lgs(rdx, __[rcx]), Instruction.Create(Code.Lgs_r64_m1664, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void lidt_m() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.lidt(__[rcx]), Instruction.Create(Code.Lidt_m1664, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void lkgs_r16() {
			TestAssembler(c => c.lkgs(dx), Instruction.Create(Code.Lkgs_rm16, Register.DX));
		}

		[Fact]
		public void lkgs_r32() {
			TestAssembler(c => c.lkgs(edx), Instruction.Create(Code.Lkgs_r32m16, Register.EDX));
		}

		[Fact]
		public void lkgs_r64() {
			TestAssembler(c => c.lkgs(rdx), Instruction.Create(Code.Lkgs_r64m16, Register.RDX));
		}

		[Fact]
		public void lkgs_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.lkgs(__dword_ptr[rcx]), Instruction.Create(Code.Lkgs_r32m16, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else skip !(Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void lldt_r16() {
			TestAssembler(c => c.lldt(dx), Instruction.Create(Code.Lldt_rm16, Register.DX));
		}

		[Fact]
		public void lldt_r32() {
			TestAssembler(c => c.lldt(edx), Instruction.Create(Code.Lldt_r32m16, Register.EDX));
		}

		[Fact]
		public void lldt_r64() {
			TestAssembler(c => c.lldt(rdx), Instruction.Create(Code.Lldt_r64m16, Register.RDX));
		}

		[Fact]
		public void lldt_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.lldt(__dword_ptr[rcx]), Instruction.Create(Code.Lldt_r32m16, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else skip !(Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void llwpcb_r32() {
			TestAssembler(c => c.llwpcb(edx), Instruction.Create(Code.XOP_Llwpcb_r32, Register.EDX));
		}

		[Fact]
		public void llwpcb_r64() {
			TestAssembler(c => c.llwpcb(rdx), Instruction.Create(Code.XOP_Llwpcb_r64, Register.RDX));
		}

		[Fact]
		public void lmsw_r16() {
			TestAssembler(c => c.lmsw(dx), Instruction.Create(Code.Lmsw_rm16, Register.DX));
		}

		[Fact]
		public void lmsw_r32() {
			TestAssembler(c => c.lmsw(edx), Instruction.Create(Code.Lmsw_r32m16, Register.EDX));
		}

		[Fact]
		public void lmsw_r64() {
			TestAssembler(c => c.lmsw(rdx), Instruction.Create(Code.Lmsw_r64m16, Register.RDX));
		}

		[Fact]
		public void lmsw_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.lmsw(__dword_ptr[rcx]), Instruction.Create(Code.Lmsw_r32m16, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else skip !(Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void loadiwkey_xmm_xmm() {
			TestAssembler(c => c.loadiwkey(xmm2, xmm3), Instruction.Create(Code.Loadiwkey_xmm_xmm, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void lodsb() {
			TestAssembler(c => c.lodsb(), Instruction.CreateLodsb(64));
		}

		[Fact]
		public void lodsd() {
			TestAssembler(c => c.lodsd(), Instruction.CreateLodsd(64));
		}

		[Fact]
		public void lodsq() {
			TestAssembler(c => c.lodsq(), Instruction.CreateLodsq(64));
		}

		[Fact]
		public void lodsw() {
			TestAssembler(c => c.lodsw(), Instruction.CreateLodsw(64));
		}

		[Fact]
		public void loop_l() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.loop(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Loop_rel8_64_RCX, FirstLabelId), FirstLabelId), TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void loop_lu64() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.loop(0x31D0UL), Instruction.CreateBranch(Code.Loop_rel8_64_RCX, 0x31D0UL), TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void loope_l() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.loope(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Loope_rel8_64_RCX, FirstLabelId), FirstLabelId), TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void loope_lu64() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.loope(0x31D0UL), Instruction.CreateBranch(Code.Loope_rel8_64_RCX, 0x31D0UL), TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void loopne_l() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.loopne(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Loopne_rel8_64_RCX, FirstLabelId), FirstLabelId), TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void loopne_lu64() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.loopne(0x31D0UL), Instruction.CreateBranch(Code.Loopne_rel8_64_RCX, 0x31D0UL), TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void loopnz_l() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.loopnz(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Loopne_rel8_64_RCX, FirstLabelId), FirstLabelId), TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void loopnz_lu64() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.loopnz(0x31D0UL), Instruction.CreateBranch(Code.Loopne_rel8_64_RCX, 0x31D0UL), TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void loopz_l() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.loopz(CreateAndEmitLabel(c)), AssignLabel(Instruction.CreateBranch(Code.Loope_rel8_64_RCX, FirstLabelId), FirstLabelId), TestInstrFlags.Branch);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void loopz_lu64() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.loopz(0x31D0UL), Instruction.CreateBranch(Code.Loope_rel8_64_RCX, 0x31D0UL), TestInstrFlags.BranchU64);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void lsl_r16_r16() {
			TestAssembler(c => c.lsl(dx, bx), Instruction.Create(Code.Lsl_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void lsl_r32_r32() {
			TestAssembler(c => c.lsl(edx, ebx), Instruction.Create(Code.Lsl_r32_r32m16, Register.EDX, Register.EBX));
		}

		[Fact]
		public void lsl_r64_r64() {
			TestAssembler(c => c.lsl(rdx, rbx), Instruction.Create(Code.Lsl_r64_r64m16, Register.RDX, Register.RBX));
		}

		[Fact]
		public void lsl_r16_m() {
			TestAssembler(c => c.lsl(dx, __word_ptr[rcx]), Instruction.Create(Code.Lsl_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void lsl_r32_m() {
			TestAssembler(c => c.lsl(edx, __dword_ptr[rcx]), Instruction.Create(Code.Lsl_r32_r32m16, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void lss_r16_m() {
			TestAssembler(c => c.lss(dx, __[rcx]), Instruction.Create(Code.Lss_r16_m1616, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void lss_r32_m() {
			TestAssembler(c => c.lss(edx, __[rcx]), Instruction.Create(Code.Lss_r32_m1632, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void lss_r64_m() {
			TestAssembler(c => c.lss(rdx, __[rcx]), Instruction.Create(Code.Lss_r64_m1664, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void ltr_r16() {
			TestAssembler(c => c.ltr(dx), Instruction.Create(Code.Ltr_rm16, Register.DX));
		}

		[Fact]
		public void ltr_r32() {
			TestAssembler(c => c.ltr(edx), Instruction.Create(Code.Ltr_r32m16, Register.EDX));
		}

		[Fact]
		public void ltr_r64() {
			TestAssembler(c => c.ltr(rdx), Instruction.Create(Code.Ltr_r64m16, Register.RDX));
		}

		[Fact]
		public void ltr_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.ltr(__dword_ptr[rcx]), Instruction.Create(Code.Ltr_r32m16, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else skip !(Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void lwpins_r32_r32_i() {
			TestAssembler(c => c.lwpins(edx, ebx, 0x7FFFFFFF), Instruction.Create(Code.XOP_Lwpins_r32_rm32_imm32, Register.EDX, Register.EBX, 0x7FFFFFFF));
		}

		[Fact]
		public void lwpins_r64_r32_i() {
			TestAssembler(c => c.lwpins(rdx, ebx, 0x7FFFFFFF), Instruction.Create(Code.XOP_Lwpins_r64_rm32_imm32, Register.RDX, Register.EBX, 0x7FFFFFFF));
		}

		[Fact]
		public void lwpins_r32_m_i() {
			TestAssembler(c => c.lwpins(edx, __dword_ptr[rcx], 0x7FFFFFFF), Instruction.Create(Code.XOP_Lwpins_r32_rm32_imm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFF));
		}

		[Fact]
		public void lwpins_r64_m_i() {
			TestAssembler(c => c.lwpins(rdx, __dword_ptr[rcx], 0x7FFFFFFF), Instruction.Create(Code.XOP_Lwpins_r64_rm32_imm32, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFF));
		}

		[Fact]
		public void lwpins_r32_r32_u() {
			TestAssembler(c => c.lwpins(edx, ebx, 0x7FFFFFFFU), Instruction.Create(Code.XOP_Lwpins_r32_rm32_imm32, Register.EDX, Register.EBX, 0x7FFFFFFFU));
		}

		[Fact]
		public void lwpins_r64_r32_u() {
			TestAssembler(c => c.lwpins(rdx, ebx, 0x7FFFFFFFU), Instruction.Create(Code.XOP_Lwpins_r64_rm32_imm32, Register.RDX, Register.EBX, 0x7FFFFFFFU));
		}

		[Fact]
		public void lwpins_r32_m_u() {
			TestAssembler(c => c.lwpins(edx, __dword_ptr[rcx], 0x7FFFFFFFU), Instruction.Create(Code.XOP_Lwpins_r32_rm32_imm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFFU));
		}

		[Fact]
		public void lwpins_r64_m_u() {
			TestAssembler(c => c.lwpins(rdx, __dword_ptr[rcx], 0x7FFFFFFFU), Instruction.Create(Code.XOP_Lwpins_r64_rm32_imm32, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFFU));
		}

		[Fact]
		public void lwpval_r32_r32_i() {
			TestAssembler(c => c.lwpval(edx, ebx, 0x7FFFFFFF), Instruction.Create(Code.XOP_Lwpval_r32_rm32_imm32, Register.EDX, Register.EBX, 0x7FFFFFFF));
		}

		[Fact]
		public void lwpval_r64_r32_i() {
			TestAssembler(c => c.lwpval(rdx, ebx, 0x7FFFFFFF), Instruction.Create(Code.XOP_Lwpval_r64_rm32_imm32, Register.RDX, Register.EBX, 0x7FFFFFFF));
		}

		[Fact]
		public void lwpval_r32_m_i() {
			TestAssembler(c => c.lwpval(edx, __dword_ptr[rcx], 0x7FFFFFFF), Instruction.Create(Code.XOP_Lwpval_r32_rm32_imm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFF));
		}

		[Fact]
		public void lwpval_r64_m_i() {
			TestAssembler(c => c.lwpval(rdx, __dword_ptr[rcx], 0x7FFFFFFF), Instruction.Create(Code.XOP_Lwpval_r64_rm32_imm32, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFF));
		}

		[Fact]
		public void lwpval_r32_r32_u() {
			TestAssembler(c => c.lwpval(edx, ebx, 0x7FFFFFFFU), Instruction.Create(Code.XOP_Lwpval_r32_rm32_imm32, Register.EDX, Register.EBX, 0x7FFFFFFFU));
		}

		[Fact]
		public void lwpval_r64_r32_u() {
			TestAssembler(c => c.lwpval(rdx, ebx, 0x7FFFFFFFU), Instruction.Create(Code.XOP_Lwpval_r64_rm32_imm32, Register.RDX, Register.EBX, 0x7FFFFFFFU));
		}

		[Fact]
		public void lwpval_r32_m_u() {
			TestAssembler(c => c.lwpval(edx, __dword_ptr[rcx], 0x7FFFFFFFU), Instruction.Create(Code.XOP_Lwpval_r32_rm32_imm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFFU));
		}

		[Fact]
		public void lwpval_r64_m_u() {
			TestAssembler(c => c.lwpval(rdx, __dword_ptr[rcx], 0x7FFFFFFFU), Instruction.Create(Code.XOP_Lwpval_r64_rm32_imm32, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFFU));
		}

		[Fact]
		public void lzcnt_r16_r16() {
			TestAssembler(c => c.lzcnt(dx, bx), Instruction.Create(Code.Lzcnt_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void lzcnt_r32_r32() {
			TestAssembler(c => c.lzcnt(edx, ebx), Instruction.Create(Code.Lzcnt_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void lzcnt_r64_r64() {
			TestAssembler(c => c.lzcnt(rdx, rbx), Instruction.Create(Code.Lzcnt_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void lzcnt_r16_m() {
			TestAssembler(c => c.lzcnt(dx, __word_ptr[rcx]), Instruction.Create(Code.Lzcnt_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void lzcnt_r32_m() {
			TestAssembler(c => c.lzcnt(edx, __dword_ptr[rcx]), Instruction.Create(Code.Lzcnt_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void lzcnt_r64_m() {
			TestAssembler(c => c.lzcnt(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Lzcnt_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void maskmovdqu_xmm_xmm() {
			TestAssembler(c => c.maskmovdqu(xmm2, xmm3), Instruction.CreateMaskmovdqu(64, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void maskmovq_mm_mm() {
			TestAssembler(c => c.maskmovq(mm2, mm3), Instruction.CreateMaskmovq(64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void maxpd_xmm_xmm() {
			TestAssembler(c => c.maxpd(xmm2, xmm3), Instruction.Create(Code.Maxpd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void maxpd_xmm_m() {
			TestAssembler(c => c.maxpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Maxpd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void maxps_xmm_xmm() {
			TestAssembler(c => c.maxps(xmm2, xmm3), Instruction.Create(Code.Maxps_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void maxps_xmm_m() {
			TestAssembler(c => c.maxps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Maxps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void maxsd_xmm_xmm() {
			TestAssembler(c => c.maxsd(xmm2, xmm3), Instruction.Create(Code.Maxsd_xmm_xmmm64, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void maxsd_xmm_m() {
			TestAssembler(c => c.maxsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Maxsd_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void maxss_xmm_xmm() {
			TestAssembler(c => c.maxss(xmm2, xmm3), Instruction.Create(Code.Maxss_xmm_xmmm32, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void maxss_xmm_m() {
			TestAssembler(c => c.maxss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Maxss_xmm_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void mcommit() {
			TestAssembler(c => c.mcommit(), Instruction.Create(Code.Mcommit));
		}

		[Fact]
		public void mfence() {
			TestAssembler(c => c.mfence(), Instruction.Create(Code.Mfence));
		}

		[Fact]
		public void minpd_xmm_xmm() {
			TestAssembler(c => c.minpd(xmm2, xmm3), Instruction.Create(Code.Minpd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void minpd_xmm_m() {
			TestAssembler(c => c.minpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Minpd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void minps_xmm_xmm() {
			TestAssembler(c => c.minps(xmm2, xmm3), Instruction.Create(Code.Minps_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void minps_xmm_m() {
			TestAssembler(c => c.minps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Minps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void minsd_xmm_xmm() {
			TestAssembler(c => c.minsd(xmm2, xmm3), Instruction.Create(Code.Minsd_xmm_xmmm64, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void minsd_xmm_m() {
			TestAssembler(c => c.minsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Minsd_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void minss_xmm_xmm() {
			TestAssembler(c => c.minss(xmm2, xmm3), Instruction.Create(Code.Minss_xmm_xmmm32, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void minss_xmm_m() {
			TestAssembler(c => c.minss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Minss_xmm_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void monitor() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.monitor(), Instruction.Create(Code.Monitorq));
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void monitorx() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.monitorx(), Instruction.Create(Code.Monitorxq));
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void montmul() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.montmul(), Instruction.Create(Code.Montmul_64), TestInstrFlags.RemoveRepRepnePrefixes, decoderOptions: DecoderOptions.NoInvalidCheck);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void mov_r8_r8() {
			TestAssembler(c => c.mov(dl, bl), Instruction.Create(Code.Mov_rm8_r8, Register.DL, Register.BL));
		}

		[Fact]
		public void mov_m_r8() {
			{ /* if (src.Value == Register.AL && Bitness == 64 && dst.IsDisplacementOnly) */
				TestAssembler(c => c.mov(__[0x89ABCDEF01234567], al), Instruction.Create(Code.Mov_moffs8_AL, new MemoryOperand(0x89ABCDEF01234567, 8), Register.AL));
			} /* else */ { // skip (src.Value == Register.AL && Bitness < 64 && dst.IsDisplacementOnly) not supported by this Assembler bitness
			} /* else */ TestAssembler(c => c.mov(__[rdi], bl), Instruction.Create(Code.Mov_rm8_r8, new MemoryOperand(Register.RDI, Register.None, 1, 0x0, 0, false, Register.None), Register.BL));
		}

		[Fact]
		public void mov_r16_r16() {
			TestAssembler(c => c.mov(dx, bx), Instruction.Create(Code.Mov_rm16_r16, Register.DX, Register.BX));
		}

		[Fact]
		public void mov_seg_r16() {
			TestAssembler(c => c.mov(ds, bx), Instruction.Create(Code.Mov_Sreg_rm16, Register.DS, Register.BX));
		}

		[Fact]
		public void mov_m_r16() {
			{ /* if (src.Value == Register.AX && Bitness == 64 && dst.IsDisplacementOnly) */
				TestAssembler(c => c.mov(__[0x89ABCDEF01234567], ax), Instruction.Create(Code.Mov_moffs16_AX, new MemoryOperand(0x89ABCDEF01234567, 8), Register.AX));
			} /* else */ { // skip (src.Value == Register.AX && Bitness < 64 && dst.IsDisplacementOnly) not supported by this Assembler bitness
			} /* else */ TestAssembler(c => c.mov(__[rdi], bx), Instruction.Create(Code.Mov_rm16_r16, new MemoryOperand(Register.RDI, Register.None, 1, 0x0, 0, false, Register.None), Register.BX));
		}

		[Fact]
		public void mov_r32_r32() {
			TestAssembler(c => c.mov(edx, ebx), Instruction.Create(Code.Mov_rm32_r32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void mov_seg_r32() {
			TestAssembler(c => c.mov(ds, ebx), Instruction.Create(Code.Mov_Sreg_r32m16, Register.DS, Register.EBX));
		}

		[Fact]
		public void mov_m_r32() {
			{ /* if (src.Value == Register.EAX && Bitness == 64 && dst.IsDisplacementOnly) */
				TestAssembler(c => c.mov(__[0x89ABCDEF01234567], eax), Instruction.Create(Code.Mov_moffs32_EAX, new MemoryOperand(0x89ABCDEF01234567, 8), Register.EAX));
			} /* else */ { // skip (src.Value == Register.EAX && Bitness < 64 && dst.IsDisplacementOnly) not supported by this Assembler bitness
			} /* else */ TestAssembler(c => c.mov(__[rdi], ebx), Instruction.Create(Code.Mov_rm32_r32, new MemoryOperand(Register.RDI, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX));
		}

		[Fact]
		public void mov_r64_r64() {
			TestAssembler(c => c.mov(rdx, rbx), Instruction.Create(Code.Mov_rm64_r64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void mov_seg_r64() {
			TestAssembler(c => c.mov(ds, rbx), Instruction.Create(Code.Mov_Sreg_r64m16, Register.DS, Register.RBX));
		}

		[Fact]
		public void mov_cr_r64() {
			TestAssembler(c => c.mov(cr2, rbx), Instruction.Create(Code.Mov_cr_r64, Register.CR2, Register.RBX));
		}

		[Fact]
		public void mov_dr_r64() {
			TestAssembler(c => c.mov(dr1, rbx), Instruction.Create(Code.Mov_dr_r64, Register.DR1, Register.RBX));
		}

		[Fact]
		public void mov_m_r64() {
			{ /* if (src.Value == Register.RAX && Bitness == 64 && dst.IsDisplacementOnly) */
				TestAssembler(c => c.mov(__[0x89ABCDEF01234567], rax), Instruction.Create(Code.Mov_moffs64_RAX, new MemoryOperand(0x89ABCDEF01234567, 8), Register.RAX));
			} /* else */ { // skip (src.Value == Register.RAX && Bitness < 64 && dst.IsDisplacementOnly) not supported by this Assembler bitness
			} /* else */ TestAssembler(c => c.mov(__[rdi], rbx), Instruction.Create(Code.Mov_rm64_r64, new MemoryOperand(Register.RDI, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX));
		}

		[Fact]
		public void mov_r16_seg() {
			TestAssembler(c => c.mov(dx, ds), Instruction.Create(Code.Mov_rm16_Sreg, Register.DX, Register.DS));
		}

		[Fact]
		public void mov_r32_seg() {
			TestAssembler(c => c.mov(edx, ds), Instruction.Create(Code.Mov_r32m16_Sreg, Register.EDX, Register.DS));
		}

		[Fact]
		public void mov_r64_seg() {
			TestAssembler(c => c.mov(rdx, ds), Instruction.Create(Code.Mov_r64m16_Sreg, Register.RDX, Register.DS));
		}

		[Fact]
		public void mov_m_seg() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.mov(__dword_ptr[rcx], ds), Instruction.Create(Code.Mov_r32m16_Sreg, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.DS));
			} /* else skip !(Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void mov_r64_cr() {
			TestAssembler(c => c.mov(rdx, cr2), Instruction.Create(Code.Mov_r64_cr, Register.RDX, Register.CR2));
		}

		[Fact]
		public void mov_r64_dr() {
			TestAssembler(c => c.mov(rdx, dr1), Instruction.Create(Code.Mov_r64_dr, Register.RDX, Register.DR1));
		}

		[Fact]
		public void mov_r8_m() {
			{ /* if (dst.Value == Register.AL && Bitness == 64 && src.IsDisplacementOnly) */
				TestAssembler(c => c.mov(al, __[0x89ABCDEF01234567]), Instruction.Create(Code.Mov_AL_moffs8, Register.AL, new MemoryOperand(0x89ABCDEF01234567, 8)));
			} /* else */ { // skip (dst.Value == Register.AL && Bitness < 64 && src.IsDisplacementOnly) not supported by this Assembler bitness
			} /* else */ TestAssembler(c => c.mov(dl, __[rsi]), Instruction.Create(Code.Mov_r8_rm8, Register.DL, new MemoryOperand(Register.RSI, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void mov_r16_m() {
			{ /* if (dst.Value == Register.AX && Bitness == 64 && src.IsDisplacementOnly) */
				TestAssembler(c => c.mov(ax, __[0x89ABCDEF01234567]), Instruction.Create(Code.Mov_AX_moffs16, Register.AX, new MemoryOperand(0x89ABCDEF01234567, 8)));
			} /* else */ { // skip (dst.Value == Register.AX && Bitness < 64 && src.IsDisplacementOnly) not supported by this Assembler bitness
			} /* else */ TestAssembler(c => c.mov(dx, __[rsi]), Instruction.Create(Code.Mov_r16_rm16, Register.DX, new MemoryOperand(Register.RSI, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void mov_r32_m() {
			{ /* if (dst.Value == Register.EAX && Bitness == 64 && src.IsDisplacementOnly) */
				TestAssembler(c => c.mov(eax, __[0x89ABCDEF01234567]), Instruction.Create(Code.Mov_EAX_moffs32, Register.EAX, new MemoryOperand(0x89ABCDEF01234567, 8)));
			} /* else */ { // skip (dst.Value == Register.EAX && Bitness < 64 && src.IsDisplacementOnly) not supported by this Assembler bitness
			} /* else */ TestAssembler(c => c.mov(edx, __[rsi]), Instruction.Create(Code.Mov_r32_rm32, Register.EDX, new MemoryOperand(Register.RSI, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void mov_r64_m() {
			{ /* if (dst.Value == Register.RAX && Bitness == 64 && src.IsDisplacementOnly) */
				TestAssembler(c => c.mov(rax, __[0x89ABCDEF01234567]), Instruction.Create(Code.Mov_RAX_moffs64, Register.RAX, new MemoryOperand(0x89ABCDEF01234567, 8)));
			} /* else */ { // skip (dst.Value == Register.RAX && Bitness < 64 && src.IsDisplacementOnly) not supported by this Assembler bitness
			} /* else */ TestAssembler(c => c.mov(rdx, __[rsi]), Instruction.Create(Code.Mov_r64_rm64, Register.RDX, new MemoryOperand(Register.RSI, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void mov_seg_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.mov(ds, __dword_ptr[rcx]), Instruction.Create(Code.Mov_Sreg_r32m16, Register.DS, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else skip !(Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void mov_r8_i() {
			TestAssembler(c => c.mov(dl, -5), Instruction.Create(Code.Mov_r8_imm8, Register.DL, -5));
		}

		[Fact]
		public void mov_r16_i() {
			TestAssembler(c => c.mov(dx, 0x40B7), Instruction.Create(Code.Mov_r16_imm16, Register.DX, 0x40B7));
		}

		[Fact]
		public void mov_r32_i() {
			TestAssembler(c => c.mov(edx, 0x7FFFFFFF), Instruction.Create(Code.Mov_r32_imm32, Register.EDX, 0x7FFFFFFF));
		}

		[Fact]
		public void mov_r64_i() {
			TestAssembler(c => c.mov(rdx, -0x8000000000000000), Instruction.Create(Code.Mov_r64_imm64, Register.RDX, -0x8000000000000000));
		}

		[Fact]
		public void mov_m_i() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.mov(__qword_ptr[rdx], -0x80000000), Instruction.Create(Code.Mov_rm64_imm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80000000));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.mov(__dword_ptr[rdx], 0x7FFFFFFF), Instruction.Create(Code.Mov_rm32_imm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFF));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.mov(__word_ptr[rdx], 0x40B7), Instruction.Create(Code.Mov_rm16_imm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x40B7));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.mov(__byte_ptr[rdx], -5), Instruction.Create(Code.Mov_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.mov(__zmmword_ptr[rdx], -5), Instruction.Create(Code.Mov_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
				});
			}
		}

		[Fact]
		public void mov_r8_u() {
			TestAssembler(c => c.mov(dl, (byte)0x7F), Instruction.Create(Code.Mov_r8_imm8, Register.DL, 0x7FU));
		}

		[Fact]
		public void mov_r16_u() {
			TestAssembler(c => c.mov(dx, (ushort)0x40B7), Instruction.Create(Code.Mov_r16_imm16, Register.DX, 0x40B7U));
		}

		[Fact]
		public void mov_r32_u() {
			TestAssembler(c => c.mov(edx, 0x7FFFFFFFU), Instruction.Create(Code.Mov_r32_imm32, Register.EDX, 0x7FFFFFFFU));
		}

		[Fact]
		public void mov_r64_u() {
			TestAssembler(c => c.mov(rdx, 0x8000000000000000UL), Instruction.Create(Code.Mov_r64_imm64, Register.RDX, 0x8000000000000000UL));
		}

		[Fact]
		public void mov_m_u() {
			{ /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.mov(__dword_ptr[rdx], 0x7FFFFFFFU), Instruction.Create(Code.Mov_rm32_imm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFFU));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.mov(__word_ptr[rdx], 0x40B7U), Instruction.Create(Code.Mov_rm16_imm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x40B7U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.mov(__byte_ptr[rdx], 0x7FU), Instruction.Create(Code.Mov_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.mov(__zmmword_ptr[rdx], 0x7FU), Instruction.Create(Code.Mov_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
				});
			}
		}

		[Fact]
		public void movapd_xmm_xmm() {
			TestAssembler(c => c.movapd(xmm2, xmm3), Instruction.Create(Code.Movapd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void movapd_m_xmm() {
			TestAssembler(c => c.movapd(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.Movapd_xmmm128_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3));
		}

		[Fact]
		public void movapd_xmm_m() {
			TestAssembler(c => c.movapd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Movapd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void movaps_xmm_xmm() {
			TestAssembler(c => c.movaps(xmm2, xmm3), Instruction.Create(Code.Movaps_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void movaps_m_xmm() {
			TestAssembler(c => c.movaps(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.Movaps_xmmm128_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3));
		}

		[Fact]
		public void movaps_xmm_m() {
			TestAssembler(c => c.movaps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Movaps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void movbe_m_r16() {
			TestAssembler(c => c.movbe(__[rcx], bx), Instruction.Create(Code.Movbe_m16_r16, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX));
		}

		[Fact]
		public void movbe_m_r32() {
			TestAssembler(c => c.movbe(__[rcx], ebx), Instruction.Create(Code.Movbe_m32_r32, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX));
		}

		[Fact]
		public void movbe_m_r64() {
			TestAssembler(c => c.movbe(__[rcx], rbx), Instruction.Create(Code.Movbe_m64_r64, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX));
		}

		[Fact]
		public void movbe_r16_m() {
			TestAssembler(c => c.movbe(dx, __[rcx]), Instruction.Create(Code.Movbe_r16_m16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void movbe_r32_m() {
			TestAssembler(c => c.movbe(edx, __[rcx]), Instruction.Create(Code.Movbe_r32_m32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void movbe_r64_m() {
			TestAssembler(c => c.movbe(rdx, __[rcx]), Instruction.Create(Code.Movbe_r64_m64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void movd_mm_r32() {
			TestAssembler(c => c.movd(mm2, ebx), Instruction.Create(Code.Movd_mm_rm32, Register.MM2, Register.EBX));
		}

		[Fact]
		public void movd_xmm_r32() {
			TestAssembler(c => c.movd(xmm2, ebx), Instruction.Create(Code.Movd_xmm_rm32, Register.XMM2, Register.EBX));
		}

		[Fact]
		public void movd_r32_mm() {
			TestAssembler(c => c.movd(edx, mm3), Instruction.Create(Code.Movd_rm32_mm, Register.EDX, Register.MM3));
		}

		[Fact]
		public void movd_m_mm() {
			TestAssembler(c => c.movd(__dword_ptr[rcx], mm3), Instruction.Create(Code.Movd_rm32_mm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.MM3));
		}

		[Fact]
		public void movd_r32_xmm() {
			TestAssembler(c => c.movd(edx, xmm3), Instruction.Create(Code.Movd_rm32_xmm, Register.EDX, Register.XMM3));
		}

		[Fact]
		public void movd_m_xmm() {
			TestAssembler(c => c.movd(__dword_ptr[rcx], xmm3), Instruction.Create(Code.Movd_rm32_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3));
		}

		[Fact]
		public void movd_mm_m() {
			TestAssembler(c => c.movd(mm2, __dword_ptr[rcx]), Instruction.Create(Code.Movd_mm_rm32, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void movd_xmm_m() {
			TestAssembler(c => c.movd(xmm2, __dword_ptr[rcx]), Instruction.Create(Code.Movd_xmm_rm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void movddup_xmm_xmm() {
			TestAssembler(c => c.movddup(xmm2, xmm3), Instruction.Create(Code.Movddup_xmm_xmmm64, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void movddup_xmm_m() {
			TestAssembler(c => c.movddup(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Movddup_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void movdir64b_r32_m() {
			TestAssembler(c => c.movdir64b(edx, __[ecx]), Instruction.Create(Code.Movdir64b_r32_m512, Register.EDX, new MemoryOperand(Register.ECX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void movdir64b_r64_m() {
			TestAssembler(c => c.movdir64b(rdx, __[rcx]), Instruction.Create(Code.Movdir64b_r64_m512, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void movdiri_m_r32() {
			TestAssembler(c => c.movdiri(__[rcx], ebx), Instruction.Create(Code.Movdiri_m32_r32, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX));
		}

		[Fact]
		public void movdiri_m_r64() {
			TestAssembler(c => c.movdiri(__[rcx], rbx), Instruction.Create(Code.Movdiri_m64_r64, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX));
		}

		[Fact]
		public void movdq2q_mm_xmm() {
			TestAssembler(c => c.movdq2q(mm2, xmm3), Instruction.Create(Code.Movdq2q_mm_xmm, Register.MM2, Register.XMM3));
		}

		[Fact]
		public void movdqa_xmm_xmm() {
			TestAssembler(c => c.movdqa(xmm2, xmm3), Instruction.Create(Code.Movdqa_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void movdqa_m_xmm() {
			TestAssembler(c => c.movdqa(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.Movdqa_xmmm128_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3));
		}

		[Fact]
		public void movdqa_xmm_m() {
			TestAssembler(c => c.movdqa(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Movdqa_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void movdqu_xmm_xmm() {
			TestAssembler(c => c.movdqu(xmm2, xmm3), Instruction.Create(Code.Movdqu_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void movdqu_m_xmm() {
			TestAssembler(c => c.movdqu(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.Movdqu_xmmm128_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3));
		}

		[Fact]
		public void movdqu_xmm_m() {
			TestAssembler(c => c.movdqu(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Movdqu_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void movhlps_xmm_xmm() {
			TestAssembler(c => c.movhlps(xmm2, xmm3), Instruction.Create(Code.Movhlps_xmm_xmm, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void movhpd_m_xmm() {
			TestAssembler(c => c.movhpd(__[rcx], xmm3), Instruction.Create(Code.Movhpd_m64_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3));
		}

		[Fact]
		public void movhpd_xmm_m() {
			TestAssembler(c => c.movhpd(xmm2, __[rcx]), Instruction.Create(Code.Movhpd_xmm_m64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void movhps_m_xmm() {
			TestAssembler(c => c.movhps(__[rcx], xmm3), Instruction.Create(Code.Movhps_m64_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3));
		}

		[Fact]
		public void movhps_xmm_m() {
			TestAssembler(c => c.movhps(xmm2, __[rcx]), Instruction.Create(Code.Movhps_xmm_m64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void movlhps_xmm_xmm() {
			TestAssembler(c => c.movlhps(xmm2, xmm3), Instruction.Create(Code.Movlhps_xmm_xmm, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void movlpd_m_xmm() {
			TestAssembler(c => c.movlpd(__[rcx], xmm3), Instruction.Create(Code.Movlpd_m64_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3));
		}

		[Fact]
		public void movlpd_xmm_m() {
			TestAssembler(c => c.movlpd(xmm2, __[rcx]), Instruction.Create(Code.Movlpd_xmm_m64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void movlps_m_xmm() {
			TestAssembler(c => c.movlps(__[rcx], xmm3), Instruction.Create(Code.Movlps_m64_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3));
		}

		[Fact]
		public void movlps_xmm_m() {
			TestAssembler(c => c.movlps(xmm2, __[rcx]), Instruction.Create(Code.Movlps_xmm_m64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void movmskpd_r32_xmm() {
			TestAssembler(c => c.movmskpd(edx, xmm3), Instruction.Create(Code.Movmskpd_r32_xmm, Register.EDX, Register.XMM3));
		}

		[Fact]
		public void movmskpd_r64_xmm() {
			TestAssembler(c => c.movmskpd(rdx, xmm3), Instruction.Create(Code.Movmskpd_r64_xmm, Register.RDX, Register.XMM3));
		}

		[Fact]
		public void movmskps_r32_xmm() {
			TestAssembler(c => c.movmskps(edx, xmm3), Instruction.Create(Code.Movmskps_r32_xmm, Register.EDX, Register.XMM3));
		}

		[Fact]
		public void movmskps_r64_xmm() {
			TestAssembler(c => c.movmskps(rdx, xmm3), Instruction.Create(Code.Movmskps_r64_xmm, Register.RDX, Register.XMM3));
		}

		[Fact]
		public void movntdq_m_xmm() {
			TestAssembler(c => c.movntdq(__[rcx], xmm3), Instruction.Create(Code.Movntdq_m128_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3));
		}

		[Fact]
		public void movntdqa_xmm_m() {
			TestAssembler(c => c.movntdqa(xmm2, __[rcx]), Instruction.Create(Code.Movntdqa_xmm_m128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void movnti_m_r32() {
			TestAssembler(c => c.movnti(__[rcx], ebx), Instruction.Create(Code.Movnti_m32_r32, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX));
		}

		[Fact]
		public void movnti_m_r64() {
			TestAssembler(c => c.movnti(__[rcx], rbx), Instruction.Create(Code.Movnti_m64_r64, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX));
		}

		[Fact]
		public void movntpd_m_xmm() {
			TestAssembler(c => c.movntpd(__[rcx], xmm3), Instruction.Create(Code.Movntpd_m128_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3));
		}

		[Fact]
		public void movntps_m_xmm() {
			TestAssembler(c => c.movntps(__[rcx], xmm3), Instruction.Create(Code.Movntps_m128_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3));
		}

		[Fact]
		public void movntq_m_mm() {
			TestAssembler(c => c.movntq(__[rcx], mm3), Instruction.Create(Code.Movntq_m64_mm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.MM3));
		}

		[Fact]
		public void movntsd_m_xmm() {
			TestAssembler(c => c.movntsd(__[rcx], xmm3), Instruction.Create(Code.Movntsd_m64_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3));
		}

		[Fact]
		public void movntss_m_xmm() {
			TestAssembler(c => c.movntss(__[rcx], xmm3), Instruction.Create(Code.Movntss_m32_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3));
		}

		[Fact]
		public void movq_mm_r64() {
			TestAssembler(c => c.movq(mm2, rbx), Instruction.Create(Code.Movq_mm_rm64, Register.MM2, Register.RBX));
		}

		[Fact]
		public void movq_xmm_r64() {
			TestAssembler(c => c.movq(xmm2, rbx), Instruction.Create(Code.Movq_xmm_rm64, Register.XMM2, Register.RBX));
		}

		[Fact]
		public void movq_r64_mm() {
			TestAssembler(c => c.movq(rdx, mm3), Instruction.Create(Code.Movq_rm64_mm, Register.RDX, Register.MM3));
		}

		[Fact]
		public void movq_mm_mm() {
			TestAssembler(c => c.movq(mm2, mm3), Instruction.Create(Code.Movq_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void movq_m_mm() {
			TestAssembler(c => c.movq(__qword_ptr[rcx], mm3), Instruction.Create(Code.Movq_mmm64_mm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.MM3));
		}

		[Fact]
		public void movq_r64_xmm() {
			TestAssembler(c => c.movq(rdx, xmm3), Instruction.Create(Code.Movq_rm64_xmm, Register.RDX, Register.XMM3));
		}

		[Fact]
		public void movq_xmm_xmm() {
			TestAssembler(c => c.movq(xmm2, xmm3), Instruction.Create(Code.Movq_xmm_xmmm64, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void movq_m_xmm() {
			TestAssembler(c => c.movq(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.Movq_xmmm64_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3));
		}

		[Fact]
		public void movq_mm_m() {
			TestAssembler(c => c.movq(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Movq_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void movq_xmm_m() {
			TestAssembler(c => c.movq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Movq_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void movq2dq_xmm_mm() {
			TestAssembler(c => c.movq2dq(xmm2, mm3), Instruction.Create(Code.Movq2dq_xmm_mm, Register.XMM2, Register.MM3));
		}

		[Fact]
		public void movsb() {
			TestAssembler(c => c.movsb(), Instruction.CreateMovsb(64));
		}

		[Fact]
		public void movsd() {
			TestAssembler(c => c.movsd(), Instruction.CreateMovsd(64));
		}

		[Fact]
		public void movsd_xmm_xmm() {
			TestAssembler(c => c.movsd(xmm2, xmm3), Instruction.Create(Code.Movsd_xmm_xmmm64, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void movsd_m_xmm() {
			TestAssembler(c => c.movsd(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.Movsd_xmmm64_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3));
		}

		[Fact]
		public void movsd_xmm_m() {
			TestAssembler(c => c.movsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Movsd_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void movshdup_xmm_xmm() {
			TestAssembler(c => c.movshdup(xmm2, xmm3), Instruction.Create(Code.Movshdup_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void movshdup_xmm_m() {
			TestAssembler(c => c.movshdup(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Movshdup_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void movsldup_xmm_xmm() {
			TestAssembler(c => c.movsldup(xmm2, xmm3), Instruction.Create(Code.Movsldup_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void movsldup_xmm_m() {
			TestAssembler(c => c.movsldup(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Movsldup_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void movsq() {
			TestAssembler(c => c.movsq(), Instruction.CreateMovsq(64));
		}

		[Fact]
		public void movss_xmm_xmm() {
			TestAssembler(c => c.movss(xmm2, xmm3), Instruction.Create(Code.Movss_xmm_xmmm32, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void movss_m_xmm() {
			TestAssembler(c => c.movss(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.Movss_xmmm32_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3));
		}

		[Fact]
		public void movss_xmm_m() {
			TestAssembler(c => c.movss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Movss_xmm_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void movsw() {
			TestAssembler(c => c.movsw(), Instruction.CreateMovsw(64));
		}

		[Fact]
		public void movsx_r16_r8() {
			TestAssembler(c => c.movsx(dx, bl), Instruction.Create(Code.Movsx_r16_rm8, Register.DX, Register.BL));
		}

		[Fact]
		public void movsx_r32_r8() {
			TestAssembler(c => c.movsx(edx, bl), Instruction.Create(Code.Movsx_r32_rm8, Register.EDX, Register.BL));
		}

		[Fact]
		public void movsx_r64_r8() {
			TestAssembler(c => c.movsx(rdx, bl), Instruction.Create(Code.Movsx_r64_rm8, Register.RDX, Register.BL));
		}

		[Fact]
		public void movsx_r16_r16() {
			TestAssembler(c => c.movsx(dx, bx), Instruction.Create(Code.Movsx_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void movsx_r32_r16() {
			TestAssembler(c => c.movsx(edx, bx), Instruction.Create(Code.Movsx_r32_rm16, Register.EDX, Register.BX));
		}

		[Fact]
		public void movsx_r64_r16() {
			TestAssembler(c => c.movsx(rdx, bx), Instruction.Create(Code.Movsx_r64_rm16, Register.RDX, Register.BX));
		}

		[Fact]
		public void movsx_r16_m() {
			{ /* if (src.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.movsx(dx, __word_ptr[rdx]), Instruction.Create(Code.Movsx_r16_rm16, Register.DX, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (src.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.movsx(dx, __byte_ptr[rdx]), Instruction.Create(Code.Movsx_r16_rm8, Register.DX, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.movsx(dx, __zmmword_ptr[rdx]), Instruction.Create(Code.Movsx_r16_rm8, Register.DX, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void movsx_r32_m() {
			{ /* if (src.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.movsx(edx, __word_ptr[rdx]), Instruction.Create(Code.Movsx_r32_rm16, Register.EDX, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (src.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.movsx(edx, __byte_ptr[rdx]), Instruction.Create(Code.Movsx_r32_rm8, Register.EDX, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.movsx(edx, __zmmword_ptr[rdx]), Instruction.Create(Code.Movsx_r32_rm8, Register.EDX, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void movsx_r64_m() {
			{ /* if (src.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.movsx(rdx, __word_ptr[rdx]), Instruction.Create(Code.Movsx_r64_rm16, Register.RDX, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (src.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.movsx(rdx, __byte_ptr[rdx]), Instruction.Create(Code.Movsx_r64_rm8, Register.RDX, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.movsx(rdx, __zmmword_ptr[rdx]), Instruction.Create(Code.Movsx_r64_rm8, Register.RDX, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void movsxd_r16_r16() {
			TestAssembler(c => c.movsxd(dx, bx), Instruction.Create(Code.Movsxd_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void movsxd_r32_r32() {
			TestAssembler(c => c.movsxd(edx, ebx), Instruction.Create(Code.Movsxd_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void movsxd_r64_r32() {
			TestAssembler(c => c.movsxd(rdx, ebx), Instruction.Create(Code.Movsxd_r64_rm32, Register.RDX, Register.EBX));
		}

		[Fact]
		public void movsxd_r16_m() {
			TestAssembler(c => c.movsxd(dx, __word_ptr[rcx]), Instruction.Create(Code.Movsxd_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void movsxd_r32_m() {
			TestAssembler(c => c.movsxd(edx, __dword_ptr[rcx]), Instruction.Create(Code.Movsxd_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void movsxd_r64_m() {
			TestAssembler(c => c.movsxd(rdx, __dword_ptr[rcx]), Instruction.Create(Code.Movsxd_r64_rm32, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void movupd_xmm_xmm() {
			TestAssembler(c => c.movupd(xmm2, xmm3), Instruction.Create(Code.Movupd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void movupd_m_xmm() {
			TestAssembler(c => c.movupd(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.Movupd_xmmm128_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3));
		}

		[Fact]
		public void movupd_xmm_m() {
			TestAssembler(c => c.movupd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Movupd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void movups_xmm_xmm() {
			TestAssembler(c => c.movups(xmm2, xmm3), Instruction.Create(Code.Movups_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void movups_m_xmm() {
			TestAssembler(c => c.movups(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.Movups_xmmm128_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3));
		}

		[Fact]
		public void movups_xmm_m() {
			TestAssembler(c => c.movups(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Movups_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void movzx_r16_r8() {
			TestAssembler(c => c.movzx(dx, bl), Instruction.Create(Code.Movzx_r16_rm8, Register.DX, Register.BL));
		}

		[Fact]
		public void movzx_r32_r8() {
			TestAssembler(c => c.movzx(edx, bl), Instruction.Create(Code.Movzx_r32_rm8, Register.EDX, Register.BL));
		}

		[Fact]
		public void movzx_r64_r8() {
			TestAssembler(c => c.movzx(rdx, bl), Instruction.Create(Code.Movzx_r64_rm8, Register.RDX, Register.BL));
		}

		[Fact]
		public void movzx_r16_r16() {
			TestAssembler(c => c.movzx(dx, bx), Instruction.Create(Code.Movzx_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void movzx_r32_r16() {
			TestAssembler(c => c.movzx(edx, bx), Instruction.Create(Code.Movzx_r32_rm16, Register.EDX, Register.BX));
		}

		[Fact]
		public void movzx_r64_r16() {
			TestAssembler(c => c.movzx(rdx, bx), Instruction.Create(Code.Movzx_r64_rm16, Register.RDX, Register.BX));
		}

		[Fact]
		public void movzx_r16_m() {
			{ /* if (src.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.movzx(dx, __word_ptr[rdx]), Instruction.Create(Code.Movzx_r16_rm16, Register.DX, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (src.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.movzx(dx, __byte_ptr[rdx]), Instruction.Create(Code.Movzx_r16_rm8, Register.DX, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.movzx(dx, __zmmword_ptr[rdx]), Instruction.Create(Code.Movzx_r16_rm8, Register.DX, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void movzx_r32_m() {
			{ /* if (src.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.movzx(edx, __word_ptr[rdx]), Instruction.Create(Code.Movzx_r32_rm16, Register.EDX, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (src.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.movzx(edx, __byte_ptr[rdx]), Instruction.Create(Code.Movzx_r32_rm8, Register.EDX, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.movzx(edx, __zmmword_ptr[rdx]), Instruction.Create(Code.Movzx_r32_rm8, Register.EDX, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void movzx_r64_m() {
			{ /* if (src.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.movzx(rdx, __word_ptr[rdx]), Instruction.Create(Code.Movzx_r64_rm16, Register.RDX, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (src.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.movzx(rdx, __byte_ptr[rdx]), Instruction.Create(Code.Movzx_r64_rm8, Register.RDX, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.movzx(rdx, __zmmword_ptr[rdx]), Instruction.Create(Code.Movzx_r64_rm8, Register.RDX, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void mpsadbw_xmm_xmm_i() {
			TestAssembler(c => c.mpsadbw(xmm2, xmm3, -5), Instruction.Create(Code.Mpsadbw_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void mpsadbw_xmm_m_i() {
			TestAssembler(c => c.mpsadbw(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Mpsadbw_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void mpsadbw_xmm_xmm_u() {
			TestAssembler(c => c.mpsadbw(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Mpsadbw_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void mpsadbw_xmm_m_u() {
			TestAssembler(c => c.mpsadbw(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Mpsadbw_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void mul_r8() {
			TestAssembler(c => c.mul(dl), Instruction.Create(Code.Mul_rm8, Register.DL));
		}

		[Fact]
		public void mul_r16() {
			TestAssembler(c => c.mul(dx), Instruction.Create(Code.Mul_rm16, Register.DX));
		}

		[Fact]
		public void mul_r32() {
			TestAssembler(c => c.mul(edx), Instruction.Create(Code.Mul_rm32, Register.EDX));
		}

		[Fact]
		public void mul_r64() {
			TestAssembler(c => c.mul(rdx), Instruction.Create(Code.Mul_rm64, Register.RDX));
		}

		[Fact]
		public void mul_m() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.mul(__qword_ptr[rdx]), Instruction.Create(Code.Mul_rm64, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.mul(__dword_ptr[rdx]), Instruction.Create(Code.Mul_rm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.mul(__word_ptr[rdx]), Instruction.Create(Code.Mul_rm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.mul(__byte_ptr[rdx]), Instruction.Create(Code.Mul_rm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.mul(__zmmword_ptr[rdx]), Instruction.Create(Code.Mul_rm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void mulpd_xmm_xmm() {
			TestAssembler(c => c.mulpd(xmm2, xmm3), Instruction.Create(Code.Mulpd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void mulpd_xmm_m() {
			TestAssembler(c => c.mulpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Mulpd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void mulps_xmm_xmm() {
			TestAssembler(c => c.mulps(xmm2, xmm3), Instruction.Create(Code.Mulps_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void mulps_xmm_m() {
			TestAssembler(c => c.mulps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Mulps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void mulsd_xmm_xmm() {
			TestAssembler(c => c.mulsd(xmm2, xmm3), Instruction.Create(Code.Mulsd_xmm_xmmm64, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void mulsd_xmm_m() {
			TestAssembler(c => c.mulsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Mulsd_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void mulss_xmm_xmm() {
			TestAssembler(c => c.mulss(xmm2, xmm3), Instruction.Create(Code.Mulss_xmm_xmmm32, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void mulss_xmm_m() {
			TestAssembler(c => c.mulss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Mulss_xmm_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void mulx_r32_r32_r32() {
			TestAssembler(c => c.mulx(edx, ebx, esp), Instruction.Create(Code.VEX_Mulx_r32_r32_rm32, Register.EDX, Register.EBX, Register.ESP));
		}

		[Fact]
		public void mulx_r64_r64_r64() {
			TestAssembler(c => c.mulx(rdx, rbx, rsp), Instruction.Create(Code.VEX_Mulx_r64_r64_rm64, Register.RDX, Register.RBX, Register.RSP));
		}

		[Fact]
		public void mulx_r32_r32_m() {
			TestAssembler(c => c.mulx(edx, ebx, __dword_ptr[rcx]), Instruction.Create(Code.VEX_Mulx_r32_r32_rm32, Register.EDX, Register.EBX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void mulx_r64_r64_m() {
			TestAssembler(c => c.mulx(rdx, rbx, __qword_ptr[rcx]), Instruction.Create(Code.VEX_Mulx_r64_r64_rm64, Register.RDX, Register.RBX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void mwait() {
			TestAssembler(c => c.mwait(), Instruction.Create(Code.Mwait));
		}

		[Fact]
		public void mwaitx() {
			TestAssembler(c => c.mwaitx(), Instruction.Create(Code.Mwaitx));
		}

		[Fact]
		public void neg_r8() {
			TestAssembler(c => c.neg(dl), Instruction.Create(Code.Neg_rm8, Register.DL));
		}

		[Fact]
		public void neg_r16() {
			TestAssembler(c => c.neg(dx), Instruction.Create(Code.Neg_rm16, Register.DX));
		}

		[Fact]
		public void neg_r32() {
			TestAssembler(c => c.neg(edx), Instruction.Create(Code.Neg_rm32, Register.EDX));
		}

		[Fact]
		public void neg_r64() {
			TestAssembler(c => c.neg(rdx), Instruction.Create(Code.Neg_rm64, Register.RDX));
		}

		[Fact]
		public void neg_m() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.neg(__qword_ptr[rdx]), Instruction.Create(Code.Neg_rm64, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.neg(__dword_ptr[rdx]), Instruction.Create(Code.Neg_rm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.neg(__word_ptr[rdx]), Instruction.Create(Code.Neg_rm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.neg(__byte_ptr[rdx]), Instruction.Create(Code.Neg_rm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.neg(__zmmword_ptr[rdx]), Instruction.Create(Code.Neg_rm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void nop() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.nop(), Instruction.Create(Code.Nopd));
			} /* else skip !(Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void nop_r16() {
			TestAssembler(c => c.nop(dx), Instruction.Create(Code.Nop_rm16, Register.DX));
		}

		[Fact]
		public void nop_r32() {
			TestAssembler(c => c.nop(edx), Instruction.Create(Code.Nop_rm32, Register.EDX));
		}

		[Fact]
		public void nop_r64() {
			TestAssembler(c => c.nop(rdx), Instruction.Create(Code.Nop_rm64, Register.RDX));
		}

		[Fact]
		public void nop_m() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.nop(__qword_ptr[rdx]), Instruction.Create(Code.Nop_rm64, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.nop(__dword_ptr[rdx]), Instruction.Create(Code.Nop_rm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.nop(__word_ptr[rdx]), Instruction.Create(Code.Nop_rm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.nop(__zmmword_ptr[rdx]), Instruction.Create(Code.Nop_rm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void not_r8() {
			TestAssembler(c => c.not(dl), Instruction.Create(Code.Not_rm8, Register.DL));
		}

		[Fact]
		public void not_r16() {
			TestAssembler(c => c.not(dx), Instruction.Create(Code.Not_rm16, Register.DX));
		}

		[Fact]
		public void not_r32() {
			TestAssembler(c => c.not(edx), Instruction.Create(Code.Not_rm32, Register.EDX));
		}

		[Fact]
		public void not_r64() {
			TestAssembler(c => c.not(rdx), Instruction.Create(Code.Not_rm64, Register.RDX));
		}

		[Fact]
		public void not_m() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.not(__qword_ptr[rdx]), Instruction.Create(Code.Not_rm64, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.not(__dword_ptr[rdx]), Instruction.Create(Code.Not_rm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.not(__word_ptr[rdx]), Instruction.Create(Code.Not_rm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.not(__byte_ptr[rdx]), Instruction.Create(Code.Not_rm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.not(__zmmword_ptr[rdx]), Instruction.Create(Code.Not_rm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void or_r8_r8() {
			TestAssembler(c => c.or(dl, bl), Instruction.Create(Code.Or_rm8_r8, Register.DL, Register.BL));
		}

		[Fact]
		public void or_m_r8() {
			TestAssembler(c => c.or(__byte_ptr[rcx], bl), Instruction.Create(Code.Or_rm8_r8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BL));
		}

		[Fact]
		public void or_r16_r16() {
			TestAssembler(c => c.or(dx, bx), Instruction.Create(Code.Or_rm16_r16, Register.DX, Register.BX));
		}

		[Fact]
		public void or_m_r16() {
			TestAssembler(c => c.or(__word_ptr[rcx], bx), Instruction.Create(Code.Or_rm16_r16, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX));
		}

		[Fact]
		public void or_r32_r32() {
			TestAssembler(c => c.or(edx, ebx), Instruction.Create(Code.Or_rm32_r32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void or_m_r32() {
			TestAssembler(c => c.or(__dword_ptr[rcx], ebx), Instruction.Create(Code.Or_rm32_r32, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX));
		}

		[Fact]
		public void or_r64_r64() {
			TestAssembler(c => c.or(rdx, rbx), Instruction.Create(Code.Or_rm64_r64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void or_m_r64() {
			TestAssembler(c => c.or(__qword_ptr[rcx], rbx), Instruction.Create(Code.Or_rm64_r64, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX));
		}

		[Fact]
		public void or_r8_m() {
			TestAssembler(c => c.or(dl, __byte_ptr[rcx]), Instruction.Create(Code.Or_r8_rm8, Register.DL, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void or_r16_m() {
			TestAssembler(c => c.or(dx, __word_ptr[rcx]), Instruction.Create(Code.Or_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void or_r32_m() {
			TestAssembler(c => c.or(edx, __dword_ptr[rcx]), Instruction.Create(Code.Or_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void or_r64_m() {
			TestAssembler(c => c.or(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Or_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void or_r8_i() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.or(al, -5), Instruction.Create(Code.Or_AL_imm8, Register.AL, -5));
			} /* else */ TestAssembler(c => c.or(dl, -5), Instruction.Create(Code.Or_rm8_imm8, Register.DL, -5));
		}

		[Fact]
		public void or_r16_i() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.or(ax, 0x40B7), Instruction.Create(Code.Or_AX_imm16, Register.AX, 0x40B7));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.or(dx, -0x80), Instruction.Create(Code.Or_rm16_imm8, Register.DX, -0x80));
				TestAssembler(c => c.or(dx, 0x7F), Instruction.Create(Code.Or_rm16_imm8, Register.DX, 0x7F));
			} /* else */ TestAssembler(c => c.or(dx, 0x40B7), Instruction.Create(Code.Or_rm16_imm16, Register.DX, 0x40B7));
		}

		[Fact]
		public void or_r32_i() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.or(eax, 0x7FFFFFFF), Instruction.Create(Code.Or_EAX_imm32, Register.EAX, 0x7FFFFFFF));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.or(edx, -0x80), Instruction.Create(Code.Or_rm32_imm8, Register.EDX, -0x80));
				TestAssembler(c => c.or(edx, 0x7F), Instruction.Create(Code.Or_rm32_imm8, Register.EDX, 0x7F));
			} /* else */ TestAssembler(c => c.or(edx, 0x7FFFFFFF), Instruction.Create(Code.Or_rm32_imm32, Register.EDX, 0x7FFFFFFF));
		}

		[Fact]
		public void or_r64_i() {
			{ /* if (dst == Register.RAX) */
				TestAssembler(c => c.or(rax, -0x80000000), Instruction.Create(Code.Or_RAX_imm32, Register.RAX, -0x80000000));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.or(rdx, -0x80), Instruction.Create(Code.Or_rm64_imm8, Register.RDX, -0x80));
				TestAssembler(c => c.or(rdx, 0x7F), Instruction.Create(Code.Or_rm64_imm8, Register.RDX, 0x7F));
			} /* else */ TestAssembler(c => c.or(rdx, -0x80000000), Instruction.Create(Code.Or_rm64_imm32, Register.RDX, -0x80000000));
		}

		[Fact]
		public void or_m_i() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.or(__qword_ptr[rdx], -0x80), Instruction.Create(Code.Or_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80));
					TestAssembler(c => c.or(__qword_ptr[rdx], 0x7F), Instruction.Create(Code.Or_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7F));
				} /* else */ TestAssembler(c => c.or(__qword_ptr[rdx], -0x80000000), Instruction.Create(Code.Or_rm64_imm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80000000));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.or(__dword_ptr[rdx], -0x80), Instruction.Create(Code.Or_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80));
					TestAssembler(c => c.or(__dword_ptr[rdx], 0x7F), Instruction.Create(Code.Or_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7F));
				} /* else */ TestAssembler(c => c.or(__dword_ptr[rdx], 0x7FFFFFFF), Instruction.Create(Code.Or_rm32_imm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFF));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.or(__word_ptr[rdx], -0x80), Instruction.Create(Code.Or_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80));
					TestAssembler(c => c.or(__word_ptr[rdx], 0x7F), Instruction.Create(Code.Or_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7F));
				} /* else */ TestAssembler(c => c.or(__word_ptr[rdx], 0x40B7), Instruction.Create(Code.Or_rm16_imm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x40B7));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.or(__byte_ptr[rdx], -5), Instruction.Create(Code.Or_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.or(__zmmword_ptr[rdx], -5), Instruction.Create(Code.Or_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
				});
			}
		}

		[Fact]
		public void or_r8_u() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.or(al, (byte)0x7F), Instruction.Create(Code.Or_AL_imm8, Register.AL, 0x7FU));
			} /* else */ TestAssembler(c => c.or(dl, (byte)0x7F), Instruction.Create(Code.Or_rm8_imm8, Register.DL, 0x7FU));
		}

		[Fact]
		public void or_r16_u() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.or(ax, (ushort)0x40B7), Instruction.Create(Code.Or_AX_imm16, Register.AX, 0x40B7U));
			} /* else */ { /* if (imm <= (ushort)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
				TestAssembler(c => c.or(dx, (ushort)0xFF80), Instruction.Create(Code.Or_rm16_imm8, Register.DX, 0xFF80U));
				TestAssembler(c => c.or(dx, (ushort)0x7F), Instruction.Create(Code.Or_rm16_imm8, Register.DX, 0x7FU));
			} /* else */ TestAssembler(c => c.or(dx, (ushort)0x40B7), Instruction.Create(Code.Or_rm16_imm16, Register.DX, 0x40B7U));
		}

		[Fact]
		public void or_r32_u() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.or(eax, 0x7FFFFFFFU), Instruction.Create(Code.Or_EAX_imm32, Register.EAX, 0x7FFFFFFFU));
			} /* else */ { /* if (imm <= (uint)sbyte.MaxValue || 0xFFFF_FF80 <= imm) */
				TestAssembler(c => c.or(edx, 0xFFFFFF80U), Instruction.Create(Code.Or_rm32_imm8, Register.EDX, 0xFFFFFF80U));
				TestAssembler(c => c.or(edx, 0x7FU), Instruction.Create(Code.Or_rm32_imm8, Register.EDX, 0x7FU));
			} /* else */ TestAssembler(c => c.or(edx, 0x7FFFFFFFU), Instruction.Create(Code.Or_rm32_imm32, Register.EDX, 0x7FFFFFFFU));
		}

		[Fact]
		public void or_m_u() {
			{ /* if (dst.Size == MemoryOperandSize.Dword) */
				{ /* if (imm <= (uint)sbyte.MaxValue || 0xFFFF_FF80 <= imm) */
					TestAssembler(c => c.or(__dword_ptr[rdx], 0xFFFFFF80U), Instruction.Create(Code.Or_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0xFFFFFF80U));
					TestAssembler(c => c.or(__dword_ptr[rdx], 0x7FU), Instruction.Create(Code.Or_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
				} /* else */ TestAssembler(c => c.or(__dword_ptr[rdx], 0x7FFFFFFFU), Instruction.Create(Code.Or_rm32_imm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFFU));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				{ /* if (imm <= (uint)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
					TestAssembler(c => c.or(__word_ptr[rdx], 0xFF80U), Instruction.Create(Code.Or_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0xFF80U));
					TestAssembler(c => c.or(__word_ptr[rdx], 0x7FU), Instruction.Create(Code.Or_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
				} /* else */ TestAssembler(c => c.or(__word_ptr[rdx], 0x40B7U), Instruction.Create(Code.Or_rm16_imm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x40B7U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.or(__byte_ptr[rdx], 0x7FU), Instruction.Create(Code.Or_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.or(__zmmword_ptr[rdx], 0x7FU), Instruction.Create(Code.Or_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
				});
			}
		}

		[Fact]
		public void orpd_xmm_xmm() {
			TestAssembler(c => c.orpd(xmm2, xmm3), Instruction.Create(Code.Orpd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void orpd_xmm_m() {
			TestAssembler(c => c.orpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Orpd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void orps_xmm_xmm() {
			TestAssembler(c => c.orps(xmm2, xmm3), Instruction.Create(Code.Orps_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void orps_xmm_m() {
			TestAssembler(c => c.orps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Orps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void @out_r16_r8() {
			TestAssembler(c => c.@out(dx, al), Instruction.Create(Code.Out_DX_AL, Register.DX, Register.AL));
		}

		[Fact]
		public void @out_i_r8() {
			TestAssembler(c => c.@out(-5, al), Instruction.Create(Code.Out_imm8_AL, -5, Register.AL));
		}

		[Fact]
		public void @out_u_r8() {
			TestAssembler(c => c.@out((byte)0x7F, al), Instruction.Create(Code.Out_imm8_AL, 0x7FU, Register.AL));
		}

		[Fact]
		public void @out_r16_r16() {
			TestAssembler(c => c.@out(dx, ax), Instruction.Create(Code.Out_DX_AX, Register.DX, Register.AX));
		}

		[Fact]
		public void @out_i_r16() {
			TestAssembler(c => c.@out(-5, ax), Instruction.Create(Code.Out_imm8_AX, -5, Register.AX));
		}

		[Fact]
		public void @out_u_r16() {
			TestAssembler(c => c.@out((byte)0x7F, ax), Instruction.Create(Code.Out_imm8_AX, 0x7FU, Register.AX));
		}

		[Fact]
		public void @out_r16_r32() {
			TestAssembler(c => c.@out(dx, eax), Instruction.Create(Code.Out_DX_EAX, Register.DX, Register.EAX));
		}

		[Fact]
		public void @out_i_r32() {
			TestAssembler(c => c.@out(-5, eax), Instruction.Create(Code.Out_imm8_EAX, -5, Register.EAX));
		}

		[Fact]
		public void @out_u_r32() {
			TestAssembler(c => c.@out((byte)0x7F, eax), Instruction.Create(Code.Out_imm8_EAX, 0x7FU, Register.EAX));
		}

		[Fact]
		public void outsb() {
			TestAssembler(c => c.outsb(), Instruction.CreateOutsb(64));
		}

		[Fact]
		public void outsd() {
			TestAssembler(c => c.outsd(), Instruction.CreateOutsd(64));
		}

		[Fact]
		public void outsw() {
			TestAssembler(c => c.outsw(), Instruction.CreateOutsw(64));
		}

		[Fact]
		public void pabsb_mm_mm() {
			TestAssembler(c => c.pabsb(mm2, mm3), Instruction.Create(Code.Pabsb_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pabsb_xmm_xmm() {
			TestAssembler(c => c.pabsb(xmm2, xmm3), Instruction.Create(Code.Pabsb_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pabsb_mm_m() {
			TestAssembler(c => c.pabsb(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pabsb_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pabsb_xmm_m() {
			TestAssembler(c => c.pabsb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pabsb_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pabsd_mm_mm() {
			TestAssembler(c => c.pabsd(mm2, mm3), Instruction.Create(Code.Pabsd_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pabsd_xmm_xmm() {
			TestAssembler(c => c.pabsd(xmm2, xmm3), Instruction.Create(Code.Pabsd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pabsd_mm_m() {
			TestAssembler(c => c.pabsd(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pabsd_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pabsd_xmm_m() {
			TestAssembler(c => c.pabsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pabsd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pabsw_mm_mm() {
			TestAssembler(c => c.pabsw(mm2, mm3), Instruction.Create(Code.Pabsw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pabsw_xmm_xmm() {
			TestAssembler(c => c.pabsw(xmm2, xmm3), Instruction.Create(Code.Pabsw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pabsw_mm_m() {
			TestAssembler(c => c.pabsw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pabsw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pabsw_xmm_m() {
			TestAssembler(c => c.pabsw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pabsw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void packssdw_mm_mm() {
			TestAssembler(c => c.packssdw(mm2, mm3), Instruction.Create(Code.Packssdw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void packssdw_xmm_xmm() {
			TestAssembler(c => c.packssdw(xmm2, xmm3), Instruction.Create(Code.Packssdw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void packssdw_mm_m() {
			TestAssembler(c => c.packssdw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Packssdw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void packssdw_xmm_m() {
			TestAssembler(c => c.packssdw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Packssdw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void packsswb_mm_mm() {
			TestAssembler(c => c.packsswb(mm2, mm3), Instruction.Create(Code.Packsswb_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void packsswb_xmm_xmm() {
			TestAssembler(c => c.packsswb(xmm2, xmm3), Instruction.Create(Code.Packsswb_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void packsswb_mm_m() {
			TestAssembler(c => c.packsswb(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Packsswb_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void packsswb_xmm_m() {
			TestAssembler(c => c.packsswb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Packsswb_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void packusdw_xmm_xmm() {
			TestAssembler(c => c.packusdw(xmm2, xmm3), Instruction.Create(Code.Packusdw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void packusdw_xmm_m() {
			TestAssembler(c => c.packusdw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Packusdw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void packuswb_mm_mm() {
			TestAssembler(c => c.packuswb(mm2, mm3), Instruction.Create(Code.Packuswb_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void packuswb_xmm_xmm() {
			TestAssembler(c => c.packuswb(xmm2, xmm3), Instruction.Create(Code.Packuswb_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void packuswb_mm_m() {
			TestAssembler(c => c.packuswb(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Packuswb_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void packuswb_xmm_m() {
			TestAssembler(c => c.packuswb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Packuswb_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void paddb_mm_mm() {
			TestAssembler(c => c.paddb(mm2, mm3), Instruction.Create(Code.Paddb_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void paddb_xmm_xmm() {
			TestAssembler(c => c.paddb(xmm2, xmm3), Instruction.Create(Code.Paddb_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void paddb_mm_m() {
			TestAssembler(c => c.paddb(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Paddb_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void paddb_xmm_m() {
			TestAssembler(c => c.paddb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Paddb_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void paddd_mm_mm() {
			TestAssembler(c => c.paddd(mm2, mm3), Instruction.Create(Code.Paddd_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void paddd_xmm_xmm() {
			TestAssembler(c => c.paddd(xmm2, xmm3), Instruction.Create(Code.Paddd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void paddd_mm_m() {
			TestAssembler(c => c.paddd(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Paddd_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void paddd_xmm_m() {
			TestAssembler(c => c.paddd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Paddd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void paddq_mm_mm() {
			TestAssembler(c => c.paddq(mm2, mm3), Instruction.Create(Code.Paddq_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void paddq_xmm_xmm() {
			TestAssembler(c => c.paddq(xmm2, xmm3), Instruction.Create(Code.Paddq_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void paddq_mm_m() {
			TestAssembler(c => c.paddq(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Paddq_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void paddq_xmm_m() {
			TestAssembler(c => c.paddq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Paddq_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void paddsb_mm_mm() {
			TestAssembler(c => c.paddsb(mm2, mm3), Instruction.Create(Code.Paddsb_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void paddsb_xmm_xmm() {
			TestAssembler(c => c.paddsb(xmm2, xmm3), Instruction.Create(Code.Paddsb_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void paddsb_mm_m() {
			TestAssembler(c => c.paddsb(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Paddsb_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void paddsb_xmm_m() {
			TestAssembler(c => c.paddsb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Paddsb_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void paddsw_mm_mm() {
			TestAssembler(c => c.paddsw(mm2, mm3), Instruction.Create(Code.Paddsw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void paddsw_xmm_xmm() {
			TestAssembler(c => c.paddsw(xmm2, xmm3), Instruction.Create(Code.Paddsw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void paddsw_mm_m() {
			TestAssembler(c => c.paddsw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Paddsw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void paddsw_xmm_m() {
			TestAssembler(c => c.paddsw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Paddsw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void paddusb_mm_mm() {
			TestAssembler(c => c.paddusb(mm2, mm3), Instruction.Create(Code.Paddusb_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void paddusb_xmm_xmm() {
			TestAssembler(c => c.paddusb(xmm2, xmm3), Instruction.Create(Code.Paddusb_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void paddusb_mm_m() {
			TestAssembler(c => c.paddusb(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Paddusb_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void paddusb_xmm_m() {
			TestAssembler(c => c.paddusb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Paddusb_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void paddusw_mm_mm() {
			TestAssembler(c => c.paddusw(mm2, mm3), Instruction.Create(Code.Paddusw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void paddusw_xmm_xmm() {
			TestAssembler(c => c.paddusw(xmm2, xmm3), Instruction.Create(Code.Paddusw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void paddusw_mm_m() {
			TestAssembler(c => c.paddusw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Paddusw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void paddusw_xmm_m() {
			TestAssembler(c => c.paddusw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Paddusw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void paddw_mm_mm() {
			TestAssembler(c => c.paddw(mm2, mm3), Instruction.Create(Code.Paddw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void paddw_xmm_xmm() {
			TestAssembler(c => c.paddw(xmm2, xmm3), Instruction.Create(Code.Paddw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void paddw_mm_m() {
			TestAssembler(c => c.paddw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Paddw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void paddw_xmm_m() {
			TestAssembler(c => c.paddw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Paddw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void palignr_mm_mm_i() {
			TestAssembler(c => c.palignr(mm2, mm3, -5), Instruction.Create(Code.Palignr_mm_mmm64_imm8, Register.MM2, Register.MM3, -5));
		}

		[Fact]
		public void palignr_xmm_xmm_i() {
			TestAssembler(c => c.palignr(xmm2, xmm3, -5), Instruction.Create(Code.Palignr_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void palignr_mm_m_i() {
			TestAssembler(c => c.palignr(mm2, __qword_ptr[rcx], -5), Instruction.Create(Code.Palignr_mm_mmm64_imm8, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void palignr_xmm_m_i() {
			TestAssembler(c => c.palignr(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Palignr_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void palignr_mm_mm_u() {
			TestAssembler(c => c.palignr(mm2, mm3, (byte)0x7F), Instruction.Create(Code.Palignr_mm_mmm64_imm8, Register.MM2, Register.MM3, 0x7FU));
		}

		[Fact]
		public void palignr_xmm_xmm_u() {
			TestAssembler(c => c.palignr(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Palignr_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void palignr_mm_m_u() {
			TestAssembler(c => c.palignr(mm2, __qword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Palignr_mm_mmm64_imm8, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void palignr_xmm_m_u() {
			TestAssembler(c => c.palignr(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Palignr_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void pand_mm_mm() {
			TestAssembler(c => c.pand(mm2, mm3), Instruction.Create(Code.Pand_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pand_xmm_xmm() {
			TestAssembler(c => c.pand(xmm2, xmm3), Instruction.Create(Code.Pand_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pand_mm_m() {
			TestAssembler(c => c.pand(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pand_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pand_xmm_m() {
			TestAssembler(c => c.pand(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pand_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pandn_mm_mm() {
			TestAssembler(c => c.pandn(mm2, mm3), Instruction.Create(Code.Pandn_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pandn_xmm_xmm() {
			TestAssembler(c => c.pandn(xmm2, xmm3), Instruction.Create(Code.Pandn_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pandn_mm_m() {
			TestAssembler(c => c.pandn(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pandn_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pandn_xmm_m() {
			TestAssembler(c => c.pandn(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pandn_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pause() {
			TestAssembler(c => c.pause(), Instruction.Create(Code.Pause));
		}

		[Fact]
		public void pavgb_mm_mm() {
			TestAssembler(c => c.pavgb(mm2, mm3), Instruction.Create(Code.Pavgb_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pavgb_xmm_xmm() {
			TestAssembler(c => c.pavgb(xmm2, xmm3), Instruction.Create(Code.Pavgb_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pavgb_mm_m() {
			TestAssembler(c => c.pavgb(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pavgb_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pavgb_xmm_m() {
			TestAssembler(c => c.pavgb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pavgb_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pavgusb_mm_mm() {
			TestAssembler(c => c.pavgusb(mm2, mm3), Instruction.Create(Code.D3NOW_Pavgusb_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pavgusb_mm_m() {
			TestAssembler(c => c.pavgusb(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pavgusb_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pavgw_mm_mm() {
			TestAssembler(c => c.pavgw(mm2, mm3), Instruction.Create(Code.Pavgw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pavgw_xmm_xmm() {
			TestAssembler(c => c.pavgw(xmm2, xmm3), Instruction.Create(Code.Pavgw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pavgw_mm_m() {
			TestAssembler(c => c.pavgw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pavgw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pavgw_xmm_m() {
			TestAssembler(c => c.pavgw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pavgw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pblendvb_xmm_xmm() {
			TestAssembler(c => c.pblendvb(xmm2, xmm3), Instruction.Create(Code.Pblendvb_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pblendvb_xmm_m() {
			TestAssembler(c => c.pblendvb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pblendvb_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pblendw_xmm_xmm_i() {
			TestAssembler(c => c.pblendw(xmm2, xmm3, -5), Instruction.Create(Code.Pblendw_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void pblendw_xmm_m_i() {
			TestAssembler(c => c.pblendw(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Pblendw_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void pblendw_xmm_xmm_u() {
			TestAssembler(c => c.pblendw(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Pblendw_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void pblendw_xmm_m_u() {
			TestAssembler(c => c.pblendw(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Pblendw_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void pclmulhqhqdq_xmm_xmm() {
			TestAssembler(c => c.pclmulhqhqdq(xmm2, xmm3), Instruction.Create(Code.Pclmulqdq_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 17));
		}

		[Fact]
		public void pclmulhqhqdq_xmm_m() {
			TestAssembler(c => c.pclmulhqhqdq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pclmulqdq_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 17));
		}

		[Fact]
		public void pclmulhqlqdq_xmm_xmm() {
			TestAssembler(c => c.pclmulhqlqdq(xmm2, xmm3), Instruction.Create(Code.Pclmulqdq_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 1));
		}

		[Fact]
		public void pclmulhqlqdq_xmm_m() {
			TestAssembler(c => c.pclmulhqlqdq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pclmulqdq_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1));
		}

		[Fact]
		public void pclmullqhqdq_xmm_xmm() {
			TestAssembler(c => c.pclmullqhqdq(xmm2, xmm3), Instruction.Create(Code.Pclmulqdq_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 16));
		}

		[Fact]
		public void pclmullqhqdq_xmm_m() {
			TestAssembler(c => c.pclmullqhqdq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pclmulqdq_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 16));
		}

		[Fact]
		public void pclmullqlqdq_xmm_xmm() {
			TestAssembler(c => c.pclmullqlqdq(xmm2, xmm3), Instruction.Create(Code.Pclmulqdq_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0));
		}

		[Fact]
		public void pclmullqlqdq_xmm_m() {
			TestAssembler(c => c.pclmullqlqdq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pclmulqdq_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0));
		}

		[Fact]
		public void pclmulqdq_xmm_xmm_i() {
			TestAssembler(c => c.pclmulqdq(xmm2, xmm3, -5), Instruction.Create(Code.Pclmulqdq_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void pclmulqdq_xmm_m_i() {
			TestAssembler(c => c.pclmulqdq(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Pclmulqdq_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void pclmulqdq_xmm_xmm_u() {
			TestAssembler(c => c.pclmulqdq(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Pclmulqdq_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void pclmulqdq_xmm_m_u() {
			TestAssembler(c => c.pclmulqdq(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Pclmulqdq_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void pcmpeqb_mm_mm() {
			TestAssembler(c => c.pcmpeqb(mm2, mm3), Instruction.Create(Code.Pcmpeqb_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pcmpeqb_xmm_xmm() {
			TestAssembler(c => c.pcmpeqb(xmm2, xmm3), Instruction.Create(Code.Pcmpeqb_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pcmpeqb_mm_m() {
			TestAssembler(c => c.pcmpeqb(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pcmpeqb_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pcmpeqb_xmm_m() {
			TestAssembler(c => c.pcmpeqb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pcmpeqb_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pcmpeqd_mm_mm() {
			TestAssembler(c => c.pcmpeqd(mm2, mm3), Instruction.Create(Code.Pcmpeqd_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pcmpeqd_xmm_xmm() {
			TestAssembler(c => c.pcmpeqd(xmm2, xmm3), Instruction.Create(Code.Pcmpeqd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pcmpeqd_mm_m() {
			TestAssembler(c => c.pcmpeqd(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pcmpeqd_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pcmpeqd_xmm_m() {
			TestAssembler(c => c.pcmpeqd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pcmpeqd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pcmpeqq_xmm_xmm() {
			TestAssembler(c => c.pcmpeqq(xmm2, xmm3), Instruction.Create(Code.Pcmpeqq_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pcmpeqq_xmm_m() {
			TestAssembler(c => c.pcmpeqq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pcmpeqq_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pcmpeqw_mm_mm() {
			TestAssembler(c => c.pcmpeqw(mm2, mm3), Instruction.Create(Code.Pcmpeqw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pcmpeqw_xmm_xmm() {
			TestAssembler(c => c.pcmpeqw(xmm2, xmm3), Instruction.Create(Code.Pcmpeqw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pcmpeqw_mm_m() {
			TestAssembler(c => c.pcmpeqw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pcmpeqw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pcmpeqw_xmm_m() {
			TestAssembler(c => c.pcmpeqw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pcmpeqw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pcmpestri_xmm_xmm_i() {
			TestAssembler(c => c.pcmpestri(xmm2, xmm3, -5), Instruction.Create(Code.Pcmpestri_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void pcmpestri_xmm_m_i() {
			TestAssembler(c => c.pcmpestri(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Pcmpestri_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void pcmpestri_xmm_xmm_u() {
			TestAssembler(c => c.pcmpestri(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Pcmpestri_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void pcmpestri_xmm_m_u() {
			TestAssembler(c => c.pcmpestri(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Pcmpestri_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void pcmpestri64_xmm_xmm_i() {
			TestAssembler(c => c.pcmpestri64(xmm2, xmm3, -5), Instruction.Create(Code.Pcmpestri64_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void pcmpestri64_xmm_m_i() {
			TestAssembler(c => c.pcmpestri64(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Pcmpestri64_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void pcmpestri64_xmm_xmm_u() {
			TestAssembler(c => c.pcmpestri64(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Pcmpestri64_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void pcmpestri64_xmm_m_u() {
			TestAssembler(c => c.pcmpestri64(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Pcmpestri64_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void pcmpestrm_xmm_xmm_i() {
			TestAssembler(c => c.pcmpestrm(xmm2, xmm3, -5), Instruction.Create(Code.Pcmpestrm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void pcmpestrm_xmm_m_i() {
			TestAssembler(c => c.pcmpestrm(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Pcmpestrm_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void pcmpestrm_xmm_xmm_u() {
			TestAssembler(c => c.pcmpestrm(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Pcmpestrm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void pcmpestrm_xmm_m_u() {
			TestAssembler(c => c.pcmpestrm(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Pcmpestrm_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void pcmpestrm64_xmm_xmm_i() {
			TestAssembler(c => c.pcmpestrm64(xmm2, xmm3, -5), Instruction.Create(Code.Pcmpestrm64_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void pcmpestrm64_xmm_m_i() {
			TestAssembler(c => c.pcmpestrm64(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Pcmpestrm64_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void pcmpestrm64_xmm_xmm_u() {
			TestAssembler(c => c.pcmpestrm64(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Pcmpestrm64_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void pcmpestrm64_xmm_m_u() {
			TestAssembler(c => c.pcmpestrm64(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Pcmpestrm64_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void pcmpgtb_mm_mm() {
			TestAssembler(c => c.pcmpgtb(mm2, mm3), Instruction.Create(Code.Pcmpgtb_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pcmpgtb_xmm_xmm() {
			TestAssembler(c => c.pcmpgtb(xmm2, xmm3), Instruction.Create(Code.Pcmpgtb_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pcmpgtb_mm_m() {
			TestAssembler(c => c.pcmpgtb(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pcmpgtb_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pcmpgtb_xmm_m() {
			TestAssembler(c => c.pcmpgtb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pcmpgtb_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pcmpgtd_mm_mm() {
			TestAssembler(c => c.pcmpgtd(mm2, mm3), Instruction.Create(Code.Pcmpgtd_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pcmpgtd_xmm_xmm() {
			TestAssembler(c => c.pcmpgtd(xmm2, xmm3), Instruction.Create(Code.Pcmpgtd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pcmpgtd_mm_m() {
			TestAssembler(c => c.pcmpgtd(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pcmpgtd_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pcmpgtd_xmm_m() {
			TestAssembler(c => c.pcmpgtd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pcmpgtd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pcmpgtq_xmm_xmm() {
			TestAssembler(c => c.pcmpgtq(xmm2, xmm3), Instruction.Create(Code.Pcmpgtq_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pcmpgtq_xmm_m() {
			TestAssembler(c => c.pcmpgtq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pcmpgtq_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pcmpgtw_mm_mm() {
			TestAssembler(c => c.pcmpgtw(mm2, mm3), Instruction.Create(Code.Pcmpgtw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pcmpgtw_xmm_xmm() {
			TestAssembler(c => c.pcmpgtw(xmm2, xmm3), Instruction.Create(Code.Pcmpgtw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pcmpgtw_mm_m() {
			TestAssembler(c => c.pcmpgtw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pcmpgtw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pcmpgtw_xmm_m() {
			TestAssembler(c => c.pcmpgtw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pcmpgtw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pcmpistri_xmm_xmm_i() {
			TestAssembler(c => c.pcmpistri(xmm2, xmm3, -5), Instruction.Create(Code.Pcmpistri_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void pcmpistri_xmm_m_i() {
			TestAssembler(c => c.pcmpistri(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Pcmpistri_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void pcmpistri_xmm_xmm_u() {
			TestAssembler(c => c.pcmpistri(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Pcmpistri_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void pcmpistri_xmm_m_u() {
			TestAssembler(c => c.pcmpistri(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Pcmpistri_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void pcmpistrm_xmm_xmm_i() {
			TestAssembler(c => c.pcmpistrm(xmm2, xmm3, -5), Instruction.Create(Code.Pcmpistrm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void pcmpistrm_xmm_m_i() {
			TestAssembler(c => c.pcmpistrm(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Pcmpistrm_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void pcmpistrm_xmm_xmm_u() {
			TestAssembler(c => c.pcmpistrm(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Pcmpistrm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void pcmpistrm_xmm_m_u() {
			TestAssembler(c => c.pcmpistrm(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Pcmpistrm_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void pcommit() {
			TestAssembler(c => c.pcommit(), Instruction.Create(Code.Pcommit), decoderOptions: DecoderOptions.Pcommit);
		}

		[Fact]
		public void pconfig() {
			TestAssembler(c => c.pconfig(), Instruction.Create(Code.Pconfig));
		}

		[Fact]
		public void pdep_r32_r32_r32() {
			TestAssembler(c => c.pdep(edx, ebx, esp), Instruction.Create(Code.VEX_Pdep_r32_r32_rm32, Register.EDX, Register.EBX, Register.ESP));
		}

		[Fact]
		public void pdep_r64_r64_r64() {
			TestAssembler(c => c.pdep(rdx, rbx, rsp), Instruction.Create(Code.VEX_Pdep_r64_r64_rm64, Register.RDX, Register.RBX, Register.RSP));
		}

		[Fact]
		public void pdep_r32_r32_m() {
			TestAssembler(c => c.pdep(edx, ebx, __dword_ptr[rcx]), Instruction.Create(Code.VEX_Pdep_r32_r32_rm32, Register.EDX, Register.EBX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pdep_r64_r64_m() {
			TestAssembler(c => c.pdep(rdx, rbx, __qword_ptr[rcx]), Instruction.Create(Code.VEX_Pdep_r64_r64_rm64, Register.RDX, Register.RBX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pext_r32_r32_r32() {
			TestAssembler(c => c.pext(edx, ebx, esp), Instruction.Create(Code.VEX_Pext_r32_r32_rm32, Register.EDX, Register.EBX, Register.ESP));
		}

		[Fact]
		public void pext_r64_r64_r64() {
			TestAssembler(c => c.pext(rdx, rbx, rsp), Instruction.Create(Code.VEX_Pext_r64_r64_rm64, Register.RDX, Register.RBX, Register.RSP));
		}

		[Fact]
		public void pext_r32_r32_m() {
			TestAssembler(c => c.pext(edx, ebx, __dword_ptr[rcx]), Instruction.Create(Code.VEX_Pext_r32_r32_rm32, Register.EDX, Register.EBX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pext_r64_r64_m() {
			TestAssembler(c => c.pext(rdx, rbx, __qword_ptr[rcx]), Instruction.Create(Code.VEX_Pext_r64_r64_rm64, Register.RDX, Register.RBX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pextrb_r32_xmm_i() {
			TestAssembler(c => c.pextrb(edx, xmm3, -5), Instruction.Create(Code.Pextrb_r32m8_xmm_imm8, Register.EDX, Register.XMM3, -5));
		}

		[Fact]
		public void pextrb_r64_xmm_i() {
			TestAssembler(c => c.pextrb(rdx, xmm3, -5), Instruction.Create(Code.Pextrb_r64m8_xmm_imm8, Register.RDX, Register.XMM3, -5));
		}

		[Fact]
		public void pextrb_m_xmm_i() {
			TestAssembler(c => c.pextrb(__dword_ptr[rcx], xmm3, -5), Instruction.Create(Code.Pextrb_r32m8_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, -5));
		}

		[Fact]
		public void pextrb_r32_xmm_u() {
			TestAssembler(c => c.pextrb(edx, xmm3, (byte)0x7F), Instruction.Create(Code.Pextrb_r32m8_xmm_imm8, Register.EDX, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void pextrb_r64_xmm_u() {
			TestAssembler(c => c.pextrb(rdx, xmm3, (byte)0x7F), Instruction.Create(Code.Pextrb_r64m8_xmm_imm8, Register.RDX, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void pextrb_m_xmm_u() {
			TestAssembler(c => c.pextrb(__dword_ptr[rcx], xmm3, (byte)0x7F), Instruction.Create(Code.Pextrb_r32m8_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, 0x7FU));
		}

		[Fact]
		public void pextrd_r32_xmm_i() {
			TestAssembler(c => c.pextrd(edx, xmm3, -5), Instruction.Create(Code.Pextrd_rm32_xmm_imm8, Register.EDX, Register.XMM3, -5));
		}

		[Fact]
		public void pextrd_m_xmm_i() {
			TestAssembler(c => c.pextrd(__dword_ptr[rcx], xmm3, -5), Instruction.Create(Code.Pextrd_rm32_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, -5));
		}

		[Fact]
		public void pextrd_r32_xmm_u() {
			TestAssembler(c => c.pextrd(edx, xmm3, (byte)0x7F), Instruction.Create(Code.Pextrd_rm32_xmm_imm8, Register.EDX, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void pextrd_m_xmm_u() {
			TestAssembler(c => c.pextrd(__dword_ptr[rcx], xmm3, (byte)0x7F), Instruction.Create(Code.Pextrd_rm32_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, 0x7FU));
		}

		[Fact]
		public void pextrq_r64_xmm_i() {
			TestAssembler(c => c.pextrq(rdx, xmm3, -5), Instruction.Create(Code.Pextrq_rm64_xmm_imm8, Register.RDX, Register.XMM3, -5));
		}

		[Fact]
		public void pextrq_m_xmm_i() {
			TestAssembler(c => c.pextrq(__qword_ptr[rcx], xmm3, -5), Instruction.Create(Code.Pextrq_rm64_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, -5));
		}

		[Fact]
		public void pextrq_r64_xmm_u() {
			TestAssembler(c => c.pextrq(rdx, xmm3, (byte)0x7F), Instruction.Create(Code.Pextrq_rm64_xmm_imm8, Register.RDX, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void pextrq_m_xmm_u() {
			TestAssembler(c => c.pextrq(__qword_ptr[rcx], xmm3, (byte)0x7F), Instruction.Create(Code.Pextrq_rm64_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, 0x7FU));
		}

		[Fact]
		public void pextrw_r32_mm_i() {
			TestAssembler(c => c.pextrw(edx, mm3, -5), Instruction.Create(Code.Pextrw_r32_mm_imm8, Register.EDX, Register.MM3, -5));
		}

		[Fact]
		public void pextrw_r64_mm_i() {
			TestAssembler(c => c.pextrw(rdx, mm3, -5), Instruction.Create(Code.Pextrw_r64_mm_imm8, Register.RDX, Register.MM3, -5));
		}

		[Fact]
		public void pextrw_r32_xmm_i() {
			TestAssembler(c => c.pextrw(edx, xmm3, -5), Instruction.Create(Code.Pextrw_r32_xmm_imm8, Register.EDX, Register.XMM3, -5));
		}

		[Fact]
		public void pextrw_r64_xmm_i() {
			TestAssembler(c => c.pextrw(rdx, xmm3, -5), Instruction.Create(Code.Pextrw_r64_xmm_imm8, Register.RDX, Register.XMM3, -5));
		}

		[Fact]
		public void pextrw_m_xmm_i() {
			TestAssembler(c => c.pextrw(__dword_ptr[rcx], xmm3, -5), Instruction.Create(Code.Pextrw_r32m16_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, -5));
		}

		[Fact]
		public void pextrw_r32_mm_u() {
			TestAssembler(c => c.pextrw(edx, mm3, (byte)0x7F), Instruction.Create(Code.Pextrw_r32_mm_imm8, Register.EDX, Register.MM3, 0x7FU));
		}

		[Fact]
		public void pextrw_r64_mm_u() {
			TestAssembler(c => c.pextrw(rdx, mm3, (byte)0x7F), Instruction.Create(Code.Pextrw_r64_mm_imm8, Register.RDX, Register.MM3, 0x7FU));
		}

		[Fact]
		public void pextrw_r32_xmm_u() {
			TestAssembler(c => c.pextrw(edx, xmm3, (byte)0x7F), Instruction.Create(Code.Pextrw_r32_xmm_imm8, Register.EDX, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void pextrw_r64_xmm_u() {
			TestAssembler(c => c.pextrw(rdx, xmm3, (byte)0x7F), Instruction.Create(Code.Pextrw_r64_xmm_imm8, Register.RDX, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void pextrw_m_xmm_u() {
			TestAssembler(c => c.pextrw(__dword_ptr[rcx], xmm3, (byte)0x7F), Instruction.Create(Code.Pextrw_r32m16_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, 0x7FU));
		}

		[Fact]
		public void pf2id_mm_mm() {
			TestAssembler(c => c.pf2id(mm2, mm3), Instruction.Create(Code.D3NOW_Pf2id_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pf2id_mm_m() {
			TestAssembler(c => c.pf2id(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pf2id_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pf2iw_mm_mm() {
			TestAssembler(c => c.pf2iw(mm2, mm3), Instruction.Create(Code.D3NOW_Pf2iw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pf2iw_mm_m() {
			TestAssembler(c => c.pf2iw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pf2iw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pfacc_mm_mm() {
			TestAssembler(c => c.pfacc(mm2, mm3), Instruction.Create(Code.D3NOW_Pfacc_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pfacc_mm_m() {
			TestAssembler(c => c.pfacc(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfacc_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pfadd_mm_mm() {
			TestAssembler(c => c.pfadd(mm2, mm3), Instruction.Create(Code.D3NOW_Pfadd_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pfadd_mm_m() {
			TestAssembler(c => c.pfadd(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfadd_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pfcmpeq_mm_mm() {
			TestAssembler(c => c.pfcmpeq(mm2, mm3), Instruction.Create(Code.D3NOW_Pfcmpeq_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pfcmpeq_mm_m() {
			TestAssembler(c => c.pfcmpeq(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfcmpeq_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pfcmpge_mm_mm() {
			TestAssembler(c => c.pfcmpge(mm2, mm3), Instruction.Create(Code.D3NOW_Pfcmpge_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pfcmpge_mm_m() {
			TestAssembler(c => c.pfcmpge(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfcmpge_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pfcmpgt_mm_mm() {
			TestAssembler(c => c.pfcmpgt(mm2, mm3), Instruction.Create(Code.D3NOW_Pfcmpgt_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pfcmpgt_mm_m() {
			TestAssembler(c => c.pfcmpgt(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfcmpgt_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pfmax_mm_mm() {
			TestAssembler(c => c.pfmax(mm2, mm3), Instruction.Create(Code.D3NOW_Pfmax_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pfmax_mm_m() {
			TestAssembler(c => c.pfmax(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfmax_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pfmin_mm_mm() {
			TestAssembler(c => c.pfmin(mm2, mm3), Instruction.Create(Code.D3NOW_Pfmin_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pfmin_mm_m() {
			TestAssembler(c => c.pfmin(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfmin_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pfmul_mm_mm() {
			TestAssembler(c => c.pfmul(mm2, mm3), Instruction.Create(Code.D3NOW_Pfmul_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pfmul_mm_m() {
			TestAssembler(c => c.pfmul(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfmul_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pfnacc_mm_mm() {
			TestAssembler(c => c.pfnacc(mm2, mm3), Instruction.Create(Code.D3NOW_Pfnacc_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pfnacc_mm_m() {
			TestAssembler(c => c.pfnacc(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfnacc_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pfpnacc_mm_mm() {
			TestAssembler(c => c.pfpnacc(mm2, mm3), Instruction.Create(Code.D3NOW_Pfpnacc_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pfpnacc_mm_m() {
			TestAssembler(c => c.pfpnacc(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfpnacc_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pfrcp_mm_mm() {
			TestAssembler(c => c.pfrcp(mm2, mm3), Instruction.Create(Code.D3NOW_Pfrcp_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pfrcp_mm_m() {
			TestAssembler(c => c.pfrcp(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfrcp_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pfrcpit1_mm_mm() {
			TestAssembler(c => c.pfrcpit1(mm2, mm3), Instruction.Create(Code.D3NOW_Pfrcpit1_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pfrcpit1_mm_m() {
			TestAssembler(c => c.pfrcpit1(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfrcpit1_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pfrcpit2_mm_mm() {
			TestAssembler(c => c.pfrcpit2(mm2, mm3), Instruction.Create(Code.D3NOW_Pfrcpit2_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pfrcpit2_mm_m() {
			TestAssembler(c => c.pfrcpit2(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfrcpit2_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pfrsqit1_mm_mm() {
			TestAssembler(c => c.pfrsqit1(mm2, mm3), Instruction.Create(Code.D3NOW_Pfrsqit1_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pfrsqit1_mm_m() {
			TestAssembler(c => c.pfrsqit1(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfrsqit1_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pfrsqrt_mm_mm() {
			TestAssembler(c => c.pfrsqrt(mm2, mm3), Instruction.Create(Code.D3NOW_Pfrsqrt_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pfrsqrt_mm_m() {
			TestAssembler(c => c.pfrsqrt(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfrsqrt_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pfsub_mm_mm() {
			TestAssembler(c => c.pfsub(mm2, mm3), Instruction.Create(Code.D3NOW_Pfsub_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pfsub_mm_m() {
			TestAssembler(c => c.pfsub(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfsub_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pfsubr_mm_mm() {
			TestAssembler(c => c.pfsubr(mm2, mm3), Instruction.Create(Code.D3NOW_Pfsubr_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pfsubr_mm_m() {
			TestAssembler(c => c.pfsubr(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pfsubr_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void phaddd_mm_mm() {
			TestAssembler(c => c.phaddd(mm2, mm3), Instruction.Create(Code.Phaddd_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void phaddd_xmm_xmm() {
			TestAssembler(c => c.phaddd(xmm2, xmm3), Instruction.Create(Code.Phaddd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void phaddd_mm_m() {
			TestAssembler(c => c.phaddd(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Phaddd_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void phaddd_xmm_m() {
			TestAssembler(c => c.phaddd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Phaddd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void phaddsw_mm_mm() {
			TestAssembler(c => c.phaddsw(mm2, mm3), Instruction.Create(Code.Phaddsw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void phaddsw_xmm_xmm() {
			TestAssembler(c => c.phaddsw(xmm2, xmm3), Instruction.Create(Code.Phaddsw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void phaddsw_mm_m() {
			TestAssembler(c => c.phaddsw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Phaddsw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void phaddsw_xmm_m() {
			TestAssembler(c => c.phaddsw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Phaddsw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void phaddw_mm_mm() {
			TestAssembler(c => c.phaddw(mm2, mm3), Instruction.Create(Code.Phaddw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void phaddw_xmm_xmm() {
			TestAssembler(c => c.phaddw(xmm2, xmm3), Instruction.Create(Code.Phaddw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void phaddw_mm_m() {
			TestAssembler(c => c.phaddw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Phaddw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void phaddw_xmm_m() {
			TestAssembler(c => c.phaddw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Phaddw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void phminposuw_xmm_xmm() {
			TestAssembler(c => c.phminposuw(xmm2, xmm3), Instruction.Create(Code.Phminposuw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void phminposuw_xmm_m() {
			TestAssembler(c => c.phminposuw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Phminposuw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void phsubd_mm_mm() {
			TestAssembler(c => c.phsubd(mm2, mm3), Instruction.Create(Code.Phsubd_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void phsubd_xmm_xmm() {
			TestAssembler(c => c.phsubd(xmm2, xmm3), Instruction.Create(Code.Phsubd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void phsubd_mm_m() {
			TestAssembler(c => c.phsubd(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Phsubd_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void phsubd_xmm_m() {
			TestAssembler(c => c.phsubd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Phsubd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void phsubsw_mm_mm() {
			TestAssembler(c => c.phsubsw(mm2, mm3), Instruction.Create(Code.Phsubsw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void phsubsw_xmm_xmm() {
			TestAssembler(c => c.phsubsw(xmm2, xmm3), Instruction.Create(Code.Phsubsw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void phsubsw_mm_m() {
			TestAssembler(c => c.phsubsw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Phsubsw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void phsubsw_xmm_m() {
			TestAssembler(c => c.phsubsw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Phsubsw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void phsubw_mm_mm() {
			TestAssembler(c => c.phsubw(mm2, mm3), Instruction.Create(Code.Phsubw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void phsubw_xmm_xmm() {
			TestAssembler(c => c.phsubw(xmm2, xmm3), Instruction.Create(Code.Phsubw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void phsubw_mm_m() {
			TestAssembler(c => c.phsubw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Phsubw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void phsubw_xmm_m() {
			TestAssembler(c => c.phsubw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Phsubw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pi2fd_mm_mm() {
			TestAssembler(c => c.pi2fd(mm2, mm3), Instruction.Create(Code.D3NOW_Pi2fd_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pi2fd_mm_m() {
			TestAssembler(c => c.pi2fd(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pi2fd_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pi2fw_mm_mm() {
			TestAssembler(c => c.pi2fw(mm2, mm3), Instruction.Create(Code.D3NOW_Pi2fw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pi2fw_mm_m() {
			TestAssembler(c => c.pi2fw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pi2fw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pinsrb_xmm_r32_i() {
			TestAssembler(c => c.pinsrb(xmm2, ebx, -5), Instruction.Create(Code.Pinsrb_xmm_r32m8_imm8, Register.XMM2, Register.EBX, -5));
		}

		[Fact]
		public void pinsrb_xmm_r64_i() {
			TestAssembler(c => c.pinsrb(xmm2, rbx, -5), Instruction.Create(Code.Pinsrb_xmm_r64m8_imm8, Register.XMM2, Register.RBX, -5));
		}

		[Fact]
		public void pinsrb_xmm_m_i() {
			TestAssembler(c => c.pinsrb(xmm2, __dword_ptr[rcx], -5), Instruction.Create(Code.Pinsrb_xmm_r32m8_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void pinsrb_xmm_r32_u() {
			TestAssembler(c => c.pinsrb(xmm2, ebx, (byte)0x7F), Instruction.Create(Code.Pinsrb_xmm_r32m8_imm8, Register.XMM2, Register.EBX, 0x7FU));
		}

		[Fact]
		public void pinsrb_xmm_r64_u() {
			TestAssembler(c => c.pinsrb(xmm2, rbx, (byte)0x7F), Instruction.Create(Code.Pinsrb_xmm_r64m8_imm8, Register.XMM2, Register.RBX, 0x7FU));
		}

		[Fact]
		public void pinsrb_xmm_m_u() {
			TestAssembler(c => c.pinsrb(xmm2, __dword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Pinsrb_xmm_r32m8_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void pinsrd_xmm_r32_i() {
			TestAssembler(c => c.pinsrd(xmm2, ebx, -5), Instruction.Create(Code.Pinsrd_xmm_rm32_imm8, Register.XMM2, Register.EBX, -5));
		}

		[Fact]
		public void pinsrd_xmm_m_i() {
			TestAssembler(c => c.pinsrd(xmm2, __dword_ptr[rcx], -5), Instruction.Create(Code.Pinsrd_xmm_rm32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void pinsrd_xmm_r32_u() {
			TestAssembler(c => c.pinsrd(xmm2, ebx, (byte)0x7F), Instruction.Create(Code.Pinsrd_xmm_rm32_imm8, Register.XMM2, Register.EBX, 0x7FU));
		}

		[Fact]
		public void pinsrd_xmm_m_u() {
			TestAssembler(c => c.pinsrd(xmm2, __dword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Pinsrd_xmm_rm32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void pinsrq_xmm_r64_i() {
			TestAssembler(c => c.pinsrq(xmm2, rbx, -5), Instruction.Create(Code.Pinsrq_xmm_rm64_imm8, Register.XMM2, Register.RBX, -5));
		}

		[Fact]
		public void pinsrq_xmm_m_i() {
			TestAssembler(c => c.pinsrq(xmm2, __qword_ptr[rcx], -5), Instruction.Create(Code.Pinsrq_xmm_rm64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void pinsrq_xmm_r64_u() {
			TestAssembler(c => c.pinsrq(xmm2, rbx, (byte)0x7F), Instruction.Create(Code.Pinsrq_xmm_rm64_imm8, Register.XMM2, Register.RBX, 0x7FU));
		}

		[Fact]
		public void pinsrq_xmm_m_u() {
			TestAssembler(c => c.pinsrq(xmm2, __qword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Pinsrq_xmm_rm64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void pinsrw_mm_r32_i() {
			TestAssembler(c => c.pinsrw(mm2, ebx, -5), Instruction.Create(Code.Pinsrw_mm_r32m16_imm8, Register.MM2, Register.EBX, -5));
		}

		[Fact]
		public void pinsrw_xmm_r32_i() {
			TestAssembler(c => c.pinsrw(xmm2, ebx, -5), Instruction.Create(Code.Pinsrw_xmm_r32m16_imm8, Register.XMM2, Register.EBX, -5));
		}

		[Fact]
		public void pinsrw_mm_r64_i() {
			TestAssembler(c => c.pinsrw(mm2, rbx, -5), Instruction.Create(Code.Pinsrw_mm_r64m16_imm8, Register.MM2, Register.RBX, -5));
		}

		[Fact]
		public void pinsrw_xmm_r64_i() {
			TestAssembler(c => c.pinsrw(xmm2, rbx, -5), Instruction.Create(Code.Pinsrw_xmm_r64m16_imm8, Register.XMM2, Register.RBX, -5));
		}

		[Fact]
		public void pinsrw_mm_m_i() {
			TestAssembler(c => c.pinsrw(mm2, __dword_ptr[rcx], -5), Instruction.Create(Code.Pinsrw_mm_r32m16_imm8, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void pinsrw_xmm_m_i() {
			TestAssembler(c => c.pinsrw(xmm2, __dword_ptr[rcx], -5), Instruction.Create(Code.Pinsrw_xmm_r32m16_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void pinsrw_mm_r32_u() {
			TestAssembler(c => c.pinsrw(mm2, ebx, (byte)0x7F), Instruction.Create(Code.Pinsrw_mm_r32m16_imm8, Register.MM2, Register.EBX, 0x7FU));
		}

		[Fact]
		public void pinsrw_xmm_r32_u() {
			TestAssembler(c => c.pinsrw(xmm2, ebx, (byte)0x7F), Instruction.Create(Code.Pinsrw_xmm_r32m16_imm8, Register.XMM2, Register.EBX, 0x7FU));
		}

		[Fact]
		public void pinsrw_mm_r64_u() {
			TestAssembler(c => c.pinsrw(mm2, rbx, (byte)0x7F), Instruction.Create(Code.Pinsrw_mm_r64m16_imm8, Register.MM2, Register.RBX, 0x7FU));
		}

		[Fact]
		public void pinsrw_xmm_r64_u() {
			TestAssembler(c => c.pinsrw(xmm2, rbx, (byte)0x7F), Instruction.Create(Code.Pinsrw_xmm_r64m16_imm8, Register.XMM2, Register.RBX, 0x7FU));
		}

		[Fact]
		public void pinsrw_mm_m_u() {
			TestAssembler(c => c.pinsrw(mm2, __dword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Pinsrw_mm_r32m16_imm8, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void pinsrw_xmm_m_u() {
			TestAssembler(c => c.pinsrw(xmm2, __dword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Pinsrw_xmm_r32m16_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void pmaddubsw_mm_mm() {
			TestAssembler(c => c.pmaddubsw(mm2, mm3), Instruction.Create(Code.Pmaddubsw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pmaddubsw_xmm_xmm() {
			TestAssembler(c => c.pmaddubsw(xmm2, xmm3), Instruction.Create(Code.Pmaddubsw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pmaddubsw_mm_m() {
			TestAssembler(c => c.pmaddubsw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pmaddubsw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmaddubsw_xmm_m() {
			TestAssembler(c => c.pmaddubsw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmaddubsw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmaddwd_mm_mm() {
			TestAssembler(c => c.pmaddwd(mm2, mm3), Instruction.Create(Code.Pmaddwd_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pmaddwd_xmm_xmm() {
			TestAssembler(c => c.pmaddwd(xmm2, xmm3), Instruction.Create(Code.Pmaddwd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pmaddwd_mm_m() {
			TestAssembler(c => c.pmaddwd(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pmaddwd_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmaddwd_xmm_m() {
			TestAssembler(c => c.pmaddwd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmaddwd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmaxsb_xmm_xmm() {
			TestAssembler(c => c.pmaxsb(xmm2, xmm3), Instruction.Create(Code.Pmaxsb_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pmaxsb_xmm_m() {
			TestAssembler(c => c.pmaxsb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmaxsb_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmaxsd_xmm_xmm() {
			TestAssembler(c => c.pmaxsd(xmm2, xmm3), Instruction.Create(Code.Pmaxsd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pmaxsd_xmm_m() {
			TestAssembler(c => c.pmaxsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmaxsd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmaxsw_mm_mm() {
			TestAssembler(c => c.pmaxsw(mm2, mm3), Instruction.Create(Code.Pmaxsw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pmaxsw_xmm_xmm() {
			TestAssembler(c => c.pmaxsw(xmm2, xmm3), Instruction.Create(Code.Pmaxsw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pmaxsw_mm_m() {
			TestAssembler(c => c.pmaxsw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pmaxsw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmaxsw_xmm_m() {
			TestAssembler(c => c.pmaxsw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmaxsw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmaxub_mm_mm() {
			TestAssembler(c => c.pmaxub(mm2, mm3), Instruction.Create(Code.Pmaxub_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pmaxub_xmm_xmm() {
			TestAssembler(c => c.pmaxub(xmm2, xmm3), Instruction.Create(Code.Pmaxub_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pmaxub_mm_m() {
			TestAssembler(c => c.pmaxub(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pmaxub_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmaxub_xmm_m() {
			TestAssembler(c => c.pmaxub(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmaxub_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmaxud_xmm_xmm() {
			TestAssembler(c => c.pmaxud(xmm2, xmm3), Instruction.Create(Code.Pmaxud_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pmaxud_xmm_m() {
			TestAssembler(c => c.pmaxud(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmaxud_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmaxuw_xmm_xmm() {
			TestAssembler(c => c.pmaxuw(xmm2, xmm3), Instruction.Create(Code.Pmaxuw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pmaxuw_xmm_m() {
			TestAssembler(c => c.pmaxuw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmaxuw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pminsb_xmm_xmm() {
			TestAssembler(c => c.pminsb(xmm2, xmm3), Instruction.Create(Code.Pminsb_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pminsb_xmm_m() {
			TestAssembler(c => c.pminsb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pminsb_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pminsd_xmm_xmm() {
			TestAssembler(c => c.pminsd(xmm2, xmm3), Instruction.Create(Code.Pminsd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pminsd_xmm_m() {
			TestAssembler(c => c.pminsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pminsd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pminsw_mm_mm() {
			TestAssembler(c => c.pminsw(mm2, mm3), Instruction.Create(Code.Pminsw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pminsw_xmm_xmm() {
			TestAssembler(c => c.pminsw(xmm2, xmm3), Instruction.Create(Code.Pminsw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pminsw_mm_m() {
			TestAssembler(c => c.pminsw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pminsw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pminsw_xmm_m() {
			TestAssembler(c => c.pminsw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pminsw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pminub_mm_mm() {
			TestAssembler(c => c.pminub(mm2, mm3), Instruction.Create(Code.Pminub_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pminub_xmm_xmm() {
			TestAssembler(c => c.pminub(xmm2, xmm3), Instruction.Create(Code.Pminub_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pminub_mm_m() {
			TestAssembler(c => c.pminub(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pminub_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pminub_xmm_m() {
			TestAssembler(c => c.pminub(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pminub_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pminud_xmm_xmm() {
			TestAssembler(c => c.pminud(xmm2, xmm3), Instruction.Create(Code.Pminud_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pminud_xmm_m() {
			TestAssembler(c => c.pminud(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pminud_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pminuw_xmm_xmm() {
			TestAssembler(c => c.pminuw(xmm2, xmm3), Instruction.Create(Code.Pminuw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pminuw_xmm_m() {
			TestAssembler(c => c.pminuw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pminuw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmovmskb_r32_mm() {
			TestAssembler(c => c.pmovmskb(edx, mm3), Instruction.Create(Code.Pmovmskb_r32_mm, Register.EDX, Register.MM3));
		}

		[Fact]
		public void pmovmskb_r64_mm() {
			TestAssembler(c => c.pmovmskb(rdx, mm3), Instruction.Create(Code.Pmovmskb_r64_mm, Register.RDX, Register.MM3));
		}

		[Fact]
		public void pmovmskb_r32_xmm() {
			TestAssembler(c => c.pmovmskb(edx, xmm3), Instruction.Create(Code.Pmovmskb_r32_xmm, Register.EDX, Register.XMM3));
		}

		[Fact]
		public void pmovmskb_r64_xmm() {
			TestAssembler(c => c.pmovmskb(rdx, xmm3), Instruction.Create(Code.Pmovmskb_r64_xmm, Register.RDX, Register.XMM3));
		}

		[Fact]
		public void pmovsxbd_xmm_xmm() {
			TestAssembler(c => c.pmovsxbd(xmm2, xmm3), Instruction.Create(Code.Pmovsxbd_xmm_xmmm32, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pmovsxbd_xmm_m() {
			TestAssembler(c => c.pmovsxbd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmovsxbd_xmm_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmovsxbq_xmm_xmm() {
			TestAssembler(c => c.pmovsxbq(xmm2, xmm3), Instruction.Create(Code.Pmovsxbq_xmm_xmmm16, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pmovsxbq_xmm_m() {
			TestAssembler(c => c.pmovsxbq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmovsxbq_xmm_xmmm16, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmovsxbw_xmm_xmm() {
			TestAssembler(c => c.pmovsxbw(xmm2, xmm3), Instruction.Create(Code.Pmovsxbw_xmm_xmmm64, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pmovsxbw_xmm_m() {
			TestAssembler(c => c.pmovsxbw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmovsxbw_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmovsxdq_xmm_xmm() {
			TestAssembler(c => c.pmovsxdq(xmm2, xmm3), Instruction.Create(Code.Pmovsxdq_xmm_xmmm64, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pmovsxdq_xmm_m() {
			TestAssembler(c => c.pmovsxdq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmovsxdq_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmovsxwd_xmm_xmm() {
			TestAssembler(c => c.pmovsxwd(xmm2, xmm3), Instruction.Create(Code.Pmovsxwd_xmm_xmmm64, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pmovsxwd_xmm_m() {
			TestAssembler(c => c.pmovsxwd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmovsxwd_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmovsxwq_xmm_xmm() {
			TestAssembler(c => c.pmovsxwq(xmm2, xmm3), Instruction.Create(Code.Pmovsxwq_xmm_xmmm32, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pmovsxwq_xmm_m() {
			TestAssembler(c => c.pmovsxwq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmovsxwq_xmm_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmovzxbd_xmm_xmm() {
			TestAssembler(c => c.pmovzxbd(xmm2, xmm3), Instruction.Create(Code.Pmovzxbd_xmm_xmmm32, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pmovzxbd_xmm_m() {
			TestAssembler(c => c.pmovzxbd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmovzxbd_xmm_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmovzxbq_xmm_xmm() {
			TestAssembler(c => c.pmovzxbq(xmm2, xmm3), Instruction.Create(Code.Pmovzxbq_xmm_xmmm16, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pmovzxbq_xmm_m() {
			TestAssembler(c => c.pmovzxbq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmovzxbq_xmm_xmmm16, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmovzxbw_xmm_xmm() {
			TestAssembler(c => c.pmovzxbw(xmm2, xmm3), Instruction.Create(Code.Pmovzxbw_xmm_xmmm64, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pmovzxbw_xmm_m() {
			TestAssembler(c => c.pmovzxbw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmovzxbw_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmovzxdq_xmm_xmm() {
			TestAssembler(c => c.pmovzxdq(xmm2, xmm3), Instruction.Create(Code.Pmovzxdq_xmm_xmmm64, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pmovzxdq_xmm_m() {
			TestAssembler(c => c.pmovzxdq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmovzxdq_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmovzxwd_xmm_xmm() {
			TestAssembler(c => c.pmovzxwd(xmm2, xmm3), Instruction.Create(Code.Pmovzxwd_xmm_xmmm64, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pmovzxwd_xmm_m() {
			TestAssembler(c => c.pmovzxwd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmovzxwd_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmovzxwq_xmm_xmm() {
			TestAssembler(c => c.pmovzxwq(xmm2, xmm3), Instruction.Create(Code.Pmovzxwq_xmm_xmmm32, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pmovzxwq_xmm_m() {
			TestAssembler(c => c.pmovzxwq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmovzxwq_xmm_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmuldq_xmm_xmm() {
			TestAssembler(c => c.pmuldq(xmm2, xmm3), Instruction.Create(Code.Pmuldq_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pmuldq_xmm_m() {
			TestAssembler(c => c.pmuldq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmuldq_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmulhrsw_mm_mm() {
			TestAssembler(c => c.pmulhrsw(mm2, mm3), Instruction.Create(Code.Pmulhrsw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pmulhrsw_xmm_xmm() {
			TestAssembler(c => c.pmulhrsw(xmm2, xmm3), Instruction.Create(Code.Pmulhrsw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pmulhrsw_mm_m() {
			TestAssembler(c => c.pmulhrsw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pmulhrsw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmulhrsw_xmm_m() {
			TestAssembler(c => c.pmulhrsw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmulhrsw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmulhrw_mm_mm() {
			TestAssembler(c => c.pmulhrw(mm2, mm3), Instruction.Create(Code.D3NOW_Pmulhrw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pmulhrw_mm_m() {
			TestAssembler(c => c.pmulhrw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pmulhrw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmulhuw_mm_mm() {
			TestAssembler(c => c.pmulhuw(mm2, mm3), Instruction.Create(Code.Pmulhuw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pmulhuw_xmm_xmm() {
			TestAssembler(c => c.pmulhuw(xmm2, xmm3), Instruction.Create(Code.Pmulhuw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pmulhuw_mm_m() {
			TestAssembler(c => c.pmulhuw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pmulhuw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmulhuw_xmm_m() {
			TestAssembler(c => c.pmulhuw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmulhuw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmulhw_mm_mm() {
			TestAssembler(c => c.pmulhw(mm2, mm3), Instruction.Create(Code.Pmulhw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pmulhw_xmm_xmm() {
			TestAssembler(c => c.pmulhw(xmm2, xmm3), Instruction.Create(Code.Pmulhw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pmulhw_mm_m() {
			TestAssembler(c => c.pmulhw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pmulhw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmulhw_xmm_m() {
			TestAssembler(c => c.pmulhw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmulhw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmulld_xmm_xmm() {
			TestAssembler(c => c.pmulld(xmm2, xmm3), Instruction.Create(Code.Pmulld_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pmulld_xmm_m() {
			TestAssembler(c => c.pmulld(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmulld_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmullw_mm_mm() {
			TestAssembler(c => c.pmullw(mm2, mm3), Instruction.Create(Code.Pmullw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pmullw_xmm_xmm() {
			TestAssembler(c => c.pmullw(xmm2, xmm3), Instruction.Create(Code.Pmullw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pmullw_mm_m() {
			TestAssembler(c => c.pmullw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pmullw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmullw_xmm_m() {
			TestAssembler(c => c.pmullw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmullw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmuludq_mm_mm() {
			TestAssembler(c => c.pmuludq(mm2, mm3), Instruction.Create(Code.Pmuludq_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pmuludq_xmm_xmm() {
			TestAssembler(c => c.pmuludq(xmm2, xmm3), Instruction.Create(Code.Pmuludq_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pmuludq_mm_m() {
			TestAssembler(c => c.pmuludq(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pmuludq_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pmuludq_xmm_m() {
			TestAssembler(c => c.pmuludq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pmuludq_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pop_r16() {
			TestAssembler(c => c.pop(dx), Instruction.Create(Code.Pop_r16, Register.DX));
		}

		[Fact]
		public void pop_r64() {
			TestAssembler(c => c.pop(rdx), Instruction.Create(Code.Pop_r64, Register.RDX));
		}

		[Fact]
		public void pop_seg() {
			{ /* if (dst == Register.FS) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.pop(fs), Instruction.Create(Code.Popq_FS, Register.FS));
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (dst == Register.GS) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.pop(gs), Instruction.Create(Code.Popq_GS, Register.GS));
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (dst == Register.ES) */
				{ /* if (Bitness >= 32) */
					// Skipping Popd_ES - Not supported by current bitness
				} /* else skip !(Bitness >= 32) not supported by this Assembler bitness */
			} /* else */ { /* if (dst == Register.SS) */
				{ /* if (Bitness >= 32) */
					// Skipping Popd_SS - Not supported by current bitness
				} /* else skip !(Bitness >= 32) not supported by this Assembler bitness */
			} /* else */ { /* if (dst == Register.DS) */
				{ /* if (Bitness >= 32) */
					// Skipping Popd_DS - Not supported by current bitness
				} /* else skip !(Bitness >= 32) not supported by this Assembler bitness */
			}
		}

		[Fact]
		public void pop_m() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.pop(__qword_ptr[rdx]), Instruction.Create(Code.Pop_rm64, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				// Skipping Pop_rm32 - Not supported by current bitness
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.pop(__word_ptr[rdx]), Instruction.Create(Code.Pop_rm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.pop(__zmmword_ptr[rdx]), Instruction.Create(Code.Pop_rm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void popcnt_r16_r16() {
			TestAssembler(c => c.popcnt(dx, bx), Instruction.Create(Code.Popcnt_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void popcnt_r32_r32() {
			TestAssembler(c => c.popcnt(edx, ebx), Instruction.Create(Code.Popcnt_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void popcnt_r64_r64() {
			TestAssembler(c => c.popcnt(rdx, rbx), Instruction.Create(Code.Popcnt_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void popcnt_r16_m() {
			TestAssembler(c => c.popcnt(dx, __word_ptr[rcx]), Instruction.Create(Code.Popcnt_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void popcnt_r32_m() {
			TestAssembler(c => c.popcnt(edx, __dword_ptr[rcx]), Instruction.Create(Code.Popcnt_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void popcnt_r64_m() {
			TestAssembler(c => c.popcnt(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Popcnt_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void popf() {
			TestAssembler(c => c.popf(), Instruction.Create(Code.Popfw));
		}

		[Fact]
		public void popfq() {
			TestAssembler(c => c.popfq(), Instruction.Create(Code.Popfq));
		}

		[Fact]
		public void por_mm_mm() {
			TestAssembler(c => c.por(mm2, mm3), Instruction.Create(Code.Por_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void por_xmm_xmm() {
			TestAssembler(c => c.por(xmm2, xmm3), Instruction.Create(Code.Por_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void por_mm_m() {
			TestAssembler(c => c.por(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Por_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void por_xmm_m() {
			TestAssembler(c => c.por(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Por_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void prefetch_m() {
			TestAssembler(c => c.prefetch(__[rcx]), Instruction.Create(Code.Prefetch_m8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void prefetchnta_m() {
			TestAssembler(c => c.prefetchnta(__[rcx]), Instruction.Create(Code.Prefetchnta_m8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void prefetcht0_m() {
			TestAssembler(c => c.prefetcht0(__[rcx]), Instruction.Create(Code.Prefetcht0_m8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void prefetcht1_m() {
			TestAssembler(c => c.prefetcht1(__[rcx]), Instruction.Create(Code.Prefetcht1_m8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void prefetcht2_m() {
			TestAssembler(c => c.prefetcht2(__[rcx]), Instruction.Create(Code.Prefetcht2_m8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void prefetchw_m() {
			TestAssembler(c => c.prefetchw(__[rcx]), Instruction.Create(Code.Prefetchw_m8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void prefetchwt1_m() {
			TestAssembler(c => c.prefetchwt1(__[rcx]), Instruction.Create(Code.Prefetchwt1_m8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psadbw_mm_mm() {
			TestAssembler(c => c.psadbw(mm2, mm3), Instruction.Create(Code.Psadbw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void psadbw_xmm_xmm() {
			TestAssembler(c => c.psadbw(xmm2, xmm3), Instruction.Create(Code.Psadbw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void psadbw_mm_m() {
			TestAssembler(c => c.psadbw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psadbw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psadbw_xmm_m() {
			TestAssembler(c => c.psadbw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psadbw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pshufb_mm_mm() {
			TestAssembler(c => c.pshufb(mm2, mm3), Instruction.Create(Code.Pshufb_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pshufb_xmm_xmm() {
			TestAssembler(c => c.pshufb(xmm2, xmm3), Instruction.Create(Code.Pshufb_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pshufb_mm_m() {
			TestAssembler(c => c.pshufb(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pshufb_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pshufb_xmm_m() {
			TestAssembler(c => c.pshufb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pshufb_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pshufd_xmm_xmm_i() {
			TestAssembler(c => c.pshufd(xmm2, xmm3, -5), Instruction.Create(Code.Pshufd_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void pshufd_xmm_m_i() {
			TestAssembler(c => c.pshufd(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Pshufd_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void pshufd_xmm_xmm_u() {
			TestAssembler(c => c.pshufd(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Pshufd_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void pshufd_xmm_m_u() {
			TestAssembler(c => c.pshufd(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Pshufd_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void pshufhw_xmm_xmm_i() {
			TestAssembler(c => c.pshufhw(xmm2, xmm3, -5), Instruction.Create(Code.Pshufhw_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void pshufhw_xmm_m_i() {
			TestAssembler(c => c.pshufhw(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Pshufhw_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void pshufhw_xmm_xmm_u() {
			TestAssembler(c => c.pshufhw(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Pshufhw_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void pshufhw_xmm_m_u() {
			TestAssembler(c => c.pshufhw(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Pshufhw_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void pshuflw_xmm_xmm_i() {
			TestAssembler(c => c.pshuflw(xmm2, xmm3, -5), Instruction.Create(Code.Pshuflw_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void pshuflw_xmm_m_i() {
			TestAssembler(c => c.pshuflw(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Pshuflw_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void pshuflw_xmm_xmm_u() {
			TestAssembler(c => c.pshuflw(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Pshuflw_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void pshuflw_xmm_m_u() {
			TestAssembler(c => c.pshuflw(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Pshuflw_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void pshufw_mm_mm_i() {
			TestAssembler(c => c.pshufw(mm2, mm3, -5), Instruction.Create(Code.Pshufw_mm_mmm64_imm8, Register.MM2, Register.MM3, -5));
		}

		[Fact]
		public void pshufw_mm_m_i() {
			TestAssembler(c => c.pshufw(mm2, __qword_ptr[rcx], -5), Instruction.Create(Code.Pshufw_mm_mmm64_imm8, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void pshufw_mm_mm_u() {
			TestAssembler(c => c.pshufw(mm2, mm3, (byte)0x7F), Instruction.Create(Code.Pshufw_mm_mmm64_imm8, Register.MM2, Register.MM3, 0x7FU));
		}

		[Fact]
		public void pshufw_mm_m_u() {
			TestAssembler(c => c.pshufw(mm2, __qword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Pshufw_mm_mmm64_imm8, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void psignb_mm_mm() {
			TestAssembler(c => c.psignb(mm2, mm3), Instruction.Create(Code.Psignb_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void psignb_xmm_xmm() {
			TestAssembler(c => c.psignb(xmm2, xmm3), Instruction.Create(Code.Psignb_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void psignb_mm_m() {
			TestAssembler(c => c.psignb(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psignb_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psignb_xmm_m() {
			TestAssembler(c => c.psignb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psignb_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psignd_mm_mm() {
			TestAssembler(c => c.psignd(mm2, mm3), Instruction.Create(Code.Psignd_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void psignd_xmm_xmm() {
			TestAssembler(c => c.psignd(xmm2, xmm3), Instruction.Create(Code.Psignd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void psignd_mm_m() {
			TestAssembler(c => c.psignd(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psignd_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psignd_xmm_m() {
			TestAssembler(c => c.psignd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psignd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psignw_mm_mm() {
			TestAssembler(c => c.psignw(mm2, mm3), Instruction.Create(Code.Psignw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void psignw_xmm_xmm() {
			TestAssembler(c => c.psignw(xmm2, xmm3), Instruction.Create(Code.Psignw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void psignw_mm_m() {
			TestAssembler(c => c.psignw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psignw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psignw_xmm_m() {
			TestAssembler(c => c.psignw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psignw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pslld_mm_mm() {
			TestAssembler(c => c.pslld(mm2, mm3), Instruction.Create(Code.Pslld_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pslld_xmm_xmm() {
			TestAssembler(c => c.pslld(xmm2, xmm3), Instruction.Create(Code.Pslld_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pslld_mm_m() {
			TestAssembler(c => c.pslld(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pslld_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pslld_xmm_m() {
			TestAssembler(c => c.pslld(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pslld_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pslld_mm_i() {
			TestAssembler(c => c.pslld(mm2, -5), Instruction.Create(Code.Pslld_mm_imm8, Register.MM2, -5));
		}

		[Fact]
		public void pslld_xmm_i() {
			TestAssembler(c => c.pslld(xmm2, -5), Instruction.Create(Code.Pslld_xmm_imm8, Register.XMM2, -5));
		}

		[Fact]
		public void pslld_mm_u() {
			TestAssembler(c => c.pslld(mm2, (byte)0x7F), Instruction.Create(Code.Pslld_mm_imm8, Register.MM2, 0x7FU));
		}

		[Fact]
		public void pslld_xmm_u() {
			TestAssembler(c => c.pslld(xmm2, (byte)0x7F), Instruction.Create(Code.Pslld_xmm_imm8, Register.XMM2, 0x7FU));
		}

		[Fact]
		public void pslldq_xmm_i() {
			TestAssembler(c => c.pslldq(xmm2, -5), Instruction.Create(Code.Pslldq_xmm_imm8, Register.XMM2, -5));
		}

		[Fact]
		public void pslldq_xmm_u() {
			TestAssembler(c => c.pslldq(xmm2, (byte)0x7F), Instruction.Create(Code.Pslldq_xmm_imm8, Register.XMM2, 0x7FU));
		}

		[Fact]
		public void psllq_mm_mm() {
			TestAssembler(c => c.psllq(mm2, mm3), Instruction.Create(Code.Psllq_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void psllq_xmm_xmm() {
			TestAssembler(c => c.psllq(xmm2, xmm3), Instruction.Create(Code.Psllq_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void psllq_mm_m() {
			TestAssembler(c => c.psllq(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psllq_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psllq_xmm_m() {
			TestAssembler(c => c.psllq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psllq_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psllq_mm_i() {
			TestAssembler(c => c.psllq(mm2, -5), Instruction.Create(Code.Psllq_mm_imm8, Register.MM2, -5));
		}

		[Fact]
		public void psllq_xmm_i() {
			TestAssembler(c => c.psllq(xmm2, -5), Instruction.Create(Code.Psllq_xmm_imm8, Register.XMM2, -5));
		}

		[Fact]
		public void psllq_mm_u() {
			TestAssembler(c => c.psllq(mm2, (byte)0x7F), Instruction.Create(Code.Psllq_mm_imm8, Register.MM2, 0x7FU));
		}

		[Fact]
		public void psllq_xmm_u() {
			TestAssembler(c => c.psllq(xmm2, (byte)0x7F), Instruction.Create(Code.Psllq_xmm_imm8, Register.XMM2, 0x7FU));
		}

		[Fact]
		public void psllw_mm_mm() {
			TestAssembler(c => c.psllw(mm2, mm3), Instruction.Create(Code.Psllw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void psllw_xmm_xmm() {
			TestAssembler(c => c.psllw(xmm2, xmm3), Instruction.Create(Code.Psllw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void psllw_mm_m() {
			TestAssembler(c => c.psllw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psllw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psllw_xmm_m() {
			TestAssembler(c => c.psllw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psllw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psllw_mm_i() {
			TestAssembler(c => c.psllw(mm2, -5), Instruction.Create(Code.Psllw_mm_imm8, Register.MM2, -5));
		}

		[Fact]
		public void psllw_xmm_i() {
			TestAssembler(c => c.psllw(xmm2, -5), Instruction.Create(Code.Psllw_xmm_imm8, Register.XMM2, -5));
		}

		[Fact]
		public void psllw_mm_u() {
			TestAssembler(c => c.psllw(mm2, (byte)0x7F), Instruction.Create(Code.Psllw_mm_imm8, Register.MM2, 0x7FU));
		}

		[Fact]
		public void psllw_xmm_u() {
			TestAssembler(c => c.psllw(xmm2, (byte)0x7F), Instruction.Create(Code.Psllw_xmm_imm8, Register.XMM2, 0x7FU));
		}

		[Fact]
		public void psmash() {
			TestAssembler(c => c.psmash(), Instruction.Create(Code.Psmash));
		}

		[Fact]
		public void psrad_mm_mm() {
			TestAssembler(c => c.psrad(mm2, mm3), Instruction.Create(Code.Psrad_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void psrad_xmm_xmm() {
			TestAssembler(c => c.psrad(xmm2, xmm3), Instruction.Create(Code.Psrad_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void psrad_mm_m() {
			TestAssembler(c => c.psrad(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psrad_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psrad_xmm_m() {
			TestAssembler(c => c.psrad(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psrad_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psrad_mm_i() {
			TestAssembler(c => c.psrad(mm2, -5), Instruction.Create(Code.Psrad_mm_imm8, Register.MM2, -5));
		}

		[Fact]
		public void psrad_xmm_i() {
			TestAssembler(c => c.psrad(xmm2, -5), Instruction.Create(Code.Psrad_xmm_imm8, Register.XMM2, -5));
		}

		[Fact]
		public void psrad_mm_u() {
			TestAssembler(c => c.psrad(mm2, (byte)0x7F), Instruction.Create(Code.Psrad_mm_imm8, Register.MM2, 0x7FU));
		}

		[Fact]
		public void psrad_xmm_u() {
			TestAssembler(c => c.psrad(xmm2, (byte)0x7F), Instruction.Create(Code.Psrad_xmm_imm8, Register.XMM2, 0x7FU));
		}

		[Fact]
		public void psraw_mm_mm() {
			TestAssembler(c => c.psraw(mm2, mm3), Instruction.Create(Code.Psraw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void psraw_xmm_xmm() {
			TestAssembler(c => c.psraw(xmm2, xmm3), Instruction.Create(Code.Psraw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void psraw_mm_m() {
			TestAssembler(c => c.psraw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psraw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psraw_xmm_m() {
			TestAssembler(c => c.psraw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psraw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psraw_mm_i() {
			TestAssembler(c => c.psraw(mm2, -5), Instruction.Create(Code.Psraw_mm_imm8, Register.MM2, -5));
		}

		[Fact]
		public void psraw_xmm_i() {
			TestAssembler(c => c.psraw(xmm2, -5), Instruction.Create(Code.Psraw_xmm_imm8, Register.XMM2, -5));
		}

		[Fact]
		public void psraw_mm_u() {
			TestAssembler(c => c.psraw(mm2, (byte)0x7F), Instruction.Create(Code.Psraw_mm_imm8, Register.MM2, 0x7FU));
		}

		[Fact]
		public void psraw_xmm_u() {
			TestAssembler(c => c.psraw(xmm2, (byte)0x7F), Instruction.Create(Code.Psraw_xmm_imm8, Register.XMM2, 0x7FU));
		}

		[Fact]
		public void psrld_mm_mm() {
			TestAssembler(c => c.psrld(mm2, mm3), Instruction.Create(Code.Psrld_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void psrld_xmm_xmm() {
			TestAssembler(c => c.psrld(xmm2, xmm3), Instruction.Create(Code.Psrld_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void psrld_mm_m() {
			TestAssembler(c => c.psrld(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psrld_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psrld_xmm_m() {
			TestAssembler(c => c.psrld(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psrld_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psrld_mm_i() {
			TestAssembler(c => c.psrld(mm2, -5), Instruction.Create(Code.Psrld_mm_imm8, Register.MM2, -5));
		}

		[Fact]
		public void psrld_xmm_i() {
			TestAssembler(c => c.psrld(xmm2, -5), Instruction.Create(Code.Psrld_xmm_imm8, Register.XMM2, -5));
		}

		[Fact]
		public void psrld_mm_u() {
			TestAssembler(c => c.psrld(mm2, (byte)0x7F), Instruction.Create(Code.Psrld_mm_imm8, Register.MM2, 0x7FU));
		}

		[Fact]
		public void psrld_xmm_u() {
			TestAssembler(c => c.psrld(xmm2, (byte)0x7F), Instruction.Create(Code.Psrld_xmm_imm8, Register.XMM2, 0x7FU));
		}

		[Fact]
		public void psrldq_xmm_i() {
			TestAssembler(c => c.psrldq(xmm2, -5), Instruction.Create(Code.Psrldq_xmm_imm8, Register.XMM2, -5));
		}

		[Fact]
		public void psrldq_xmm_u() {
			TestAssembler(c => c.psrldq(xmm2, (byte)0x7F), Instruction.Create(Code.Psrldq_xmm_imm8, Register.XMM2, 0x7FU));
		}

		[Fact]
		public void psrlq_mm_mm() {
			TestAssembler(c => c.psrlq(mm2, mm3), Instruction.Create(Code.Psrlq_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void psrlq_xmm_xmm() {
			TestAssembler(c => c.psrlq(xmm2, xmm3), Instruction.Create(Code.Psrlq_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void psrlq_mm_m() {
			TestAssembler(c => c.psrlq(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psrlq_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psrlq_xmm_m() {
			TestAssembler(c => c.psrlq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psrlq_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psrlq_mm_i() {
			TestAssembler(c => c.psrlq(mm2, -5), Instruction.Create(Code.Psrlq_mm_imm8, Register.MM2, -5));
		}

		[Fact]
		public void psrlq_xmm_i() {
			TestAssembler(c => c.psrlq(xmm2, -5), Instruction.Create(Code.Psrlq_xmm_imm8, Register.XMM2, -5));
		}

		[Fact]
		public void psrlq_mm_u() {
			TestAssembler(c => c.psrlq(mm2, (byte)0x7F), Instruction.Create(Code.Psrlq_mm_imm8, Register.MM2, 0x7FU));
		}

		[Fact]
		public void psrlq_xmm_u() {
			TestAssembler(c => c.psrlq(xmm2, (byte)0x7F), Instruction.Create(Code.Psrlq_xmm_imm8, Register.XMM2, 0x7FU));
		}

		[Fact]
		public void psrlw_mm_mm() {
			TestAssembler(c => c.psrlw(mm2, mm3), Instruction.Create(Code.Psrlw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void psrlw_xmm_xmm() {
			TestAssembler(c => c.psrlw(xmm2, xmm3), Instruction.Create(Code.Psrlw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void psrlw_mm_m() {
			TestAssembler(c => c.psrlw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psrlw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psrlw_xmm_m() {
			TestAssembler(c => c.psrlw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psrlw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psrlw_mm_i() {
			TestAssembler(c => c.psrlw(mm2, -5), Instruction.Create(Code.Psrlw_mm_imm8, Register.MM2, -5));
		}

		[Fact]
		public void psrlw_xmm_i() {
			TestAssembler(c => c.psrlw(xmm2, -5), Instruction.Create(Code.Psrlw_xmm_imm8, Register.XMM2, -5));
		}

		[Fact]
		public void psrlw_mm_u() {
			TestAssembler(c => c.psrlw(mm2, (byte)0x7F), Instruction.Create(Code.Psrlw_mm_imm8, Register.MM2, 0x7FU));
		}

		[Fact]
		public void psrlw_xmm_u() {
			TestAssembler(c => c.psrlw(xmm2, (byte)0x7F), Instruction.Create(Code.Psrlw_xmm_imm8, Register.XMM2, 0x7FU));
		}

		[Fact]
		public void psubb_mm_mm() {
			TestAssembler(c => c.psubb(mm2, mm3), Instruction.Create(Code.Psubb_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void psubb_xmm_xmm() {
			TestAssembler(c => c.psubb(xmm2, xmm3), Instruction.Create(Code.Psubb_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void psubb_mm_m() {
			TestAssembler(c => c.psubb(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psubb_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psubb_xmm_m() {
			TestAssembler(c => c.psubb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psubb_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psubd_mm_mm() {
			TestAssembler(c => c.psubd(mm2, mm3), Instruction.Create(Code.Psubd_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void psubd_xmm_xmm() {
			TestAssembler(c => c.psubd(xmm2, xmm3), Instruction.Create(Code.Psubd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void psubd_mm_m() {
			TestAssembler(c => c.psubd(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psubd_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psubd_xmm_m() {
			TestAssembler(c => c.psubd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psubd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psubq_mm_mm() {
			TestAssembler(c => c.psubq(mm2, mm3), Instruction.Create(Code.Psubq_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void psubq_xmm_xmm() {
			TestAssembler(c => c.psubq(xmm2, xmm3), Instruction.Create(Code.Psubq_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void psubq_mm_m() {
			TestAssembler(c => c.psubq(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psubq_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psubq_xmm_m() {
			TestAssembler(c => c.psubq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psubq_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psubsb_mm_mm() {
			TestAssembler(c => c.psubsb(mm2, mm3), Instruction.Create(Code.Psubsb_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void psubsb_xmm_xmm() {
			TestAssembler(c => c.psubsb(xmm2, xmm3), Instruction.Create(Code.Psubsb_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void psubsb_mm_m() {
			TestAssembler(c => c.psubsb(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psubsb_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psubsb_xmm_m() {
			TestAssembler(c => c.psubsb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psubsb_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psubsw_mm_mm() {
			TestAssembler(c => c.psubsw(mm2, mm3), Instruction.Create(Code.Psubsw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void psubsw_xmm_xmm() {
			TestAssembler(c => c.psubsw(xmm2, xmm3), Instruction.Create(Code.Psubsw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void psubsw_mm_m() {
			TestAssembler(c => c.psubsw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psubsw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psubsw_xmm_m() {
			TestAssembler(c => c.psubsw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psubsw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psubusb_mm_mm() {
			TestAssembler(c => c.psubusb(mm2, mm3), Instruction.Create(Code.Psubusb_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void psubusb_xmm_xmm() {
			TestAssembler(c => c.psubusb(xmm2, xmm3), Instruction.Create(Code.Psubusb_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void psubusb_mm_m() {
			TestAssembler(c => c.psubusb(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psubusb_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psubusb_xmm_m() {
			TestAssembler(c => c.psubusb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psubusb_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psubusw_mm_mm() {
			TestAssembler(c => c.psubusw(mm2, mm3), Instruction.Create(Code.Psubusw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void psubusw_xmm_xmm() {
			TestAssembler(c => c.psubusw(xmm2, xmm3), Instruction.Create(Code.Psubusw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void psubusw_mm_m() {
			TestAssembler(c => c.psubusw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psubusw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psubusw_xmm_m() {
			TestAssembler(c => c.psubusw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psubusw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psubw_mm_mm() {
			TestAssembler(c => c.psubw(mm2, mm3), Instruction.Create(Code.Psubw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void psubw_xmm_xmm() {
			TestAssembler(c => c.psubw(xmm2, xmm3), Instruction.Create(Code.Psubw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void psubw_mm_m() {
			TestAssembler(c => c.psubw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Psubw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void psubw_xmm_m() {
			TestAssembler(c => c.psubw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Psubw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pswapd_mm_mm() {
			TestAssembler(c => c.pswapd(mm2, mm3), Instruction.Create(Code.D3NOW_Pswapd_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pswapd_mm_m() {
			TestAssembler(c => c.pswapd(mm2, __qword_ptr[rcx]), Instruction.Create(Code.D3NOW_Pswapd_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void ptest_xmm_xmm() {
			TestAssembler(c => c.ptest(xmm2, xmm3), Instruction.Create(Code.Ptest_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void ptest_xmm_m() {
			TestAssembler(c => c.ptest(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Ptest_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void ptwrite_r32() {
			TestAssembler(c => c.ptwrite(edx), Instruction.Create(Code.Ptwrite_rm32, Register.EDX));
		}

		[Fact]
		public void ptwrite_r64() {
			TestAssembler(c => c.ptwrite(rdx), Instruction.Create(Code.Ptwrite_rm64, Register.RDX));
		}

		[Fact]
		public void ptwrite_m() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.ptwrite(__qword_ptr[rdx]), Instruction.Create(Code.Ptwrite_rm64, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.ptwrite(__dword_ptr[rdx]), Instruction.Create(Code.Ptwrite_rm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.ptwrite(__zmmword_ptr[rdx]), Instruction.Create(Code.Ptwrite_rm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void punpckhbw_mm_mm() {
			TestAssembler(c => c.punpckhbw(mm2, mm3), Instruction.Create(Code.Punpckhbw_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void punpckhbw_xmm_xmm() {
			TestAssembler(c => c.punpckhbw(xmm2, xmm3), Instruction.Create(Code.Punpckhbw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void punpckhbw_mm_m() {
			TestAssembler(c => c.punpckhbw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Punpckhbw_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void punpckhbw_xmm_m() {
			TestAssembler(c => c.punpckhbw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Punpckhbw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void punpckhdq_mm_mm() {
			TestAssembler(c => c.punpckhdq(mm2, mm3), Instruction.Create(Code.Punpckhdq_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void punpckhdq_xmm_xmm() {
			TestAssembler(c => c.punpckhdq(xmm2, xmm3), Instruction.Create(Code.Punpckhdq_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void punpckhdq_mm_m() {
			TestAssembler(c => c.punpckhdq(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Punpckhdq_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void punpckhdq_xmm_m() {
			TestAssembler(c => c.punpckhdq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Punpckhdq_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void punpckhqdq_xmm_xmm() {
			TestAssembler(c => c.punpckhqdq(xmm2, xmm3), Instruction.Create(Code.Punpckhqdq_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void punpckhqdq_xmm_m() {
			TestAssembler(c => c.punpckhqdq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Punpckhqdq_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void punpckhwd_mm_mm() {
			TestAssembler(c => c.punpckhwd(mm2, mm3), Instruction.Create(Code.Punpckhwd_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void punpckhwd_xmm_xmm() {
			TestAssembler(c => c.punpckhwd(xmm2, xmm3), Instruction.Create(Code.Punpckhwd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void punpckhwd_mm_m() {
			TestAssembler(c => c.punpckhwd(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Punpckhwd_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void punpckhwd_xmm_m() {
			TestAssembler(c => c.punpckhwd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Punpckhwd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void punpcklbw_mm_mm() {
			TestAssembler(c => c.punpcklbw(mm2, mm3), Instruction.Create(Code.Punpcklbw_mm_mmm32, Register.MM2, Register.MM3));
		}

		[Fact]
		public void punpcklbw_xmm_xmm() {
			TestAssembler(c => c.punpcklbw(xmm2, xmm3), Instruction.Create(Code.Punpcklbw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void punpcklbw_mm_m() {
			TestAssembler(c => c.punpcklbw(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Punpcklbw_mm_mmm32, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void punpcklbw_xmm_m() {
			TestAssembler(c => c.punpcklbw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Punpcklbw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void punpckldq_mm_mm() {
			TestAssembler(c => c.punpckldq(mm2, mm3), Instruction.Create(Code.Punpckldq_mm_mmm32, Register.MM2, Register.MM3));
		}

		[Fact]
		public void punpckldq_xmm_xmm() {
			TestAssembler(c => c.punpckldq(xmm2, xmm3), Instruction.Create(Code.Punpckldq_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void punpckldq_mm_m() {
			TestAssembler(c => c.punpckldq(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Punpckldq_mm_mmm32, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void punpckldq_xmm_m() {
			TestAssembler(c => c.punpckldq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Punpckldq_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void punpcklqdq_xmm_xmm() {
			TestAssembler(c => c.punpcklqdq(xmm2, xmm3), Instruction.Create(Code.Punpcklqdq_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void punpcklqdq_xmm_m() {
			TestAssembler(c => c.punpcklqdq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Punpcklqdq_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void punpcklwd_mm_mm() {
			TestAssembler(c => c.punpcklwd(mm2, mm3), Instruction.Create(Code.Punpcklwd_mm_mmm32, Register.MM2, Register.MM3));
		}

		[Fact]
		public void punpcklwd_xmm_xmm() {
			TestAssembler(c => c.punpcklwd(xmm2, xmm3), Instruction.Create(Code.Punpcklwd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void punpcklwd_mm_m() {
			TestAssembler(c => c.punpcklwd(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Punpcklwd_mm_mmm32, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void punpcklwd_xmm_m() {
			TestAssembler(c => c.punpcklwd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Punpcklwd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void push_r16() {
			TestAssembler(c => c.push(dx), Instruction.Create(Code.Push_r16, Register.DX));
		}

		[Fact]
		public void push_r64() {
			TestAssembler(c => c.push(rdx), Instruction.Create(Code.Push_r64, Register.RDX));
		}

		[Fact]
		public void push_seg() {
			{ /* if (dst == Register.FS) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.push(fs), Instruction.Create(Code.Pushq_FS, Register.FS));
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (dst == Register.GS) */
				{ /* if (Bitness == 64) */
					TestAssembler(c => c.push(gs), Instruction.Create(Code.Pushq_GS, Register.GS));
				} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
			} /* else */ { /* if (dst == Register.ES) */
				{ /* if (Bitness >= 32) */
					// Skipping Pushd_ES - Not supported by current bitness
				} /* else skip !(Bitness >= 32) not supported by this Assembler bitness */
			} /* else */ { /* if (dst == Register.CS) */
				{ /* if (Bitness >= 32) */
					// Skipping Pushd_CS - Not supported by current bitness
				} /* else skip !(Bitness >= 32) not supported by this Assembler bitness */
			} /* else */ { /* if (dst == Register.SS) */
				{ /* if (Bitness >= 32) */
					// Skipping Pushd_SS - Not supported by current bitness
				} /* else skip !(Bitness >= 32) not supported by this Assembler bitness */
			} /* else */ { /* if (dst == Register.DS) */
				{ /* if (Bitness >= 32) */
					// Skipping Pushd_DS - Not supported by current bitness
				} /* else skip !(Bitness >= 32) not supported by this Assembler bitness */
			}
		}

		[Fact]
		public void push_m() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.push(__qword_ptr[rdx]), Instruction.Create(Code.Push_rm64, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				// Skipping Push_rm32 - Not supported by current bitness
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.push(__word_ptr[rdx]), Instruction.Create(Code.Push_rm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.push(__zmmword_ptr[rdx]), Instruction.Create(Code.Push_rm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void push_i() {
			{ /* if (Bitness == 64) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.push(-0x80), Instruction.Create(Code.Pushq_imm8, -0x80));
					TestAssembler(c => c.push(0x7F), Instruction.Create(Code.Pushq_imm8, 0x7F));
				} /* else */ TestAssembler(c => c.push(-0x80000000), Instruction.Create(Code.Pushq_imm32, -0x80000000));
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void push_u() {
			{ /* if (Bitness >= 32) */
				{ /* if (imm <= (uint)sbyte.MaxValue || 0xFFFF_FF80 <= imm) */
					// Skipping Pushd_imm8 - Not supported by current bitness
					// Skipping Pushd_imm8 - Not supported by current bitness
				} /* else */ // Skipping Pushd_imm32 - Not supported by current bitness
			} /* else skip !(Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void pushf() {
			TestAssembler(c => c.pushf(), Instruction.Create(Code.Pushfw));
		}

		[Fact]
		public void pushfq() {
			TestAssembler(c => c.pushfq(), Instruction.Create(Code.Pushfq));
		}

		[Fact]
		public void pvalidate() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.pvalidate(), Instruction.Create(Code.Pvalidateq));
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void pxor_mm_mm() {
			TestAssembler(c => c.pxor(mm2, mm3), Instruction.Create(Code.Pxor_mm_mmm64, Register.MM2, Register.MM3));
		}

		[Fact]
		public void pxor_xmm_xmm() {
			TestAssembler(c => c.pxor(xmm2, xmm3), Instruction.Create(Code.Pxor_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void pxor_mm_m() {
			TestAssembler(c => c.pxor(mm2, __qword_ptr[rcx]), Instruction.Create(Code.Pxor_mm_mmm64, Register.MM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void pxor_xmm_m() {
			TestAssembler(c => c.pxor(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Pxor_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void rcl_r8_r8() {
			TestAssembler(c => c.rcl(dl, cl), Instruction.Create(Code.Rcl_rm8_CL, Register.DL, Register.CL));
		}

		[Fact]
		public void rcl_r16_r8() {
			TestAssembler(c => c.rcl(dx, cl), Instruction.Create(Code.Rcl_rm16_CL, Register.DX, Register.CL));
		}

		[Fact]
		public void rcl_r32_r8() {
			TestAssembler(c => c.rcl(edx, cl), Instruction.Create(Code.Rcl_rm32_CL, Register.EDX, Register.CL));
		}

		[Fact]
		public void rcl_r64_r8() {
			TestAssembler(c => c.rcl(rdx, cl), Instruction.Create(Code.Rcl_rm64_CL, Register.RDX, Register.CL));
		}

		[Fact]
		public void rcl_m_r8() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.rcl(__qword_ptr[rdx], cl), Instruction.Create(Code.Rcl_rm64_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.rcl(__dword_ptr[rdx], cl), Instruction.Create(Code.Rcl_rm32_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.rcl(__word_ptr[rdx], cl), Instruction.Create(Code.Rcl_rm16_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.rcl(__byte_ptr[rdx], cl), Instruction.Create(Code.Rcl_rm8_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.rcl(__zmmword_ptr[rdx], cl), Instruction.Create(Code.Rcl_rm8_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
				});
			}
		}

		[Fact]
		public void rcl_r8_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcl(dl, 1), Instruction.Create(Code.Rcl_rm8_1, Register.DL, 1));
			} /* else */ TestAssembler(c => c.rcl(dl, 2), Instruction.Create(Code.Rcl_rm8_imm8, Register.DL, 2));
		}

		[Fact]
		public void rcl_r16_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcl(dx, 1), Instruction.Create(Code.Rcl_rm16_1, Register.DX, 1));
			} /* else */ TestAssembler(c => c.rcl(dx, 2), Instruction.Create(Code.Rcl_rm16_imm8, Register.DX, 2));
		}

		[Fact]
		public void rcl_r32_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcl(edx, 1), Instruction.Create(Code.Rcl_rm32_1, Register.EDX, 1));
			} /* else */ TestAssembler(c => c.rcl(edx, 2), Instruction.Create(Code.Rcl_rm32_imm8, Register.EDX, 2));
		}

		[Fact]
		public void rcl_r64_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcl(rdx, 1), Instruction.Create(Code.Rcl_rm64_1, Register.RDX, 1));
			} /* else */ TestAssembler(c => c.rcl(rdx, 2), Instruction.Create(Code.Rcl_rm64_imm8, Register.RDX, 2));
		}

		[Fact]
		public void rcl_m_i() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.Qword) */
					TestAssembler(c => c.rcl(__qword_ptr[rdx], 1), Instruction.Create(Code.Rcl_rm64_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
					TestAssembler(c => c.rcl(__dword_ptr[rdx], 1), Instruction.Create(Code.Rcl_rm32_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
					TestAssembler(c => c.rcl(__word_ptr[rdx], 1), Instruction.Create(Code.Rcl_rm16_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
					TestAssembler(c => c.rcl(__byte_ptr[rdx], 1), Instruction.Create(Code.Rcl_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				}
				{
					AssertInvalid(() => {
						TestAssembler(c => c.rcl(__zmmword_ptr[rdx], 1), Instruction.Create(Code.Rcl_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
					});
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.rcl(__qword_ptr[rdx], 2), Instruction.Create(Code.Rcl_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.rcl(__dword_ptr[rdx], 2), Instruction.Create(Code.Rcl_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.rcl(__word_ptr[rdx], 2), Instruction.Create(Code.Rcl_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.rcl(__byte_ptr[rdx], 2), Instruction.Create(Code.Rcl_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.rcl(__zmmword_ptr[rdx], 2), Instruction.Create(Code.Rcl_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
				});
			}
		}

		[Fact]
		public void rcl_r8_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcl(dl, (byte)1), Instruction.Create(Code.Rcl_rm8_1, Register.DL, 1U));
			} /* else */ TestAssembler(c => c.rcl(dl, (byte)2), Instruction.Create(Code.Rcl_rm8_imm8, Register.DL, 2U));
		}

		[Fact]
		public void rcl_r16_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcl(dx, (byte)1), Instruction.Create(Code.Rcl_rm16_1, Register.DX, 1U));
			} /* else */ TestAssembler(c => c.rcl(dx, (byte)2), Instruction.Create(Code.Rcl_rm16_imm8, Register.DX, 2U));
		}

		[Fact]
		public void rcl_r32_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcl(edx, (byte)1), Instruction.Create(Code.Rcl_rm32_1, Register.EDX, 1U));
			} /* else */ TestAssembler(c => c.rcl(edx, (byte)2), Instruction.Create(Code.Rcl_rm32_imm8, Register.EDX, 2U));
		}

		[Fact]
		public void rcl_r64_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcl(rdx, (byte)1), Instruction.Create(Code.Rcl_rm64_1, Register.RDX, 1U));
			} /* else */ TestAssembler(c => c.rcl(rdx, (byte)2), Instruction.Create(Code.Rcl_rm64_imm8, Register.RDX, 2U));
		}

		[Fact]
		public void rcl_m_u() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.Qword) */
					TestAssembler(c => c.rcl(__qword_ptr[rdx], (byte)1), Instruction.Create(Code.Rcl_rm64_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
					TestAssembler(c => c.rcl(__dword_ptr[rdx], (byte)1), Instruction.Create(Code.Rcl_rm32_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
					TestAssembler(c => c.rcl(__word_ptr[rdx], (byte)1), Instruction.Create(Code.Rcl_rm16_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
					TestAssembler(c => c.rcl(__byte_ptr[rdx], (byte)1), Instruction.Create(Code.Rcl_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				}
				{
					AssertInvalid(() => {
						TestAssembler(c => c.rcl(__zmmword_ptr[rdx], (byte)1), Instruction.Create(Code.Rcl_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
					});
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.rcl(__qword_ptr[rdx], (byte)2), Instruction.Create(Code.Rcl_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.rcl(__dword_ptr[rdx], (byte)2), Instruction.Create(Code.Rcl_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.rcl(__word_ptr[rdx], (byte)2), Instruction.Create(Code.Rcl_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.rcl(__byte_ptr[rdx], (byte)2), Instruction.Create(Code.Rcl_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.rcl(__zmmword_ptr[rdx], (byte)2), Instruction.Create(Code.Rcl_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
				});
			}
		}

		[Fact]
		public void rcpps_xmm_xmm() {
			TestAssembler(c => c.rcpps(xmm2, xmm3), Instruction.Create(Code.Rcpps_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void rcpps_xmm_m() {
			TestAssembler(c => c.rcpps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Rcpps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void rcpss_xmm_xmm() {
			TestAssembler(c => c.rcpss(xmm2, xmm3), Instruction.Create(Code.Rcpss_xmm_xmmm32, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void rcpss_xmm_m() {
			TestAssembler(c => c.rcpss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Rcpss_xmm_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void rcr_r8_r8() {
			TestAssembler(c => c.rcr(dl, cl), Instruction.Create(Code.Rcr_rm8_CL, Register.DL, Register.CL));
		}

		[Fact]
		public void rcr_r16_r8() {
			TestAssembler(c => c.rcr(dx, cl), Instruction.Create(Code.Rcr_rm16_CL, Register.DX, Register.CL));
		}

		[Fact]
		public void rcr_r32_r8() {
			TestAssembler(c => c.rcr(edx, cl), Instruction.Create(Code.Rcr_rm32_CL, Register.EDX, Register.CL));
		}

		[Fact]
		public void rcr_r64_r8() {
			TestAssembler(c => c.rcr(rdx, cl), Instruction.Create(Code.Rcr_rm64_CL, Register.RDX, Register.CL));
		}

		[Fact]
		public void rcr_m_r8() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.rcr(__qword_ptr[rdx], cl), Instruction.Create(Code.Rcr_rm64_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.rcr(__dword_ptr[rdx], cl), Instruction.Create(Code.Rcr_rm32_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.rcr(__word_ptr[rdx], cl), Instruction.Create(Code.Rcr_rm16_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.rcr(__byte_ptr[rdx], cl), Instruction.Create(Code.Rcr_rm8_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.rcr(__zmmword_ptr[rdx], cl), Instruction.Create(Code.Rcr_rm8_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
				});
			}
		}

		[Fact]
		public void rcr_r8_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcr(dl, 1), Instruction.Create(Code.Rcr_rm8_1, Register.DL, 1));
			} /* else */ TestAssembler(c => c.rcr(dl, 2), Instruction.Create(Code.Rcr_rm8_imm8, Register.DL, 2));
		}

		[Fact]
		public void rcr_r16_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcr(dx, 1), Instruction.Create(Code.Rcr_rm16_1, Register.DX, 1));
			} /* else */ TestAssembler(c => c.rcr(dx, 2), Instruction.Create(Code.Rcr_rm16_imm8, Register.DX, 2));
		}

		[Fact]
		public void rcr_r32_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcr(edx, 1), Instruction.Create(Code.Rcr_rm32_1, Register.EDX, 1));
			} /* else */ TestAssembler(c => c.rcr(edx, 2), Instruction.Create(Code.Rcr_rm32_imm8, Register.EDX, 2));
		}

		[Fact]
		public void rcr_r64_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcr(rdx, 1), Instruction.Create(Code.Rcr_rm64_1, Register.RDX, 1));
			} /* else */ TestAssembler(c => c.rcr(rdx, 2), Instruction.Create(Code.Rcr_rm64_imm8, Register.RDX, 2));
		}

		[Fact]
		public void rcr_m_i() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.Qword) */
					TestAssembler(c => c.rcr(__qword_ptr[rdx], 1), Instruction.Create(Code.Rcr_rm64_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
					TestAssembler(c => c.rcr(__dword_ptr[rdx], 1), Instruction.Create(Code.Rcr_rm32_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
					TestAssembler(c => c.rcr(__word_ptr[rdx], 1), Instruction.Create(Code.Rcr_rm16_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
					TestAssembler(c => c.rcr(__byte_ptr[rdx], 1), Instruction.Create(Code.Rcr_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				}
				{
					AssertInvalid(() => {
						TestAssembler(c => c.rcr(__zmmword_ptr[rdx], 1), Instruction.Create(Code.Rcr_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
					});
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.rcr(__qword_ptr[rdx], 2), Instruction.Create(Code.Rcr_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.rcr(__dword_ptr[rdx], 2), Instruction.Create(Code.Rcr_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.rcr(__word_ptr[rdx], 2), Instruction.Create(Code.Rcr_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.rcr(__byte_ptr[rdx], 2), Instruction.Create(Code.Rcr_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.rcr(__zmmword_ptr[rdx], 2), Instruction.Create(Code.Rcr_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
				});
			}
		}

		[Fact]
		public void rcr_r8_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcr(dl, (byte)1), Instruction.Create(Code.Rcr_rm8_1, Register.DL, 1U));
			} /* else */ TestAssembler(c => c.rcr(dl, (byte)2), Instruction.Create(Code.Rcr_rm8_imm8, Register.DL, 2U));
		}

		[Fact]
		public void rcr_r16_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcr(dx, (byte)1), Instruction.Create(Code.Rcr_rm16_1, Register.DX, 1U));
			} /* else */ TestAssembler(c => c.rcr(dx, (byte)2), Instruction.Create(Code.Rcr_rm16_imm8, Register.DX, 2U));
		}

		[Fact]
		public void rcr_r32_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcr(edx, (byte)1), Instruction.Create(Code.Rcr_rm32_1, Register.EDX, 1U));
			} /* else */ TestAssembler(c => c.rcr(edx, (byte)2), Instruction.Create(Code.Rcr_rm32_imm8, Register.EDX, 2U));
		}

		[Fact]
		public void rcr_r64_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rcr(rdx, (byte)1), Instruction.Create(Code.Rcr_rm64_1, Register.RDX, 1U));
			} /* else */ TestAssembler(c => c.rcr(rdx, (byte)2), Instruction.Create(Code.Rcr_rm64_imm8, Register.RDX, 2U));
		}

		[Fact]
		public void rcr_m_u() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.Qword) */
					TestAssembler(c => c.rcr(__qword_ptr[rdx], (byte)1), Instruction.Create(Code.Rcr_rm64_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
					TestAssembler(c => c.rcr(__dword_ptr[rdx], (byte)1), Instruction.Create(Code.Rcr_rm32_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
					TestAssembler(c => c.rcr(__word_ptr[rdx], (byte)1), Instruction.Create(Code.Rcr_rm16_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
					TestAssembler(c => c.rcr(__byte_ptr[rdx], (byte)1), Instruction.Create(Code.Rcr_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				}
				{
					AssertInvalid(() => {
						TestAssembler(c => c.rcr(__zmmword_ptr[rdx], (byte)1), Instruction.Create(Code.Rcr_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
					});
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.rcr(__qword_ptr[rdx], (byte)2), Instruction.Create(Code.Rcr_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.rcr(__dword_ptr[rdx], (byte)2), Instruction.Create(Code.Rcr_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.rcr(__word_ptr[rdx], (byte)2), Instruction.Create(Code.Rcr_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.rcr(__byte_ptr[rdx], (byte)2), Instruction.Create(Code.Rcr_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.rcr(__zmmword_ptr[rdx], (byte)2), Instruction.Create(Code.Rcr_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
				});
			}
		}

		[Fact]
		public void rdfsbase_r32() {
			TestAssembler(c => c.rdfsbase(edx), Instruction.Create(Code.Rdfsbase_r32, Register.EDX));
		}

		[Fact]
		public void rdfsbase_r64() {
			TestAssembler(c => c.rdfsbase(rdx), Instruction.Create(Code.Rdfsbase_r64, Register.RDX));
		}

		[Fact]
		public void rdgsbase_r32() {
			TestAssembler(c => c.rdgsbase(edx), Instruction.Create(Code.Rdgsbase_r32, Register.EDX));
		}

		[Fact]
		public void rdgsbase_r64() {
			TestAssembler(c => c.rdgsbase(rdx), Instruction.Create(Code.Rdgsbase_r64, Register.RDX));
		}

		[Fact]
		public void rdmsr() {
			TestAssembler(c => c.rdmsr(), Instruction.Create(Code.Rdmsr));
		}

		[Fact]
		public void rdpid_r64() {
			TestAssembler(c => c.rdpid(rdx), Instruction.Create(Code.Rdpid_r64, Register.RDX));
		}

		[Fact]
		public void rdpkru() {
			TestAssembler(c => c.rdpkru(), Instruction.Create(Code.Rdpkru));
		}

		[Fact]
		public void rdpmc() {
			TestAssembler(c => c.rdpmc(), Instruction.Create(Code.Rdpmc));
		}

		[Fact]
		public void rdpru() {
			TestAssembler(c => c.rdpru(), Instruction.Create(Code.Rdpru));
		}

		[Fact]
		public void rdrand_r16() {
			TestAssembler(c => c.rdrand(dx), Instruction.Create(Code.Rdrand_r16, Register.DX));
		}

		[Fact]
		public void rdrand_r32() {
			TestAssembler(c => c.rdrand(edx), Instruction.Create(Code.Rdrand_r32, Register.EDX));
		}

		[Fact]
		public void rdrand_r64() {
			TestAssembler(c => c.rdrand(rdx), Instruction.Create(Code.Rdrand_r64, Register.RDX));
		}

		[Fact]
		public void rdseed_r16() {
			TestAssembler(c => c.rdseed(dx), Instruction.Create(Code.Rdseed_r16, Register.DX));
		}

		[Fact]
		public void rdseed_r32() {
			TestAssembler(c => c.rdseed(edx), Instruction.Create(Code.Rdseed_r32, Register.EDX));
		}

		[Fact]
		public void rdseed_r64() {
			TestAssembler(c => c.rdseed(rdx), Instruction.Create(Code.Rdseed_r64, Register.RDX));
		}

		[Fact]
		public void rdsspd_r32() {
			TestAssembler(c => c.rdsspd(edx), Instruction.Create(Code.Rdsspd_r32, Register.EDX));
		}

		[Fact]
		public void rdsspq_r64() {
			TestAssembler(c => c.rdsspq(rdx), Instruction.Create(Code.Rdsspq_r64, Register.RDX));
		}

		[Fact]
		public void rdtsc() {
			TestAssembler(c => c.rdtsc(), Instruction.Create(Code.Rdtsc));
		}

		[Fact]
		public void rdtscp() {
			TestAssembler(c => c.rdtscp(), Instruction.Create(Code.Rdtscp));
		}

		[Fact]
		public void rdudbg() {
			TestAssembler(c => c.rdudbg(), Instruction.Create(Code.Rdudbg), decoderOptions: DecoderOptions.Udbg);
		}

		[Fact]
		public void reservednop_0f0d_r16_r16() {
			TestAssembler(c => c.reservednop_0f0d(dx, bx), Instruction.Create(Code.Reservednop_rm16_r16_0F0D, Register.DX, Register.BX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f0d_m_r16() {
			TestAssembler(c => c.reservednop_0f0d(__word_ptr[rcx], bx), Instruction.Create(Code.Reservednop_rm16_r16_0F0D, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f0d_r32_r32() {
			TestAssembler(c => c.reservednop_0f0d(edx, ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F0D, Register.EDX, Register.EBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f0d_m_r32() {
			TestAssembler(c => c.reservednop_0f0d(__dword_ptr[rcx], ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F0D, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f0d_r64_r64() {
			TestAssembler(c => c.reservednop_0f0d(rdx, rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F0D, Register.RDX, Register.RBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f0d_m_r64() {
			TestAssembler(c => c.reservednop_0f0d(__qword_ptr[rcx], rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F0D, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f18_r16_r16() {
			TestAssembler(c => c.reservednop_0f18(dx, bx), Instruction.Create(Code.Reservednop_rm16_r16_0F18, Register.DX, Register.BX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f18_m_r16() {
			TestAssembler(c => c.reservednop_0f18(__word_ptr[rcx], bx), Instruction.Create(Code.Reservednop_rm16_r16_0F18, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f18_r32_r32() {
			TestAssembler(c => c.reservednop_0f18(edx, ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F18, Register.EDX, Register.EBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f18_m_r32() {
			TestAssembler(c => c.reservednop_0f18(__dword_ptr[rcx], ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F18, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f18_r64_r64() {
			TestAssembler(c => c.reservednop_0f18(rdx, rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F18, Register.RDX, Register.RBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f18_m_r64() {
			TestAssembler(c => c.reservednop_0f18(__qword_ptr[rcx], rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F18, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f19_r16_r16() {
			TestAssembler(c => c.reservednop_0f19(dx, bx), Instruction.Create(Code.Reservednop_rm16_r16_0F19, Register.DX, Register.BX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f19_m_r16() {
			TestAssembler(c => c.reservednop_0f19(__word_ptr[rcx], bx), Instruction.Create(Code.Reservednop_rm16_r16_0F19, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f19_r32_r32() {
			TestAssembler(c => c.reservednop_0f19(edx, ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F19, Register.EDX, Register.EBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f19_m_r32() {
			TestAssembler(c => c.reservednop_0f19(__dword_ptr[rcx], ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F19, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f19_r64_r64() {
			TestAssembler(c => c.reservednop_0f19(rdx, rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F19, Register.RDX, Register.RBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f19_m_r64() {
			TestAssembler(c => c.reservednop_0f19(__qword_ptr[rcx], rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F19, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1a_r16_r16() {
			TestAssembler(c => c.reservednop_0f1a(dx, bx), Instruction.Create(Code.Reservednop_rm16_r16_0F1A, Register.DX, Register.BX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1a_m_r16() {
			TestAssembler(c => c.reservednop_0f1a(__word_ptr[rcx], bx), Instruction.Create(Code.Reservednop_rm16_r16_0F1A, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1a_r32_r32() {
			TestAssembler(c => c.reservednop_0f1a(edx, ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F1A, Register.EDX, Register.EBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1a_m_r32() {
			TestAssembler(c => c.reservednop_0f1a(__dword_ptr[rcx], ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F1A, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1a_r64_r64() {
			TestAssembler(c => c.reservednop_0f1a(rdx, rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F1A, Register.RDX, Register.RBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1a_m_r64() {
			TestAssembler(c => c.reservednop_0f1a(__qword_ptr[rcx], rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F1A, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1b_r16_r16() {
			TestAssembler(c => c.reservednop_0f1b(dx, bx), Instruction.Create(Code.Reservednop_rm16_r16_0F1B, Register.DX, Register.BX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1b_m_r16() {
			TestAssembler(c => c.reservednop_0f1b(__word_ptr[rcx], bx), Instruction.Create(Code.Reservednop_rm16_r16_0F1B, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1b_r32_r32() {
			TestAssembler(c => c.reservednop_0f1b(edx, ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F1B, Register.EDX, Register.EBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1b_m_r32() {
			TestAssembler(c => c.reservednop_0f1b(__dword_ptr[rcx], ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F1B, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1b_r64_r64() {
			TestAssembler(c => c.reservednop_0f1b(rdx, rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F1B, Register.RDX, Register.RBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1b_m_r64() {
			TestAssembler(c => c.reservednop_0f1b(__qword_ptr[rcx], rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F1B, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1c_r16_r16() {
			TestAssembler(c => c.reservednop_0f1c(dx, bx), Instruction.Create(Code.Reservednop_rm16_r16_0F1C, Register.DX, Register.BX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1c_m_r16() {
			TestAssembler(c => c.reservednop_0f1c(__word_ptr[rcx], bx), Instruction.Create(Code.Reservednop_rm16_r16_0F1C, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1c_r32_r32() {
			TestAssembler(c => c.reservednop_0f1c(edx, ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F1C, Register.EDX, Register.EBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1c_m_r32() {
			TestAssembler(c => c.reservednop_0f1c(__dword_ptr[rcx], ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F1C, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1c_r64_r64() {
			TestAssembler(c => c.reservednop_0f1c(rdx, rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F1C, Register.RDX, Register.RBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1c_m_r64() {
			TestAssembler(c => c.reservednop_0f1c(__qword_ptr[rcx], rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F1C, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1d_r16_r16() {
			TestAssembler(c => c.reservednop_0f1d(dx, bx), Instruction.Create(Code.Reservednop_rm16_r16_0F1D, Register.DX, Register.BX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1d_m_r16() {
			TestAssembler(c => c.reservednop_0f1d(__word_ptr[rcx], bx), Instruction.Create(Code.Reservednop_rm16_r16_0F1D, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1d_r32_r32() {
			TestAssembler(c => c.reservednop_0f1d(edx, ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F1D, Register.EDX, Register.EBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1d_m_r32() {
			TestAssembler(c => c.reservednop_0f1d(__dword_ptr[rcx], ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F1D, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1d_r64_r64() {
			TestAssembler(c => c.reservednop_0f1d(rdx, rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F1D, Register.RDX, Register.RBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1d_m_r64() {
			TestAssembler(c => c.reservednop_0f1d(__qword_ptr[rcx], rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F1D, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1e_r16_r16() {
			TestAssembler(c => c.reservednop_0f1e(dx, bx), Instruction.Create(Code.Reservednop_rm16_r16_0F1E, Register.DX, Register.BX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1e_m_r16() {
			TestAssembler(c => c.reservednop_0f1e(__word_ptr[rcx], bx), Instruction.Create(Code.Reservednop_rm16_r16_0F1E, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1e_r32_r32() {
			TestAssembler(c => c.reservednop_0f1e(edx, ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F1E, Register.EDX, Register.EBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1e_m_r32() {
			TestAssembler(c => c.reservednop_0f1e(__dword_ptr[rcx], ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F1E, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1e_r64_r64() {
			TestAssembler(c => c.reservednop_0f1e(rdx, rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F1E, Register.RDX, Register.RBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1e_m_r64() {
			TestAssembler(c => c.reservednop_0f1e(__qword_ptr[rcx], rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F1E, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1f_r16_r16() {
			TestAssembler(c => c.reservednop_0f1f(dx, bx), Instruction.Create(Code.Reservednop_rm16_r16_0F1F, Register.DX, Register.BX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1f_m_r16() {
			TestAssembler(c => c.reservednop_0f1f(__word_ptr[rcx], bx), Instruction.Create(Code.Reservednop_rm16_r16_0F1F, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1f_r32_r32() {
			TestAssembler(c => c.reservednop_0f1f(edx, ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F1F, Register.EDX, Register.EBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1f_m_r32() {
			TestAssembler(c => c.reservednop_0f1f(__dword_ptr[rcx], ebx), Instruction.Create(Code.Reservednop_rm32_r32_0F1F, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1f_r64_r64() {
			TestAssembler(c => c.reservednop_0f1f(rdx, rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F1F, Register.RDX, Register.RBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void reservednop_0f1f_m_r64() {
			TestAssembler(c => c.reservednop_0f1f(__qword_ptr[rcx], rbx), Instruction.Create(Code.Reservednop_rm64_r64_0F1F, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX), decoderOptions: DecoderOptions.ForceReservedNop);
		}

		[Fact]
		public void ret() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.ret(), Instruction.Create(Code.Retnq));
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void ret_i() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.ret(0x40B7), Instruction.Create(Code.Retnq_imm16, 0x40B7));
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void ret_u() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.ret((ushort)0x40B7), Instruction.Create(Code.Retnq_imm16, 0x40B7U));
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void retf() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.retf(), Instruction.Create(Code.Retfq));
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void retf_i() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.retf(0x40B7), Instruction.Create(Code.Retfq_imm16, 0x40B7));
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void retf_u() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.retf((ushort)0x40B7), Instruction.Create(Code.Retfq_imm16, 0x40B7U));
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void rmpadjust() {
			TestAssembler(c => c.rmpadjust(), Instruction.Create(Code.Rmpadjust));
		}

		[Fact]
		public void rmpupdate() {
			TestAssembler(c => c.rmpupdate(), Instruction.Create(Code.Rmpupdate));
		}

		[Fact]
		public void rol_r8_r8() {
			TestAssembler(c => c.rol(dl, cl), Instruction.Create(Code.Rol_rm8_CL, Register.DL, Register.CL));
		}

		[Fact]
		public void rol_r16_r8() {
			TestAssembler(c => c.rol(dx, cl), Instruction.Create(Code.Rol_rm16_CL, Register.DX, Register.CL));
		}

		[Fact]
		public void rol_r32_r8() {
			TestAssembler(c => c.rol(edx, cl), Instruction.Create(Code.Rol_rm32_CL, Register.EDX, Register.CL));
		}

		[Fact]
		public void rol_r64_r8() {
			TestAssembler(c => c.rol(rdx, cl), Instruction.Create(Code.Rol_rm64_CL, Register.RDX, Register.CL));
		}

		[Fact]
		public void rol_m_r8() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.rol(__qword_ptr[rdx], cl), Instruction.Create(Code.Rol_rm64_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.rol(__dword_ptr[rdx], cl), Instruction.Create(Code.Rol_rm32_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.rol(__word_ptr[rdx], cl), Instruction.Create(Code.Rol_rm16_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.rol(__byte_ptr[rdx], cl), Instruction.Create(Code.Rol_rm8_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.rol(__zmmword_ptr[rdx], cl), Instruction.Create(Code.Rol_rm8_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
				});
			}
		}

		[Fact]
		public void rol_r8_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rol(dl, 1), Instruction.Create(Code.Rol_rm8_1, Register.DL, 1));
			} /* else */ TestAssembler(c => c.rol(dl, 2), Instruction.Create(Code.Rol_rm8_imm8, Register.DL, 2));
		}

		[Fact]
		public void rol_r16_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rol(dx, 1), Instruction.Create(Code.Rol_rm16_1, Register.DX, 1));
			} /* else */ TestAssembler(c => c.rol(dx, 2), Instruction.Create(Code.Rol_rm16_imm8, Register.DX, 2));
		}

		[Fact]
		public void rol_r32_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rol(edx, 1), Instruction.Create(Code.Rol_rm32_1, Register.EDX, 1));
			} /* else */ TestAssembler(c => c.rol(edx, 2), Instruction.Create(Code.Rol_rm32_imm8, Register.EDX, 2));
		}

		[Fact]
		public void rol_r64_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rol(rdx, 1), Instruction.Create(Code.Rol_rm64_1, Register.RDX, 1));
			} /* else */ TestAssembler(c => c.rol(rdx, 2), Instruction.Create(Code.Rol_rm64_imm8, Register.RDX, 2));
		}

		[Fact]
		public void rol_m_i() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.Qword) */
					TestAssembler(c => c.rol(__qword_ptr[rdx], 1), Instruction.Create(Code.Rol_rm64_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
					TestAssembler(c => c.rol(__dword_ptr[rdx], 1), Instruction.Create(Code.Rol_rm32_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
					TestAssembler(c => c.rol(__word_ptr[rdx], 1), Instruction.Create(Code.Rol_rm16_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
					TestAssembler(c => c.rol(__byte_ptr[rdx], 1), Instruction.Create(Code.Rol_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				}
				{
					AssertInvalid(() => {
						TestAssembler(c => c.rol(__zmmword_ptr[rdx], 1), Instruction.Create(Code.Rol_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
					});
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.rol(__qword_ptr[rdx], 2), Instruction.Create(Code.Rol_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.rol(__dword_ptr[rdx], 2), Instruction.Create(Code.Rol_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.rol(__word_ptr[rdx], 2), Instruction.Create(Code.Rol_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.rol(__byte_ptr[rdx], 2), Instruction.Create(Code.Rol_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.rol(__zmmword_ptr[rdx], 2), Instruction.Create(Code.Rol_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
				});
			}
		}

		[Fact]
		public void rol_r8_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rol(dl, (byte)1), Instruction.Create(Code.Rol_rm8_1, Register.DL, 1U));
			} /* else */ TestAssembler(c => c.rol(dl, (byte)2), Instruction.Create(Code.Rol_rm8_imm8, Register.DL, 2U));
		}

		[Fact]
		public void rol_r16_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rol(dx, (byte)1), Instruction.Create(Code.Rol_rm16_1, Register.DX, 1U));
			} /* else */ TestAssembler(c => c.rol(dx, (byte)2), Instruction.Create(Code.Rol_rm16_imm8, Register.DX, 2U));
		}

		[Fact]
		public void rol_r32_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rol(edx, (byte)1), Instruction.Create(Code.Rol_rm32_1, Register.EDX, 1U));
			} /* else */ TestAssembler(c => c.rol(edx, (byte)2), Instruction.Create(Code.Rol_rm32_imm8, Register.EDX, 2U));
		}

		[Fact]
		public void rol_r64_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.rol(rdx, (byte)1), Instruction.Create(Code.Rol_rm64_1, Register.RDX, 1U));
			} /* else */ TestAssembler(c => c.rol(rdx, (byte)2), Instruction.Create(Code.Rol_rm64_imm8, Register.RDX, 2U));
		}

		[Fact]
		public void rol_m_u() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.Qword) */
					TestAssembler(c => c.rol(__qword_ptr[rdx], (byte)1), Instruction.Create(Code.Rol_rm64_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
					TestAssembler(c => c.rol(__dword_ptr[rdx], (byte)1), Instruction.Create(Code.Rol_rm32_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
					TestAssembler(c => c.rol(__word_ptr[rdx], (byte)1), Instruction.Create(Code.Rol_rm16_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
					TestAssembler(c => c.rol(__byte_ptr[rdx], (byte)1), Instruction.Create(Code.Rol_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				}
				{
					AssertInvalid(() => {
						TestAssembler(c => c.rol(__zmmword_ptr[rdx], (byte)1), Instruction.Create(Code.Rol_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
					});
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.rol(__qword_ptr[rdx], (byte)2), Instruction.Create(Code.Rol_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.rol(__dword_ptr[rdx], (byte)2), Instruction.Create(Code.Rol_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.rol(__word_ptr[rdx], (byte)2), Instruction.Create(Code.Rol_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.rol(__byte_ptr[rdx], (byte)2), Instruction.Create(Code.Rol_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.rol(__zmmword_ptr[rdx], (byte)2), Instruction.Create(Code.Rol_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
				});
			}
		}

		[Fact]
		public void ror_r8_r8() {
			TestAssembler(c => c.ror(dl, cl), Instruction.Create(Code.Ror_rm8_CL, Register.DL, Register.CL));
		}

		[Fact]
		public void ror_r16_r8() {
			TestAssembler(c => c.ror(dx, cl), Instruction.Create(Code.Ror_rm16_CL, Register.DX, Register.CL));
		}

		[Fact]
		public void ror_r32_r8() {
			TestAssembler(c => c.ror(edx, cl), Instruction.Create(Code.Ror_rm32_CL, Register.EDX, Register.CL));
		}

		[Fact]
		public void ror_r64_r8() {
			TestAssembler(c => c.ror(rdx, cl), Instruction.Create(Code.Ror_rm64_CL, Register.RDX, Register.CL));
		}

		[Fact]
		public void ror_m_r8() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.ror(__qword_ptr[rdx], cl), Instruction.Create(Code.Ror_rm64_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.ror(__dword_ptr[rdx], cl), Instruction.Create(Code.Ror_rm32_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.ror(__word_ptr[rdx], cl), Instruction.Create(Code.Ror_rm16_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.ror(__byte_ptr[rdx], cl), Instruction.Create(Code.Ror_rm8_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.ror(__zmmword_ptr[rdx], cl), Instruction.Create(Code.Ror_rm8_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
				});
			}
		}

		[Fact]
		public void ror_r8_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.ror(dl, 1), Instruction.Create(Code.Ror_rm8_1, Register.DL, 1));
			} /* else */ TestAssembler(c => c.ror(dl, 2), Instruction.Create(Code.Ror_rm8_imm8, Register.DL, 2));
		}

		[Fact]
		public void ror_r16_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.ror(dx, 1), Instruction.Create(Code.Ror_rm16_1, Register.DX, 1));
			} /* else */ TestAssembler(c => c.ror(dx, 2), Instruction.Create(Code.Ror_rm16_imm8, Register.DX, 2));
		}

		[Fact]
		public void ror_r32_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.ror(edx, 1), Instruction.Create(Code.Ror_rm32_1, Register.EDX, 1));
			} /* else */ TestAssembler(c => c.ror(edx, 2), Instruction.Create(Code.Ror_rm32_imm8, Register.EDX, 2));
		}

		[Fact]
		public void ror_r64_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.ror(rdx, 1), Instruction.Create(Code.Ror_rm64_1, Register.RDX, 1));
			} /* else */ TestAssembler(c => c.ror(rdx, 2), Instruction.Create(Code.Ror_rm64_imm8, Register.RDX, 2));
		}

		[Fact]
		public void ror_m_i() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.Qword) */
					TestAssembler(c => c.ror(__qword_ptr[rdx], 1), Instruction.Create(Code.Ror_rm64_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
					TestAssembler(c => c.ror(__dword_ptr[rdx], 1), Instruction.Create(Code.Ror_rm32_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
					TestAssembler(c => c.ror(__word_ptr[rdx], 1), Instruction.Create(Code.Ror_rm16_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
					TestAssembler(c => c.ror(__byte_ptr[rdx], 1), Instruction.Create(Code.Ror_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				}
				{
					AssertInvalid(() => {
						TestAssembler(c => c.ror(__zmmword_ptr[rdx], 1), Instruction.Create(Code.Ror_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
					});
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.ror(__qword_ptr[rdx], 2), Instruction.Create(Code.Ror_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.ror(__dword_ptr[rdx], 2), Instruction.Create(Code.Ror_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.ror(__word_ptr[rdx], 2), Instruction.Create(Code.Ror_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.ror(__byte_ptr[rdx], 2), Instruction.Create(Code.Ror_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.ror(__zmmword_ptr[rdx], 2), Instruction.Create(Code.Ror_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
				});
			}
		}

		[Fact]
		public void ror_r8_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.ror(dl, (byte)1), Instruction.Create(Code.Ror_rm8_1, Register.DL, 1U));
			} /* else */ TestAssembler(c => c.ror(dl, (byte)2), Instruction.Create(Code.Ror_rm8_imm8, Register.DL, 2U));
		}

		[Fact]
		public void ror_r16_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.ror(dx, (byte)1), Instruction.Create(Code.Ror_rm16_1, Register.DX, 1U));
			} /* else */ TestAssembler(c => c.ror(dx, (byte)2), Instruction.Create(Code.Ror_rm16_imm8, Register.DX, 2U));
		}

		[Fact]
		public void ror_r32_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.ror(edx, (byte)1), Instruction.Create(Code.Ror_rm32_1, Register.EDX, 1U));
			} /* else */ TestAssembler(c => c.ror(edx, (byte)2), Instruction.Create(Code.Ror_rm32_imm8, Register.EDX, 2U));
		}

		[Fact]
		public void ror_r64_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.ror(rdx, (byte)1), Instruction.Create(Code.Ror_rm64_1, Register.RDX, 1U));
			} /* else */ TestAssembler(c => c.ror(rdx, (byte)2), Instruction.Create(Code.Ror_rm64_imm8, Register.RDX, 2U));
		}

		[Fact]
		public void ror_m_u() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.Qword) */
					TestAssembler(c => c.ror(__qword_ptr[rdx], (byte)1), Instruction.Create(Code.Ror_rm64_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
					TestAssembler(c => c.ror(__dword_ptr[rdx], (byte)1), Instruction.Create(Code.Ror_rm32_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
					TestAssembler(c => c.ror(__word_ptr[rdx], (byte)1), Instruction.Create(Code.Ror_rm16_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
					TestAssembler(c => c.ror(__byte_ptr[rdx], (byte)1), Instruction.Create(Code.Ror_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				}
				{
					AssertInvalid(() => {
						TestAssembler(c => c.ror(__zmmword_ptr[rdx], (byte)1), Instruction.Create(Code.Ror_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
					});
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.ror(__qword_ptr[rdx], (byte)2), Instruction.Create(Code.Ror_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.ror(__dword_ptr[rdx], (byte)2), Instruction.Create(Code.Ror_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.ror(__word_ptr[rdx], (byte)2), Instruction.Create(Code.Ror_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.ror(__byte_ptr[rdx], (byte)2), Instruction.Create(Code.Ror_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.ror(__zmmword_ptr[rdx], (byte)2), Instruction.Create(Code.Ror_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
				});
			}
		}

		[Fact]
		public void rorx_r32_r32_i() {
			TestAssembler(c => c.rorx(edx, ebx, -5), Instruction.Create(Code.VEX_Rorx_r32_rm32_imm8, Register.EDX, Register.EBX, -5));
		}

		[Fact]
		public void rorx_r64_r64_i() {
			TestAssembler(c => c.rorx(rdx, rbx, -5), Instruction.Create(Code.VEX_Rorx_r64_rm64_imm8, Register.RDX, Register.RBX, -5));
		}

		[Fact]
		public void rorx_r32_m_i() {
			TestAssembler(c => c.rorx(edx, __dword_ptr[rcx], -5), Instruction.Create(Code.VEX_Rorx_r32_rm32_imm8, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void rorx_r64_m_i() {
			TestAssembler(c => c.rorx(rdx, __qword_ptr[rcx], -5), Instruction.Create(Code.VEX_Rorx_r64_rm64_imm8, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void rorx_r32_r32_u() {
			TestAssembler(c => c.rorx(edx, ebx, (byte)0x7F), Instruction.Create(Code.VEX_Rorx_r32_rm32_imm8, Register.EDX, Register.EBX, 0x7FU));
		}

		[Fact]
		public void rorx_r64_r64_u() {
			TestAssembler(c => c.rorx(rdx, rbx, (byte)0x7F), Instruction.Create(Code.VEX_Rorx_r64_rm64_imm8, Register.RDX, Register.RBX, 0x7FU));
		}

		[Fact]
		public void rorx_r32_m_u() {
			TestAssembler(c => c.rorx(edx, __dword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Rorx_r32_rm32_imm8, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void rorx_r64_m_u() {
			TestAssembler(c => c.rorx(rdx, __qword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Rorx_r64_rm64_imm8, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void roundpd_xmm_xmm_i() {
			TestAssembler(c => c.roundpd(xmm2, xmm3, -5), Instruction.Create(Code.Roundpd_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void roundpd_xmm_m_i() {
			TestAssembler(c => c.roundpd(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Roundpd_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void roundpd_xmm_xmm_u() {
			TestAssembler(c => c.roundpd(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Roundpd_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void roundpd_xmm_m_u() {
			TestAssembler(c => c.roundpd(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Roundpd_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void roundps_xmm_xmm_i() {
			TestAssembler(c => c.roundps(xmm2, xmm3, -5), Instruction.Create(Code.Roundps_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void roundps_xmm_m_i() {
			TestAssembler(c => c.roundps(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Roundps_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void roundps_xmm_xmm_u() {
			TestAssembler(c => c.roundps(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Roundps_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void roundps_xmm_m_u() {
			TestAssembler(c => c.roundps(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Roundps_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void roundsd_xmm_xmm_i() {
			TestAssembler(c => c.roundsd(xmm2, xmm3, -5), Instruction.Create(Code.Roundsd_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void roundsd_xmm_m_i() {
			TestAssembler(c => c.roundsd(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Roundsd_xmm_xmmm64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void roundsd_xmm_xmm_u() {
			TestAssembler(c => c.roundsd(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Roundsd_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void roundsd_xmm_m_u() {
			TestAssembler(c => c.roundsd(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Roundsd_xmm_xmmm64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void roundss_xmm_xmm_i() {
			TestAssembler(c => c.roundss(xmm2, xmm3, -5), Instruction.Create(Code.Roundss_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void roundss_xmm_m_i() {
			TestAssembler(c => c.roundss(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Roundss_xmm_xmmm32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void roundss_xmm_xmm_u() {
			TestAssembler(c => c.roundss(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Roundss_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void roundss_xmm_m_u() {
			TestAssembler(c => c.roundss(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Roundss_xmm_xmmm32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void rsm() {
			TestAssembler(c => c.rsm(), Instruction.Create(Code.Rsm));
		}

		[Fact]
		public void rsqrtps_xmm_xmm() {
			TestAssembler(c => c.rsqrtps(xmm2, xmm3), Instruction.Create(Code.Rsqrtps_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void rsqrtps_xmm_m() {
			TestAssembler(c => c.rsqrtps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Rsqrtps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void rsqrtss_xmm_xmm() {
			TestAssembler(c => c.rsqrtss(xmm2, xmm3), Instruction.Create(Code.Rsqrtss_xmm_xmmm32, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void rsqrtss_xmm_m() {
			TestAssembler(c => c.rsqrtss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Rsqrtss_xmm_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void rstorssp_m() {
			TestAssembler(c => c.rstorssp(__[rcx]), Instruction.Create(Code.Rstorssp_m64, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void sahf() {
			TestAssembler(c => c.sahf(), Instruction.Create(Code.Sahf));
		}

		[Fact]
		public void sal_r8_r8() {
			TestAssembler(c => c.sal(dl, cl), Instruction.Create(Code.Sal_rm8_CL, Register.DL, Register.CL));
		}

		[Fact]
		public void sal_r16_r8() {
			TestAssembler(c => c.sal(dx, cl), Instruction.Create(Code.Sal_rm16_CL, Register.DX, Register.CL));
		}

		[Fact]
		public void sal_r32_r8() {
			TestAssembler(c => c.sal(edx, cl), Instruction.Create(Code.Sal_rm32_CL, Register.EDX, Register.CL));
		}

		[Fact]
		public void sal_r64_r8() {
			TestAssembler(c => c.sal(rdx, cl), Instruction.Create(Code.Sal_rm64_CL, Register.RDX, Register.CL));
		}

		[Fact]
		public void sal_m_r8() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.sal(__qword_ptr[rdx], cl), Instruction.Create(Code.Sal_rm64_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.sal(__dword_ptr[rdx], cl), Instruction.Create(Code.Sal_rm32_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.sal(__word_ptr[rdx], cl), Instruction.Create(Code.Sal_rm16_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.sal(__byte_ptr[rdx], cl), Instruction.Create(Code.Sal_rm8_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.sal(__zmmword_ptr[rdx], cl), Instruction.Create(Code.Sal_rm8_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
				});
			}
		}

		[Fact]
		public void sal_r8_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sal(dl, 1), Instruction.Create(Code.Sal_rm8_1, Register.DL, 1));
			} /* else */ TestAssembler(c => c.sal(dl, 2), Instruction.Create(Code.Sal_rm8_imm8, Register.DL, 2));
		}

		[Fact]
		public void sal_r16_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sal(dx, 1), Instruction.Create(Code.Sal_rm16_1, Register.DX, 1));
			} /* else */ TestAssembler(c => c.sal(dx, 2), Instruction.Create(Code.Sal_rm16_imm8, Register.DX, 2));
		}

		[Fact]
		public void sal_r32_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sal(edx, 1), Instruction.Create(Code.Sal_rm32_1, Register.EDX, 1));
			} /* else */ TestAssembler(c => c.sal(edx, 2), Instruction.Create(Code.Sal_rm32_imm8, Register.EDX, 2));
		}

		[Fact]
		public void sal_r64_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sal(rdx, 1), Instruction.Create(Code.Sal_rm64_1, Register.RDX, 1));
			} /* else */ TestAssembler(c => c.sal(rdx, 2), Instruction.Create(Code.Sal_rm64_imm8, Register.RDX, 2));
		}

		[Fact]
		public void sal_m_i() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.Qword) */
					TestAssembler(c => c.sal(__qword_ptr[rdx], 1), Instruction.Create(Code.Sal_rm64_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
					TestAssembler(c => c.sal(__dword_ptr[rdx], 1), Instruction.Create(Code.Sal_rm32_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
					TestAssembler(c => c.sal(__word_ptr[rdx], 1), Instruction.Create(Code.Sal_rm16_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
					TestAssembler(c => c.sal(__byte_ptr[rdx], 1), Instruction.Create(Code.Sal_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				}
				{
					AssertInvalid(() => {
						TestAssembler(c => c.sal(__zmmword_ptr[rdx], 1), Instruction.Create(Code.Sal_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
					});
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.sal(__qword_ptr[rdx], 2), Instruction.Create(Code.Sal_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.sal(__dword_ptr[rdx], 2), Instruction.Create(Code.Sal_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.sal(__word_ptr[rdx], 2), Instruction.Create(Code.Sal_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.sal(__byte_ptr[rdx], 2), Instruction.Create(Code.Sal_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.sal(__zmmword_ptr[rdx], 2), Instruction.Create(Code.Sal_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
				});
			}
		}

		[Fact]
		public void sal_r8_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sal(dl, (byte)1), Instruction.Create(Code.Sal_rm8_1, Register.DL, 1U));
			} /* else */ TestAssembler(c => c.sal(dl, (byte)2), Instruction.Create(Code.Sal_rm8_imm8, Register.DL, 2U));
		}

		[Fact]
		public void sal_r16_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sal(dx, (byte)1), Instruction.Create(Code.Sal_rm16_1, Register.DX, 1U));
			} /* else */ TestAssembler(c => c.sal(dx, (byte)2), Instruction.Create(Code.Sal_rm16_imm8, Register.DX, 2U));
		}

		[Fact]
		public void sal_r32_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sal(edx, (byte)1), Instruction.Create(Code.Sal_rm32_1, Register.EDX, 1U));
			} /* else */ TestAssembler(c => c.sal(edx, (byte)2), Instruction.Create(Code.Sal_rm32_imm8, Register.EDX, 2U));
		}

		[Fact]
		public void sal_r64_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sal(rdx, (byte)1), Instruction.Create(Code.Sal_rm64_1, Register.RDX, 1U));
			} /* else */ TestAssembler(c => c.sal(rdx, (byte)2), Instruction.Create(Code.Sal_rm64_imm8, Register.RDX, 2U));
		}

		[Fact]
		public void sal_m_u() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.Qword) */
					TestAssembler(c => c.sal(__qword_ptr[rdx], (byte)1), Instruction.Create(Code.Sal_rm64_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
					TestAssembler(c => c.sal(__dword_ptr[rdx], (byte)1), Instruction.Create(Code.Sal_rm32_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
					TestAssembler(c => c.sal(__word_ptr[rdx], (byte)1), Instruction.Create(Code.Sal_rm16_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
					TestAssembler(c => c.sal(__byte_ptr[rdx], (byte)1), Instruction.Create(Code.Sal_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				}
				{
					AssertInvalid(() => {
						TestAssembler(c => c.sal(__zmmword_ptr[rdx], (byte)1), Instruction.Create(Code.Sal_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
					});
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.sal(__qword_ptr[rdx], (byte)2), Instruction.Create(Code.Sal_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.sal(__dword_ptr[rdx], (byte)2), Instruction.Create(Code.Sal_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.sal(__word_ptr[rdx], (byte)2), Instruction.Create(Code.Sal_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.sal(__byte_ptr[rdx], (byte)2), Instruction.Create(Code.Sal_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.sal(__zmmword_ptr[rdx], (byte)2), Instruction.Create(Code.Sal_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
				});
			}
		}

		[Fact]
		public void sar_r8_r8() {
			TestAssembler(c => c.sar(dl, cl), Instruction.Create(Code.Sar_rm8_CL, Register.DL, Register.CL));
		}

		[Fact]
		public void sar_r16_r8() {
			TestAssembler(c => c.sar(dx, cl), Instruction.Create(Code.Sar_rm16_CL, Register.DX, Register.CL));
		}

		[Fact]
		public void sar_r32_r8() {
			TestAssembler(c => c.sar(edx, cl), Instruction.Create(Code.Sar_rm32_CL, Register.EDX, Register.CL));
		}

		[Fact]
		public void sar_r64_r8() {
			TestAssembler(c => c.sar(rdx, cl), Instruction.Create(Code.Sar_rm64_CL, Register.RDX, Register.CL));
		}

		[Fact]
		public void sar_m_r8() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.sar(__qword_ptr[rdx], cl), Instruction.Create(Code.Sar_rm64_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.sar(__dword_ptr[rdx], cl), Instruction.Create(Code.Sar_rm32_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.sar(__word_ptr[rdx], cl), Instruction.Create(Code.Sar_rm16_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.sar(__byte_ptr[rdx], cl), Instruction.Create(Code.Sar_rm8_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.sar(__zmmword_ptr[rdx], cl), Instruction.Create(Code.Sar_rm8_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
				});
			}
		}

		[Fact]
		public void sar_r8_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sar(dl, 1), Instruction.Create(Code.Sar_rm8_1, Register.DL, 1));
			} /* else */ TestAssembler(c => c.sar(dl, 2), Instruction.Create(Code.Sar_rm8_imm8, Register.DL, 2));
		}

		[Fact]
		public void sar_r16_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sar(dx, 1), Instruction.Create(Code.Sar_rm16_1, Register.DX, 1));
			} /* else */ TestAssembler(c => c.sar(dx, 2), Instruction.Create(Code.Sar_rm16_imm8, Register.DX, 2));
		}

		[Fact]
		public void sar_r32_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sar(edx, 1), Instruction.Create(Code.Sar_rm32_1, Register.EDX, 1));
			} /* else */ TestAssembler(c => c.sar(edx, 2), Instruction.Create(Code.Sar_rm32_imm8, Register.EDX, 2));
		}

		[Fact]
		public void sar_r64_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sar(rdx, 1), Instruction.Create(Code.Sar_rm64_1, Register.RDX, 1));
			} /* else */ TestAssembler(c => c.sar(rdx, 2), Instruction.Create(Code.Sar_rm64_imm8, Register.RDX, 2));
		}

		[Fact]
		public void sar_m_i() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.Qword) */
					TestAssembler(c => c.sar(__qword_ptr[rdx], 1), Instruction.Create(Code.Sar_rm64_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
					TestAssembler(c => c.sar(__dword_ptr[rdx], 1), Instruction.Create(Code.Sar_rm32_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
					TestAssembler(c => c.sar(__word_ptr[rdx], 1), Instruction.Create(Code.Sar_rm16_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
					TestAssembler(c => c.sar(__byte_ptr[rdx], 1), Instruction.Create(Code.Sar_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				}
				{
					AssertInvalid(() => {
						TestAssembler(c => c.sar(__zmmword_ptr[rdx], 1), Instruction.Create(Code.Sar_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
					});
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.sar(__qword_ptr[rdx], 2), Instruction.Create(Code.Sar_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.sar(__dword_ptr[rdx], 2), Instruction.Create(Code.Sar_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.sar(__word_ptr[rdx], 2), Instruction.Create(Code.Sar_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.sar(__byte_ptr[rdx], 2), Instruction.Create(Code.Sar_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.sar(__zmmword_ptr[rdx], 2), Instruction.Create(Code.Sar_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
				});
			}
		}

		[Fact]
		public void sar_r8_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sar(dl, (byte)1), Instruction.Create(Code.Sar_rm8_1, Register.DL, 1U));
			} /* else */ TestAssembler(c => c.sar(dl, (byte)2), Instruction.Create(Code.Sar_rm8_imm8, Register.DL, 2U));
		}

		[Fact]
		public void sar_r16_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sar(dx, (byte)1), Instruction.Create(Code.Sar_rm16_1, Register.DX, 1U));
			} /* else */ TestAssembler(c => c.sar(dx, (byte)2), Instruction.Create(Code.Sar_rm16_imm8, Register.DX, 2U));
		}

		[Fact]
		public void sar_r32_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sar(edx, (byte)1), Instruction.Create(Code.Sar_rm32_1, Register.EDX, 1U));
			} /* else */ TestAssembler(c => c.sar(edx, (byte)2), Instruction.Create(Code.Sar_rm32_imm8, Register.EDX, 2U));
		}

		[Fact]
		public void sar_r64_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.sar(rdx, (byte)1), Instruction.Create(Code.Sar_rm64_1, Register.RDX, 1U));
			} /* else */ TestAssembler(c => c.sar(rdx, (byte)2), Instruction.Create(Code.Sar_rm64_imm8, Register.RDX, 2U));
		}

		[Fact]
		public void sar_m_u() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.Qword) */
					TestAssembler(c => c.sar(__qword_ptr[rdx], (byte)1), Instruction.Create(Code.Sar_rm64_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
					TestAssembler(c => c.sar(__dword_ptr[rdx], (byte)1), Instruction.Create(Code.Sar_rm32_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
					TestAssembler(c => c.sar(__word_ptr[rdx], (byte)1), Instruction.Create(Code.Sar_rm16_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
					TestAssembler(c => c.sar(__byte_ptr[rdx], (byte)1), Instruction.Create(Code.Sar_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				}
				{
					AssertInvalid(() => {
						TestAssembler(c => c.sar(__zmmword_ptr[rdx], (byte)1), Instruction.Create(Code.Sar_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
					});
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.sar(__qword_ptr[rdx], (byte)2), Instruction.Create(Code.Sar_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.sar(__dword_ptr[rdx], (byte)2), Instruction.Create(Code.Sar_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.sar(__word_ptr[rdx], (byte)2), Instruction.Create(Code.Sar_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.sar(__byte_ptr[rdx], (byte)2), Instruction.Create(Code.Sar_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.sar(__zmmword_ptr[rdx], (byte)2), Instruction.Create(Code.Sar_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
				});
			}
		}

		[Fact]
		public void sarx_r32_r32_r32() {
			TestAssembler(c => c.sarx(edx, ebx, esp), Instruction.Create(Code.VEX_Sarx_r32_rm32_r32, Register.EDX, Register.EBX, Register.ESP));
		}

		[Fact]
		public void sarx_r32_m_r32() {
			TestAssembler(c => c.sarx(edx, __dword_ptr[rcx], esp), Instruction.Create(Code.VEX_Sarx_r32_rm32_r32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ESP));
		}

		[Fact]
		public void sarx_r64_r64_r64() {
			TestAssembler(c => c.sarx(rdx, rbx, rsp), Instruction.Create(Code.VEX_Sarx_r64_rm64_r64, Register.RDX, Register.RBX, Register.RSP));
		}

		[Fact]
		public void sarx_r64_m_r64() {
			TestAssembler(c => c.sarx(rdx, __qword_ptr[rcx], rsp), Instruction.Create(Code.VEX_Sarx_r64_rm64_r64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RSP));
		}

		[Fact]
		public void saveprevssp() {
			TestAssembler(c => c.saveprevssp(), Instruction.Create(Code.Saveprevssp));
		}

		[Fact]
		public void sbb_r8_r8() {
			TestAssembler(c => c.sbb(dl, bl), Instruction.Create(Code.Sbb_rm8_r8, Register.DL, Register.BL));
		}

		[Fact]
		public void sbb_m_r8() {
			TestAssembler(c => c.sbb(__byte_ptr[rcx], bl), Instruction.Create(Code.Sbb_rm8_r8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BL));
		}

		[Fact]
		public void sbb_r16_r16() {
			TestAssembler(c => c.sbb(dx, bx), Instruction.Create(Code.Sbb_rm16_r16, Register.DX, Register.BX));
		}

		[Fact]
		public void sbb_m_r16() {
			TestAssembler(c => c.sbb(__word_ptr[rcx], bx), Instruction.Create(Code.Sbb_rm16_r16, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX));
		}

		[Fact]
		public void sbb_r32_r32() {
			TestAssembler(c => c.sbb(edx, ebx), Instruction.Create(Code.Sbb_rm32_r32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void sbb_m_r32() {
			TestAssembler(c => c.sbb(__dword_ptr[rcx], ebx), Instruction.Create(Code.Sbb_rm32_r32, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX));
		}

		[Fact]
		public void sbb_r64_r64() {
			TestAssembler(c => c.sbb(rdx, rbx), Instruction.Create(Code.Sbb_rm64_r64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void sbb_m_r64() {
			TestAssembler(c => c.sbb(__qword_ptr[rcx], rbx), Instruction.Create(Code.Sbb_rm64_r64, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX));
		}

		[Fact]
		public void sbb_r8_m() {
			TestAssembler(c => c.sbb(dl, __byte_ptr[rcx]), Instruction.Create(Code.Sbb_r8_rm8, Register.DL, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void sbb_r16_m() {
			TestAssembler(c => c.sbb(dx, __word_ptr[rcx]), Instruction.Create(Code.Sbb_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void sbb_r32_m() {
			TestAssembler(c => c.sbb(edx, __dword_ptr[rcx]), Instruction.Create(Code.Sbb_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void sbb_r64_m() {
			TestAssembler(c => c.sbb(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Sbb_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void sbb_r8_i() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.sbb(al, -5), Instruction.Create(Code.Sbb_AL_imm8, Register.AL, -5));
			} /* else */ TestAssembler(c => c.sbb(dl, -5), Instruction.Create(Code.Sbb_rm8_imm8, Register.DL, -5));
		}

		[Fact]
		public void sbb_r16_i() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.sbb(ax, 0x40B7), Instruction.Create(Code.Sbb_AX_imm16, Register.AX, 0x40B7));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.sbb(dx, -0x80), Instruction.Create(Code.Sbb_rm16_imm8, Register.DX, -0x80));
				TestAssembler(c => c.sbb(dx, 0x7F), Instruction.Create(Code.Sbb_rm16_imm8, Register.DX, 0x7F));
			} /* else */ TestAssembler(c => c.sbb(dx, 0x40B7), Instruction.Create(Code.Sbb_rm16_imm16, Register.DX, 0x40B7));
		}

		[Fact]
		public void sbb_r32_i() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.sbb(eax, 0x7FFFFFFF), Instruction.Create(Code.Sbb_EAX_imm32, Register.EAX, 0x7FFFFFFF));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.sbb(edx, -0x80), Instruction.Create(Code.Sbb_rm32_imm8, Register.EDX, -0x80));
				TestAssembler(c => c.sbb(edx, 0x7F), Instruction.Create(Code.Sbb_rm32_imm8, Register.EDX, 0x7F));
			} /* else */ TestAssembler(c => c.sbb(edx, 0x7FFFFFFF), Instruction.Create(Code.Sbb_rm32_imm32, Register.EDX, 0x7FFFFFFF));
		}

		[Fact]
		public void sbb_r64_i() {
			{ /* if (dst == Register.RAX) */
				TestAssembler(c => c.sbb(rax, -0x80000000), Instruction.Create(Code.Sbb_RAX_imm32, Register.RAX, -0x80000000));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.sbb(rdx, -0x80), Instruction.Create(Code.Sbb_rm64_imm8, Register.RDX, -0x80));
				TestAssembler(c => c.sbb(rdx, 0x7F), Instruction.Create(Code.Sbb_rm64_imm8, Register.RDX, 0x7F));
			} /* else */ TestAssembler(c => c.sbb(rdx, -0x80000000), Instruction.Create(Code.Sbb_rm64_imm32, Register.RDX, -0x80000000));
		}

		[Fact]
		public void sbb_m_i() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.sbb(__qword_ptr[rdx], -0x80), Instruction.Create(Code.Sbb_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80));
					TestAssembler(c => c.sbb(__qword_ptr[rdx], 0x7F), Instruction.Create(Code.Sbb_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7F));
				} /* else */ TestAssembler(c => c.sbb(__qword_ptr[rdx], -0x80000000), Instruction.Create(Code.Sbb_rm64_imm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80000000));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.sbb(__dword_ptr[rdx], -0x80), Instruction.Create(Code.Sbb_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80));
					TestAssembler(c => c.sbb(__dword_ptr[rdx], 0x7F), Instruction.Create(Code.Sbb_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7F));
				} /* else */ TestAssembler(c => c.sbb(__dword_ptr[rdx], 0x7FFFFFFF), Instruction.Create(Code.Sbb_rm32_imm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFF));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.sbb(__word_ptr[rdx], -0x80), Instruction.Create(Code.Sbb_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80));
					TestAssembler(c => c.sbb(__word_ptr[rdx], 0x7F), Instruction.Create(Code.Sbb_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7F));
				} /* else */ TestAssembler(c => c.sbb(__word_ptr[rdx], 0x40B7), Instruction.Create(Code.Sbb_rm16_imm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x40B7));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.sbb(__byte_ptr[rdx], -5), Instruction.Create(Code.Sbb_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.sbb(__zmmword_ptr[rdx], -5), Instruction.Create(Code.Sbb_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
				});
			}
		}

		[Fact]
		public void sbb_r8_u() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.sbb(al, (byte)0x7F), Instruction.Create(Code.Sbb_AL_imm8, Register.AL, 0x7FU));
			} /* else */ TestAssembler(c => c.sbb(dl, (byte)0x7F), Instruction.Create(Code.Sbb_rm8_imm8, Register.DL, 0x7FU));
		}

		[Fact]
		public void sbb_r16_u() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.sbb(ax, (ushort)0x40B7), Instruction.Create(Code.Sbb_AX_imm16, Register.AX, 0x40B7U));
			} /* else */ { /* if (imm <= (ushort)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
				TestAssembler(c => c.sbb(dx, (ushort)0xFF80), Instruction.Create(Code.Sbb_rm16_imm8, Register.DX, 0xFF80U));
				TestAssembler(c => c.sbb(dx, (ushort)0x7F), Instruction.Create(Code.Sbb_rm16_imm8, Register.DX, 0x7FU));
			} /* else */ TestAssembler(c => c.sbb(dx, (ushort)0x40B7), Instruction.Create(Code.Sbb_rm16_imm16, Register.DX, 0x40B7U));
		}

		[Fact]
		public void sbb_r32_u() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.sbb(eax, 0x7FFFFFFFU), Instruction.Create(Code.Sbb_EAX_imm32, Register.EAX, 0x7FFFFFFFU));
			} /* else */ { /* if (imm <= (uint)sbyte.MaxValue || 0xFFFF_FF80 <= imm) */
				TestAssembler(c => c.sbb(edx, 0xFFFFFF80U), Instruction.Create(Code.Sbb_rm32_imm8, Register.EDX, 0xFFFFFF80U));
				TestAssembler(c => c.sbb(edx, 0x7FU), Instruction.Create(Code.Sbb_rm32_imm8, Register.EDX, 0x7FU));
			} /* else */ TestAssembler(c => c.sbb(edx, 0x7FFFFFFFU), Instruction.Create(Code.Sbb_rm32_imm32, Register.EDX, 0x7FFFFFFFU));
		}

		[Fact]
		public void sbb_m_u() {
			{ /* if (dst.Size == MemoryOperandSize.Dword) */
				{ /* if (imm <= (uint)sbyte.MaxValue || 0xFFFF_FF80 <= imm) */
					TestAssembler(c => c.sbb(__dword_ptr[rdx], 0xFFFFFF80U), Instruction.Create(Code.Sbb_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0xFFFFFF80U));
					TestAssembler(c => c.sbb(__dword_ptr[rdx], 0x7FU), Instruction.Create(Code.Sbb_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
				} /* else */ TestAssembler(c => c.sbb(__dword_ptr[rdx], 0x7FFFFFFFU), Instruction.Create(Code.Sbb_rm32_imm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFFU));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				{ /* if (imm <= (uint)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
					TestAssembler(c => c.sbb(__word_ptr[rdx], 0xFF80U), Instruction.Create(Code.Sbb_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0xFF80U));
					TestAssembler(c => c.sbb(__word_ptr[rdx], 0x7FU), Instruction.Create(Code.Sbb_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
				} /* else */ TestAssembler(c => c.sbb(__word_ptr[rdx], 0x40B7U), Instruction.Create(Code.Sbb_rm16_imm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x40B7U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.sbb(__byte_ptr[rdx], 0x7FU), Instruction.Create(Code.Sbb_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.sbb(__zmmword_ptr[rdx], 0x7FU), Instruction.Create(Code.Sbb_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
				});
			}
		}

		[Fact]
		public void scasb() {
			TestAssembler(c => c.scasb(), Instruction.CreateScasb(64));
		}

		[Fact]
		public void scasd() {
			TestAssembler(c => c.scasd(), Instruction.CreateScasd(64));
		}

		[Fact]
		public void scasq() {
			TestAssembler(c => c.scasq(), Instruction.CreateScasq(64));
		}

		[Fact]
		public void scasw() {
			TestAssembler(c => c.scasw(), Instruction.CreateScasw(64));
		}

		[Fact]
		public void seamcall() {
			TestAssembler(c => c.seamcall(), Instruction.Create(Code.Seamcall));
		}

		[Fact]
		public void seamops() {
			TestAssembler(c => c.seamops(), Instruction.Create(Code.Seamops));
		}

		[Fact]
		public void seamret() {
			TestAssembler(c => c.seamret(), Instruction.Create(Code.Seamret));
		}

		[Fact]
		public void senduipi_r64() {
			TestAssembler(c => c.senduipi(rdx), Instruction.Create(Code.Senduipi_r64, Register.RDX));
		}

		[Fact]
		public void serialize() {
			TestAssembler(c => c.serialize(), Instruction.Create(Code.Serialize));
		}

		[Fact]
		public void seta_r8() {
			TestAssembler(c => c.seta(dl), Instruction.Create(Code.Seta_rm8, Register.DL));
		}

		[Fact]
		public void seta_m() {
			TestAssembler(c => c.seta(__byte_ptr[rcx]), Instruction.Create(Code.Seta_rm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void setae_r8() {
			TestAssembler(c => c.setae(dl), Instruction.Create(Code.Setae_rm8, Register.DL));
		}

		[Fact]
		public void setae_m() {
			TestAssembler(c => c.setae(__byte_ptr[rcx]), Instruction.Create(Code.Setae_rm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void setb_r8() {
			TestAssembler(c => c.setb(dl), Instruction.Create(Code.Setb_rm8, Register.DL));
		}

		[Fact]
		public void setb_m() {
			TestAssembler(c => c.setb(__byte_ptr[rcx]), Instruction.Create(Code.Setb_rm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void setbe_r8() {
			TestAssembler(c => c.setbe(dl), Instruction.Create(Code.Setbe_rm8, Register.DL));
		}

		[Fact]
		public void setbe_m() {
			TestAssembler(c => c.setbe(__byte_ptr[rcx]), Instruction.Create(Code.Setbe_rm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void setc_r8() {
			TestAssembler(c => c.setc(dl), Instruction.Create(Code.Setb_rm8, Register.DL));
		}

		[Fact]
		public void setc_m() {
			TestAssembler(c => c.setc(__byte_ptr[rcx]), Instruction.Create(Code.Setb_rm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void sete_r8() {
			TestAssembler(c => c.sete(dl), Instruction.Create(Code.Sete_rm8, Register.DL));
		}

		[Fact]
		public void sete_m() {
			TestAssembler(c => c.sete(__byte_ptr[rcx]), Instruction.Create(Code.Sete_rm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void setg_r8() {
			TestAssembler(c => c.setg(dl), Instruction.Create(Code.Setg_rm8, Register.DL));
		}

		[Fact]
		public void setg_m() {
			TestAssembler(c => c.setg(__byte_ptr[rcx]), Instruction.Create(Code.Setg_rm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void setge_r8() {
			TestAssembler(c => c.setge(dl), Instruction.Create(Code.Setge_rm8, Register.DL));
		}

		[Fact]
		public void setge_m() {
			TestAssembler(c => c.setge(__byte_ptr[rcx]), Instruction.Create(Code.Setge_rm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void setl_r8() {
			TestAssembler(c => c.setl(dl), Instruction.Create(Code.Setl_rm8, Register.DL));
		}

		[Fact]
		public void setl_m() {
			TestAssembler(c => c.setl(__byte_ptr[rcx]), Instruction.Create(Code.Setl_rm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void setle_r8() {
			TestAssembler(c => c.setle(dl), Instruction.Create(Code.Setle_rm8, Register.DL));
		}

		[Fact]
		public void setle_m() {
			TestAssembler(c => c.setle(__byte_ptr[rcx]), Instruction.Create(Code.Setle_rm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void setna_r8() {
			TestAssembler(c => c.setna(dl), Instruction.Create(Code.Setbe_rm8, Register.DL));
		}

		[Fact]
		public void setna_m() {
			TestAssembler(c => c.setna(__byte_ptr[rcx]), Instruction.Create(Code.Setbe_rm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void setnae_r8() {
			TestAssembler(c => c.setnae(dl), Instruction.Create(Code.Setb_rm8, Register.DL));
		}

		[Fact]
		public void setnae_m() {
			TestAssembler(c => c.setnae(__byte_ptr[rcx]), Instruction.Create(Code.Setb_rm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void setnb_r8() {
			TestAssembler(c => c.setnb(dl), Instruction.Create(Code.Setae_rm8, Register.DL));
		}

		[Fact]
		public void setnb_m() {
			TestAssembler(c => c.setnb(__byte_ptr[rcx]), Instruction.Create(Code.Setae_rm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void setnbe_r8() {
			TestAssembler(c => c.setnbe(dl), Instruction.Create(Code.Seta_rm8, Register.DL));
		}

		[Fact]
		public void setnbe_m() {
			TestAssembler(c => c.setnbe(__byte_ptr[rcx]), Instruction.Create(Code.Seta_rm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void setnc_r8() {
			TestAssembler(c => c.setnc(dl), Instruction.Create(Code.Setae_rm8, Register.DL));
		}

		[Fact]
		public void setnc_m() {
			TestAssembler(c => c.setnc(__byte_ptr[rcx]), Instruction.Create(Code.Setae_rm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void setne_r8() {
			TestAssembler(c => c.setne(dl), Instruction.Create(Code.Setne_rm8, Register.DL));
		}

		[Fact]
		public void setne_m() {
			TestAssembler(c => c.setne(__byte_ptr[rcx]), Instruction.Create(Code.Setne_rm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void setng_r8() {
			TestAssembler(c => c.setng(dl), Instruction.Create(Code.Setle_rm8, Register.DL));
		}

		[Fact]
		public void setng_m() {
			TestAssembler(c => c.setng(__byte_ptr[rcx]), Instruction.Create(Code.Setle_rm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void setnge_r8() {
			TestAssembler(c => c.setnge(dl), Instruction.Create(Code.Setl_rm8, Register.DL));
		}

		[Fact]
		public void setnge_m() {
			TestAssembler(c => c.setnge(__byte_ptr[rcx]), Instruction.Create(Code.Setl_rm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void setnl_r8() {
			TestAssembler(c => c.setnl(dl), Instruction.Create(Code.Setge_rm8, Register.DL));
		}

		[Fact]
		public void setnl_m() {
			TestAssembler(c => c.setnl(__byte_ptr[rcx]), Instruction.Create(Code.Setge_rm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void setnle_r8() {
			TestAssembler(c => c.setnle(dl), Instruction.Create(Code.Setg_rm8, Register.DL));
		}

		[Fact]
		public void setnle_m() {
			TestAssembler(c => c.setnle(__byte_ptr[rcx]), Instruction.Create(Code.Setg_rm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void setno_r8() {
			TestAssembler(c => c.setno(dl), Instruction.Create(Code.Setno_rm8, Register.DL));
		}

		[Fact]
		public void setno_m() {
			TestAssembler(c => c.setno(__byte_ptr[rcx]), Instruction.Create(Code.Setno_rm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void setnp_r8() {
			TestAssembler(c => c.setnp(dl), Instruction.Create(Code.Setnp_rm8, Register.DL));
		}

		[Fact]
		public void setnp_m() {
			TestAssembler(c => c.setnp(__byte_ptr[rcx]), Instruction.Create(Code.Setnp_rm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void setns_r8() {
			TestAssembler(c => c.setns(dl), Instruction.Create(Code.Setns_rm8, Register.DL));
		}

		[Fact]
		public void setns_m() {
			TestAssembler(c => c.setns(__byte_ptr[rcx]), Instruction.Create(Code.Setns_rm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void setnz_r8() {
			TestAssembler(c => c.setnz(dl), Instruction.Create(Code.Setne_rm8, Register.DL));
		}

		[Fact]
		public void setnz_m() {
			TestAssembler(c => c.setnz(__byte_ptr[rcx]), Instruction.Create(Code.Setne_rm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void seto_r8() {
			TestAssembler(c => c.seto(dl), Instruction.Create(Code.Seto_rm8, Register.DL));
		}

		[Fact]
		public void seto_m() {
			TestAssembler(c => c.seto(__byte_ptr[rcx]), Instruction.Create(Code.Seto_rm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void setp_r8() {
			TestAssembler(c => c.setp(dl), Instruction.Create(Code.Setp_rm8, Register.DL));
		}

		[Fact]
		public void setp_m() {
			TestAssembler(c => c.setp(__byte_ptr[rcx]), Instruction.Create(Code.Setp_rm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void setpe_r8() {
			TestAssembler(c => c.setpe(dl), Instruction.Create(Code.Setp_rm8, Register.DL));
		}

		[Fact]
		public void setpe_m() {
			TestAssembler(c => c.setpe(__byte_ptr[rcx]), Instruction.Create(Code.Setp_rm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void setpo_r8() {
			TestAssembler(c => c.setpo(dl), Instruction.Create(Code.Setnp_rm8, Register.DL));
		}

		[Fact]
		public void setpo_m() {
			TestAssembler(c => c.setpo(__byte_ptr[rcx]), Instruction.Create(Code.Setnp_rm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void sets_r8() {
			TestAssembler(c => c.sets(dl), Instruction.Create(Code.Sets_rm8, Register.DL));
		}

		[Fact]
		public void sets_m() {
			TestAssembler(c => c.sets(__byte_ptr[rcx]), Instruction.Create(Code.Sets_rm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void setssbsy() {
			TestAssembler(c => c.setssbsy(), Instruction.Create(Code.Setssbsy));
		}

		[Fact]
		public void setz_r8() {
			TestAssembler(c => c.setz(dl), Instruction.Create(Code.Sete_rm8, Register.DL));
		}

		[Fact]
		public void setz_m() {
			TestAssembler(c => c.setz(__byte_ptr[rcx]), Instruction.Create(Code.Sete_rm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void sfence() {
			TestAssembler(c => c.sfence(), Instruction.Create(Code.Sfence));
		}

		[Fact]
		public void sgdt_m() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.sgdt(__[rcx]), Instruction.Create(Code.Sgdt_m1664, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void sha1msg1_xmm_xmm() {
			TestAssembler(c => c.sha1msg1(xmm2, xmm3), Instruction.Create(Code.Sha1msg1_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void sha1msg1_xmm_m() {
			TestAssembler(c => c.sha1msg1(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Sha1msg1_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void sha1msg2_xmm_xmm() {
			TestAssembler(c => c.sha1msg2(xmm2, xmm3), Instruction.Create(Code.Sha1msg2_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void sha1msg2_xmm_m() {
			TestAssembler(c => c.sha1msg2(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Sha1msg2_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void sha1nexte_xmm_xmm() {
			TestAssembler(c => c.sha1nexte(xmm2, xmm3), Instruction.Create(Code.Sha1nexte_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void sha1nexte_xmm_m() {
			TestAssembler(c => c.sha1nexte(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Sha1nexte_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void sha1rnds4_xmm_xmm_i() {
			TestAssembler(c => c.sha1rnds4(xmm2, xmm3, -5), Instruction.Create(Code.Sha1rnds4_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void sha1rnds4_xmm_m_i() {
			TestAssembler(c => c.sha1rnds4(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Sha1rnds4_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void sha1rnds4_xmm_xmm_u() {
			TestAssembler(c => c.sha1rnds4(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Sha1rnds4_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void sha1rnds4_xmm_m_u() {
			TestAssembler(c => c.sha1rnds4(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Sha1rnds4_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void sha256msg1_xmm_xmm() {
			TestAssembler(c => c.sha256msg1(xmm2, xmm3), Instruction.Create(Code.Sha256msg1_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void sha256msg1_xmm_m() {
			TestAssembler(c => c.sha256msg1(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Sha256msg1_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void sha256msg2_xmm_xmm() {
			TestAssembler(c => c.sha256msg2(xmm2, xmm3), Instruction.Create(Code.Sha256msg2_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void sha256msg2_xmm_m() {
			TestAssembler(c => c.sha256msg2(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Sha256msg2_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void sha256rnds2_xmm_xmm() {
			TestAssembler(c => c.sha256rnds2(xmm2, xmm3), Instruction.Create(Code.Sha256rnds2_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void sha256rnds2_xmm_m() {
			TestAssembler(c => c.sha256rnds2(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Sha256rnds2_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void shl_r8_r8() {
			TestAssembler(c => c.shl(dl, cl), Instruction.Create(Code.Shl_rm8_CL, Register.DL, Register.CL));
		}

		[Fact]
		public void shl_r16_r8() {
			TestAssembler(c => c.shl(dx, cl), Instruction.Create(Code.Shl_rm16_CL, Register.DX, Register.CL));
		}

		[Fact]
		public void shl_r32_r8() {
			TestAssembler(c => c.shl(edx, cl), Instruction.Create(Code.Shl_rm32_CL, Register.EDX, Register.CL));
		}

		[Fact]
		public void shl_r64_r8() {
			TestAssembler(c => c.shl(rdx, cl), Instruction.Create(Code.Shl_rm64_CL, Register.RDX, Register.CL));
		}

		[Fact]
		public void shl_m_r8() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.shl(__qword_ptr[rdx], cl), Instruction.Create(Code.Shl_rm64_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.shl(__dword_ptr[rdx], cl), Instruction.Create(Code.Shl_rm32_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.shl(__word_ptr[rdx], cl), Instruction.Create(Code.Shl_rm16_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.shl(__byte_ptr[rdx], cl), Instruction.Create(Code.Shl_rm8_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.shl(__zmmword_ptr[rdx], cl), Instruction.Create(Code.Shl_rm8_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
				});
			}
		}

		[Fact]
		public void shl_r8_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shl(dl, 1), Instruction.Create(Code.Shl_rm8_1, Register.DL, 1));
			} /* else */ TestAssembler(c => c.shl(dl, 2), Instruction.Create(Code.Shl_rm8_imm8, Register.DL, 2));
		}

		[Fact]
		public void shl_r16_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shl(dx, 1), Instruction.Create(Code.Shl_rm16_1, Register.DX, 1));
			} /* else */ TestAssembler(c => c.shl(dx, 2), Instruction.Create(Code.Shl_rm16_imm8, Register.DX, 2));
		}

		[Fact]
		public void shl_r32_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shl(edx, 1), Instruction.Create(Code.Shl_rm32_1, Register.EDX, 1));
			} /* else */ TestAssembler(c => c.shl(edx, 2), Instruction.Create(Code.Shl_rm32_imm8, Register.EDX, 2));
		}

		[Fact]
		public void shl_r64_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shl(rdx, 1), Instruction.Create(Code.Shl_rm64_1, Register.RDX, 1));
			} /* else */ TestAssembler(c => c.shl(rdx, 2), Instruction.Create(Code.Shl_rm64_imm8, Register.RDX, 2));
		}

		[Fact]
		public void shl_m_i() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.Qword) */
					TestAssembler(c => c.shl(__qword_ptr[rdx], 1), Instruction.Create(Code.Shl_rm64_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
					TestAssembler(c => c.shl(__dword_ptr[rdx], 1), Instruction.Create(Code.Shl_rm32_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
					TestAssembler(c => c.shl(__word_ptr[rdx], 1), Instruction.Create(Code.Shl_rm16_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
					TestAssembler(c => c.shl(__byte_ptr[rdx], 1), Instruction.Create(Code.Shl_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				}
				{
					AssertInvalid(() => {
						TestAssembler(c => c.shl(__zmmword_ptr[rdx], 1), Instruction.Create(Code.Shl_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
					});
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.shl(__qword_ptr[rdx], 2), Instruction.Create(Code.Shl_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.shl(__dword_ptr[rdx], 2), Instruction.Create(Code.Shl_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.shl(__word_ptr[rdx], 2), Instruction.Create(Code.Shl_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.shl(__byte_ptr[rdx], 2), Instruction.Create(Code.Shl_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.shl(__zmmword_ptr[rdx], 2), Instruction.Create(Code.Shl_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
				});
			}
		}

		[Fact]
		public void shl_r8_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shl(dl, (byte)1), Instruction.Create(Code.Shl_rm8_1, Register.DL, 1U));
			} /* else */ TestAssembler(c => c.shl(dl, (byte)2), Instruction.Create(Code.Shl_rm8_imm8, Register.DL, 2U));
		}

		[Fact]
		public void shl_r16_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shl(dx, (byte)1), Instruction.Create(Code.Shl_rm16_1, Register.DX, 1U));
			} /* else */ TestAssembler(c => c.shl(dx, (byte)2), Instruction.Create(Code.Shl_rm16_imm8, Register.DX, 2U));
		}

		[Fact]
		public void shl_r32_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shl(edx, (byte)1), Instruction.Create(Code.Shl_rm32_1, Register.EDX, 1U));
			} /* else */ TestAssembler(c => c.shl(edx, (byte)2), Instruction.Create(Code.Shl_rm32_imm8, Register.EDX, 2U));
		}

		[Fact]
		public void shl_r64_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shl(rdx, (byte)1), Instruction.Create(Code.Shl_rm64_1, Register.RDX, 1U));
			} /* else */ TestAssembler(c => c.shl(rdx, (byte)2), Instruction.Create(Code.Shl_rm64_imm8, Register.RDX, 2U));
		}

		[Fact]
		public void shl_m_u() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.Qword) */
					TestAssembler(c => c.shl(__qword_ptr[rdx], (byte)1), Instruction.Create(Code.Shl_rm64_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
					TestAssembler(c => c.shl(__dword_ptr[rdx], (byte)1), Instruction.Create(Code.Shl_rm32_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
					TestAssembler(c => c.shl(__word_ptr[rdx], (byte)1), Instruction.Create(Code.Shl_rm16_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
					TestAssembler(c => c.shl(__byte_ptr[rdx], (byte)1), Instruction.Create(Code.Shl_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				}
				{
					AssertInvalid(() => {
						TestAssembler(c => c.shl(__zmmword_ptr[rdx], (byte)1), Instruction.Create(Code.Shl_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
					});
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.shl(__qword_ptr[rdx], (byte)2), Instruction.Create(Code.Shl_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.shl(__dword_ptr[rdx], (byte)2), Instruction.Create(Code.Shl_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.shl(__word_ptr[rdx], (byte)2), Instruction.Create(Code.Shl_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.shl(__byte_ptr[rdx], (byte)2), Instruction.Create(Code.Shl_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.shl(__zmmword_ptr[rdx], (byte)2), Instruction.Create(Code.Shl_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
				});
			}
		}

		[Fact]
		public void shld_r16_r16_r8() {
			TestAssembler(c => c.shld(dx, bx, cl), Instruction.Create(Code.Shld_rm16_r16_CL, Register.DX, Register.BX, Register.CL));
		}

		[Fact]
		public void shld_m_r16_r8() {
			TestAssembler(c => c.shld(__word_ptr[rcx], bx, cl), Instruction.Create(Code.Shld_rm16_r16_CL, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX, Register.CL));
		}

		[Fact]
		public void shld_r32_r32_r8() {
			TestAssembler(c => c.shld(edx, ebx, cl), Instruction.Create(Code.Shld_rm32_r32_CL, Register.EDX, Register.EBX, Register.CL));
		}

		[Fact]
		public void shld_m_r32_r8() {
			TestAssembler(c => c.shld(__dword_ptr[rcx], ebx, cl), Instruction.Create(Code.Shld_rm32_r32_CL, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX, Register.CL));
		}

		[Fact]
		public void shld_r64_r64_r8() {
			TestAssembler(c => c.shld(rdx, rbx, cl), Instruction.Create(Code.Shld_rm64_r64_CL, Register.RDX, Register.RBX, Register.CL));
		}

		[Fact]
		public void shld_m_r64_r8() {
			TestAssembler(c => c.shld(__qword_ptr[rcx], rbx, cl), Instruction.Create(Code.Shld_rm64_r64_CL, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX, Register.CL));
		}

		[Fact]
		public void shld_r16_r16_i() {
			TestAssembler(c => c.shld(dx, bx, -5), Instruction.Create(Code.Shld_rm16_r16_imm8, Register.DX, Register.BX, -5));
		}

		[Fact]
		public void shld_m_r16_i() {
			TestAssembler(c => c.shld(__word_ptr[rcx], bx, -5), Instruction.Create(Code.Shld_rm16_r16_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX, -5));
		}

		[Fact]
		public void shld_r32_r32_i() {
			TestAssembler(c => c.shld(edx, ebx, -5), Instruction.Create(Code.Shld_rm32_r32_imm8, Register.EDX, Register.EBX, -5));
		}

		[Fact]
		public void shld_m_r32_i() {
			TestAssembler(c => c.shld(__dword_ptr[rcx], ebx, -5), Instruction.Create(Code.Shld_rm32_r32_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX, -5));
		}

		[Fact]
		public void shld_r64_r64_i() {
			TestAssembler(c => c.shld(rdx, rbx, -5), Instruction.Create(Code.Shld_rm64_r64_imm8, Register.RDX, Register.RBX, -5));
		}

		[Fact]
		public void shld_m_r64_i() {
			TestAssembler(c => c.shld(__qword_ptr[rcx], rbx, -5), Instruction.Create(Code.Shld_rm64_r64_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX, -5));
		}

		[Fact]
		public void shld_r16_r16_u() {
			TestAssembler(c => c.shld(dx, bx, (byte)0x7F), Instruction.Create(Code.Shld_rm16_r16_imm8, Register.DX, Register.BX, 0x7FU));
		}

		[Fact]
		public void shld_m_r16_u() {
			TestAssembler(c => c.shld(__word_ptr[rcx], bx, (byte)0x7F), Instruction.Create(Code.Shld_rm16_r16_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX, 0x7FU));
		}

		[Fact]
		public void shld_r32_r32_u() {
			TestAssembler(c => c.shld(edx, ebx, (byte)0x7F), Instruction.Create(Code.Shld_rm32_r32_imm8, Register.EDX, Register.EBX, 0x7FU));
		}

		[Fact]
		public void shld_m_r32_u() {
			TestAssembler(c => c.shld(__dword_ptr[rcx], ebx, (byte)0x7F), Instruction.Create(Code.Shld_rm32_r32_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX, 0x7FU));
		}

		[Fact]
		public void shld_r64_r64_u() {
			TestAssembler(c => c.shld(rdx, rbx, (byte)0x7F), Instruction.Create(Code.Shld_rm64_r64_imm8, Register.RDX, Register.RBX, 0x7FU));
		}

		[Fact]
		public void shld_m_r64_u() {
			TestAssembler(c => c.shld(__qword_ptr[rcx], rbx, (byte)0x7F), Instruction.Create(Code.Shld_rm64_r64_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX, 0x7FU));
		}

		[Fact]
		public void shlx_r32_r32_r32() {
			TestAssembler(c => c.shlx(edx, ebx, esp), Instruction.Create(Code.VEX_Shlx_r32_rm32_r32, Register.EDX, Register.EBX, Register.ESP));
		}

		[Fact]
		public void shlx_r32_m_r32() {
			TestAssembler(c => c.shlx(edx, __dword_ptr[rcx], esp), Instruction.Create(Code.VEX_Shlx_r32_rm32_r32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ESP));
		}

		[Fact]
		public void shlx_r64_r64_r64() {
			TestAssembler(c => c.shlx(rdx, rbx, rsp), Instruction.Create(Code.VEX_Shlx_r64_rm64_r64, Register.RDX, Register.RBX, Register.RSP));
		}

		[Fact]
		public void shlx_r64_m_r64() {
			TestAssembler(c => c.shlx(rdx, __qword_ptr[rcx], rsp), Instruction.Create(Code.VEX_Shlx_r64_rm64_r64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RSP));
		}

		[Fact]
		public void shr_r8_r8() {
			TestAssembler(c => c.shr(dl, cl), Instruction.Create(Code.Shr_rm8_CL, Register.DL, Register.CL));
		}

		[Fact]
		public void shr_r16_r8() {
			TestAssembler(c => c.shr(dx, cl), Instruction.Create(Code.Shr_rm16_CL, Register.DX, Register.CL));
		}

		[Fact]
		public void shr_r32_r8() {
			TestAssembler(c => c.shr(edx, cl), Instruction.Create(Code.Shr_rm32_CL, Register.EDX, Register.CL));
		}

		[Fact]
		public void shr_r64_r8() {
			TestAssembler(c => c.shr(rdx, cl), Instruction.Create(Code.Shr_rm64_CL, Register.RDX, Register.CL));
		}

		[Fact]
		public void shr_m_r8() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.shr(__qword_ptr[rdx], cl), Instruction.Create(Code.Shr_rm64_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.shr(__dword_ptr[rdx], cl), Instruction.Create(Code.Shr_rm32_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.shr(__word_ptr[rdx], cl), Instruction.Create(Code.Shr_rm16_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.shr(__byte_ptr[rdx], cl), Instruction.Create(Code.Shr_rm8_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.shr(__zmmword_ptr[rdx], cl), Instruction.Create(Code.Shr_rm8_CL, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), Register.CL));
				});
			}
		}

		[Fact]
		public void shr_r8_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shr(dl, 1), Instruction.Create(Code.Shr_rm8_1, Register.DL, 1));
			} /* else */ TestAssembler(c => c.shr(dl, 2), Instruction.Create(Code.Shr_rm8_imm8, Register.DL, 2));
		}

		[Fact]
		public void shr_r16_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shr(dx, 1), Instruction.Create(Code.Shr_rm16_1, Register.DX, 1));
			} /* else */ TestAssembler(c => c.shr(dx, 2), Instruction.Create(Code.Shr_rm16_imm8, Register.DX, 2));
		}

		[Fact]
		public void shr_r32_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shr(edx, 1), Instruction.Create(Code.Shr_rm32_1, Register.EDX, 1));
			} /* else */ TestAssembler(c => c.shr(edx, 2), Instruction.Create(Code.Shr_rm32_imm8, Register.EDX, 2));
		}

		[Fact]
		public void shr_r64_i() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shr(rdx, 1), Instruction.Create(Code.Shr_rm64_1, Register.RDX, 1));
			} /* else */ TestAssembler(c => c.shr(rdx, 2), Instruction.Create(Code.Shr_rm64_imm8, Register.RDX, 2));
		}

		[Fact]
		public void shr_m_i() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.Qword) */
					TestAssembler(c => c.shr(__qword_ptr[rdx], 1), Instruction.Create(Code.Shr_rm64_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
					TestAssembler(c => c.shr(__dword_ptr[rdx], 1), Instruction.Create(Code.Shr_rm32_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
					TestAssembler(c => c.shr(__word_ptr[rdx], 1), Instruction.Create(Code.Shr_rm16_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
					TestAssembler(c => c.shr(__byte_ptr[rdx], 1), Instruction.Create(Code.Shr_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
				}
				{
					AssertInvalid(() => {
						TestAssembler(c => c.shr(__zmmword_ptr[rdx], 1), Instruction.Create(Code.Shr_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1));
					});
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.shr(__qword_ptr[rdx], 2), Instruction.Create(Code.Shr_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.shr(__dword_ptr[rdx], 2), Instruction.Create(Code.Shr_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.shr(__word_ptr[rdx], 2), Instruction.Create(Code.Shr_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.shr(__byte_ptr[rdx], 2), Instruction.Create(Code.Shr_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.shr(__zmmword_ptr[rdx], 2), Instruction.Create(Code.Shr_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2));
				});
			}
		}

		[Fact]
		public void shr_r8_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shr(dl, (byte)1), Instruction.Create(Code.Shr_rm8_1, Register.DL, 1U));
			} /* else */ TestAssembler(c => c.shr(dl, (byte)2), Instruction.Create(Code.Shr_rm8_imm8, Register.DL, 2U));
		}

		[Fact]
		public void shr_r16_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shr(dx, (byte)1), Instruction.Create(Code.Shr_rm16_1, Register.DX, 1U));
			} /* else */ TestAssembler(c => c.shr(dx, (byte)2), Instruction.Create(Code.Shr_rm16_imm8, Register.DX, 2U));
		}

		[Fact]
		public void shr_r32_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shr(edx, (byte)1), Instruction.Create(Code.Shr_rm32_1, Register.EDX, 1U));
			} /* else */ TestAssembler(c => c.shr(edx, (byte)2), Instruction.Create(Code.Shr_rm32_imm8, Register.EDX, 2U));
		}

		[Fact]
		public void shr_r64_u() {
			{ /* if (imm == 1) */
				TestAssembler(c => c.shr(rdx, (byte)1), Instruction.Create(Code.Shr_rm64_1, Register.RDX, 1U));
			} /* else */ TestAssembler(c => c.shr(rdx, (byte)2), Instruction.Create(Code.Shr_rm64_imm8, Register.RDX, 2U));
		}

		[Fact]
		public void shr_m_u() {
			{ /* if (imm == 1) */
				{ /* if (dst.Size == MemoryOperandSize.Qword) */
					TestAssembler(c => c.shr(__qword_ptr[rdx], (byte)1), Instruction.Create(Code.Shr_rm64_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
					TestAssembler(c => c.shr(__dword_ptr[rdx], (byte)1), Instruction.Create(Code.Shr_rm32_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
					TestAssembler(c => c.shr(__word_ptr[rdx], (byte)1), Instruction.Create(Code.Shr_rm16_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
					TestAssembler(c => c.shr(__byte_ptr[rdx], (byte)1), Instruction.Create(Code.Shr_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
				}
				{
					AssertInvalid(() => {
						TestAssembler(c => c.shr(__zmmword_ptr[rdx], (byte)1), Instruction.Create(Code.Shr_rm8_1, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 1U));
					});
				}
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.shr(__qword_ptr[rdx], (byte)2), Instruction.Create(Code.Shr_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.shr(__dword_ptr[rdx], (byte)2), Instruction.Create(Code.Shr_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.shr(__word_ptr[rdx], (byte)2), Instruction.Create(Code.Shr_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.shr(__byte_ptr[rdx], (byte)2), Instruction.Create(Code.Shr_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.shr(__zmmword_ptr[rdx], (byte)2), Instruction.Create(Code.Shr_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 2U));
				});
			}
		}

		[Fact]
		public void shrd_r16_r16_r8() {
			TestAssembler(c => c.shrd(dx, bx, cl), Instruction.Create(Code.Shrd_rm16_r16_CL, Register.DX, Register.BX, Register.CL));
		}

		[Fact]
		public void shrd_m_r16_r8() {
			TestAssembler(c => c.shrd(__word_ptr[rcx], bx, cl), Instruction.Create(Code.Shrd_rm16_r16_CL, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX, Register.CL));
		}

		[Fact]
		public void shrd_r32_r32_r8() {
			TestAssembler(c => c.shrd(edx, ebx, cl), Instruction.Create(Code.Shrd_rm32_r32_CL, Register.EDX, Register.EBX, Register.CL));
		}

		[Fact]
		public void shrd_m_r32_r8() {
			TestAssembler(c => c.shrd(__dword_ptr[rcx], ebx, cl), Instruction.Create(Code.Shrd_rm32_r32_CL, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX, Register.CL));
		}

		[Fact]
		public void shrd_r64_r64_r8() {
			TestAssembler(c => c.shrd(rdx, rbx, cl), Instruction.Create(Code.Shrd_rm64_r64_CL, Register.RDX, Register.RBX, Register.CL));
		}

		[Fact]
		public void shrd_m_r64_r8() {
			TestAssembler(c => c.shrd(__qword_ptr[rcx], rbx, cl), Instruction.Create(Code.Shrd_rm64_r64_CL, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX, Register.CL));
		}

		[Fact]
		public void shrd_r16_r16_i() {
			TestAssembler(c => c.shrd(dx, bx, -5), Instruction.Create(Code.Shrd_rm16_r16_imm8, Register.DX, Register.BX, -5));
		}

		[Fact]
		public void shrd_m_r16_i() {
			TestAssembler(c => c.shrd(__word_ptr[rcx], bx, -5), Instruction.Create(Code.Shrd_rm16_r16_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX, -5));
		}

		[Fact]
		public void shrd_r32_r32_i() {
			TestAssembler(c => c.shrd(edx, ebx, -5), Instruction.Create(Code.Shrd_rm32_r32_imm8, Register.EDX, Register.EBX, -5));
		}

		[Fact]
		public void shrd_m_r32_i() {
			TestAssembler(c => c.shrd(__dword_ptr[rcx], ebx, -5), Instruction.Create(Code.Shrd_rm32_r32_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX, -5));
		}

		[Fact]
		public void shrd_r64_r64_i() {
			TestAssembler(c => c.shrd(rdx, rbx, -5), Instruction.Create(Code.Shrd_rm64_r64_imm8, Register.RDX, Register.RBX, -5));
		}

		[Fact]
		public void shrd_m_r64_i() {
			TestAssembler(c => c.shrd(__qword_ptr[rcx], rbx, -5), Instruction.Create(Code.Shrd_rm64_r64_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX, -5));
		}

		[Fact]
		public void shrd_r16_r16_u() {
			TestAssembler(c => c.shrd(dx, bx, (byte)0x7F), Instruction.Create(Code.Shrd_rm16_r16_imm8, Register.DX, Register.BX, 0x7FU));
		}

		[Fact]
		public void shrd_m_r16_u() {
			TestAssembler(c => c.shrd(__word_ptr[rcx], bx, (byte)0x7F), Instruction.Create(Code.Shrd_rm16_r16_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX, 0x7FU));
		}

		[Fact]
		public void shrd_r32_r32_u() {
			TestAssembler(c => c.shrd(edx, ebx, (byte)0x7F), Instruction.Create(Code.Shrd_rm32_r32_imm8, Register.EDX, Register.EBX, 0x7FU));
		}

		[Fact]
		public void shrd_m_r32_u() {
			TestAssembler(c => c.shrd(__dword_ptr[rcx], ebx, (byte)0x7F), Instruction.Create(Code.Shrd_rm32_r32_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX, 0x7FU));
		}

		[Fact]
		public void shrd_r64_r64_u() {
			TestAssembler(c => c.shrd(rdx, rbx, (byte)0x7F), Instruction.Create(Code.Shrd_rm64_r64_imm8, Register.RDX, Register.RBX, 0x7FU));
		}

		[Fact]
		public void shrd_m_r64_u() {
			TestAssembler(c => c.shrd(__qword_ptr[rcx], rbx, (byte)0x7F), Instruction.Create(Code.Shrd_rm64_r64_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX, 0x7FU));
		}

		[Fact]
		public void shrx_r32_r32_r32() {
			TestAssembler(c => c.shrx(edx, ebx, esp), Instruction.Create(Code.VEX_Shrx_r32_rm32_r32, Register.EDX, Register.EBX, Register.ESP));
		}

		[Fact]
		public void shrx_r32_m_r32() {
			TestAssembler(c => c.shrx(edx, __dword_ptr[rcx], esp), Instruction.Create(Code.VEX_Shrx_r32_rm32_r32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ESP));
		}

		[Fact]
		public void shrx_r64_r64_r64() {
			TestAssembler(c => c.shrx(rdx, rbx, rsp), Instruction.Create(Code.VEX_Shrx_r64_rm64_r64, Register.RDX, Register.RBX, Register.RSP));
		}

		[Fact]
		public void shrx_r64_m_r64() {
			TestAssembler(c => c.shrx(rdx, __qword_ptr[rcx], rsp), Instruction.Create(Code.VEX_Shrx_r64_rm64_r64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RSP));
		}

		[Fact]
		public void shufpd_xmm_xmm_i() {
			TestAssembler(c => c.shufpd(xmm2, xmm3, -5), Instruction.Create(Code.Shufpd_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void shufpd_xmm_m_i() {
			TestAssembler(c => c.shufpd(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Shufpd_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void shufpd_xmm_xmm_u() {
			TestAssembler(c => c.shufpd(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Shufpd_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void shufpd_xmm_m_u() {
			TestAssembler(c => c.shufpd(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Shufpd_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void shufps_xmm_xmm_i() {
			TestAssembler(c => c.shufps(xmm2, xmm3, -5), Instruction.Create(Code.Shufps_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void shufps_xmm_m_i() {
			TestAssembler(c => c.shufps(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.Shufps_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void shufps_xmm_xmm_u() {
			TestAssembler(c => c.shufps(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.Shufps_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void shufps_xmm_m_u() {
			TestAssembler(c => c.shufps(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.Shufps_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void sidt_m() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.sidt(__[rcx]), Instruction.Create(Code.Sidt_m1664, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void skinit() {
			TestAssembler(c => c.skinit(), Instruction.Create(Code.Skinit));
		}

		[Fact]
		public void sldt_r16() {
			TestAssembler(c => c.sldt(dx), Instruction.Create(Code.Sldt_rm16, Register.DX));
		}

		[Fact]
		public void sldt_r32() {
			TestAssembler(c => c.sldt(edx), Instruction.Create(Code.Sldt_r32m16, Register.EDX));
		}

		[Fact]
		public void sldt_r64() {
			TestAssembler(c => c.sldt(rdx), Instruction.Create(Code.Sldt_r64m16, Register.RDX));
		}

		[Fact]
		public void sldt_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.sldt(__dword_ptr[rcx]), Instruction.Create(Code.Sldt_r32m16, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else skip !(Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void slwpcb_r32() {
			TestAssembler(c => c.slwpcb(edx), Instruction.Create(Code.XOP_Slwpcb_r32, Register.EDX));
		}

		[Fact]
		public void slwpcb_r64() {
			TestAssembler(c => c.slwpcb(rdx), Instruction.Create(Code.XOP_Slwpcb_r64, Register.RDX));
		}

		[Fact]
		public void smsw_r16() {
			TestAssembler(c => c.smsw(dx), Instruction.Create(Code.Smsw_rm16, Register.DX));
		}

		[Fact]
		public void smsw_r32() {
			TestAssembler(c => c.smsw(edx), Instruction.Create(Code.Smsw_r32m16, Register.EDX));
		}

		[Fact]
		public void smsw_r64() {
			TestAssembler(c => c.smsw(rdx), Instruction.Create(Code.Smsw_r64m16, Register.RDX));
		}

		[Fact]
		public void smsw_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.smsw(__dword_ptr[rcx]), Instruction.Create(Code.Smsw_r32m16, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else skip !(Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void sqrtpd_xmm_xmm() {
			TestAssembler(c => c.sqrtpd(xmm2, xmm3), Instruction.Create(Code.Sqrtpd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void sqrtpd_xmm_m() {
			TestAssembler(c => c.sqrtpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Sqrtpd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void sqrtps_xmm_xmm() {
			TestAssembler(c => c.sqrtps(xmm2, xmm3), Instruction.Create(Code.Sqrtps_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void sqrtps_xmm_m() {
			TestAssembler(c => c.sqrtps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Sqrtps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void sqrtsd_xmm_xmm() {
			TestAssembler(c => c.sqrtsd(xmm2, xmm3), Instruction.Create(Code.Sqrtsd_xmm_xmmm64, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void sqrtsd_xmm_m() {
			TestAssembler(c => c.sqrtsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Sqrtsd_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void sqrtss_xmm_xmm() {
			TestAssembler(c => c.sqrtss(xmm2, xmm3), Instruction.Create(Code.Sqrtss_xmm_xmmm32, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void sqrtss_xmm_m() {
			TestAssembler(c => c.sqrtss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Sqrtss_xmm_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void stac() {
			TestAssembler(c => c.stac(), Instruction.Create(Code.Stac));
		}

		[Fact]
		public void stc() {
			TestAssembler(c => c.stc(), Instruction.Create(Code.Stc));
		}

		[Fact]
		public void std() {
			TestAssembler(c => c.std(), Instruction.Create(Code.Std));
		}

		[Fact]
		public void stgi() {
			TestAssembler(c => c.stgi(), Instruction.Create(Code.Stgi));
		}

		[Fact]
		public void sti() {
			TestAssembler(c => c.sti(), Instruction.Create(Code.Sti));
		}

		[Fact]
		public void stmxcsr_m() {
			TestAssembler(c => c.stmxcsr(__[rcx]), Instruction.Create(Code.Stmxcsr_m32, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void stosb() {
			TestAssembler(c => c.stosb(), Instruction.CreateStosb(64));
		}

		[Fact]
		public void stosd() {
			TestAssembler(c => c.stosd(), Instruction.CreateStosd(64));
		}

		[Fact]
		public void stosq() {
			TestAssembler(c => c.stosq(), Instruction.CreateStosq(64));
		}

		[Fact]
		public void stosw() {
			TestAssembler(c => c.stosw(), Instruction.CreateStosw(64));
		}

		[Fact]
		public void str_r16() {
			TestAssembler(c => c.str(dx), Instruction.Create(Code.Str_rm16, Register.DX));
		}

		[Fact]
		public void str_r32() {
			TestAssembler(c => c.str(edx), Instruction.Create(Code.Str_r32m16, Register.EDX));
		}

		[Fact]
		public void str_r64() {
			TestAssembler(c => c.str(rdx), Instruction.Create(Code.Str_r64m16, Register.RDX));
		}

		[Fact]
		public void str_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.str(__dword_ptr[rcx]), Instruction.Create(Code.Str_r32m16, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else skip !(Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void sttilecfg_m() {
			TestAssembler(c => c.sttilecfg(__[rcx]), Instruction.Create(Code.VEX_Sttilecfg_m512, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void stui() {
			TestAssembler(c => c.stui(), Instruction.Create(Code.Stui));
		}

		[Fact]
		public void sub_r8_r8() {
			TestAssembler(c => c.sub(dl, bl), Instruction.Create(Code.Sub_rm8_r8, Register.DL, Register.BL));
		}

		[Fact]
		public void sub_m_r8() {
			TestAssembler(c => c.sub(__byte_ptr[rcx], bl), Instruction.Create(Code.Sub_rm8_r8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BL));
		}

		[Fact]
		public void sub_r16_r16() {
			TestAssembler(c => c.sub(dx, bx), Instruction.Create(Code.Sub_rm16_r16, Register.DX, Register.BX));
		}

		[Fact]
		public void sub_m_r16() {
			TestAssembler(c => c.sub(__word_ptr[rcx], bx), Instruction.Create(Code.Sub_rm16_r16, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX));
		}

		[Fact]
		public void sub_r32_r32() {
			TestAssembler(c => c.sub(edx, ebx), Instruction.Create(Code.Sub_rm32_r32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void sub_m_r32() {
			TestAssembler(c => c.sub(__dword_ptr[rcx], ebx), Instruction.Create(Code.Sub_rm32_r32, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX));
		}

		[Fact]
		public void sub_r64_r64() {
			TestAssembler(c => c.sub(rdx, rbx), Instruction.Create(Code.Sub_rm64_r64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void sub_m_r64() {
			TestAssembler(c => c.sub(__qword_ptr[rcx], rbx), Instruction.Create(Code.Sub_rm64_r64, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX));
		}

		[Fact]
		public void sub_r8_m() {
			TestAssembler(c => c.sub(dl, __byte_ptr[rcx]), Instruction.Create(Code.Sub_r8_rm8, Register.DL, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void sub_r16_m() {
			TestAssembler(c => c.sub(dx, __word_ptr[rcx]), Instruction.Create(Code.Sub_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void sub_r32_m() {
			TestAssembler(c => c.sub(edx, __dword_ptr[rcx]), Instruction.Create(Code.Sub_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void sub_r64_m() {
			TestAssembler(c => c.sub(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Sub_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void sub_r8_i() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.sub(al, -5), Instruction.Create(Code.Sub_AL_imm8, Register.AL, -5));
			} /* else */ TestAssembler(c => c.sub(dl, -5), Instruction.Create(Code.Sub_rm8_imm8, Register.DL, -5));
		}

		[Fact]
		public void sub_r16_i() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.sub(ax, 0x40B7), Instruction.Create(Code.Sub_AX_imm16, Register.AX, 0x40B7));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.sub(dx, -0x80), Instruction.Create(Code.Sub_rm16_imm8, Register.DX, -0x80));
				TestAssembler(c => c.sub(dx, 0x7F), Instruction.Create(Code.Sub_rm16_imm8, Register.DX, 0x7F));
			} /* else */ TestAssembler(c => c.sub(dx, 0x40B7), Instruction.Create(Code.Sub_rm16_imm16, Register.DX, 0x40B7));
		}

		[Fact]
		public void sub_r32_i() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.sub(eax, 0x7FFFFFFF), Instruction.Create(Code.Sub_EAX_imm32, Register.EAX, 0x7FFFFFFF));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.sub(edx, -0x80), Instruction.Create(Code.Sub_rm32_imm8, Register.EDX, -0x80));
				TestAssembler(c => c.sub(edx, 0x7F), Instruction.Create(Code.Sub_rm32_imm8, Register.EDX, 0x7F));
			} /* else */ TestAssembler(c => c.sub(edx, 0x7FFFFFFF), Instruction.Create(Code.Sub_rm32_imm32, Register.EDX, 0x7FFFFFFF));
		}

		[Fact]
		public void sub_r64_i() {
			{ /* if (dst == Register.RAX) */
				TestAssembler(c => c.sub(rax, -0x80000000), Instruction.Create(Code.Sub_RAX_imm32, Register.RAX, -0x80000000));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.sub(rdx, -0x80), Instruction.Create(Code.Sub_rm64_imm8, Register.RDX, -0x80));
				TestAssembler(c => c.sub(rdx, 0x7F), Instruction.Create(Code.Sub_rm64_imm8, Register.RDX, 0x7F));
			} /* else */ TestAssembler(c => c.sub(rdx, -0x80000000), Instruction.Create(Code.Sub_rm64_imm32, Register.RDX, -0x80000000));
		}

		[Fact]
		public void sub_m_i() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.sub(__qword_ptr[rdx], -0x80), Instruction.Create(Code.Sub_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80));
					TestAssembler(c => c.sub(__qword_ptr[rdx], 0x7F), Instruction.Create(Code.Sub_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7F));
				} /* else */ TestAssembler(c => c.sub(__qword_ptr[rdx], -0x80000000), Instruction.Create(Code.Sub_rm64_imm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80000000));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.sub(__dword_ptr[rdx], -0x80), Instruction.Create(Code.Sub_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80));
					TestAssembler(c => c.sub(__dword_ptr[rdx], 0x7F), Instruction.Create(Code.Sub_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7F));
				} /* else */ TestAssembler(c => c.sub(__dword_ptr[rdx], 0x7FFFFFFF), Instruction.Create(Code.Sub_rm32_imm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFF));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.sub(__word_ptr[rdx], -0x80), Instruction.Create(Code.Sub_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80));
					TestAssembler(c => c.sub(__word_ptr[rdx], 0x7F), Instruction.Create(Code.Sub_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7F));
				} /* else */ TestAssembler(c => c.sub(__word_ptr[rdx], 0x40B7), Instruction.Create(Code.Sub_rm16_imm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x40B7));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.sub(__byte_ptr[rdx], -5), Instruction.Create(Code.Sub_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.sub(__zmmword_ptr[rdx], -5), Instruction.Create(Code.Sub_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
				});
			}
		}

		[Fact]
		public void sub_r8_u() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.sub(al, (byte)0x7F), Instruction.Create(Code.Sub_AL_imm8, Register.AL, 0x7FU));
			} /* else */ TestAssembler(c => c.sub(dl, (byte)0x7F), Instruction.Create(Code.Sub_rm8_imm8, Register.DL, 0x7FU));
		}

		[Fact]
		public void sub_r16_u() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.sub(ax, (ushort)0x40B7), Instruction.Create(Code.Sub_AX_imm16, Register.AX, 0x40B7U));
			} /* else */ { /* if (imm <= (ushort)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
				TestAssembler(c => c.sub(dx, (ushort)0xFF80), Instruction.Create(Code.Sub_rm16_imm8, Register.DX, 0xFF80U));
				TestAssembler(c => c.sub(dx, (ushort)0x7F), Instruction.Create(Code.Sub_rm16_imm8, Register.DX, 0x7FU));
			} /* else */ TestAssembler(c => c.sub(dx, (ushort)0x40B7), Instruction.Create(Code.Sub_rm16_imm16, Register.DX, 0x40B7U));
		}

		[Fact]
		public void sub_r32_u() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.sub(eax, 0x7FFFFFFFU), Instruction.Create(Code.Sub_EAX_imm32, Register.EAX, 0x7FFFFFFFU));
			} /* else */ { /* if (imm <= (uint)sbyte.MaxValue || 0xFFFF_FF80 <= imm) */
				TestAssembler(c => c.sub(edx, 0xFFFFFF80U), Instruction.Create(Code.Sub_rm32_imm8, Register.EDX, 0xFFFFFF80U));
				TestAssembler(c => c.sub(edx, 0x7FU), Instruction.Create(Code.Sub_rm32_imm8, Register.EDX, 0x7FU));
			} /* else */ TestAssembler(c => c.sub(edx, 0x7FFFFFFFU), Instruction.Create(Code.Sub_rm32_imm32, Register.EDX, 0x7FFFFFFFU));
		}

		[Fact]
		public void sub_m_u() {
			{ /* if (dst.Size == MemoryOperandSize.Dword) */
				{ /* if (imm <= (uint)sbyte.MaxValue || 0xFFFF_FF80 <= imm) */
					TestAssembler(c => c.sub(__dword_ptr[rdx], 0xFFFFFF80U), Instruction.Create(Code.Sub_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0xFFFFFF80U));
					TestAssembler(c => c.sub(__dword_ptr[rdx], 0x7FU), Instruction.Create(Code.Sub_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
				} /* else */ TestAssembler(c => c.sub(__dword_ptr[rdx], 0x7FFFFFFFU), Instruction.Create(Code.Sub_rm32_imm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFFU));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				{ /* if (imm <= (uint)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
					TestAssembler(c => c.sub(__word_ptr[rdx], 0xFF80U), Instruction.Create(Code.Sub_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0xFF80U));
					TestAssembler(c => c.sub(__word_ptr[rdx], 0x7FU), Instruction.Create(Code.Sub_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
				} /* else */ TestAssembler(c => c.sub(__word_ptr[rdx], 0x40B7U), Instruction.Create(Code.Sub_rm16_imm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x40B7U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.sub(__byte_ptr[rdx], 0x7FU), Instruction.Create(Code.Sub_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.sub(__zmmword_ptr[rdx], 0x7FU), Instruction.Create(Code.Sub_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
				});
			}
		}

		[Fact]
		public void subpd_xmm_xmm() {
			TestAssembler(c => c.subpd(xmm2, xmm3), Instruction.Create(Code.Subpd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void subpd_xmm_m() {
			TestAssembler(c => c.subpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Subpd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void subps_xmm_xmm() {
			TestAssembler(c => c.subps(xmm2, xmm3), Instruction.Create(Code.Subps_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void subps_xmm_m() {
			TestAssembler(c => c.subps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Subps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void subsd_xmm_xmm() {
			TestAssembler(c => c.subsd(xmm2, xmm3), Instruction.Create(Code.Subsd_xmm_xmmm64, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void subsd_xmm_m() {
			TestAssembler(c => c.subsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Subsd_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void subss_xmm_xmm() {
			TestAssembler(c => c.subss(xmm2, xmm3), Instruction.Create(Code.Subss_xmm_xmmm32, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void subss_xmm_m() {
			TestAssembler(c => c.subss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Subss_xmm_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void swapgs() {
			TestAssembler(c => c.swapgs(), Instruction.Create(Code.Swapgs));
		}

		[Fact]
		public void syscall() {
			TestAssembler(c => c.syscall(), Instruction.Create(Code.Syscall));
		}

		[Fact]
		public void sysenter() {
			TestAssembler(c => c.sysenter(), Instruction.Create(Code.Sysenter));
		}

		[Fact]
		public void sysexit() {
			TestAssembler(c => c.sysexit(), Instruction.Create(Code.Sysexitd));
		}

		[Fact]
		public void sysexitq() {
			TestAssembler(c => c.sysexitq(), Instruction.Create(Code.Sysexitq));
		}

		[Fact]
		public void sysret() {
			TestAssembler(c => c.sysret(), Instruction.Create(Code.Sysretd));
		}

		[Fact]
		public void sysretq() {
			TestAssembler(c => c.sysretq(), Instruction.Create(Code.Sysretq));
		}

		[Fact]
		public void t1mskc_r32_r32() {
			TestAssembler(c => c.t1mskc(edx, ebx), Instruction.Create(Code.XOP_T1mskc_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void t1mskc_r64_r64() {
			TestAssembler(c => c.t1mskc(rdx, rbx), Instruction.Create(Code.XOP_T1mskc_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void t1mskc_r32_m() {
			TestAssembler(c => c.t1mskc(edx, __dword_ptr[rcx]), Instruction.Create(Code.XOP_T1mskc_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void t1mskc_r64_m() {
			TestAssembler(c => c.t1mskc(rdx, __qword_ptr[rcx]), Instruction.Create(Code.XOP_T1mskc_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void tdcall() {
			TestAssembler(c => c.tdcall(), Instruction.Create(Code.Tdcall));
		}

		[Fact]
		public void tdpbf16ps_tmm_tmm_tmm() {
			TestAssembler(c => c.tdpbf16ps(tmm2, tmm3, tmm4), Instruction.Create(Code.VEX_Tdpbf16ps_tmm_tmm_tmm, Register.TMM2, Register.TMM3, Register.TMM4));
		}

		[Fact]
		public void tdpbssd_tmm_tmm_tmm() {
			TestAssembler(c => c.tdpbssd(tmm2, tmm3, tmm4), Instruction.Create(Code.VEX_Tdpbssd_tmm_tmm_tmm, Register.TMM2, Register.TMM3, Register.TMM4));
		}

		[Fact]
		public void tdpbsud_tmm_tmm_tmm() {
			TestAssembler(c => c.tdpbsud(tmm2, tmm3, tmm4), Instruction.Create(Code.VEX_Tdpbsud_tmm_tmm_tmm, Register.TMM2, Register.TMM3, Register.TMM4));
		}

		[Fact]
		public void tdpbusd_tmm_tmm_tmm() {
			TestAssembler(c => c.tdpbusd(tmm2, tmm3, tmm4), Instruction.Create(Code.VEX_Tdpbusd_tmm_tmm_tmm, Register.TMM2, Register.TMM3, Register.TMM4));
		}

		[Fact]
		public void tdpbuud_tmm_tmm_tmm() {
			TestAssembler(c => c.tdpbuud(tmm2, tmm3, tmm4), Instruction.Create(Code.VEX_Tdpbuud_tmm_tmm_tmm, Register.TMM2, Register.TMM3, Register.TMM4));
		}

		[Fact]
		public void test_r8_r8() {
			TestAssembler(c => c.test(dl, bl), Instruction.Create(Code.Test_rm8_r8, Register.DL, Register.BL));
		}

		[Fact]
		public void test_m_r8() {
			TestAssembler(c => c.test(__byte_ptr[rcx], bl), Instruction.Create(Code.Test_rm8_r8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BL));
		}

		[Fact]
		public void test_r16_r16() {
			TestAssembler(c => c.test(dx, bx), Instruction.Create(Code.Test_rm16_r16, Register.DX, Register.BX));
		}

		[Fact]
		public void test_m_r16() {
			TestAssembler(c => c.test(__word_ptr[rcx], bx), Instruction.Create(Code.Test_rm16_r16, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX));
		}

		[Fact]
		public void test_r32_r32() {
			TestAssembler(c => c.test(edx, ebx), Instruction.Create(Code.Test_rm32_r32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void test_m_r32() {
			TestAssembler(c => c.test(__dword_ptr[rcx], ebx), Instruction.Create(Code.Test_rm32_r32, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX));
		}

		[Fact]
		public void test_r64_r64() {
			TestAssembler(c => c.test(rdx, rbx), Instruction.Create(Code.Test_rm64_r64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void test_m_r64() {
			TestAssembler(c => c.test(__qword_ptr[rcx], rbx), Instruction.Create(Code.Test_rm64_r64, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX));
		}

		[Fact]
		public void test_r8_i() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.test(al, -5), Instruction.Create(Code.Test_AL_imm8, Register.AL, -5));
			} /* else */ TestAssembler(c => c.test(dl, -5), Instruction.Create(Code.Test_rm8_imm8, Register.DL, -5));
		}

		[Fact]
		public void test_r16_i() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.test(ax, 0x40B7), Instruction.Create(Code.Test_AX_imm16, Register.AX, 0x40B7));
			} /* else */ TestAssembler(c => c.test(dx, 0x40B7), Instruction.Create(Code.Test_rm16_imm16, Register.DX, 0x40B7));
		}

		[Fact]
		public void test_r32_i() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.test(eax, 0x7FFFFFFF), Instruction.Create(Code.Test_EAX_imm32, Register.EAX, 0x7FFFFFFF));
			} /* else */ TestAssembler(c => c.test(edx, 0x7FFFFFFF), Instruction.Create(Code.Test_rm32_imm32, Register.EDX, 0x7FFFFFFF));
		}

		[Fact]
		public void test_r64_i() {
			{ /* if (dst == Register.RAX) */
				TestAssembler(c => c.test(rax, -0x80000000), Instruction.Create(Code.Test_RAX_imm32, Register.RAX, -0x80000000));
			} /* else */ TestAssembler(c => c.test(rdx, -0x80000000), Instruction.Create(Code.Test_rm64_imm32, Register.RDX, -0x80000000));
		}

		[Fact]
		public void test_m_i() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.test(__qword_ptr[rdx], -0x80000000), Instruction.Create(Code.Test_rm64_imm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80000000));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.test(__dword_ptr[rdx], 0x7FFFFFFF), Instruction.Create(Code.Test_rm32_imm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFF));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.test(__word_ptr[rdx], 0x40B7), Instruction.Create(Code.Test_rm16_imm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x40B7));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.test(__byte_ptr[rdx], -5), Instruction.Create(Code.Test_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.test(__zmmword_ptr[rdx], -5), Instruction.Create(Code.Test_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
				});
			}
		}

		[Fact]
		public void test_r8_u() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.test(al, (byte)0x7F), Instruction.Create(Code.Test_AL_imm8, Register.AL, 0x7FU));
			} /* else */ TestAssembler(c => c.test(dl, (byte)0x7F), Instruction.Create(Code.Test_rm8_imm8, Register.DL, 0x7FU));
		}

		[Fact]
		public void test_r16_u() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.test(ax, (ushort)0x40B7), Instruction.Create(Code.Test_AX_imm16, Register.AX, 0x40B7U));
			} /* else */ TestAssembler(c => c.test(dx, (ushort)0x40B7), Instruction.Create(Code.Test_rm16_imm16, Register.DX, 0x40B7U));
		}

		[Fact]
		public void test_r32_u() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.test(eax, 0x7FFFFFFFU), Instruction.Create(Code.Test_EAX_imm32, Register.EAX, 0x7FFFFFFFU));
			} /* else */ TestAssembler(c => c.test(edx, 0x7FFFFFFFU), Instruction.Create(Code.Test_rm32_imm32, Register.EDX, 0x7FFFFFFFU));
		}

		[Fact]
		public void test_m_u() {
			{ /* if (dst.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.test(__dword_ptr[rdx], 0x7FFFFFFFU), Instruction.Create(Code.Test_rm32_imm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFFU));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				TestAssembler(c => c.test(__word_ptr[rdx], 0x40B7U), Instruction.Create(Code.Test_rm16_imm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x40B7U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.test(__byte_ptr[rdx], 0x7FU), Instruction.Create(Code.Test_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.test(__zmmword_ptr[rdx], 0x7FU), Instruction.Create(Code.Test_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
				});
			}
		}

		[Fact]
		public void testui() {
			TestAssembler(c => c.testui(), Instruction.Create(Code.Testui));
		}

		[Fact]
		public void tileloadd_tmm_m() {
			TestAssembler(c => c.tileloadd(tmm2, __[rcx+rdx*4]), Instruction.Create(Code.VEX_Tileloadd_tmm_sibmem, Register.TMM2, new MemoryOperand(Register.RCX, Register.RDX, 4, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void tileloaddt1_tmm_m() {
			TestAssembler(c => c.tileloaddt1(tmm2, __[rcx+rdx*4]), Instruction.Create(Code.VEX_Tileloaddt1_tmm_sibmem, Register.TMM2, new MemoryOperand(Register.RCX, Register.RDX, 4, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void tilerelease() {
			TestAssembler(c => c.tilerelease(), Instruction.Create(Code.VEX_Tilerelease));
		}

		[Fact]
		public void tilestored_m_tmm() {
			TestAssembler(c => c.tilestored(__[rcx+rdx*4], tmm3), Instruction.Create(Code.VEX_Tilestored_sibmem_tmm, new MemoryOperand(Register.RCX, Register.RDX, 4, 0x0, 0, false, Register.None), Register.TMM3));
		}

		[Fact]
		public void tilezero_tmm() {
			TestAssembler(c => c.tilezero(tmm2), Instruction.Create(Code.VEX_Tilezero_tmm, Register.TMM2));
		}

		[Fact]
		public void tlbsync() {
			TestAssembler(c => c.tlbsync(), Instruction.Create(Code.Tlbsync));
		}

		[Fact]
		public void tpause_r32() {
			TestAssembler(c => c.tpause(edx), Instruction.Create(Code.Tpause_r32, Register.EDX));
		}

		[Fact]
		public void tpause_r64() {
			TestAssembler(c => c.tpause(rdx), Instruction.Create(Code.Tpause_r64, Register.RDX));
		}

		[Fact]
		public void tzcnt_r16_r16() {
			TestAssembler(c => c.tzcnt(dx, bx), Instruction.Create(Code.Tzcnt_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void tzcnt_r32_r32() {
			TestAssembler(c => c.tzcnt(edx, ebx), Instruction.Create(Code.Tzcnt_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void tzcnt_r64_r64() {
			TestAssembler(c => c.tzcnt(rdx, rbx), Instruction.Create(Code.Tzcnt_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void tzcnt_r16_m() {
			TestAssembler(c => c.tzcnt(dx, __word_ptr[rcx]), Instruction.Create(Code.Tzcnt_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void tzcnt_r32_m() {
			TestAssembler(c => c.tzcnt(edx, __dword_ptr[rcx]), Instruction.Create(Code.Tzcnt_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void tzcnt_r64_m() {
			TestAssembler(c => c.tzcnt(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Tzcnt_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void tzmsk_r32_r32() {
			TestAssembler(c => c.tzmsk(edx, ebx), Instruction.Create(Code.XOP_Tzmsk_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void tzmsk_r64_r64() {
			TestAssembler(c => c.tzmsk(rdx, rbx), Instruction.Create(Code.XOP_Tzmsk_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void tzmsk_r32_m() {
			TestAssembler(c => c.tzmsk(edx, __dword_ptr[rcx]), Instruction.Create(Code.XOP_Tzmsk_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void tzmsk_r64_m() {
			TestAssembler(c => c.tzmsk(rdx, __qword_ptr[rcx]), Instruction.Create(Code.XOP_Tzmsk_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void ucomisd_xmm_xmm() {
			TestAssembler(c => c.ucomisd(xmm2, xmm3), Instruction.Create(Code.Ucomisd_xmm_xmmm64, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void ucomisd_xmm_m() {
			TestAssembler(c => c.ucomisd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Ucomisd_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void ucomiss_xmm_xmm() {
			TestAssembler(c => c.ucomiss(xmm2, xmm3), Instruction.Create(Code.Ucomiss_xmm_xmmm32, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void ucomiss_xmm_m() {
			TestAssembler(c => c.ucomiss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Ucomiss_xmm_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void ud0() {
			TestAssembler(c => c.ud0(), Instruction.Create(Code.Ud0), decoderOptions: DecoderOptions.AMD);
		}

		[Fact]
		public void ud0_r16_r16() {
			TestAssembler(c => c.ud0(dx, bx), Instruction.Create(Code.Ud0_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void ud0_r32_r32() {
			TestAssembler(c => c.ud0(edx, ebx), Instruction.Create(Code.Ud0_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void ud0_r64_r64() {
			TestAssembler(c => c.ud0(rdx, rbx), Instruction.Create(Code.Ud0_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void ud0_r16_m() {
			TestAssembler(c => c.ud0(dx, __word_ptr[rcx]), Instruction.Create(Code.Ud0_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void ud0_r32_m() {
			TestAssembler(c => c.ud0(edx, __dword_ptr[rcx]), Instruction.Create(Code.Ud0_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void ud0_r64_m() {
			TestAssembler(c => c.ud0(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Ud0_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void ud1_r16_r16() {
			TestAssembler(c => c.ud1(dx, bx), Instruction.Create(Code.Ud1_r16_rm16, Register.DX, Register.BX));
		}

		[Fact]
		public void ud1_r32_r32() {
			TestAssembler(c => c.ud1(edx, ebx), Instruction.Create(Code.Ud1_r32_rm32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void ud1_r64_r64() {
			TestAssembler(c => c.ud1(rdx, rbx), Instruction.Create(Code.Ud1_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void ud1_r16_m() {
			TestAssembler(c => c.ud1(dx, __word_ptr[rcx]), Instruction.Create(Code.Ud1_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void ud1_r32_m() {
			TestAssembler(c => c.ud1(edx, __dword_ptr[rcx]), Instruction.Create(Code.Ud1_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void ud1_r64_m() {
			TestAssembler(c => c.ud1(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Ud1_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void ud2() {
			TestAssembler(c => c.ud2(), Instruction.Create(Code.Ud2));
		}

		[Fact]
		public void uiret() {
			TestAssembler(c => c.uiret(), Instruction.Create(Code.Uiret));
		}

		[Fact]
		public void umonitor_r32() {
			TestAssembler(c => c.umonitor(edx), Instruction.Create(Code.Umonitor_r32, Register.EDX));
		}

		[Fact]
		public void umonitor_r64() {
			TestAssembler(c => c.umonitor(rdx), Instruction.Create(Code.Umonitor_r64, Register.RDX));
		}

		[Fact]
		public void umwait_r32() {
			TestAssembler(c => c.umwait(edx), Instruction.Create(Code.Umwait_r32, Register.EDX));
		}

		[Fact]
		public void umwait_r64() {
			TestAssembler(c => c.umwait(rdx), Instruction.Create(Code.Umwait_r64, Register.RDX));
		}

		[Fact]
		public void unpckhpd_xmm_xmm() {
			TestAssembler(c => c.unpckhpd(xmm2, xmm3), Instruction.Create(Code.Unpckhpd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void unpckhpd_xmm_m() {
			TestAssembler(c => c.unpckhpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Unpckhpd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void unpckhps_xmm_xmm() {
			TestAssembler(c => c.unpckhps(xmm2, xmm3), Instruction.Create(Code.Unpckhps_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void unpckhps_xmm_m() {
			TestAssembler(c => c.unpckhps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Unpckhps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void unpcklpd_xmm_xmm() {
			TestAssembler(c => c.unpcklpd(xmm2, xmm3), Instruction.Create(Code.Unpcklpd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void unpcklpd_xmm_m() {
			TestAssembler(c => c.unpcklpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Unpcklpd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void unpcklps_xmm_xmm() {
			TestAssembler(c => c.unpcklps(xmm2, xmm3), Instruction.Create(Code.Unpcklps_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void unpcklps_xmm_m() {
			TestAssembler(c => c.unpcklps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Unpcklps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void v4fmaddps_zmm_zmm_m() {
			TestAssembler(c => c.v4fmaddps(zmm2.k1, zmm3, __[rcx]), ApplyK(Instruction.Create(Code.EVEX_V4fmaddps_zmm_k1z_zmmp3_m128, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void v4fmaddss_xmm_xmm_m() {
			TestAssembler(c => c.v4fmaddss(xmm2.k1, xmm3, __[rcx]), ApplyK(Instruction.Create(Code.EVEX_V4fmaddss_xmm_k1z_xmmp3_m128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void v4fnmaddps_zmm_zmm_m() {
			TestAssembler(c => c.v4fnmaddps(zmm2.k1, zmm3, __[rcx]), ApplyK(Instruction.Create(Code.EVEX_V4fnmaddps_zmm_k1z_zmmp3_m128, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void v4fnmaddss_xmm_xmm_m() {
			TestAssembler(c => c.v4fnmaddss(xmm2.k1, xmm3, __[rcx]), ApplyK(Instruction.Create(Code.EVEX_V4fnmaddss_xmm_k1z_xmmp3_m128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vaddpd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vaddpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vaddpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaddpd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vaddpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vaddpd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vaddpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vaddpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaddpd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vaddpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vaddpd_zmm_zmm_zmm() {
			TestAssembler(c => c.vaddpd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vaddpd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vaddpd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vaddpd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vaddpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vaddpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaddpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaddpd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vaddpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vaddpd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vaddpd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vaddpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vaddpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaddpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaddpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vaddpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vaddpd_zmm_zmm_m() {
			TestAssembler(c => c.vaddpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vaddpd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vaddph_xmm_xmm_xmm() {
			TestAssembler(c => c.vaddph(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vaddph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vaddph_ymm_ymm_ymm() {
			TestAssembler(c => c.vaddph(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vaddph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vaddph_zmm_zmm_zmm() {
			TestAssembler(c => c.vaddph(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vaddph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vaddph_xmm_xmm_m() {
			TestAssembler(c => c.vaddph(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vaddph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vaddph_ymm_ymm_m() {
			TestAssembler(c => c.vaddph(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vaddph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vaddph_zmm_zmm_m() {
			TestAssembler(c => c.vaddph(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vaddph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vaddps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vaddps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vaddps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaddps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vaddps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vaddps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vaddps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vaddps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaddps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vaddps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vaddps_zmm_zmm_zmm() {
			TestAssembler(c => c.vaddps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vaddps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vaddps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vaddps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vaddps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vaddps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaddps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaddps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vaddps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vaddps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vaddps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vaddps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vaddps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaddps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaddps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vaddps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vaddps_zmm_zmm_m() {
			TestAssembler(c => c.vaddps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vaddps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vaddsd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vaddsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vaddsd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaddsd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vaddsd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vaddsd_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vaddsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaddsd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaddsd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vaddsd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vaddsh_xmm_xmm_xmm() {
			TestAssembler(c => c.vaddsh(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vaddsh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vaddsh_xmm_xmm_m() {
			TestAssembler(c => c.vaddsh(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vaddsh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vaddss_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vaddss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vaddss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaddss(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vaddss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vaddss_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vaddss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaddss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaddss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vaddss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vaddsubpd_xmm_xmm_xmm() {
			TestAssembler(c => c.vaddsubpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vaddsubpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vaddsubpd_ymm_ymm_ymm() {
			TestAssembler(c => c.vaddsubpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vaddsubpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vaddsubpd_xmm_xmm_m() {
			TestAssembler(c => c.vaddsubpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaddsubpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vaddsubpd_ymm_ymm_m() {
			TestAssembler(c => c.vaddsubpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaddsubpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vaddsubps_xmm_xmm_xmm() {
			TestAssembler(c => c.vaddsubps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vaddsubps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vaddsubps_ymm_ymm_ymm() {
			TestAssembler(c => c.vaddsubps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vaddsubps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vaddsubps_xmm_xmm_m() {
			TestAssembler(c => c.vaddsubps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaddsubps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vaddsubps_ymm_ymm_m() {
			TestAssembler(c => c.vaddsubps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaddsubps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vaesdec_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vaesdec(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vaesdec_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesdec(xmm2, xmm3, xmm4), Instruction.Create(Code.EVEX_Vaesdec_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vaesdec_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vaesdec(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vaesdec_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesdec(ymm2, ymm3, ymm4), Instruction.Create(Code.EVEX_Vaesdec_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vaesdec_zmm_zmm_zmm() {
			TestAssembler(c => c.vaesdec(zmm2, zmm3, zmm4), Instruction.Create(Code.EVEX_Vaesdec_zmm_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4));
		}

		[Fact]
		public void vaesdec_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vaesdec(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaesdec_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesdec(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vaesdec_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vaesdec_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vaesdec(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaesdec_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesdec(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vaesdec_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vaesdec_zmm_zmm_m() {
			TestAssembler(c => c.vaesdec(zmm2, zmm3, __zmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vaesdec_zmm_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vaesdeclast_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vaesdeclast(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vaesdeclast_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesdeclast(xmm2, xmm3, xmm4), Instruction.Create(Code.EVEX_Vaesdeclast_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vaesdeclast_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vaesdeclast(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vaesdeclast_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesdeclast(ymm2, ymm3, ymm4), Instruction.Create(Code.EVEX_Vaesdeclast_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vaesdeclast_zmm_zmm_zmm() {
			TestAssembler(c => c.vaesdeclast(zmm2, zmm3, zmm4), Instruction.Create(Code.EVEX_Vaesdeclast_zmm_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4));
		}

		[Fact]
		public void vaesdeclast_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vaesdeclast(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaesdeclast_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesdeclast(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vaesdeclast_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vaesdeclast_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vaesdeclast(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaesdeclast_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesdeclast(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vaesdeclast_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vaesdeclast_zmm_zmm_m() {
			TestAssembler(c => c.vaesdeclast(zmm2, zmm3, __zmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vaesdeclast_zmm_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vaesenc_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vaesenc(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vaesenc_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesenc(xmm2, xmm3, xmm4), Instruction.Create(Code.EVEX_Vaesenc_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vaesenc_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vaesenc(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vaesenc_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesenc(ymm2, ymm3, ymm4), Instruction.Create(Code.EVEX_Vaesenc_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vaesenc_zmm_zmm_zmm() {
			TestAssembler(c => c.vaesenc(zmm2, zmm3, zmm4), Instruction.Create(Code.EVEX_Vaesenc_zmm_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4));
		}

		[Fact]
		public void vaesenc_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vaesenc(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaesenc_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesenc(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vaesenc_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vaesenc_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vaesenc(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaesenc_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesenc(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vaesenc_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vaesenc_zmm_zmm_m() {
			TestAssembler(c => c.vaesenc(zmm2, zmm3, __zmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vaesenc_zmm_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vaesenclast_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vaesenclast(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vaesenclast_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesenclast(xmm2, xmm3, xmm4), Instruction.Create(Code.EVEX_Vaesenclast_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vaesenclast_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vaesenclast(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vaesenclast_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesenclast(ymm2, ymm3, ymm4), Instruction.Create(Code.EVEX_Vaesenclast_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vaesenclast_zmm_zmm_zmm() {
			TestAssembler(c => c.vaesenclast(zmm2, zmm3, zmm4), Instruction.Create(Code.EVEX_Vaesenclast_zmm_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4));
		}

		[Fact]
		public void vaesenclast_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vaesenclast(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaesenclast_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesenclast(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vaesenclast_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vaesenclast_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vaesenclast(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaesenclast_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vaesenclast(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vaesenclast_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vaesenclast_zmm_zmm_m() {
			TestAssembler(c => c.vaesenclast(zmm2, zmm3, __zmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vaesenclast_zmm_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vaesimc_xmm_xmm() {
			TestAssembler(c => c.vaesimc(xmm2, xmm3), Instruction.Create(Code.VEX_Vaesimc_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vaesimc_xmm_m() {
			TestAssembler(c => c.vaesimc(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vaesimc_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vaeskeygenassist_xmm_xmm_i() {
			TestAssembler(c => c.vaeskeygenassist(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vaeskeygenassist_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void vaeskeygenassist_xmm_m_i() {
			TestAssembler(c => c.vaeskeygenassist(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vaeskeygenassist_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vaeskeygenassist_xmm_xmm_u() {
			TestAssembler(c => c.vaeskeygenassist(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vaeskeygenassist_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void vaeskeygenassist_xmm_m_u() {
			TestAssembler(c => c.vaeskeygenassist(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vaeskeygenassist_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void valignd_xmm_xmm_xmm_i() {
			TestAssembler(c => c.valignd(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Valignd_xmm_k1z_xmm_xmmm128b32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void valignd_ymm_ymm_ymm_i() {
			TestAssembler(c => c.valignd(ymm2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Valignd_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void valignd_zmm_zmm_zmm_i() {
			TestAssembler(c => c.valignd(zmm2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Valignd_zmm_k1z_zmm_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void valignd_xmm_xmm_m_i() {
			TestAssembler(c => c.valignd(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Valignd_xmm_k1z_xmm_xmmm128b32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void valignd_ymm_ymm_m_i() {
			TestAssembler(c => c.valignd(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Valignd_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void valignd_zmm_zmm_m_i() {
			TestAssembler(c => c.valignd(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Valignd_zmm_k1z_zmm_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void valignd_xmm_xmm_xmm_u() {
			TestAssembler(c => c.valignd(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Valignd_xmm_k1z_xmm_xmmm128b32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void valignd_ymm_ymm_ymm_u() {
			TestAssembler(c => c.valignd(ymm2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Valignd_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void valignd_zmm_zmm_zmm_u() {
			TestAssembler(c => c.valignd(zmm2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Valignd_zmm_k1z_zmm_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void valignd_xmm_xmm_m_u() {
			TestAssembler(c => c.valignd(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Valignd_xmm_k1z_xmm_xmmm128b32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void valignd_ymm_ymm_m_u() {
			TestAssembler(c => c.valignd(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Valignd_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void valignd_zmm_zmm_m_u() {
			TestAssembler(c => c.valignd(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Valignd_zmm_k1z_zmm_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void valignq_xmm_xmm_xmm_i() {
			TestAssembler(c => c.valignq(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Valignq_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void valignq_ymm_ymm_ymm_i() {
			TestAssembler(c => c.valignq(ymm2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Valignq_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void valignq_zmm_zmm_zmm_i() {
			TestAssembler(c => c.valignq(zmm2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Valignq_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void valignq_xmm_xmm_m_i() {
			TestAssembler(c => c.valignq(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Valignq_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void valignq_ymm_ymm_m_i() {
			TestAssembler(c => c.valignq(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Valignq_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void valignq_zmm_zmm_m_i() {
			TestAssembler(c => c.valignq(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Valignq_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void valignq_xmm_xmm_xmm_u() {
			TestAssembler(c => c.valignq(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Valignq_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void valignq_ymm_ymm_ymm_u() {
			TestAssembler(c => c.valignq(ymm2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Valignq_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void valignq_zmm_zmm_zmm_u() {
			TestAssembler(c => c.valignq(zmm2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Valignq_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void valignq_xmm_xmm_m_u() {
			TestAssembler(c => c.valignq(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Valignq_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void valignq_ymm_ymm_m_u() {
			TestAssembler(c => c.valignq(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Valignq_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void valignq_zmm_zmm_m_u() {
			TestAssembler(c => c.valignq(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Valignq_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vandnpd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vandnpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vandnpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandnpd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vandnpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vandnpd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vandnpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vandnpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandnpd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vandnpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vandnpd_zmm_zmm_zmm() {
			TestAssembler(c => c.vandnpd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vandnpd_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vandnpd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vandnpd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vandnpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vandnpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vandnpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandnpd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vandnpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vandnpd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vandnpd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vandnpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vandnpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vandnpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandnpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vandnpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vandnpd_zmm_zmm_m() {
			TestAssembler(c => c.vandnpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vandnpd_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vandnps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vandnps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vandnps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandnps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vandnps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vandnps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vandnps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vandnps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandnps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vandnps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vandnps_zmm_zmm_zmm() {
			TestAssembler(c => c.vandnps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vandnps_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vandnps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vandnps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vandnps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vandnps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vandnps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandnps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vandnps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vandnps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vandnps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vandnps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vandnps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vandnps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandnps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vandnps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vandnps_zmm_zmm_m() {
			TestAssembler(c => c.vandnps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vandnps_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vandpd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vandpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vandpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandpd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vandpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vandpd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vandpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vandpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandpd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vandpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vandpd_zmm_zmm_zmm() {
			TestAssembler(c => c.vandpd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vandpd_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vandpd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vandpd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vandpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vandpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vandpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandpd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vandpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vandpd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vandpd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vandpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vandpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vandpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vandpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vandpd_zmm_zmm_m() {
			TestAssembler(c => c.vandpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vandpd_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vandps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vandps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vandps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vandps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vandps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vandps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vandps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vandps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vandps_zmm_zmm_zmm() {
			TestAssembler(c => c.vandps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vandps_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vandps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vandps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vandps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vandps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vandps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vandps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vandps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vandps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vandps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vandps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vandps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vandps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vandps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vandps_zmm_zmm_m() {
			TestAssembler(c => c.vandps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vandps_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vblendmpd_xmm_xmm_xmm() {
			TestAssembler(c => c.vblendmpd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vblendmpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vblendmpd_ymm_ymm_ymm() {
			TestAssembler(c => c.vblendmpd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vblendmpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vblendmpd_zmm_zmm_zmm() {
			TestAssembler(c => c.vblendmpd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vblendmpd_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vblendmpd_xmm_xmm_m() {
			TestAssembler(c => c.vblendmpd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vblendmpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vblendmpd_ymm_ymm_m() {
			TestAssembler(c => c.vblendmpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vblendmpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vblendmpd_zmm_zmm_m() {
			TestAssembler(c => c.vblendmpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vblendmpd_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vblendmps_xmm_xmm_xmm() {
			TestAssembler(c => c.vblendmps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vblendmps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vblendmps_ymm_ymm_ymm() {
			TestAssembler(c => c.vblendmps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vblendmps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vblendmps_zmm_zmm_zmm() {
			TestAssembler(c => c.vblendmps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vblendmps_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vblendmps_xmm_xmm_m() {
			TestAssembler(c => c.vblendmps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vblendmps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vblendmps_ymm_ymm_m() {
			TestAssembler(c => c.vblendmps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vblendmps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vblendmps_zmm_zmm_m() {
			TestAssembler(c => c.vblendmps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vblendmps_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vblendpd_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vblendpd(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vblendpd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5));
		}

		[Fact]
		public void vblendpd_ymm_ymm_ymm_i() {
			TestAssembler(c => c.vblendpd(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vblendpd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5));
		}

		[Fact]
		public void vblendpd_xmm_xmm_m_i() {
			TestAssembler(c => c.vblendpd(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vblendpd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vblendpd_ymm_ymm_m_i() {
			TestAssembler(c => c.vblendpd(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vblendpd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vblendpd_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vblendpd(xmm2, xmm3, xmm4, (byte)0x7F), Instruction.Create(Code.VEX_Vblendpd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU));
		}

		[Fact]
		public void vblendpd_ymm_ymm_ymm_u() {
			TestAssembler(c => c.vblendpd(ymm2, ymm3, ymm4, (byte)0x7F), Instruction.Create(Code.VEX_Vblendpd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU));
		}

		[Fact]
		public void vblendpd_xmm_xmm_m_u() {
			TestAssembler(c => c.vblendpd(xmm2, xmm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vblendpd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vblendpd_ymm_ymm_m_u() {
			TestAssembler(c => c.vblendpd(ymm2, ymm3, __ymmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vblendpd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vblendps_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vblendps(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vblendps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5));
		}

		[Fact]
		public void vblendps_ymm_ymm_ymm_i() {
			TestAssembler(c => c.vblendps(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vblendps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5));
		}

		[Fact]
		public void vblendps_xmm_xmm_m_i() {
			TestAssembler(c => c.vblendps(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vblendps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vblendps_ymm_ymm_m_i() {
			TestAssembler(c => c.vblendps(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vblendps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vblendps_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vblendps(xmm2, xmm3, xmm4, (byte)0x7F), Instruction.Create(Code.VEX_Vblendps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU));
		}

		[Fact]
		public void vblendps_ymm_ymm_ymm_u() {
			TestAssembler(c => c.vblendps(ymm2, ymm3, ymm4, (byte)0x7F), Instruction.Create(Code.VEX_Vblendps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU));
		}

		[Fact]
		public void vblendps_xmm_xmm_m_u() {
			TestAssembler(c => c.vblendps(xmm2, xmm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vblendps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vblendps_ymm_ymm_m_u() {
			TestAssembler(c => c.vblendps(ymm2, ymm3, __ymmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vblendps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vblendvpd_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vblendvpd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vblendvpd_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vblendvpd_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vblendvpd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vblendvpd_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vblendvpd_ymm_ymm_ymm_ymm() {
			TestAssembler(c => c.vblendvpd(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.VEX_Vblendvpd_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, Register.YMM4, Register.YMM5));
		}

		[Fact]
		public void vblendvpd_ymm_ymm_m_ymm() {
			TestAssembler(c => c.vblendvpd(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.VEX_Vblendvpd_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM5));
		}

		[Fact]
		public void vblendvps_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vblendvps(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vblendvps_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vblendvps_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vblendvps(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vblendvps_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vblendvps_ymm_ymm_ymm_ymm() {
			TestAssembler(c => c.vblendvps(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.VEX_Vblendvps_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, Register.YMM4, Register.YMM5));
		}

		[Fact]
		public void vblendvps_ymm_ymm_m_ymm() {
			TestAssembler(c => c.vblendvps(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.VEX_Vblendvps_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM5));
		}

		[Fact]
		public void vbroadcastf128_ymm_m() {
			TestAssembler(c => c.vbroadcastf128(ymm2, __[rcx]), Instruction.Create(Code.VEX_Vbroadcastf128_ymm_m128, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vbroadcastf32x2_ymm_xmm() {
			TestAssembler(c => c.vbroadcastf32x2(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vbroadcastf32x2_ymm_k1z_xmmm64, Register.YMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vbroadcastf32x2_zmm_xmm() {
			TestAssembler(c => c.vbroadcastf32x2(zmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vbroadcastf32x2_zmm_k1z_xmmm64, Register.ZMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vbroadcastf32x2_ymm_m() {
			TestAssembler(c => c.vbroadcastf32x2(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vbroadcastf32x2_ymm_k1z_xmmm64, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vbroadcastf32x2_zmm_m() {
			TestAssembler(c => c.vbroadcastf32x2(zmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vbroadcastf32x2_zmm_k1z_xmmm64, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vbroadcastf32x4_ymm_m() {
			TestAssembler(c => c.vbroadcastf32x4(ymm2.k1, __[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vbroadcastf32x4_ymm_k1z_m128, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vbroadcastf32x4_zmm_m() {
			TestAssembler(c => c.vbroadcastf32x4(zmm2.k1, __[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vbroadcastf32x4_zmm_k1z_m128, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vbroadcastf32x8_zmm_m() {
			TestAssembler(c => c.vbroadcastf32x8(zmm2.k1, __[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vbroadcastf32x8_zmm_k1z_m256, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vbroadcastf64x2_ymm_m() {
			TestAssembler(c => c.vbroadcastf64x2(ymm2.k1, __[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vbroadcastf64x2_ymm_k1z_m128, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vbroadcastf64x2_zmm_m() {
			TestAssembler(c => c.vbroadcastf64x2(zmm2.k1, __[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vbroadcastf64x2_zmm_k1z_m128, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vbroadcastf64x4_zmm_m() {
			TestAssembler(c => c.vbroadcastf64x4(zmm2.k1, __[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vbroadcastf64x4_zmm_k1z_m256, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vbroadcasti128_ymm_m() {
			TestAssembler(c => c.vbroadcasti128(ymm2, __[rcx]), Instruction.Create(Code.VEX_Vbroadcasti128_ymm_m128, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vbroadcasti32x2_xmm_xmm() {
			TestAssembler(c => c.vbroadcasti32x2(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vbroadcasti32x2_xmm_k1z_xmmm64, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vbroadcasti32x2_ymm_xmm() {
			TestAssembler(c => c.vbroadcasti32x2(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vbroadcasti32x2_ymm_k1z_xmmm64, Register.YMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vbroadcasti32x2_zmm_xmm() {
			TestAssembler(c => c.vbroadcasti32x2(zmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vbroadcasti32x2_zmm_k1z_xmmm64, Register.ZMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vbroadcasti32x2_xmm_m() {
			TestAssembler(c => c.vbroadcasti32x2(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vbroadcasti32x2_xmm_k1z_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vbroadcasti32x2_ymm_m() {
			TestAssembler(c => c.vbroadcasti32x2(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vbroadcasti32x2_ymm_k1z_xmmm64, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vbroadcasti32x2_zmm_m() {
			TestAssembler(c => c.vbroadcasti32x2(zmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vbroadcasti32x2_zmm_k1z_xmmm64, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vbroadcasti32x4_ymm_m() {
			TestAssembler(c => c.vbroadcasti32x4(ymm2.k1, __[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vbroadcasti32x4_ymm_k1z_m128, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vbroadcasti32x4_zmm_m() {
			TestAssembler(c => c.vbroadcasti32x4(zmm2.k1, __[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vbroadcasti32x4_zmm_k1z_m128, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vbroadcasti32x8_zmm_m() {
			TestAssembler(c => c.vbroadcasti32x8(zmm2.k1, __[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vbroadcasti32x8_zmm_k1z_m256, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vbroadcasti64x2_ymm_m() {
			TestAssembler(c => c.vbroadcasti64x2(ymm2.k1, __[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vbroadcasti64x2_ymm_k1z_m128, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vbroadcasti64x2_zmm_m() {
			TestAssembler(c => c.vbroadcasti64x2(zmm2.k1, __[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vbroadcasti64x2_zmm_k1z_m128, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vbroadcasti64x4_zmm_m() {
			TestAssembler(c => c.vbroadcasti64x4(zmm2.k1, __[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vbroadcasti64x4_zmm_k1z_m256, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vbroadcastsd_ymm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vbroadcastsd(ymm2, xmm3), Instruction.Create(Code.VEX_Vbroadcastsd_ymm_xmm, Register.YMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vbroadcastsd(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vbroadcastsd_ymm_k1z_xmmm64, Register.YMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vbroadcastsd_zmm_xmm() {
			TestAssembler(c => c.vbroadcastsd(zmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vbroadcastsd_zmm_k1z_xmmm64, Register.ZMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vbroadcastsd_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vbroadcastsd(ymm2, __[rcx]), Instruction.Create(Code.VEX_Vbroadcastsd_ymm_m64, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vbroadcastsd(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vbroadcastsd_ymm_k1z_xmmm64, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vbroadcastsd_zmm_m() {
			TestAssembler(c => c.vbroadcastsd(zmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vbroadcastsd_zmm_k1z_xmmm64, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vbroadcastss_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vbroadcastss(xmm2, xmm3), Instruction.Create(Code.VEX_Vbroadcastss_xmm_xmm, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vbroadcastss(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vbroadcastss_xmm_k1z_xmmm32, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vbroadcastss_ymm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vbroadcastss(ymm2, xmm3), Instruction.Create(Code.VEX_Vbroadcastss_ymm_xmm, Register.YMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vbroadcastss(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vbroadcastss_ymm_k1z_xmmm32, Register.YMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vbroadcastss_zmm_xmm() {
			TestAssembler(c => c.vbroadcastss(zmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vbroadcastss_zmm_k1z_xmmm32, Register.ZMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vbroadcastss_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vbroadcastss(xmm2, __[rcx]), Instruction.Create(Code.VEX_Vbroadcastss_xmm_m32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vbroadcastss(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vbroadcastss_xmm_k1z_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vbroadcastss_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vbroadcastss(ymm2, __[rcx]), Instruction.Create(Code.VEX_Vbroadcastss_ymm_m32, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vbroadcastss(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vbroadcastss_ymm_k1z_xmmm32, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vbroadcastss_zmm_m() {
			TestAssembler(c => c.vbroadcastss(zmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vbroadcastss_zmm_k1z_xmmm32, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcmpeq_ospd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpeq_ospd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 16), Register.K1));
		}

		[Fact]
		public void vcmpeq_ospd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpeq_ospd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 16));
		}

		[Fact]
		public void vcmpeq_ospd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpeq_ospd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 16), Register.K1));
		}

		[Fact]
		public void vcmpeq_ospd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpeq_ospd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 16));
		}

		[Fact]
		public void vcmpeq_ospd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpeq_ospd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 16), Register.K1));
		}

		[Fact]
		public void vcmpeq_ospd_kr_xmm_m() {
			TestAssembler(c => c.vcmpeq_ospd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 16), Register.K1));
		}

		[Fact]
		public void vcmpeq_ospd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpeq_ospd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 16));
		}

		[Fact]
		public void vcmpeq_ospd_kr_ymm_m() {
			TestAssembler(c => c.vcmpeq_ospd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 16), Register.K1));
		}

		[Fact]
		public void vcmpeq_ospd_ymm_ymm_m() {
			TestAssembler(c => c.vcmpeq_ospd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 16));
		}

		[Fact]
		public void vcmpeq_ospd_kr_zmm_m() {
			TestAssembler(c => c.vcmpeq_ospd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 16), Register.K1));
		}

		[Fact]
		public void vcmpeq_osph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpeq_osph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 16), Register.K1));
		}

		[Fact]
		public void vcmpeq_osph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpeq_osph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 16), Register.K1));
		}

		[Fact]
		public void vcmpeq_osph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpeq_osph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 16), Register.K1));
		}

		[Fact]
		public void vcmpeq_osph_kr_xmm_m() {
			TestAssembler(c => c.vcmpeq_osph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 16), Register.K1));
		}

		[Fact]
		public void vcmpeq_osph_kr_ymm_m() {
			TestAssembler(c => c.vcmpeq_osph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 16), Register.K1));
		}

		[Fact]
		public void vcmpeq_osph_kr_zmm_m() {
			TestAssembler(c => c.vcmpeq_osph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 16), Register.K1));
		}

		[Fact]
		public void vcmpeq_osps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpeq_osps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 16), Register.K1));
		}

		[Fact]
		public void vcmpeq_osps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpeq_osps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 16));
		}

		[Fact]
		public void vcmpeq_osps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpeq_osps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 16), Register.K1));
		}

		[Fact]
		public void vcmpeq_osps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpeq_osps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 16));
		}

		[Fact]
		public void vcmpeq_osps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpeq_osps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 16), Register.K1));
		}

		[Fact]
		public void vcmpeq_osps_kr_xmm_m() {
			TestAssembler(c => c.vcmpeq_osps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 16), Register.K1));
		}

		[Fact]
		public void vcmpeq_osps_xmm_xmm_m() {
			TestAssembler(c => c.vcmpeq_osps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 16));
		}

		[Fact]
		public void vcmpeq_osps_kr_ymm_m() {
			TestAssembler(c => c.vcmpeq_osps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 16), Register.K1));
		}

		[Fact]
		public void vcmpeq_osps_ymm_ymm_m() {
			TestAssembler(c => c.vcmpeq_osps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 16));
		}

		[Fact]
		public void vcmpeq_osps_kr_zmm_m() {
			TestAssembler(c => c.vcmpeq_osps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 16), Register.K1));
		}

		[Fact]
		public void vcmpeq_ossd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpeq_ossd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 16), Register.K1));
		}

		[Fact]
		public void vcmpeq_ossd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpeq_ossd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 16));
		}

		[Fact]
		public void vcmpeq_ossd_kr_xmm_m() {
			TestAssembler(c => c.vcmpeq_ossd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 16), Register.K1));
		}

		[Fact]
		public void vcmpeq_ossd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpeq_ossd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 16));
		}

		[Fact]
		public void vcmpeq_ossh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpeq_ossh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 16), Register.K1));
		}

		[Fact]
		public void vcmpeq_ossh_kr_xmm_m() {
			TestAssembler(c => c.vcmpeq_ossh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 16), Register.K1));
		}

		[Fact]
		public void vcmpeq_osss_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpeq_osss(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 16), Register.K1));
		}

		[Fact]
		public void vcmpeq_osss_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpeq_osss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 16));
		}

		[Fact]
		public void vcmpeq_osss_kr_xmm_m() {
			TestAssembler(c => c.vcmpeq_osss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 16), Register.K1));
		}

		[Fact]
		public void vcmpeq_osss_xmm_xmm_m() {
			TestAssembler(c => c.vcmpeq_osss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 16));
		}

		[Fact]
		public void vcmpeq_uqpd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpeq_uqpd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 8), Register.K1));
		}

		[Fact]
		public void vcmpeq_uqpd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpeq_uqpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 8));
		}

		[Fact]
		public void vcmpeq_uqpd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpeq_uqpd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 8), Register.K1));
		}

		[Fact]
		public void vcmpeq_uqpd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpeq_uqpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 8));
		}

		[Fact]
		public void vcmpeq_uqpd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpeq_uqpd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 8), Register.K1));
		}

		[Fact]
		public void vcmpeq_uqpd_kr_xmm_m() {
			TestAssembler(c => c.vcmpeq_uqpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 8), Register.K1));
		}

		[Fact]
		public void vcmpeq_uqpd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpeq_uqpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 8));
		}

		[Fact]
		public void vcmpeq_uqpd_kr_ymm_m() {
			TestAssembler(c => c.vcmpeq_uqpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 8), Register.K1));
		}

		[Fact]
		public void vcmpeq_uqpd_ymm_ymm_m() {
			TestAssembler(c => c.vcmpeq_uqpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 8));
		}

		[Fact]
		public void vcmpeq_uqpd_kr_zmm_m() {
			TestAssembler(c => c.vcmpeq_uqpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 8), Register.K1));
		}

		[Fact]
		public void vcmpeq_uqph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpeq_uqph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 8), Register.K1));
		}

		[Fact]
		public void vcmpeq_uqph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpeq_uqph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 8), Register.K1));
		}

		[Fact]
		public void vcmpeq_uqph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpeq_uqph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 8), Register.K1));
		}

		[Fact]
		public void vcmpeq_uqph_kr_xmm_m() {
			TestAssembler(c => c.vcmpeq_uqph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 8), Register.K1));
		}

		[Fact]
		public void vcmpeq_uqph_kr_ymm_m() {
			TestAssembler(c => c.vcmpeq_uqph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 8), Register.K1));
		}

		[Fact]
		public void vcmpeq_uqph_kr_zmm_m() {
			TestAssembler(c => c.vcmpeq_uqph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 8), Register.K1));
		}

		[Fact]
		public void vcmpeq_uqps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpeq_uqps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 8), Register.K1));
		}

		[Fact]
		public void vcmpeq_uqps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpeq_uqps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 8));
		}

		[Fact]
		public void vcmpeq_uqps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpeq_uqps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 8), Register.K1));
		}

		[Fact]
		public void vcmpeq_uqps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpeq_uqps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 8));
		}

		[Fact]
		public void vcmpeq_uqps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpeq_uqps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 8), Register.K1));
		}

		[Fact]
		public void vcmpeq_uqps_kr_xmm_m() {
			TestAssembler(c => c.vcmpeq_uqps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 8), Register.K1));
		}

		[Fact]
		public void vcmpeq_uqps_xmm_xmm_m() {
			TestAssembler(c => c.vcmpeq_uqps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 8));
		}

		[Fact]
		public void vcmpeq_uqps_kr_ymm_m() {
			TestAssembler(c => c.vcmpeq_uqps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 8), Register.K1));
		}

		[Fact]
		public void vcmpeq_uqps_ymm_ymm_m() {
			TestAssembler(c => c.vcmpeq_uqps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 8));
		}

		[Fact]
		public void vcmpeq_uqps_kr_zmm_m() {
			TestAssembler(c => c.vcmpeq_uqps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 8), Register.K1));
		}

		[Fact]
		public void vcmpeq_uqsd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpeq_uqsd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 8), Register.K1));
		}

		[Fact]
		public void vcmpeq_uqsd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpeq_uqsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 8));
		}

		[Fact]
		public void vcmpeq_uqsd_kr_xmm_m() {
			TestAssembler(c => c.vcmpeq_uqsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 8), Register.K1));
		}

		[Fact]
		public void vcmpeq_uqsd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpeq_uqsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 8));
		}

		[Fact]
		public void vcmpeq_uqsh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpeq_uqsh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 8), Register.K1));
		}

		[Fact]
		public void vcmpeq_uqsh_kr_xmm_m() {
			TestAssembler(c => c.vcmpeq_uqsh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 8), Register.K1));
		}

		[Fact]
		public void vcmpeq_uqss_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpeq_uqss(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 8), Register.K1));
		}

		[Fact]
		public void vcmpeq_uqss_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpeq_uqss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 8));
		}

		[Fact]
		public void vcmpeq_uqss_kr_xmm_m() {
			TestAssembler(c => c.vcmpeq_uqss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 8), Register.K1));
		}

		[Fact]
		public void vcmpeq_uqss_xmm_xmm_m() {
			TestAssembler(c => c.vcmpeq_uqss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 8));
		}

		[Fact]
		public void vcmpeq_uspd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpeq_uspd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 24), Register.K1));
		}

		[Fact]
		public void vcmpeq_uspd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpeq_uspd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 24));
		}

		[Fact]
		public void vcmpeq_uspd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpeq_uspd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 24), Register.K1));
		}

		[Fact]
		public void vcmpeq_uspd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpeq_uspd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 24));
		}

		[Fact]
		public void vcmpeq_uspd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpeq_uspd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 24), Register.K1));
		}

		[Fact]
		public void vcmpeq_uspd_kr_xmm_m() {
			TestAssembler(c => c.vcmpeq_uspd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 24), Register.K1));
		}

		[Fact]
		public void vcmpeq_uspd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpeq_uspd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 24));
		}

		[Fact]
		public void vcmpeq_uspd_kr_ymm_m() {
			TestAssembler(c => c.vcmpeq_uspd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 24), Register.K1));
		}

		[Fact]
		public void vcmpeq_uspd_ymm_ymm_m() {
			TestAssembler(c => c.vcmpeq_uspd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 24));
		}

		[Fact]
		public void vcmpeq_uspd_kr_zmm_m() {
			TestAssembler(c => c.vcmpeq_uspd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 24), Register.K1));
		}

		[Fact]
		public void vcmpeq_usph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpeq_usph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 24), Register.K1));
		}

		[Fact]
		public void vcmpeq_usph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpeq_usph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 24), Register.K1));
		}

		[Fact]
		public void vcmpeq_usph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpeq_usph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 24), Register.K1));
		}

		[Fact]
		public void vcmpeq_usph_kr_xmm_m() {
			TestAssembler(c => c.vcmpeq_usph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 24), Register.K1));
		}

		[Fact]
		public void vcmpeq_usph_kr_ymm_m() {
			TestAssembler(c => c.vcmpeq_usph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 24), Register.K1));
		}

		[Fact]
		public void vcmpeq_usph_kr_zmm_m() {
			TestAssembler(c => c.vcmpeq_usph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 24), Register.K1));
		}

		[Fact]
		public void vcmpeq_usps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpeq_usps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 24), Register.K1));
		}

		[Fact]
		public void vcmpeq_usps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpeq_usps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 24));
		}

		[Fact]
		public void vcmpeq_usps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpeq_usps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 24), Register.K1));
		}

		[Fact]
		public void vcmpeq_usps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpeq_usps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 24));
		}

		[Fact]
		public void vcmpeq_usps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpeq_usps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 24), Register.K1));
		}

		[Fact]
		public void vcmpeq_usps_kr_xmm_m() {
			TestAssembler(c => c.vcmpeq_usps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 24), Register.K1));
		}

		[Fact]
		public void vcmpeq_usps_xmm_xmm_m() {
			TestAssembler(c => c.vcmpeq_usps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 24));
		}

		[Fact]
		public void vcmpeq_usps_kr_ymm_m() {
			TestAssembler(c => c.vcmpeq_usps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 24), Register.K1));
		}

		[Fact]
		public void vcmpeq_usps_ymm_ymm_m() {
			TestAssembler(c => c.vcmpeq_usps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 24));
		}

		[Fact]
		public void vcmpeq_usps_kr_zmm_m() {
			TestAssembler(c => c.vcmpeq_usps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 24), Register.K1));
		}

		[Fact]
		public void vcmpeq_ussd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpeq_ussd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 24), Register.K1));
		}

		[Fact]
		public void vcmpeq_ussd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpeq_ussd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 24));
		}

		[Fact]
		public void vcmpeq_ussd_kr_xmm_m() {
			TestAssembler(c => c.vcmpeq_ussd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 24), Register.K1));
		}

		[Fact]
		public void vcmpeq_ussd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpeq_ussd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 24));
		}

		[Fact]
		public void vcmpeq_ussh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpeq_ussh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 24), Register.K1));
		}

		[Fact]
		public void vcmpeq_ussh_kr_xmm_m() {
			TestAssembler(c => c.vcmpeq_ussh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 24), Register.K1));
		}

		[Fact]
		public void vcmpeq_usss_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpeq_usss(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 24), Register.K1));
		}

		[Fact]
		public void vcmpeq_usss_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpeq_usss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 24));
		}

		[Fact]
		public void vcmpeq_usss_kr_xmm_m() {
			TestAssembler(c => c.vcmpeq_usss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 24), Register.K1));
		}

		[Fact]
		public void vcmpeq_usss_xmm_xmm_m() {
			TestAssembler(c => c.vcmpeq_usss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 24));
		}

		[Fact]
		public void vcmpeqpd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpeqpd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 0), Register.K1));
		}

		[Fact]
		public void vcmpeqpd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpeqpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0));
		}

		[Fact]
		public void vcmpeqpd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpeqpd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 0), Register.K1));
		}

		[Fact]
		public void vcmpeqpd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpeqpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0));
		}

		[Fact]
		public void vcmpeqpd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpeqpd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 0), Register.K1));
		}

		[Fact]
		public void vcmpeqpd_kr_xmm_m() {
			TestAssembler(c => c.vcmpeqpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0), Register.K1));
		}

		[Fact]
		public void vcmpeqpd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpeqpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0));
		}

		[Fact]
		public void vcmpeqpd_kr_ymm_m() {
			TestAssembler(c => c.vcmpeqpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0), Register.K1));
		}

		[Fact]
		public void vcmpeqpd_ymm_ymm_m() {
			TestAssembler(c => c.vcmpeqpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0));
		}

		[Fact]
		public void vcmpeqpd_kr_zmm_m() {
			TestAssembler(c => c.vcmpeqpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0), Register.K1));
		}

		[Fact]
		public void vcmpeqph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpeqph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 0), Register.K1));
		}

		[Fact]
		public void vcmpeqph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpeqph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 0), Register.K1));
		}

		[Fact]
		public void vcmpeqph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpeqph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 0), Register.K1));
		}

		[Fact]
		public void vcmpeqph_kr_xmm_m() {
			TestAssembler(c => c.vcmpeqph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0), Register.K1));
		}

		[Fact]
		public void vcmpeqph_kr_ymm_m() {
			TestAssembler(c => c.vcmpeqph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0), Register.K1));
		}

		[Fact]
		public void vcmpeqph_kr_zmm_m() {
			TestAssembler(c => c.vcmpeqph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0), Register.K1));
		}

		[Fact]
		public void vcmpeqps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpeqps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 0), Register.K1));
		}

		[Fact]
		public void vcmpeqps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpeqps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0));
		}

		[Fact]
		public void vcmpeqps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpeqps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 0), Register.K1));
		}

		[Fact]
		public void vcmpeqps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpeqps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0));
		}

		[Fact]
		public void vcmpeqps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpeqps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 0), Register.K1));
		}

		[Fact]
		public void vcmpeqps_kr_xmm_m() {
			TestAssembler(c => c.vcmpeqps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0), Register.K1));
		}

		[Fact]
		public void vcmpeqps_xmm_xmm_m() {
			TestAssembler(c => c.vcmpeqps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0));
		}

		[Fact]
		public void vcmpeqps_kr_ymm_m() {
			TestAssembler(c => c.vcmpeqps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0), Register.K1));
		}

		[Fact]
		public void vcmpeqps_ymm_ymm_m() {
			TestAssembler(c => c.vcmpeqps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0));
		}

		[Fact]
		public void vcmpeqps_kr_zmm_m() {
			TestAssembler(c => c.vcmpeqps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0), Register.K1));
		}

		[Fact]
		public void vcmpeqsd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpeqsd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 0), Register.K1));
		}

		[Fact]
		public void vcmpeqsd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpeqsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0));
		}

		[Fact]
		public void vcmpeqsd_kr_xmm_m() {
			TestAssembler(c => c.vcmpeqsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0), Register.K1));
		}

		[Fact]
		public void vcmpeqsd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpeqsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0));
		}

		[Fact]
		public void vcmpeqsh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpeqsh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 0), Register.K1));
		}

		[Fact]
		public void vcmpeqsh_kr_xmm_m() {
			TestAssembler(c => c.vcmpeqsh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0), Register.K1));
		}

		[Fact]
		public void vcmpeqss_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpeqss(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 0), Register.K1));
		}

		[Fact]
		public void vcmpeqss_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpeqss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0));
		}

		[Fact]
		public void vcmpeqss_kr_xmm_m() {
			TestAssembler(c => c.vcmpeqss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0), Register.K1));
		}

		[Fact]
		public void vcmpeqss_xmm_xmm_m() {
			TestAssembler(c => c.vcmpeqss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0));
		}

		[Fact]
		public void vcmpfalse_ospd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpfalse_ospd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 27), Register.K1));
		}

		[Fact]
		public void vcmpfalse_ospd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpfalse_ospd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 27));
		}

		[Fact]
		public void vcmpfalse_ospd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpfalse_ospd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 27), Register.K1));
		}

		[Fact]
		public void vcmpfalse_ospd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpfalse_ospd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 27));
		}

		[Fact]
		public void vcmpfalse_ospd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpfalse_ospd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 27), Register.K1));
		}

		[Fact]
		public void vcmpfalse_ospd_kr_xmm_m() {
			TestAssembler(c => c.vcmpfalse_ospd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 27), Register.K1));
		}

		[Fact]
		public void vcmpfalse_ospd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpfalse_ospd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 27));
		}

		[Fact]
		public void vcmpfalse_ospd_kr_ymm_m() {
			TestAssembler(c => c.vcmpfalse_ospd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 27), Register.K1));
		}

		[Fact]
		public void vcmpfalse_ospd_ymm_ymm_m() {
			TestAssembler(c => c.vcmpfalse_ospd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 27));
		}

		[Fact]
		public void vcmpfalse_ospd_kr_zmm_m() {
			TestAssembler(c => c.vcmpfalse_ospd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 27), Register.K1));
		}

		[Fact]
		public void vcmpfalse_osph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpfalse_osph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 27), Register.K1));
		}

		[Fact]
		public void vcmpfalse_osph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpfalse_osph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 27), Register.K1));
		}

		[Fact]
		public void vcmpfalse_osph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpfalse_osph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 27), Register.K1));
		}

		[Fact]
		public void vcmpfalse_osph_kr_xmm_m() {
			TestAssembler(c => c.vcmpfalse_osph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 27), Register.K1));
		}

		[Fact]
		public void vcmpfalse_osph_kr_ymm_m() {
			TestAssembler(c => c.vcmpfalse_osph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 27), Register.K1));
		}

		[Fact]
		public void vcmpfalse_osph_kr_zmm_m() {
			TestAssembler(c => c.vcmpfalse_osph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 27), Register.K1));
		}

		[Fact]
		public void vcmpfalse_osps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpfalse_osps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 27), Register.K1));
		}

		[Fact]
		public void vcmpfalse_osps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpfalse_osps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 27));
		}

		[Fact]
		public void vcmpfalse_osps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpfalse_osps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 27), Register.K1));
		}

		[Fact]
		public void vcmpfalse_osps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpfalse_osps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 27));
		}

		[Fact]
		public void vcmpfalse_osps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpfalse_osps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 27), Register.K1));
		}

		[Fact]
		public void vcmpfalse_osps_kr_xmm_m() {
			TestAssembler(c => c.vcmpfalse_osps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 27), Register.K1));
		}

		[Fact]
		public void vcmpfalse_osps_xmm_xmm_m() {
			TestAssembler(c => c.vcmpfalse_osps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 27));
		}

		[Fact]
		public void vcmpfalse_osps_kr_ymm_m() {
			TestAssembler(c => c.vcmpfalse_osps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 27), Register.K1));
		}

		[Fact]
		public void vcmpfalse_osps_ymm_ymm_m() {
			TestAssembler(c => c.vcmpfalse_osps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 27));
		}

		[Fact]
		public void vcmpfalse_osps_kr_zmm_m() {
			TestAssembler(c => c.vcmpfalse_osps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 27), Register.K1));
		}

		[Fact]
		public void vcmpfalse_ossd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpfalse_ossd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 27), Register.K1));
		}

		[Fact]
		public void vcmpfalse_ossd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpfalse_ossd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 27));
		}

		[Fact]
		public void vcmpfalse_ossd_kr_xmm_m() {
			TestAssembler(c => c.vcmpfalse_ossd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 27), Register.K1));
		}

		[Fact]
		public void vcmpfalse_ossd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpfalse_ossd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 27));
		}

		[Fact]
		public void vcmpfalse_ossh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpfalse_ossh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 27), Register.K1));
		}

		[Fact]
		public void vcmpfalse_ossh_kr_xmm_m() {
			TestAssembler(c => c.vcmpfalse_ossh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 27), Register.K1));
		}

		[Fact]
		public void vcmpfalse_osss_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpfalse_osss(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 27), Register.K1));
		}

		[Fact]
		public void vcmpfalse_osss_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpfalse_osss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 27));
		}

		[Fact]
		public void vcmpfalse_osss_kr_xmm_m() {
			TestAssembler(c => c.vcmpfalse_osss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 27), Register.K1));
		}

		[Fact]
		public void vcmpfalse_osss_xmm_xmm_m() {
			TestAssembler(c => c.vcmpfalse_osss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 27));
		}

		[Fact]
		public void vcmpfalsepd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpfalsepd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 11), Register.K1));
		}

		[Fact]
		public void vcmpfalsepd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpfalsepd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 11));
		}

		[Fact]
		public void vcmpfalsepd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpfalsepd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 11), Register.K1));
		}

		[Fact]
		public void vcmpfalsepd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpfalsepd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 11));
		}

		[Fact]
		public void vcmpfalsepd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpfalsepd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 11), Register.K1));
		}

		[Fact]
		public void vcmpfalsepd_kr_xmm_m() {
			TestAssembler(c => c.vcmpfalsepd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 11), Register.K1));
		}

		[Fact]
		public void vcmpfalsepd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpfalsepd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 11));
		}

		[Fact]
		public void vcmpfalsepd_kr_ymm_m() {
			TestAssembler(c => c.vcmpfalsepd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 11), Register.K1));
		}

		[Fact]
		public void vcmpfalsepd_ymm_ymm_m() {
			TestAssembler(c => c.vcmpfalsepd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 11));
		}

		[Fact]
		public void vcmpfalsepd_kr_zmm_m() {
			TestAssembler(c => c.vcmpfalsepd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 11), Register.K1));
		}

		[Fact]
		public void vcmpfalseph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpfalseph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 11), Register.K1));
		}

		[Fact]
		public void vcmpfalseph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpfalseph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 11), Register.K1));
		}

		[Fact]
		public void vcmpfalseph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpfalseph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 11), Register.K1));
		}

		[Fact]
		public void vcmpfalseph_kr_xmm_m() {
			TestAssembler(c => c.vcmpfalseph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 11), Register.K1));
		}

		[Fact]
		public void vcmpfalseph_kr_ymm_m() {
			TestAssembler(c => c.vcmpfalseph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 11), Register.K1));
		}

		[Fact]
		public void vcmpfalseph_kr_zmm_m() {
			TestAssembler(c => c.vcmpfalseph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 11), Register.K1));
		}

		[Fact]
		public void vcmpfalseps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpfalseps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 11), Register.K1));
		}

		[Fact]
		public void vcmpfalseps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpfalseps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 11));
		}

		[Fact]
		public void vcmpfalseps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpfalseps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 11), Register.K1));
		}

		[Fact]
		public void vcmpfalseps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpfalseps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 11));
		}

		[Fact]
		public void vcmpfalseps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpfalseps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 11), Register.K1));
		}

		[Fact]
		public void vcmpfalseps_kr_xmm_m() {
			TestAssembler(c => c.vcmpfalseps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 11), Register.K1));
		}

		[Fact]
		public void vcmpfalseps_xmm_xmm_m() {
			TestAssembler(c => c.vcmpfalseps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 11));
		}

		[Fact]
		public void vcmpfalseps_kr_ymm_m() {
			TestAssembler(c => c.vcmpfalseps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 11), Register.K1));
		}

		[Fact]
		public void vcmpfalseps_ymm_ymm_m() {
			TestAssembler(c => c.vcmpfalseps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 11));
		}

		[Fact]
		public void vcmpfalseps_kr_zmm_m() {
			TestAssembler(c => c.vcmpfalseps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 11), Register.K1));
		}

		[Fact]
		public void vcmpfalsesd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpfalsesd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 11), Register.K1));
		}

		[Fact]
		public void vcmpfalsesd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpfalsesd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 11));
		}

		[Fact]
		public void vcmpfalsesd_kr_xmm_m() {
			TestAssembler(c => c.vcmpfalsesd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 11), Register.K1));
		}

		[Fact]
		public void vcmpfalsesd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpfalsesd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 11));
		}

		[Fact]
		public void vcmpfalsesh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpfalsesh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 11), Register.K1));
		}

		[Fact]
		public void vcmpfalsesh_kr_xmm_m() {
			TestAssembler(c => c.vcmpfalsesh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 11), Register.K1));
		}

		[Fact]
		public void vcmpfalsess_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpfalsess(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 11), Register.K1));
		}

		[Fact]
		public void vcmpfalsess_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpfalsess(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 11));
		}

		[Fact]
		public void vcmpfalsess_kr_xmm_m() {
			TestAssembler(c => c.vcmpfalsess(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 11), Register.K1));
		}

		[Fact]
		public void vcmpfalsess_xmm_xmm_m() {
			TestAssembler(c => c.vcmpfalsess(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 11));
		}

		[Fact]
		public void vcmpge_oqpd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpge_oqpd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 29), Register.K1));
		}

		[Fact]
		public void vcmpge_oqpd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpge_oqpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 29));
		}

		[Fact]
		public void vcmpge_oqpd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpge_oqpd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 29), Register.K1));
		}

		[Fact]
		public void vcmpge_oqpd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpge_oqpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 29));
		}

		[Fact]
		public void vcmpge_oqpd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpge_oqpd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 29), Register.K1));
		}

		[Fact]
		public void vcmpge_oqpd_kr_xmm_m() {
			TestAssembler(c => c.vcmpge_oqpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 29), Register.K1));
		}

		[Fact]
		public void vcmpge_oqpd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpge_oqpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 29));
		}

		[Fact]
		public void vcmpge_oqpd_kr_ymm_m() {
			TestAssembler(c => c.vcmpge_oqpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 29), Register.K1));
		}

		[Fact]
		public void vcmpge_oqpd_ymm_ymm_m() {
			TestAssembler(c => c.vcmpge_oqpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 29));
		}

		[Fact]
		public void vcmpge_oqpd_kr_zmm_m() {
			TestAssembler(c => c.vcmpge_oqpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 29), Register.K1));
		}

		[Fact]
		public void vcmpge_oqph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpge_oqph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 29), Register.K1));
		}

		[Fact]
		public void vcmpge_oqph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpge_oqph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 29), Register.K1));
		}

		[Fact]
		public void vcmpge_oqph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpge_oqph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 29), Register.K1));
		}

		[Fact]
		public void vcmpge_oqph_kr_xmm_m() {
			TestAssembler(c => c.vcmpge_oqph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 29), Register.K1));
		}

		[Fact]
		public void vcmpge_oqph_kr_ymm_m() {
			TestAssembler(c => c.vcmpge_oqph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 29), Register.K1));
		}

		[Fact]
		public void vcmpge_oqph_kr_zmm_m() {
			TestAssembler(c => c.vcmpge_oqph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 29), Register.K1));
		}

		[Fact]
		public void vcmpge_oqps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpge_oqps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 29), Register.K1));
		}

		[Fact]
		public void vcmpge_oqps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpge_oqps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 29));
		}

		[Fact]
		public void vcmpge_oqps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpge_oqps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 29), Register.K1));
		}

		[Fact]
		public void vcmpge_oqps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpge_oqps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 29));
		}

		[Fact]
		public void vcmpge_oqps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpge_oqps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 29), Register.K1));
		}

		[Fact]
		public void vcmpge_oqps_kr_xmm_m() {
			TestAssembler(c => c.vcmpge_oqps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 29), Register.K1));
		}

		[Fact]
		public void vcmpge_oqps_xmm_xmm_m() {
			TestAssembler(c => c.vcmpge_oqps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 29));
		}

		[Fact]
		public void vcmpge_oqps_kr_ymm_m() {
			TestAssembler(c => c.vcmpge_oqps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 29), Register.K1));
		}

		[Fact]
		public void vcmpge_oqps_ymm_ymm_m() {
			TestAssembler(c => c.vcmpge_oqps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 29));
		}

		[Fact]
		public void vcmpge_oqps_kr_zmm_m() {
			TestAssembler(c => c.vcmpge_oqps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 29), Register.K1));
		}

		[Fact]
		public void vcmpge_oqsd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpge_oqsd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 29), Register.K1));
		}

		[Fact]
		public void vcmpge_oqsd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpge_oqsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 29));
		}

		[Fact]
		public void vcmpge_oqsd_kr_xmm_m() {
			TestAssembler(c => c.vcmpge_oqsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 29), Register.K1));
		}

		[Fact]
		public void vcmpge_oqsd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpge_oqsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 29));
		}

		[Fact]
		public void vcmpge_oqsh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpge_oqsh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 29), Register.K1));
		}

		[Fact]
		public void vcmpge_oqsh_kr_xmm_m() {
			TestAssembler(c => c.vcmpge_oqsh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 29), Register.K1));
		}

		[Fact]
		public void vcmpge_oqss_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpge_oqss(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 29), Register.K1));
		}

		[Fact]
		public void vcmpge_oqss_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpge_oqss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 29));
		}

		[Fact]
		public void vcmpge_oqss_kr_xmm_m() {
			TestAssembler(c => c.vcmpge_oqss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 29), Register.K1));
		}

		[Fact]
		public void vcmpge_oqss_xmm_xmm_m() {
			TestAssembler(c => c.vcmpge_oqss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 29));
		}

		[Fact]
		public void vcmpgepd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpgepd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 13), Register.K1));
		}

		[Fact]
		public void vcmpgepd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpgepd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 13));
		}

		[Fact]
		public void vcmpgepd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpgepd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 13), Register.K1));
		}

		[Fact]
		public void vcmpgepd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpgepd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 13));
		}

		[Fact]
		public void vcmpgepd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpgepd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 13), Register.K1));
		}

		[Fact]
		public void vcmpgepd_kr_xmm_m() {
			TestAssembler(c => c.vcmpgepd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 13), Register.K1));
		}

		[Fact]
		public void vcmpgepd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpgepd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 13));
		}

		[Fact]
		public void vcmpgepd_kr_ymm_m() {
			TestAssembler(c => c.vcmpgepd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 13), Register.K1));
		}

		[Fact]
		public void vcmpgepd_ymm_ymm_m() {
			TestAssembler(c => c.vcmpgepd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 13));
		}

		[Fact]
		public void vcmpgepd_kr_zmm_m() {
			TestAssembler(c => c.vcmpgepd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 13), Register.K1));
		}

		[Fact]
		public void vcmpgeph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpgeph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 13), Register.K1));
		}

		[Fact]
		public void vcmpgeph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpgeph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 13), Register.K1));
		}

		[Fact]
		public void vcmpgeph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpgeph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 13), Register.K1));
		}

		[Fact]
		public void vcmpgeph_kr_xmm_m() {
			TestAssembler(c => c.vcmpgeph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 13), Register.K1));
		}

		[Fact]
		public void vcmpgeph_kr_ymm_m() {
			TestAssembler(c => c.vcmpgeph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 13), Register.K1));
		}

		[Fact]
		public void vcmpgeph_kr_zmm_m() {
			TestAssembler(c => c.vcmpgeph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 13), Register.K1));
		}

		[Fact]
		public void vcmpgeps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpgeps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 13), Register.K1));
		}

		[Fact]
		public void vcmpgeps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpgeps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 13));
		}

		[Fact]
		public void vcmpgeps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpgeps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 13), Register.K1));
		}

		[Fact]
		public void vcmpgeps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpgeps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 13));
		}

		[Fact]
		public void vcmpgeps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpgeps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 13), Register.K1));
		}

		[Fact]
		public void vcmpgeps_kr_xmm_m() {
			TestAssembler(c => c.vcmpgeps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 13), Register.K1));
		}

		[Fact]
		public void vcmpgeps_xmm_xmm_m() {
			TestAssembler(c => c.vcmpgeps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 13));
		}

		[Fact]
		public void vcmpgeps_kr_ymm_m() {
			TestAssembler(c => c.vcmpgeps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 13), Register.K1));
		}

		[Fact]
		public void vcmpgeps_ymm_ymm_m() {
			TestAssembler(c => c.vcmpgeps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 13));
		}

		[Fact]
		public void vcmpgeps_kr_zmm_m() {
			TestAssembler(c => c.vcmpgeps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 13), Register.K1));
		}

		[Fact]
		public void vcmpgesd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpgesd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 13), Register.K1));
		}

		[Fact]
		public void vcmpgesd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpgesd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 13));
		}

		[Fact]
		public void vcmpgesd_kr_xmm_m() {
			TestAssembler(c => c.vcmpgesd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 13), Register.K1));
		}

		[Fact]
		public void vcmpgesd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpgesd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 13));
		}

		[Fact]
		public void vcmpgesh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpgesh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 13), Register.K1));
		}

		[Fact]
		public void vcmpgesh_kr_xmm_m() {
			TestAssembler(c => c.vcmpgesh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 13), Register.K1));
		}

		[Fact]
		public void vcmpgess_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpgess(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 13), Register.K1));
		}

		[Fact]
		public void vcmpgess_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpgess(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 13));
		}

		[Fact]
		public void vcmpgess_kr_xmm_m() {
			TestAssembler(c => c.vcmpgess(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 13), Register.K1));
		}

		[Fact]
		public void vcmpgess_xmm_xmm_m() {
			TestAssembler(c => c.vcmpgess(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 13));
		}

		[Fact]
		public void vcmpgt_oqpd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpgt_oqpd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 30), Register.K1));
		}

		[Fact]
		public void vcmpgt_oqpd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpgt_oqpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 30));
		}

		[Fact]
		public void vcmpgt_oqpd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpgt_oqpd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 30), Register.K1));
		}

		[Fact]
		public void vcmpgt_oqpd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpgt_oqpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 30));
		}

		[Fact]
		public void vcmpgt_oqpd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpgt_oqpd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 30), Register.K1));
		}

		[Fact]
		public void vcmpgt_oqpd_kr_xmm_m() {
			TestAssembler(c => c.vcmpgt_oqpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 30), Register.K1));
		}

		[Fact]
		public void vcmpgt_oqpd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpgt_oqpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 30));
		}

		[Fact]
		public void vcmpgt_oqpd_kr_ymm_m() {
			TestAssembler(c => c.vcmpgt_oqpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 30), Register.K1));
		}

		[Fact]
		public void vcmpgt_oqpd_ymm_ymm_m() {
			TestAssembler(c => c.vcmpgt_oqpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 30));
		}

		[Fact]
		public void vcmpgt_oqpd_kr_zmm_m() {
			TestAssembler(c => c.vcmpgt_oqpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 30), Register.K1));
		}

		[Fact]
		public void vcmpgt_oqph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpgt_oqph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 30), Register.K1));
		}

		[Fact]
		public void vcmpgt_oqph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpgt_oqph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 30), Register.K1));
		}

		[Fact]
		public void vcmpgt_oqph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpgt_oqph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 30), Register.K1));
		}

		[Fact]
		public void vcmpgt_oqph_kr_xmm_m() {
			TestAssembler(c => c.vcmpgt_oqph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 30), Register.K1));
		}

		[Fact]
		public void vcmpgt_oqph_kr_ymm_m() {
			TestAssembler(c => c.vcmpgt_oqph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 30), Register.K1));
		}

		[Fact]
		public void vcmpgt_oqph_kr_zmm_m() {
			TestAssembler(c => c.vcmpgt_oqph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 30), Register.K1));
		}

		[Fact]
		public void vcmpgt_oqps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpgt_oqps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 30), Register.K1));
		}

		[Fact]
		public void vcmpgt_oqps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpgt_oqps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 30));
		}

		[Fact]
		public void vcmpgt_oqps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpgt_oqps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 30), Register.K1));
		}

		[Fact]
		public void vcmpgt_oqps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpgt_oqps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 30));
		}

		[Fact]
		public void vcmpgt_oqps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpgt_oqps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 30), Register.K1));
		}

		[Fact]
		public void vcmpgt_oqps_kr_xmm_m() {
			TestAssembler(c => c.vcmpgt_oqps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 30), Register.K1));
		}

		[Fact]
		public void vcmpgt_oqps_xmm_xmm_m() {
			TestAssembler(c => c.vcmpgt_oqps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 30));
		}

		[Fact]
		public void vcmpgt_oqps_kr_ymm_m() {
			TestAssembler(c => c.vcmpgt_oqps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 30), Register.K1));
		}

		[Fact]
		public void vcmpgt_oqps_ymm_ymm_m() {
			TestAssembler(c => c.vcmpgt_oqps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 30));
		}

		[Fact]
		public void vcmpgt_oqps_kr_zmm_m() {
			TestAssembler(c => c.vcmpgt_oqps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 30), Register.K1));
		}

		[Fact]
		public void vcmpgt_oqsd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpgt_oqsd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 30), Register.K1));
		}

		[Fact]
		public void vcmpgt_oqsd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpgt_oqsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 30));
		}

		[Fact]
		public void vcmpgt_oqsd_kr_xmm_m() {
			TestAssembler(c => c.vcmpgt_oqsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 30), Register.K1));
		}

		[Fact]
		public void vcmpgt_oqsd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpgt_oqsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 30));
		}

		[Fact]
		public void vcmpgt_oqsh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpgt_oqsh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 30), Register.K1));
		}

		[Fact]
		public void vcmpgt_oqsh_kr_xmm_m() {
			TestAssembler(c => c.vcmpgt_oqsh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 30), Register.K1));
		}

		[Fact]
		public void vcmpgt_oqss_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpgt_oqss(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 30), Register.K1));
		}

		[Fact]
		public void vcmpgt_oqss_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpgt_oqss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 30));
		}

		[Fact]
		public void vcmpgt_oqss_kr_xmm_m() {
			TestAssembler(c => c.vcmpgt_oqss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 30), Register.K1));
		}

		[Fact]
		public void vcmpgt_oqss_xmm_xmm_m() {
			TestAssembler(c => c.vcmpgt_oqss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 30));
		}

		[Fact]
		public void vcmpgtpd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpgtpd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 14), Register.K1));
		}

		[Fact]
		public void vcmpgtpd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpgtpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 14));
		}

		[Fact]
		public void vcmpgtpd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpgtpd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 14), Register.K1));
		}

		[Fact]
		public void vcmpgtpd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpgtpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 14));
		}

		[Fact]
		public void vcmpgtpd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpgtpd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 14), Register.K1));
		}

		[Fact]
		public void vcmpgtpd_kr_xmm_m() {
			TestAssembler(c => c.vcmpgtpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 14), Register.K1));
		}

		[Fact]
		public void vcmpgtpd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpgtpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 14));
		}

		[Fact]
		public void vcmpgtpd_kr_ymm_m() {
			TestAssembler(c => c.vcmpgtpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 14), Register.K1));
		}

		[Fact]
		public void vcmpgtpd_ymm_ymm_m() {
			TestAssembler(c => c.vcmpgtpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 14));
		}

		[Fact]
		public void vcmpgtpd_kr_zmm_m() {
			TestAssembler(c => c.vcmpgtpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 14), Register.K1));
		}

		[Fact]
		public void vcmpgtph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpgtph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 14), Register.K1));
		}

		[Fact]
		public void vcmpgtph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpgtph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 14), Register.K1));
		}

		[Fact]
		public void vcmpgtph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpgtph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 14), Register.K1));
		}

		[Fact]
		public void vcmpgtph_kr_xmm_m() {
			TestAssembler(c => c.vcmpgtph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 14), Register.K1));
		}

		[Fact]
		public void vcmpgtph_kr_ymm_m() {
			TestAssembler(c => c.vcmpgtph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 14), Register.K1));
		}

		[Fact]
		public void vcmpgtph_kr_zmm_m() {
			TestAssembler(c => c.vcmpgtph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 14), Register.K1));
		}

		[Fact]
		public void vcmpgtps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpgtps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 14), Register.K1));
		}

		[Fact]
		public void vcmpgtps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpgtps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 14));
		}

		[Fact]
		public void vcmpgtps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpgtps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 14), Register.K1));
		}

		[Fact]
		public void vcmpgtps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpgtps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 14));
		}

		[Fact]
		public void vcmpgtps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpgtps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 14), Register.K1));
		}

		[Fact]
		public void vcmpgtps_kr_xmm_m() {
			TestAssembler(c => c.vcmpgtps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 14), Register.K1));
		}

		[Fact]
		public void vcmpgtps_xmm_xmm_m() {
			TestAssembler(c => c.vcmpgtps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 14));
		}

		[Fact]
		public void vcmpgtps_kr_ymm_m() {
			TestAssembler(c => c.vcmpgtps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 14), Register.K1));
		}

		[Fact]
		public void vcmpgtps_ymm_ymm_m() {
			TestAssembler(c => c.vcmpgtps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 14));
		}

		[Fact]
		public void vcmpgtps_kr_zmm_m() {
			TestAssembler(c => c.vcmpgtps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 14), Register.K1));
		}

		[Fact]
		public void vcmpgtsd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpgtsd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 14), Register.K1));
		}

		[Fact]
		public void vcmpgtsd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpgtsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 14));
		}

		[Fact]
		public void vcmpgtsd_kr_xmm_m() {
			TestAssembler(c => c.vcmpgtsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 14), Register.K1));
		}

		[Fact]
		public void vcmpgtsd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpgtsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 14));
		}

		[Fact]
		public void vcmpgtsh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpgtsh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 14), Register.K1));
		}

		[Fact]
		public void vcmpgtsh_kr_xmm_m() {
			TestAssembler(c => c.vcmpgtsh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 14), Register.K1));
		}

		[Fact]
		public void vcmpgtss_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpgtss(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 14), Register.K1));
		}

		[Fact]
		public void vcmpgtss_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpgtss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 14));
		}

		[Fact]
		public void vcmpgtss_kr_xmm_m() {
			TestAssembler(c => c.vcmpgtss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 14), Register.K1));
		}

		[Fact]
		public void vcmpgtss_xmm_xmm_m() {
			TestAssembler(c => c.vcmpgtss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 14));
		}

		[Fact]
		public void vcmple_oqpd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmple_oqpd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 18), Register.K1));
		}

		[Fact]
		public void vcmple_oqpd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmple_oqpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 18));
		}

		[Fact]
		public void vcmple_oqpd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmple_oqpd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 18), Register.K1));
		}

		[Fact]
		public void vcmple_oqpd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmple_oqpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 18));
		}

		[Fact]
		public void vcmple_oqpd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmple_oqpd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 18), Register.K1));
		}

		[Fact]
		public void vcmple_oqpd_kr_xmm_m() {
			TestAssembler(c => c.vcmple_oqpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 18), Register.K1));
		}

		[Fact]
		public void vcmple_oqpd_xmm_xmm_m() {
			TestAssembler(c => c.vcmple_oqpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 18));
		}

		[Fact]
		public void vcmple_oqpd_kr_ymm_m() {
			TestAssembler(c => c.vcmple_oqpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 18), Register.K1));
		}

		[Fact]
		public void vcmple_oqpd_ymm_ymm_m() {
			TestAssembler(c => c.vcmple_oqpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 18));
		}

		[Fact]
		public void vcmple_oqpd_kr_zmm_m() {
			TestAssembler(c => c.vcmple_oqpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 18), Register.K1));
		}

		[Fact]
		public void vcmple_oqph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmple_oqph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 18), Register.K1));
		}

		[Fact]
		public void vcmple_oqph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmple_oqph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 18), Register.K1));
		}

		[Fact]
		public void vcmple_oqph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmple_oqph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 18), Register.K1));
		}

		[Fact]
		public void vcmple_oqph_kr_xmm_m() {
			TestAssembler(c => c.vcmple_oqph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 18), Register.K1));
		}

		[Fact]
		public void vcmple_oqph_kr_ymm_m() {
			TestAssembler(c => c.vcmple_oqph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 18), Register.K1));
		}

		[Fact]
		public void vcmple_oqph_kr_zmm_m() {
			TestAssembler(c => c.vcmple_oqph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 18), Register.K1));
		}

		[Fact]
		public void vcmple_oqps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmple_oqps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 18), Register.K1));
		}

		[Fact]
		public void vcmple_oqps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmple_oqps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 18));
		}

		[Fact]
		public void vcmple_oqps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmple_oqps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 18), Register.K1));
		}

		[Fact]
		public void vcmple_oqps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmple_oqps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 18));
		}

		[Fact]
		public void vcmple_oqps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmple_oqps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 18), Register.K1));
		}

		[Fact]
		public void vcmple_oqps_kr_xmm_m() {
			TestAssembler(c => c.vcmple_oqps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 18), Register.K1));
		}

		[Fact]
		public void vcmple_oqps_xmm_xmm_m() {
			TestAssembler(c => c.vcmple_oqps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 18));
		}

		[Fact]
		public void vcmple_oqps_kr_ymm_m() {
			TestAssembler(c => c.vcmple_oqps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 18), Register.K1));
		}

		[Fact]
		public void vcmple_oqps_ymm_ymm_m() {
			TestAssembler(c => c.vcmple_oqps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 18));
		}

		[Fact]
		public void vcmple_oqps_kr_zmm_m() {
			TestAssembler(c => c.vcmple_oqps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 18), Register.K1));
		}

		[Fact]
		public void vcmple_oqsd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmple_oqsd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 18), Register.K1));
		}

		[Fact]
		public void vcmple_oqsd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmple_oqsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 18));
		}

		[Fact]
		public void vcmple_oqsd_kr_xmm_m() {
			TestAssembler(c => c.vcmple_oqsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 18), Register.K1));
		}

		[Fact]
		public void vcmple_oqsd_xmm_xmm_m() {
			TestAssembler(c => c.vcmple_oqsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 18));
		}

		[Fact]
		public void vcmple_oqsh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmple_oqsh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 18), Register.K1));
		}

		[Fact]
		public void vcmple_oqsh_kr_xmm_m() {
			TestAssembler(c => c.vcmple_oqsh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 18), Register.K1));
		}

		[Fact]
		public void vcmple_oqss_kr_xmm_xmm() {
			TestAssembler(c => c.vcmple_oqss(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 18), Register.K1));
		}

		[Fact]
		public void vcmple_oqss_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmple_oqss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 18));
		}

		[Fact]
		public void vcmple_oqss_kr_xmm_m() {
			TestAssembler(c => c.vcmple_oqss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 18), Register.K1));
		}

		[Fact]
		public void vcmple_oqss_xmm_xmm_m() {
			TestAssembler(c => c.vcmple_oqss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 18));
		}

		[Fact]
		public void vcmplepd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmplepd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 2), Register.K1));
		}

		[Fact]
		public void vcmplepd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmplepd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 2));
		}

		[Fact]
		public void vcmplepd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmplepd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 2), Register.K1));
		}

		[Fact]
		public void vcmplepd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmplepd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 2));
		}

		[Fact]
		public void vcmplepd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmplepd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 2), Register.K1));
		}

		[Fact]
		public void vcmplepd_kr_xmm_m() {
			TestAssembler(c => c.vcmplepd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vcmplepd_xmm_xmm_m() {
			TestAssembler(c => c.vcmplepd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2));
		}

		[Fact]
		public void vcmplepd_kr_ymm_m() {
			TestAssembler(c => c.vcmplepd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vcmplepd_ymm_ymm_m() {
			TestAssembler(c => c.vcmplepd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2));
		}

		[Fact]
		public void vcmplepd_kr_zmm_m() {
			TestAssembler(c => c.vcmplepd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vcmpleph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpleph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 2), Register.K1));
		}

		[Fact]
		public void vcmpleph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpleph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 2), Register.K1));
		}

		[Fact]
		public void vcmpleph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpleph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 2), Register.K1));
		}

		[Fact]
		public void vcmpleph_kr_xmm_m() {
			TestAssembler(c => c.vcmpleph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vcmpleph_kr_ymm_m() {
			TestAssembler(c => c.vcmpleph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vcmpleph_kr_zmm_m() {
			TestAssembler(c => c.vcmpleph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vcmpleps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpleps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 2), Register.K1));
		}

		[Fact]
		public void vcmpleps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpleps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 2));
		}

		[Fact]
		public void vcmpleps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpleps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 2), Register.K1));
		}

		[Fact]
		public void vcmpleps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpleps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 2));
		}

		[Fact]
		public void vcmpleps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpleps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 2), Register.K1));
		}

		[Fact]
		public void vcmpleps_kr_xmm_m() {
			TestAssembler(c => c.vcmpleps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vcmpleps_xmm_xmm_m() {
			TestAssembler(c => c.vcmpleps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2));
		}

		[Fact]
		public void vcmpleps_kr_ymm_m() {
			TestAssembler(c => c.vcmpleps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vcmpleps_ymm_ymm_m() {
			TestAssembler(c => c.vcmpleps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2));
		}

		[Fact]
		public void vcmpleps_kr_zmm_m() {
			TestAssembler(c => c.vcmpleps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vcmplesd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmplesd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 2), Register.K1));
		}

		[Fact]
		public void vcmplesd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmplesd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 2));
		}

		[Fact]
		public void vcmplesd_kr_xmm_m() {
			TestAssembler(c => c.vcmplesd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vcmplesd_xmm_xmm_m() {
			TestAssembler(c => c.vcmplesd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2));
		}

		[Fact]
		public void vcmplesh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmplesh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 2), Register.K1));
		}

		[Fact]
		public void vcmplesh_kr_xmm_m() {
			TestAssembler(c => c.vcmplesh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vcmpless_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpless(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 2), Register.K1));
		}

		[Fact]
		public void vcmpless_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpless(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 2));
		}

		[Fact]
		public void vcmpless_kr_xmm_m() {
			TestAssembler(c => c.vcmpless(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vcmpless_xmm_xmm_m() {
			TestAssembler(c => c.vcmpless(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2));
		}

		[Fact]
		public void vcmplt_oqpd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmplt_oqpd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 17), Register.K1));
		}

		[Fact]
		public void vcmplt_oqpd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmplt_oqpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 17));
		}

		[Fact]
		public void vcmplt_oqpd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmplt_oqpd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 17), Register.K1));
		}

		[Fact]
		public void vcmplt_oqpd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmplt_oqpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 17));
		}

		[Fact]
		public void vcmplt_oqpd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmplt_oqpd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 17), Register.K1));
		}

		[Fact]
		public void vcmplt_oqpd_kr_xmm_m() {
			TestAssembler(c => c.vcmplt_oqpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 17), Register.K1));
		}

		[Fact]
		public void vcmplt_oqpd_xmm_xmm_m() {
			TestAssembler(c => c.vcmplt_oqpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 17));
		}

		[Fact]
		public void vcmplt_oqpd_kr_ymm_m() {
			TestAssembler(c => c.vcmplt_oqpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 17), Register.K1));
		}

		[Fact]
		public void vcmplt_oqpd_ymm_ymm_m() {
			TestAssembler(c => c.vcmplt_oqpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 17));
		}

		[Fact]
		public void vcmplt_oqpd_kr_zmm_m() {
			TestAssembler(c => c.vcmplt_oqpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 17), Register.K1));
		}

		[Fact]
		public void vcmplt_oqph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmplt_oqph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 17), Register.K1));
		}

		[Fact]
		public void vcmplt_oqph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmplt_oqph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 17), Register.K1));
		}

		[Fact]
		public void vcmplt_oqph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmplt_oqph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 17), Register.K1));
		}

		[Fact]
		public void vcmplt_oqph_kr_xmm_m() {
			TestAssembler(c => c.vcmplt_oqph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 17), Register.K1));
		}

		[Fact]
		public void vcmplt_oqph_kr_ymm_m() {
			TestAssembler(c => c.vcmplt_oqph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 17), Register.K1));
		}

		[Fact]
		public void vcmplt_oqph_kr_zmm_m() {
			TestAssembler(c => c.vcmplt_oqph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 17), Register.K1));
		}

		[Fact]
		public void vcmplt_oqps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmplt_oqps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 17), Register.K1));
		}

		[Fact]
		public void vcmplt_oqps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmplt_oqps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 17));
		}

		[Fact]
		public void vcmplt_oqps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmplt_oqps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 17), Register.K1));
		}

		[Fact]
		public void vcmplt_oqps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmplt_oqps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 17));
		}

		[Fact]
		public void vcmplt_oqps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmplt_oqps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 17), Register.K1));
		}

		[Fact]
		public void vcmplt_oqps_kr_xmm_m() {
			TestAssembler(c => c.vcmplt_oqps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 17), Register.K1));
		}

		[Fact]
		public void vcmplt_oqps_xmm_xmm_m() {
			TestAssembler(c => c.vcmplt_oqps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 17));
		}

		[Fact]
		public void vcmplt_oqps_kr_ymm_m() {
			TestAssembler(c => c.vcmplt_oqps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 17), Register.K1));
		}

		[Fact]
		public void vcmplt_oqps_ymm_ymm_m() {
			TestAssembler(c => c.vcmplt_oqps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 17));
		}

		[Fact]
		public void vcmplt_oqps_kr_zmm_m() {
			TestAssembler(c => c.vcmplt_oqps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 17), Register.K1));
		}

		[Fact]
		public void vcmplt_oqsd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmplt_oqsd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 17), Register.K1));
		}

		[Fact]
		public void vcmplt_oqsd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmplt_oqsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 17));
		}

		[Fact]
		public void vcmplt_oqsd_kr_xmm_m() {
			TestAssembler(c => c.vcmplt_oqsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 17), Register.K1));
		}

		[Fact]
		public void vcmplt_oqsd_xmm_xmm_m() {
			TestAssembler(c => c.vcmplt_oqsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 17));
		}

		[Fact]
		public void vcmplt_oqsh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmplt_oqsh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 17), Register.K1));
		}

		[Fact]
		public void vcmplt_oqsh_kr_xmm_m() {
			TestAssembler(c => c.vcmplt_oqsh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 17), Register.K1));
		}

		[Fact]
		public void vcmplt_oqss_kr_xmm_xmm() {
			TestAssembler(c => c.vcmplt_oqss(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 17), Register.K1));
		}

		[Fact]
		public void vcmplt_oqss_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmplt_oqss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 17));
		}

		[Fact]
		public void vcmplt_oqss_kr_xmm_m() {
			TestAssembler(c => c.vcmplt_oqss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 17), Register.K1));
		}

		[Fact]
		public void vcmplt_oqss_xmm_xmm_m() {
			TestAssembler(c => c.vcmplt_oqss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 17));
		}

		[Fact]
		public void vcmpltpd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpltpd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 1), Register.K1));
		}

		[Fact]
		public void vcmpltpd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpltpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 1));
		}

		[Fact]
		public void vcmpltpd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpltpd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 1), Register.K1));
		}

		[Fact]
		public void vcmpltpd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpltpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 1));
		}

		[Fact]
		public void vcmpltpd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpltpd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 1), Register.K1));
		}

		[Fact]
		public void vcmpltpd_kr_xmm_m() {
			TestAssembler(c => c.vcmpltpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vcmpltpd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpltpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1));
		}

		[Fact]
		public void vcmpltpd_kr_ymm_m() {
			TestAssembler(c => c.vcmpltpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vcmpltpd_ymm_ymm_m() {
			TestAssembler(c => c.vcmpltpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1));
		}

		[Fact]
		public void vcmpltpd_kr_zmm_m() {
			TestAssembler(c => c.vcmpltpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vcmpltph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpltph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 1), Register.K1));
		}

		[Fact]
		public void vcmpltph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpltph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 1), Register.K1));
		}

		[Fact]
		public void vcmpltph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpltph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 1), Register.K1));
		}

		[Fact]
		public void vcmpltph_kr_xmm_m() {
			TestAssembler(c => c.vcmpltph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vcmpltph_kr_ymm_m() {
			TestAssembler(c => c.vcmpltph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vcmpltph_kr_zmm_m() {
			TestAssembler(c => c.vcmpltph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vcmpltps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpltps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 1), Register.K1));
		}

		[Fact]
		public void vcmpltps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpltps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 1));
		}

		[Fact]
		public void vcmpltps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpltps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 1), Register.K1));
		}

		[Fact]
		public void vcmpltps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpltps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 1));
		}

		[Fact]
		public void vcmpltps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpltps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 1), Register.K1));
		}

		[Fact]
		public void vcmpltps_kr_xmm_m() {
			TestAssembler(c => c.vcmpltps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vcmpltps_xmm_xmm_m() {
			TestAssembler(c => c.vcmpltps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1));
		}

		[Fact]
		public void vcmpltps_kr_ymm_m() {
			TestAssembler(c => c.vcmpltps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vcmpltps_ymm_ymm_m() {
			TestAssembler(c => c.vcmpltps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1));
		}

		[Fact]
		public void vcmpltps_kr_zmm_m() {
			TestAssembler(c => c.vcmpltps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vcmpltsd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpltsd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 1), Register.K1));
		}

		[Fact]
		public void vcmpltsd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpltsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 1));
		}

		[Fact]
		public void vcmpltsd_kr_xmm_m() {
			TestAssembler(c => c.vcmpltsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vcmpltsd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpltsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1));
		}

		[Fact]
		public void vcmpltsh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpltsh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 1), Register.K1));
		}

		[Fact]
		public void vcmpltsh_kr_xmm_m() {
			TestAssembler(c => c.vcmpltsh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vcmpltss_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpltss(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 1), Register.K1));
		}

		[Fact]
		public void vcmpltss_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpltss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 1));
		}

		[Fact]
		public void vcmpltss_kr_xmm_m() {
			TestAssembler(c => c.vcmpltss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vcmpltss_xmm_xmm_m() {
			TestAssembler(c => c.vcmpltss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1));
		}

		[Fact]
		public void vcmpneq_oqpd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpneq_oqpd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 12), Register.K1));
		}

		[Fact]
		public void vcmpneq_oqpd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpneq_oqpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 12));
		}

		[Fact]
		public void vcmpneq_oqpd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpneq_oqpd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 12), Register.K1));
		}

		[Fact]
		public void vcmpneq_oqpd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpneq_oqpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 12));
		}

		[Fact]
		public void vcmpneq_oqpd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpneq_oqpd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 12), Register.K1));
		}

		[Fact]
		public void vcmpneq_oqpd_kr_xmm_m() {
			TestAssembler(c => c.vcmpneq_oqpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 12), Register.K1));
		}

		[Fact]
		public void vcmpneq_oqpd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpneq_oqpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 12));
		}

		[Fact]
		public void vcmpneq_oqpd_kr_ymm_m() {
			TestAssembler(c => c.vcmpneq_oqpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 12), Register.K1));
		}

		[Fact]
		public void vcmpneq_oqpd_ymm_ymm_m() {
			TestAssembler(c => c.vcmpneq_oqpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 12));
		}

		[Fact]
		public void vcmpneq_oqpd_kr_zmm_m() {
			TestAssembler(c => c.vcmpneq_oqpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 12), Register.K1));
		}

		[Fact]
		public void vcmpneq_oqph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpneq_oqph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 12), Register.K1));
		}

		[Fact]
		public void vcmpneq_oqph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpneq_oqph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 12), Register.K1));
		}

		[Fact]
		public void vcmpneq_oqph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpneq_oqph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 12), Register.K1));
		}

		[Fact]
		public void vcmpneq_oqph_kr_xmm_m() {
			TestAssembler(c => c.vcmpneq_oqph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 12), Register.K1));
		}

		[Fact]
		public void vcmpneq_oqph_kr_ymm_m() {
			TestAssembler(c => c.vcmpneq_oqph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 12), Register.K1));
		}

		[Fact]
		public void vcmpneq_oqph_kr_zmm_m() {
			TestAssembler(c => c.vcmpneq_oqph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 12), Register.K1));
		}

		[Fact]
		public void vcmpneq_oqps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpneq_oqps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 12), Register.K1));
		}

		[Fact]
		public void vcmpneq_oqps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpneq_oqps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 12));
		}

		[Fact]
		public void vcmpneq_oqps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpneq_oqps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 12), Register.K1));
		}

		[Fact]
		public void vcmpneq_oqps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpneq_oqps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 12));
		}

		[Fact]
		public void vcmpneq_oqps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpneq_oqps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 12), Register.K1));
		}

		[Fact]
		public void vcmpneq_oqps_kr_xmm_m() {
			TestAssembler(c => c.vcmpneq_oqps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 12), Register.K1));
		}

		[Fact]
		public void vcmpneq_oqps_xmm_xmm_m() {
			TestAssembler(c => c.vcmpneq_oqps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 12));
		}

		[Fact]
		public void vcmpneq_oqps_kr_ymm_m() {
			TestAssembler(c => c.vcmpneq_oqps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 12), Register.K1));
		}

		[Fact]
		public void vcmpneq_oqps_ymm_ymm_m() {
			TestAssembler(c => c.vcmpneq_oqps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 12));
		}

		[Fact]
		public void vcmpneq_oqps_kr_zmm_m() {
			TestAssembler(c => c.vcmpneq_oqps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 12), Register.K1));
		}

		[Fact]
		public void vcmpneq_oqsd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpneq_oqsd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 12), Register.K1));
		}

		[Fact]
		public void vcmpneq_oqsd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpneq_oqsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 12));
		}

		[Fact]
		public void vcmpneq_oqsd_kr_xmm_m() {
			TestAssembler(c => c.vcmpneq_oqsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 12), Register.K1));
		}

		[Fact]
		public void vcmpneq_oqsd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpneq_oqsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 12));
		}

		[Fact]
		public void vcmpneq_oqsh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpneq_oqsh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 12), Register.K1));
		}

		[Fact]
		public void vcmpneq_oqsh_kr_xmm_m() {
			TestAssembler(c => c.vcmpneq_oqsh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 12), Register.K1));
		}

		[Fact]
		public void vcmpneq_oqss_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpneq_oqss(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 12), Register.K1));
		}

		[Fact]
		public void vcmpneq_oqss_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpneq_oqss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 12));
		}

		[Fact]
		public void vcmpneq_oqss_kr_xmm_m() {
			TestAssembler(c => c.vcmpneq_oqss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 12), Register.K1));
		}

		[Fact]
		public void vcmpneq_oqss_xmm_xmm_m() {
			TestAssembler(c => c.vcmpneq_oqss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 12));
		}

		[Fact]
		public void vcmpneq_ospd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpneq_ospd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 28), Register.K1));
		}

		[Fact]
		public void vcmpneq_ospd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpneq_ospd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 28));
		}

		[Fact]
		public void vcmpneq_ospd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpneq_ospd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 28), Register.K1));
		}

		[Fact]
		public void vcmpneq_ospd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpneq_ospd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 28));
		}

		[Fact]
		public void vcmpneq_ospd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpneq_ospd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 28), Register.K1));
		}

		[Fact]
		public void vcmpneq_ospd_kr_xmm_m() {
			TestAssembler(c => c.vcmpneq_ospd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 28), Register.K1));
		}

		[Fact]
		public void vcmpneq_ospd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpneq_ospd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 28));
		}

		[Fact]
		public void vcmpneq_ospd_kr_ymm_m() {
			TestAssembler(c => c.vcmpneq_ospd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 28), Register.K1));
		}

		[Fact]
		public void vcmpneq_ospd_ymm_ymm_m() {
			TestAssembler(c => c.vcmpneq_ospd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 28));
		}

		[Fact]
		public void vcmpneq_ospd_kr_zmm_m() {
			TestAssembler(c => c.vcmpneq_ospd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 28), Register.K1));
		}

		[Fact]
		public void vcmpneq_osph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpneq_osph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 28), Register.K1));
		}

		[Fact]
		public void vcmpneq_osph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpneq_osph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 28), Register.K1));
		}

		[Fact]
		public void vcmpneq_osph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpneq_osph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 28), Register.K1));
		}

		[Fact]
		public void vcmpneq_osph_kr_xmm_m() {
			TestAssembler(c => c.vcmpneq_osph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 28), Register.K1));
		}

		[Fact]
		public void vcmpneq_osph_kr_ymm_m() {
			TestAssembler(c => c.vcmpneq_osph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 28), Register.K1));
		}

		[Fact]
		public void vcmpneq_osph_kr_zmm_m() {
			TestAssembler(c => c.vcmpneq_osph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 28), Register.K1));
		}

		[Fact]
		public void vcmpneq_osps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpneq_osps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 28), Register.K1));
		}

		[Fact]
		public void vcmpneq_osps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpneq_osps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 28));
		}

		[Fact]
		public void vcmpneq_osps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpneq_osps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 28), Register.K1));
		}

		[Fact]
		public void vcmpneq_osps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpneq_osps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 28));
		}

		[Fact]
		public void vcmpneq_osps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpneq_osps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 28), Register.K1));
		}

		[Fact]
		public void vcmpneq_osps_kr_xmm_m() {
			TestAssembler(c => c.vcmpneq_osps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 28), Register.K1));
		}

		[Fact]
		public void vcmpneq_osps_xmm_xmm_m() {
			TestAssembler(c => c.vcmpneq_osps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 28));
		}

		[Fact]
		public void vcmpneq_osps_kr_ymm_m() {
			TestAssembler(c => c.vcmpneq_osps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 28), Register.K1));
		}

		[Fact]
		public void vcmpneq_osps_ymm_ymm_m() {
			TestAssembler(c => c.vcmpneq_osps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 28));
		}

		[Fact]
		public void vcmpneq_osps_kr_zmm_m() {
			TestAssembler(c => c.vcmpneq_osps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 28), Register.K1));
		}

		[Fact]
		public void vcmpneq_ossd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpneq_ossd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 28), Register.K1));
		}

		[Fact]
		public void vcmpneq_ossd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpneq_ossd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 28));
		}

		[Fact]
		public void vcmpneq_ossd_kr_xmm_m() {
			TestAssembler(c => c.vcmpneq_ossd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 28), Register.K1));
		}

		[Fact]
		public void vcmpneq_ossd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpneq_ossd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 28));
		}

		[Fact]
		public void vcmpneq_ossh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpneq_ossh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 28), Register.K1));
		}

		[Fact]
		public void vcmpneq_ossh_kr_xmm_m() {
			TestAssembler(c => c.vcmpneq_ossh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 28), Register.K1));
		}

		[Fact]
		public void vcmpneq_osss_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpneq_osss(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 28), Register.K1));
		}

		[Fact]
		public void vcmpneq_osss_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpneq_osss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 28));
		}

		[Fact]
		public void vcmpneq_osss_kr_xmm_m() {
			TestAssembler(c => c.vcmpneq_osss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 28), Register.K1));
		}

		[Fact]
		public void vcmpneq_osss_xmm_xmm_m() {
			TestAssembler(c => c.vcmpneq_osss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 28));
		}

		[Fact]
		public void vcmpneq_uspd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpneq_uspd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 20), Register.K1));
		}

		[Fact]
		public void vcmpneq_uspd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpneq_uspd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 20));
		}

		[Fact]
		public void vcmpneq_uspd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpneq_uspd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 20), Register.K1));
		}

		[Fact]
		public void vcmpneq_uspd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpneq_uspd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 20));
		}

		[Fact]
		public void vcmpneq_uspd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpneq_uspd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 20), Register.K1));
		}

		[Fact]
		public void vcmpneq_uspd_kr_xmm_m() {
			TestAssembler(c => c.vcmpneq_uspd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 20), Register.K1));
		}

		[Fact]
		public void vcmpneq_uspd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpneq_uspd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 20));
		}

		[Fact]
		public void vcmpneq_uspd_kr_ymm_m() {
			TestAssembler(c => c.vcmpneq_uspd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 20), Register.K1));
		}

		[Fact]
		public void vcmpneq_uspd_ymm_ymm_m() {
			TestAssembler(c => c.vcmpneq_uspd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 20));
		}

		[Fact]
		public void vcmpneq_uspd_kr_zmm_m() {
			TestAssembler(c => c.vcmpneq_uspd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 20), Register.K1));
		}

		[Fact]
		public void vcmpneq_usph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpneq_usph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 20), Register.K1));
		}

		[Fact]
		public void vcmpneq_usph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpneq_usph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 20), Register.K1));
		}

		[Fact]
		public void vcmpneq_usph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpneq_usph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 20), Register.K1));
		}

		[Fact]
		public void vcmpneq_usph_kr_xmm_m() {
			TestAssembler(c => c.vcmpneq_usph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 20), Register.K1));
		}

		[Fact]
		public void vcmpneq_usph_kr_ymm_m() {
			TestAssembler(c => c.vcmpneq_usph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 20), Register.K1));
		}

		[Fact]
		public void vcmpneq_usph_kr_zmm_m() {
			TestAssembler(c => c.vcmpneq_usph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 20), Register.K1));
		}

		[Fact]
		public void vcmpneq_usps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpneq_usps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 20), Register.K1));
		}

		[Fact]
		public void vcmpneq_usps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpneq_usps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 20));
		}

		[Fact]
		public void vcmpneq_usps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpneq_usps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 20), Register.K1));
		}

		[Fact]
		public void vcmpneq_usps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpneq_usps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 20));
		}

		[Fact]
		public void vcmpneq_usps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpneq_usps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 20), Register.K1));
		}

		[Fact]
		public void vcmpneq_usps_kr_xmm_m() {
			TestAssembler(c => c.vcmpneq_usps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 20), Register.K1));
		}

		[Fact]
		public void vcmpneq_usps_xmm_xmm_m() {
			TestAssembler(c => c.vcmpneq_usps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 20));
		}

		[Fact]
		public void vcmpneq_usps_kr_ymm_m() {
			TestAssembler(c => c.vcmpneq_usps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 20), Register.K1));
		}

		[Fact]
		public void vcmpneq_usps_ymm_ymm_m() {
			TestAssembler(c => c.vcmpneq_usps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 20));
		}

		[Fact]
		public void vcmpneq_usps_kr_zmm_m() {
			TestAssembler(c => c.vcmpneq_usps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 20), Register.K1));
		}

		[Fact]
		public void vcmpneq_ussd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpneq_ussd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 20), Register.K1));
		}

		[Fact]
		public void vcmpneq_ussd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpneq_ussd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 20));
		}

		[Fact]
		public void vcmpneq_ussd_kr_xmm_m() {
			TestAssembler(c => c.vcmpneq_ussd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 20), Register.K1));
		}

		[Fact]
		public void vcmpneq_ussd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpneq_ussd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 20));
		}

		[Fact]
		public void vcmpneq_ussh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpneq_ussh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 20), Register.K1));
		}

		[Fact]
		public void vcmpneq_ussh_kr_xmm_m() {
			TestAssembler(c => c.vcmpneq_ussh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 20), Register.K1));
		}

		[Fact]
		public void vcmpneq_usss_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpneq_usss(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 20), Register.K1));
		}

		[Fact]
		public void vcmpneq_usss_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpneq_usss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 20));
		}

		[Fact]
		public void vcmpneq_usss_kr_xmm_m() {
			TestAssembler(c => c.vcmpneq_usss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 20), Register.K1));
		}

		[Fact]
		public void vcmpneq_usss_xmm_xmm_m() {
			TestAssembler(c => c.vcmpneq_usss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 20));
		}

		[Fact]
		public void vcmpneqpd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpneqpd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 4), Register.K1));
		}

		[Fact]
		public void vcmpneqpd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpneqpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 4));
		}

		[Fact]
		public void vcmpneqpd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpneqpd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 4), Register.K1));
		}

		[Fact]
		public void vcmpneqpd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpneqpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 4));
		}

		[Fact]
		public void vcmpneqpd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpneqpd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 4), Register.K1));
		}

		[Fact]
		public void vcmpneqpd_kr_xmm_m() {
			TestAssembler(c => c.vcmpneqpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vcmpneqpd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpneqpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4));
		}

		[Fact]
		public void vcmpneqpd_kr_ymm_m() {
			TestAssembler(c => c.vcmpneqpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vcmpneqpd_ymm_ymm_m() {
			TestAssembler(c => c.vcmpneqpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4));
		}

		[Fact]
		public void vcmpneqpd_kr_zmm_m() {
			TestAssembler(c => c.vcmpneqpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vcmpneqph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpneqph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 4), Register.K1));
		}

		[Fact]
		public void vcmpneqph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpneqph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 4), Register.K1));
		}

		[Fact]
		public void vcmpneqph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpneqph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 4), Register.K1));
		}

		[Fact]
		public void vcmpneqph_kr_xmm_m() {
			TestAssembler(c => c.vcmpneqph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vcmpneqph_kr_ymm_m() {
			TestAssembler(c => c.vcmpneqph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vcmpneqph_kr_zmm_m() {
			TestAssembler(c => c.vcmpneqph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vcmpneqps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpneqps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 4), Register.K1));
		}

		[Fact]
		public void vcmpneqps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpneqps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 4));
		}

		[Fact]
		public void vcmpneqps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpneqps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 4), Register.K1));
		}

		[Fact]
		public void vcmpneqps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpneqps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 4));
		}

		[Fact]
		public void vcmpneqps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpneqps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 4), Register.K1));
		}

		[Fact]
		public void vcmpneqps_kr_xmm_m() {
			TestAssembler(c => c.vcmpneqps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vcmpneqps_xmm_xmm_m() {
			TestAssembler(c => c.vcmpneqps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4));
		}

		[Fact]
		public void vcmpneqps_kr_ymm_m() {
			TestAssembler(c => c.vcmpneqps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vcmpneqps_ymm_ymm_m() {
			TestAssembler(c => c.vcmpneqps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4));
		}

		[Fact]
		public void vcmpneqps_kr_zmm_m() {
			TestAssembler(c => c.vcmpneqps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vcmpneqsd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpneqsd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 4), Register.K1));
		}

		[Fact]
		public void vcmpneqsd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpneqsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 4));
		}

		[Fact]
		public void vcmpneqsd_kr_xmm_m() {
			TestAssembler(c => c.vcmpneqsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vcmpneqsd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpneqsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4));
		}

		[Fact]
		public void vcmpneqsh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpneqsh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 4), Register.K1));
		}

		[Fact]
		public void vcmpneqsh_kr_xmm_m() {
			TestAssembler(c => c.vcmpneqsh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vcmpneqss_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpneqss(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 4), Register.K1));
		}

		[Fact]
		public void vcmpneqss_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpneqss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 4));
		}

		[Fact]
		public void vcmpneqss_kr_xmm_m() {
			TestAssembler(c => c.vcmpneqss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vcmpneqss_xmm_xmm_m() {
			TestAssembler(c => c.vcmpneqss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4));
		}

		[Fact]
		public void vcmpnge_uqpd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpnge_uqpd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 25), Register.K1));
		}

		[Fact]
		public void vcmpnge_uqpd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpnge_uqpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 25));
		}

		[Fact]
		public void vcmpnge_uqpd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpnge_uqpd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 25), Register.K1));
		}

		[Fact]
		public void vcmpnge_uqpd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpnge_uqpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 25));
		}

		[Fact]
		public void vcmpnge_uqpd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpnge_uqpd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 25), Register.K1));
		}

		[Fact]
		public void vcmpnge_uqpd_kr_xmm_m() {
			TestAssembler(c => c.vcmpnge_uqpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 25), Register.K1));
		}

		[Fact]
		public void vcmpnge_uqpd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpnge_uqpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 25));
		}

		[Fact]
		public void vcmpnge_uqpd_kr_ymm_m() {
			TestAssembler(c => c.vcmpnge_uqpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 25), Register.K1));
		}

		[Fact]
		public void vcmpnge_uqpd_ymm_ymm_m() {
			TestAssembler(c => c.vcmpnge_uqpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 25));
		}

		[Fact]
		public void vcmpnge_uqpd_kr_zmm_m() {
			TestAssembler(c => c.vcmpnge_uqpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 25), Register.K1));
		}

		[Fact]
		public void vcmpnge_uqph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpnge_uqph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 25), Register.K1));
		}

		[Fact]
		public void vcmpnge_uqph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpnge_uqph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 25), Register.K1));
		}

		[Fact]
		public void vcmpnge_uqph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpnge_uqph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 25), Register.K1));
		}

		[Fact]
		public void vcmpnge_uqph_kr_xmm_m() {
			TestAssembler(c => c.vcmpnge_uqph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 25), Register.K1));
		}

		[Fact]
		public void vcmpnge_uqph_kr_ymm_m() {
			TestAssembler(c => c.vcmpnge_uqph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 25), Register.K1));
		}

		[Fact]
		public void vcmpnge_uqph_kr_zmm_m() {
			TestAssembler(c => c.vcmpnge_uqph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 25), Register.K1));
		}

		[Fact]
		public void vcmpnge_uqps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpnge_uqps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 25), Register.K1));
		}

		[Fact]
		public void vcmpnge_uqps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpnge_uqps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 25));
		}

		[Fact]
		public void vcmpnge_uqps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpnge_uqps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 25), Register.K1));
		}

		[Fact]
		public void vcmpnge_uqps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpnge_uqps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 25));
		}

		[Fact]
		public void vcmpnge_uqps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpnge_uqps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 25), Register.K1));
		}

		[Fact]
		public void vcmpnge_uqps_kr_xmm_m() {
			TestAssembler(c => c.vcmpnge_uqps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 25), Register.K1));
		}

		[Fact]
		public void vcmpnge_uqps_xmm_xmm_m() {
			TestAssembler(c => c.vcmpnge_uqps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 25));
		}

		[Fact]
		public void vcmpnge_uqps_kr_ymm_m() {
			TestAssembler(c => c.vcmpnge_uqps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 25), Register.K1));
		}

		[Fact]
		public void vcmpnge_uqps_ymm_ymm_m() {
			TestAssembler(c => c.vcmpnge_uqps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 25));
		}

		[Fact]
		public void vcmpnge_uqps_kr_zmm_m() {
			TestAssembler(c => c.vcmpnge_uqps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 25), Register.K1));
		}

		[Fact]
		public void vcmpnge_uqsd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpnge_uqsd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 25), Register.K1));
		}

		[Fact]
		public void vcmpnge_uqsd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpnge_uqsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 25));
		}

		[Fact]
		public void vcmpnge_uqsd_kr_xmm_m() {
			TestAssembler(c => c.vcmpnge_uqsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 25), Register.K1));
		}

		[Fact]
		public void vcmpnge_uqsd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpnge_uqsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 25));
		}

		[Fact]
		public void vcmpnge_uqsh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpnge_uqsh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 25), Register.K1));
		}

		[Fact]
		public void vcmpnge_uqsh_kr_xmm_m() {
			TestAssembler(c => c.vcmpnge_uqsh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 25), Register.K1));
		}

		[Fact]
		public void vcmpnge_uqss_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpnge_uqss(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 25), Register.K1));
		}

		[Fact]
		public void vcmpnge_uqss_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpnge_uqss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 25));
		}

		[Fact]
		public void vcmpnge_uqss_kr_xmm_m() {
			TestAssembler(c => c.vcmpnge_uqss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 25), Register.K1));
		}

		[Fact]
		public void vcmpnge_uqss_xmm_xmm_m() {
			TestAssembler(c => c.vcmpnge_uqss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 25));
		}

		[Fact]
		public void vcmpngepd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpngepd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 9), Register.K1));
		}

		[Fact]
		public void vcmpngepd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpngepd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 9));
		}

		[Fact]
		public void vcmpngepd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpngepd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 9), Register.K1));
		}

		[Fact]
		public void vcmpngepd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpngepd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 9));
		}

		[Fact]
		public void vcmpngepd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpngepd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 9), Register.K1));
		}

		[Fact]
		public void vcmpngepd_kr_xmm_m() {
			TestAssembler(c => c.vcmpngepd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 9), Register.K1));
		}

		[Fact]
		public void vcmpngepd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpngepd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 9));
		}

		[Fact]
		public void vcmpngepd_kr_ymm_m() {
			TestAssembler(c => c.vcmpngepd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 9), Register.K1));
		}

		[Fact]
		public void vcmpngepd_ymm_ymm_m() {
			TestAssembler(c => c.vcmpngepd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 9));
		}

		[Fact]
		public void vcmpngepd_kr_zmm_m() {
			TestAssembler(c => c.vcmpngepd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 9), Register.K1));
		}

		[Fact]
		public void vcmpngeph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpngeph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 9), Register.K1));
		}

		[Fact]
		public void vcmpngeph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpngeph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 9), Register.K1));
		}

		[Fact]
		public void vcmpngeph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpngeph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 9), Register.K1));
		}

		[Fact]
		public void vcmpngeph_kr_xmm_m() {
			TestAssembler(c => c.vcmpngeph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 9), Register.K1));
		}

		[Fact]
		public void vcmpngeph_kr_ymm_m() {
			TestAssembler(c => c.vcmpngeph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 9), Register.K1));
		}

		[Fact]
		public void vcmpngeph_kr_zmm_m() {
			TestAssembler(c => c.vcmpngeph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 9), Register.K1));
		}

		[Fact]
		public void vcmpngeps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpngeps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 9), Register.K1));
		}

		[Fact]
		public void vcmpngeps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpngeps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 9));
		}

		[Fact]
		public void vcmpngeps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpngeps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 9), Register.K1));
		}

		[Fact]
		public void vcmpngeps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpngeps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 9));
		}

		[Fact]
		public void vcmpngeps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpngeps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 9), Register.K1));
		}

		[Fact]
		public void vcmpngeps_kr_xmm_m() {
			TestAssembler(c => c.vcmpngeps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 9), Register.K1));
		}

		[Fact]
		public void vcmpngeps_xmm_xmm_m() {
			TestAssembler(c => c.vcmpngeps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 9));
		}

		[Fact]
		public void vcmpngeps_kr_ymm_m() {
			TestAssembler(c => c.vcmpngeps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 9), Register.K1));
		}

		[Fact]
		public void vcmpngeps_ymm_ymm_m() {
			TestAssembler(c => c.vcmpngeps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 9));
		}

		[Fact]
		public void vcmpngeps_kr_zmm_m() {
			TestAssembler(c => c.vcmpngeps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 9), Register.K1));
		}

		[Fact]
		public void vcmpngesd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpngesd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 9), Register.K1));
		}

		[Fact]
		public void vcmpngesd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpngesd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 9));
		}

		[Fact]
		public void vcmpngesd_kr_xmm_m() {
			TestAssembler(c => c.vcmpngesd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 9), Register.K1));
		}

		[Fact]
		public void vcmpngesd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpngesd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 9));
		}

		[Fact]
		public void vcmpngesh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpngesh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 9), Register.K1));
		}

		[Fact]
		public void vcmpngesh_kr_xmm_m() {
			TestAssembler(c => c.vcmpngesh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 9), Register.K1));
		}

		[Fact]
		public void vcmpngess_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpngess(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 9), Register.K1));
		}

		[Fact]
		public void vcmpngess_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpngess(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 9));
		}

		[Fact]
		public void vcmpngess_kr_xmm_m() {
			TestAssembler(c => c.vcmpngess(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 9), Register.K1));
		}

		[Fact]
		public void vcmpngess_xmm_xmm_m() {
			TestAssembler(c => c.vcmpngess(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 9));
		}

		[Fact]
		public void vcmpngt_uqpd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpngt_uqpd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 26), Register.K1));
		}

		[Fact]
		public void vcmpngt_uqpd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpngt_uqpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 26));
		}

		[Fact]
		public void vcmpngt_uqpd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpngt_uqpd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 26), Register.K1));
		}

		[Fact]
		public void vcmpngt_uqpd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpngt_uqpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 26));
		}

		[Fact]
		public void vcmpngt_uqpd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpngt_uqpd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 26), Register.K1));
		}

		[Fact]
		public void vcmpngt_uqpd_kr_xmm_m() {
			TestAssembler(c => c.vcmpngt_uqpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 26), Register.K1));
		}

		[Fact]
		public void vcmpngt_uqpd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpngt_uqpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 26));
		}

		[Fact]
		public void vcmpngt_uqpd_kr_ymm_m() {
			TestAssembler(c => c.vcmpngt_uqpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 26), Register.K1));
		}

		[Fact]
		public void vcmpngt_uqpd_ymm_ymm_m() {
			TestAssembler(c => c.vcmpngt_uqpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 26));
		}

		[Fact]
		public void vcmpngt_uqpd_kr_zmm_m() {
			TestAssembler(c => c.vcmpngt_uqpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 26), Register.K1));
		}

		[Fact]
		public void vcmpngt_uqph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpngt_uqph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 26), Register.K1));
		}

		[Fact]
		public void vcmpngt_uqph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpngt_uqph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 26), Register.K1));
		}

		[Fact]
		public void vcmpngt_uqph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpngt_uqph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 26), Register.K1));
		}

		[Fact]
		public void vcmpngt_uqph_kr_xmm_m() {
			TestAssembler(c => c.vcmpngt_uqph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 26), Register.K1));
		}

		[Fact]
		public void vcmpngt_uqph_kr_ymm_m() {
			TestAssembler(c => c.vcmpngt_uqph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 26), Register.K1));
		}

		[Fact]
		public void vcmpngt_uqph_kr_zmm_m() {
			TestAssembler(c => c.vcmpngt_uqph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 26), Register.K1));
		}

		[Fact]
		public void vcmpngt_uqps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpngt_uqps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 26), Register.K1));
		}

		[Fact]
		public void vcmpngt_uqps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpngt_uqps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 26));
		}

		[Fact]
		public void vcmpngt_uqps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpngt_uqps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 26), Register.K1));
		}

		[Fact]
		public void vcmpngt_uqps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpngt_uqps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 26));
		}

		[Fact]
		public void vcmpngt_uqps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpngt_uqps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 26), Register.K1));
		}

		[Fact]
		public void vcmpngt_uqps_kr_xmm_m() {
			TestAssembler(c => c.vcmpngt_uqps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 26), Register.K1));
		}

		[Fact]
		public void vcmpngt_uqps_xmm_xmm_m() {
			TestAssembler(c => c.vcmpngt_uqps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 26));
		}

		[Fact]
		public void vcmpngt_uqps_kr_ymm_m() {
			TestAssembler(c => c.vcmpngt_uqps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 26), Register.K1));
		}

		[Fact]
		public void vcmpngt_uqps_ymm_ymm_m() {
			TestAssembler(c => c.vcmpngt_uqps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 26));
		}

		[Fact]
		public void vcmpngt_uqps_kr_zmm_m() {
			TestAssembler(c => c.vcmpngt_uqps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 26), Register.K1));
		}

		[Fact]
		public void vcmpngt_uqsd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpngt_uqsd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 26), Register.K1));
		}

		[Fact]
		public void vcmpngt_uqsd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpngt_uqsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 26));
		}

		[Fact]
		public void vcmpngt_uqsd_kr_xmm_m() {
			TestAssembler(c => c.vcmpngt_uqsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 26), Register.K1));
		}

		[Fact]
		public void vcmpngt_uqsd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpngt_uqsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 26));
		}

		[Fact]
		public void vcmpngt_uqsh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpngt_uqsh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 26), Register.K1));
		}

		[Fact]
		public void vcmpngt_uqsh_kr_xmm_m() {
			TestAssembler(c => c.vcmpngt_uqsh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 26), Register.K1));
		}

		[Fact]
		public void vcmpngt_uqss_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpngt_uqss(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 26), Register.K1));
		}

		[Fact]
		public void vcmpngt_uqss_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpngt_uqss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 26));
		}

		[Fact]
		public void vcmpngt_uqss_kr_xmm_m() {
			TestAssembler(c => c.vcmpngt_uqss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 26), Register.K1));
		}

		[Fact]
		public void vcmpngt_uqss_xmm_xmm_m() {
			TestAssembler(c => c.vcmpngt_uqss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 26));
		}

		[Fact]
		public void vcmpngtpd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpngtpd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 10), Register.K1));
		}

		[Fact]
		public void vcmpngtpd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpngtpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 10));
		}

		[Fact]
		public void vcmpngtpd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpngtpd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 10), Register.K1));
		}

		[Fact]
		public void vcmpngtpd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpngtpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 10));
		}

		[Fact]
		public void vcmpngtpd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpngtpd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 10), Register.K1));
		}

		[Fact]
		public void vcmpngtpd_kr_xmm_m() {
			TestAssembler(c => c.vcmpngtpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 10), Register.K1));
		}

		[Fact]
		public void vcmpngtpd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpngtpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 10));
		}

		[Fact]
		public void vcmpngtpd_kr_ymm_m() {
			TestAssembler(c => c.vcmpngtpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 10), Register.K1));
		}

		[Fact]
		public void vcmpngtpd_ymm_ymm_m() {
			TestAssembler(c => c.vcmpngtpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 10));
		}

		[Fact]
		public void vcmpngtpd_kr_zmm_m() {
			TestAssembler(c => c.vcmpngtpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 10), Register.K1));
		}

		[Fact]
		public void vcmpngtph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpngtph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 10), Register.K1));
		}

		[Fact]
		public void vcmpngtph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpngtph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 10), Register.K1));
		}

		[Fact]
		public void vcmpngtph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpngtph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 10), Register.K1));
		}

		[Fact]
		public void vcmpngtph_kr_xmm_m() {
			TestAssembler(c => c.vcmpngtph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 10), Register.K1));
		}

		[Fact]
		public void vcmpngtph_kr_ymm_m() {
			TestAssembler(c => c.vcmpngtph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 10), Register.K1));
		}

		[Fact]
		public void vcmpngtph_kr_zmm_m() {
			TestAssembler(c => c.vcmpngtph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 10), Register.K1));
		}

		[Fact]
		public void vcmpngtps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpngtps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 10), Register.K1));
		}

		[Fact]
		public void vcmpngtps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpngtps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 10));
		}

		[Fact]
		public void vcmpngtps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpngtps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 10), Register.K1));
		}

		[Fact]
		public void vcmpngtps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpngtps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 10));
		}

		[Fact]
		public void vcmpngtps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpngtps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 10), Register.K1));
		}

		[Fact]
		public void vcmpngtps_kr_xmm_m() {
			TestAssembler(c => c.vcmpngtps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 10), Register.K1));
		}

		[Fact]
		public void vcmpngtps_xmm_xmm_m() {
			TestAssembler(c => c.vcmpngtps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 10));
		}

		[Fact]
		public void vcmpngtps_kr_ymm_m() {
			TestAssembler(c => c.vcmpngtps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 10), Register.K1));
		}

		[Fact]
		public void vcmpngtps_ymm_ymm_m() {
			TestAssembler(c => c.vcmpngtps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 10));
		}

		[Fact]
		public void vcmpngtps_kr_zmm_m() {
			TestAssembler(c => c.vcmpngtps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 10), Register.K1));
		}

		[Fact]
		public void vcmpngtsd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpngtsd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 10), Register.K1));
		}

		[Fact]
		public void vcmpngtsd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpngtsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 10));
		}

		[Fact]
		public void vcmpngtsd_kr_xmm_m() {
			TestAssembler(c => c.vcmpngtsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 10), Register.K1));
		}

		[Fact]
		public void vcmpngtsd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpngtsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 10));
		}

		[Fact]
		public void vcmpngtsh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpngtsh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 10), Register.K1));
		}

		[Fact]
		public void vcmpngtsh_kr_xmm_m() {
			TestAssembler(c => c.vcmpngtsh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 10), Register.K1));
		}

		[Fact]
		public void vcmpngtss_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpngtss(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 10), Register.K1));
		}

		[Fact]
		public void vcmpngtss_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpngtss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 10));
		}

		[Fact]
		public void vcmpngtss_kr_xmm_m() {
			TestAssembler(c => c.vcmpngtss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 10), Register.K1));
		}

		[Fact]
		public void vcmpngtss_xmm_xmm_m() {
			TestAssembler(c => c.vcmpngtss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 10));
		}

		[Fact]
		public void vcmpnle_uqpd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpnle_uqpd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 22), Register.K1));
		}

		[Fact]
		public void vcmpnle_uqpd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpnle_uqpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 22));
		}

		[Fact]
		public void vcmpnle_uqpd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpnle_uqpd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 22), Register.K1));
		}

		[Fact]
		public void vcmpnle_uqpd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpnle_uqpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 22));
		}

		[Fact]
		public void vcmpnle_uqpd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpnle_uqpd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 22), Register.K1));
		}

		[Fact]
		public void vcmpnle_uqpd_kr_xmm_m() {
			TestAssembler(c => c.vcmpnle_uqpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 22), Register.K1));
		}

		[Fact]
		public void vcmpnle_uqpd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpnle_uqpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 22));
		}

		[Fact]
		public void vcmpnle_uqpd_kr_ymm_m() {
			TestAssembler(c => c.vcmpnle_uqpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 22), Register.K1));
		}

		[Fact]
		public void vcmpnle_uqpd_ymm_ymm_m() {
			TestAssembler(c => c.vcmpnle_uqpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 22));
		}

		[Fact]
		public void vcmpnle_uqpd_kr_zmm_m() {
			TestAssembler(c => c.vcmpnle_uqpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 22), Register.K1));
		}

		[Fact]
		public void vcmpnle_uqph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpnle_uqph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 22), Register.K1));
		}

		[Fact]
		public void vcmpnle_uqph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpnle_uqph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 22), Register.K1));
		}

		[Fact]
		public void vcmpnle_uqph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpnle_uqph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 22), Register.K1));
		}

		[Fact]
		public void vcmpnle_uqph_kr_xmm_m() {
			TestAssembler(c => c.vcmpnle_uqph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 22), Register.K1));
		}

		[Fact]
		public void vcmpnle_uqph_kr_ymm_m() {
			TestAssembler(c => c.vcmpnle_uqph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 22), Register.K1));
		}

		[Fact]
		public void vcmpnle_uqph_kr_zmm_m() {
			TestAssembler(c => c.vcmpnle_uqph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 22), Register.K1));
		}

		[Fact]
		public void vcmpnle_uqps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpnle_uqps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 22), Register.K1));
		}

		[Fact]
		public void vcmpnle_uqps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpnle_uqps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 22));
		}

		[Fact]
		public void vcmpnle_uqps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpnle_uqps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 22), Register.K1));
		}

		[Fact]
		public void vcmpnle_uqps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpnle_uqps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 22));
		}

		[Fact]
		public void vcmpnle_uqps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpnle_uqps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 22), Register.K1));
		}

		[Fact]
		public void vcmpnle_uqps_kr_xmm_m() {
			TestAssembler(c => c.vcmpnle_uqps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 22), Register.K1));
		}

		[Fact]
		public void vcmpnle_uqps_xmm_xmm_m() {
			TestAssembler(c => c.vcmpnle_uqps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 22));
		}

		[Fact]
		public void vcmpnle_uqps_kr_ymm_m() {
			TestAssembler(c => c.vcmpnle_uqps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 22), Register.K1));
		}

		[Fact]
		public void vcmpnle_uqps_ymm_ymm_m() {
			TestAssembler(c => c.vcmpnle_uqps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 22));
		}

		[Fact]
		public void vcmpnle_uqps_kr_zmm_m() {
			TestAssembler(c => c.vcmpnle_uqps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 22), Register.K1));
		}

		[Fact]
		public void vcmpnle_uqsd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpnle_uqsd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 22), Register.K1));
		}

		[Fact]
		public void vcmpnle_uqsd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpnle_uqsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 22));
		}

		[Fact]
		public void vcmpnle_uqsd_kr_xmm_m() {
			TestAssembler(c => c.vcmpnle_uqsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 22), Register.K1));
		}

		[Fact]
		public void vcmpnle_uqsd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpnle_uqsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 22));
		}

		[Fact]
		public void vcmpnle_uqsh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpnle_uqsh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 22), Register.K1));
		}

		[Fact]
		public void vcmpnle_uqsh_kr_xmm_m() {
			TestAssembler(c => c.vcmpnle_uqsh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 22), Register.K1));
		}

		[Fact]
		public void vcmpnle_uqss_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpnle_uqss(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 22), Register.K1));
		}

		[Fact]
		public void vcmpnle_uqss_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpnle_uqss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 22));
		}

		[Fact]
		public void vcmpnle_uqss_kr_xmm_m() {
			TestAssembler(c => c.vcmpnle_uqss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 22), Register.K1));
		}

		[Fact]
		public void vcmpnle_uqss_xmm_xmm_m() {
			TestAssembler(c => c.vcmpnle_uqss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 22));
		}

		[Fact]
		public void vcmpnlepd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpnlepd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 6), Register.K1));
		}

		[Fact]
		public void vcmpnlepd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpnlepd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 6));
		}

		[Fact]
		public void vcmpnlepd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpnlepd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 6), Register.K1));
		}

		[Fact]
		public void vcmpnlepd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpnlepd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 6));
		}

		[Fact]
		public void vcmpnlepd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpnlepd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 6), Register.K1));
		}

		[Fact]
		public void vcmpnlepd_kr_xmm_m() {
			TestAssembler(c => c.vcmpnlepd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vcmpnlepd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpnlepd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6));
		}

		[Fact]
		public void vcmpnlepd_kr_ymm_m() {
			TestAssembler(c => c.vcmpnlepd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vcmpnlepd_ymm_ymm_m() {
			TestAssembler(c => c.vcmpnlepd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6));
		}

		[Fact]
		public void vcmpnlepd_kr_zmm_m() {
			TestAssembler(c => c.vcmpnlepd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vcmpnleph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpnleph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 6), Register.K1));
		}

		[Fact]
		public void vcmpnleph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpnleph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 6), Register.K1));
		}

		[Fact]
		public void vcmpnleph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpnleph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 6), Register.K1));
		}

		[Fact]
		public void vcmpnleph_kr_xmm_m() {
			TestAssembler(c => c.vcmpnleph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vcmpnleph_kr_ymm_m() {
			TestAssembler(c => c.vcmpnleph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vcmpnleph_kr_zmm_m() {
			TestAssembler(c => c.vcmpnleph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vcmpnleps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpnleps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 6), Register.K1));
		}

		[Fact]
		public void vcmpnleps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpnleps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 6));
		}

		[Fact]
		public void vcmpnleps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpnleps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 6), Register.K1));
		}

		[Fact]
		public void vcmpnleps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpnleps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 6));
		}

		[Fact]
		public void vcmpnleps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpnleps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 6), Register.K1));
		}

		[Fact]
		public void vcmpnleps_kr_xmm_m() {
			TestAssembler(c => c.vcmpnleps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vcmpnleps_xmm_xmm_m() {
			TestAssembler(c => c.vcmpnleps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6));
		}

		[Fact]
		public void vcmpnleps_kr_ymm_m() {
			TestAssembler(c => c.vcmpnleps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vcmpnleps_ymm_ymm_m() {
			TestAssembler(c => c.vcmpnleps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6));
		}

		[Fact]
		public void vcmpnleps_kr_zmm_m() {
			TestAssembler(c => c.vcmpnleps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vcmpnlesd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpnlesd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 6), Register.K1));
		}

		[Fact]
		public void vcmpnlesd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpnlesd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 6));
		}

		[Fact]
		public void vcmpnlesd_kr_xmm_m() {
			TestAssembler(c => c.vcmpnlesd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vcmpnlesd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpnlesd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6));
		}

		[Fact]
		public void vcmpnlesh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpnlesh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 6), Register.K1));
		}

		[Fact]
		public void vcmpnlesh_kr_xmm_m() {
			TestAssembler(c => c.vcmpnlesh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vcmpnless_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpnless(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 6), Register.K1));
		}

		[Fact]
		public void vcmpnless_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpnless(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 6));
		}

		[Fact]
		public void vcmpnless_kr_xmm_m() {
			TestAssembler(c => c.vcmpnless(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vcmpnless_xmm_xmm_m() {
			TestAssembler(c => c.vcmpnless(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6));
		}

		[Fact]
		public void vcmpnlt_uqpd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpnlt_uqpd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 21), Register.K1));
		}

		[Fact]
		public void vcmpnlt_uqpd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpnlt_uqpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 21));
		}

		[Fact]
		public void vcmpnlt_uqpd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpnlt_uqpd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 21), Register.K1));
		}

		[Fact]
		public void vcmpnlt_uqpd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpnlt_uqpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 21));
		}

		[Fact]
		public void vcmpnlt_uqpd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpnlt_uqpd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 21), Register.K1));
		}

		[Fact]
		public void vcmpnlt_uqpd_kr_xmm_m() {
			TestAssembler(c => c.vcmpnlt_uqpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 21), Register.K1));
		}

		[Fact]
		public void vcmpnlt_uqpd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpnlt_uqpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 21));
		}

		[Fact]
		public void vcmpnlt_uqpd_kr_ymm_m() {
			TestAssembler(c => c.vcmpnlt_uqpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 21), Register.K1));
		}

		[Fact]
		public void vcmpnlt_uqpd_ymm_ymm_m() {
			TestAssembler(c => c.vcmpnlt_uqpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 21));
		}

		[Fact]
		public void vcmpnlt_uqpd_kr_zmm_m() {
			TestAssembler(c => c.vcmpnlt_uqpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 21), Register.K1));
		}

		[Fact]
		public void vcmpnlt_uqph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpnlt_uqph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 21), Register.K1));
		}

		[Fact]
		public void vcmpnlt_uqph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpnlt_uqph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 21), Register.K1));
		}

		[Fact]
		public void vcmpnlt_uqph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpnlt_uqph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 21), Register.K1));
		}

		[Fact]
		public void vcmpnlt_uqph_kr_xmm_m() {
			TestAssembler(c => c.vcmpnlt_uqph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 21), Register.K1));
		}

		[Fact]
		public void vcmpnlt_uqph_kr_ymm_m() {
			TestAssembler(c => c.vcmpnlt_uqph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 21), Register.K1));
		}

		[Fact]
		public void vcmpnlt_uqph_kr_zmm_m() {
			TestAssembler(c => c.vcmpnlt_uqph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 21), Register.K1));
		}

		[Fact]
		public void vcmpnlt_uqps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpnlt_uqps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 21), Register.K1));
		}

		[Fact]
		public void vcmpnlt_uqps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpnlt_uqps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 21));
		}

		[Fact]
		public void vcmpnlt_uqps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpnlt_uqps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 21), Register.K1));
		}

		[Fact]
		public void vcmpnlt_uqps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpnlt_uqps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 21));
		}

		[Fact]
		public void vcmpnlt_uqps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpnlt_uqps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 21), Register.K1));
		}

		[Fact]
		public void vcmpnlt_uqps_kr_xmm_m() {
			TestAssembler(c => c.vcmpnlt_uqps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 21), Register.K1));
		}

		[Fact]
		public void vcmpnlt_uqps_xmm_xmm_m() {
			TestAssembler(c => c.vcmpnlt_uqps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 21));
		}

		[Fact]
		public void vcmpnlt_uqps_kr_ymm_m() {
			TestAssembler(c => c.vcmpnlt_uqps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 21), Register.K1));
		}

		[Fact]
		public void vcmpnlt_uqps_ymm_ymm_m() {
			TestAssembler(c => c.vcmpnlt_uqps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 21));
		}

		[Fact]
		public void vcmpnlt_uqps_kr_zmm_m() {
			TestAssembler(c => c.vcmpnlt_uqps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 21), Register.K1));
		}

		[Fact]
		public void vcmpnlt_uqsd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpnlt_uqsd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 21), Register.K1));
		}

		[Fact]
		public void vcmpnlt_uqsd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpnlt_uqsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 21));
		}

		[Fact]
		public void vcmpnlt_uqsd_kr_xmm_m() {
			TestAssembler(c => c.vcmpnlt_uqsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 21), Register.K1));
		}

		[Fact]
		public void vcmpnlt_uqsd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpnlt_uqsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 21));
		}

		[Fact]
		public void vcmpnlt_uqsh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpnlt_uqsh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 21), Register.K1));
		}

		[Fact]
		public void vcmpnlt_uqsh_kr_xmm_m() {
			TestAssembler(c => c.vcmpnlt_uqsh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 21), Register.K1));
		}

		[Fact]
		public void vcmpnlt_uqss_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpnlt_uqss(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 21), Register.K1));
		}

		[Fact]
		public void vcmpnlt_uqss_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpnlt_uqss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 21));
		}

		[Fact]
		public void vcmpnlt_uqss_kr_xmm_m() {
			TestAssembler(c => c.vcmpnlt_uqss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 21), Register.K1));
		}

		[Fact]
		public void vcmpnlt_uqss_xmm_xmm_m() {
			TestAssembler(c => c.vcmpnlt_uqss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 21));
		}

		[Fact]
		public void vcmpnltpd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpnltpd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 5), Register.K1));
		}

		[Fact]
		public void vcmpnltpd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpnltpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 5));
		}

		[Fact]
		public void vcmpnltpd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpnltpd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 5), Register.K1));
		}

		[Fact]
		public void vcmpnltpd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpnltpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 5));
		}

		[Fact]
		public void vcmpnltpd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpnltpd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 5), Register.K1));
		}

		[Fact]
		public void vcmpnltpd_kr_xmm_m() {
			TestAssembler(c => c.vcmpnltpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vcmpnltpd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpnltpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5));
		}

		[Fact]
		public void vcmpnltpd_kr_ymm_m() {
			TestAssembler(c => c.vcmpnltpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vcmpnltpd_ymm_ymm_m() {
			TestAssembler(c => c.vcmpnltpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5));
		}

		[Fact]
		public void vcmpnltpd_kr_zmm_m() {
			TestAssembler(c => c.vcmpnltpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vcmpnltph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpnltph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 5), Register.K1));
		}

		[Fact]
		public void vcmpnltph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpnltph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 5), Register.K1));
		}

		[Fact]
		public void vcmpnltph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpnltph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 5), Register.K1));
		}

		[Fact]
		public void vcmpnltph_kr_xmm_m() {
			TestAssembler(c => c.vcmpnltph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vcmpnltph_kr_ymm_m() {
			TestAssembler(c => c.vcmpnltph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vcmpnltph_kr_zmm_m() {
			TestAssembler(c => c.vcmpnltph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vcmpnltps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpnltps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 5), Register.K1));
		}

		[Fact]
		public void vcmpnltps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpnltps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 5));
		}

		[Fact]
		public void vcmpnltps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpnltps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 5), Register.K1));
		}

		[Fact]
		public void vcmpnltps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpnltps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 5));
		}

		[Fact]
		public void vcmpnltps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpnltps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 5), Register.K1));
		}

		[Fact]
		public void vcmpnltps_kr_xmm_m() {
			TestAssembler(c => c.vcmpnltps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vcmpnltps_xmm_xmm_m() {
			TestAssembler(c => c.vcmpnltps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5));
		}

		[Fact]
		public void vcmpnltps_kr_ymm_m() {
			TestAssembler(c => c.vcmpnltps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vcmpnltps_ymm_ymm_m() {
			TestAssembler(c => c.vcmpnltps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5));
		}

		[Fact]
		public void vcmpnltps_kr_zmm_m() {
			TestAssembler(c => c.vcmpnltps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vcmpnltsd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpnltsd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 5), Register.K1));
		}

		[Fact]
		public void vcmpnltsd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpnltsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 5));
		}

		[Fact]
		public void vcmpnltsd_kr_xmm_m() {
			TestAssembler(c => c.vcmpnltsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vcmpnltsd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpnltsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5));
		}

		[Fact]
		public void vcmpnltsh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpnltsh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 5), Register.K1));
		}

		[Fact]
		public void vcmpnltsh_kr_xmm_m() {
			TestAssembler(c => c.vcmpnltsh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vcmpnltss_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpnltss(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 5), Register.K1));
		}

		[Fact]
		public void vcmpnltss_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpnltss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 5));
		}

		[Fact]
		public void vcmpnltss_kr_xmm_m() {
			TestAssembler(c => c.vcmpnltss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vcmpnltss_xmm_xmm_m() {
			TestAssembler(c => c.vcmpnltss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5));
		}

		[Fact]
		public void vcmpord_spd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpord_spd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 23), Register.K1));
		}

		[Fact]
		public void vcmpord_spd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpord_spd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 23));
		}

		[Fact]
		public void vcmpord_spd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpord_spd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 23), Register.K1));
		}

		[Fact]
		public void vcmpord_spd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpord_spd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 23));
		}

		[Fact]
		public void vcmpord_spd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpord_spd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 23), Register.K1));
		}

		[Fact]
		public void vcmpord_spd_kr_xmm_m() {
			TestAssembler(c => c.vcmpord_spd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 23), Register.K1));
		}

		[Fact]
		public void vcmpord_spd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpord_spd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 23));
		}

		[Fact]
		public void vcmpord_spd_kr_ymm_m() {
			TestAssembler(c => c.vcmpord_spd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 23), Register.K1));
		}

		[Fact]
		public void vcmpord_spd_ymm_ymm_m() {
			TestAssembler(c => c.vcmpord_spd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 23));
		}

		[Fact]
		public void vcmpord_spd_kr_zmm_m() {
			TestAssembler(c => c.vcmpord_spd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 23), Register.K1));
		}

		[Fact]
		public void vcmpord_sph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpord_sph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 23), Register.K1));
		}

		[Fact]
		public void vcmpord_sph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpord_sph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 23), Register.K1));
		}

		[Fact]
		public void vcmpord_sph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpord_sph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 23), Register.K1));
		}

		[Fact]
		public void vcmpord_sph_kr_xmm_m() {
			TestAssembler(c => c.vcmpord_sph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 23), Register.K1));
		}

		[Fact]
		public void vcmpord_sph_kr_ymm_m() {
			TestAssembler(c => c.vcmpord_sph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 23), Register.K1));
		}

		[Fact]
		public void vcmpord_sph_kr_zmm_m() {
			TestAssembler(c => c.vcmpord_sph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 23), Register.K1));
		}

		[Fact]
		public void vcmpord_sps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpord_sps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 23), Register.K1));
		}

		[Fact]
		public void vcmpord_sps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpord_sps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 23));
		}

		[Fact]
		public void vcmpord_sps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpord_sps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 23), Register.K1));
		}

		[Fact]
		public void vcmpord_sps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpord_sps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 23));
		}

		[Fact]
		public void vcmpord_sps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpord_sps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 23), Register.K1));
		}

		[Fact]
		public void vcmpord_sps_kr_xmm_m() {
			TestAssembler(c => c.vcmpord_sps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 23), Register.K1));
		}

		[Fact]
		public void vcmpord_sps_xmm_xmm_m() {
			TestAssembler(c => c.vcmpord_sps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 23));
		}

		[Fact]
		public void vcmpord_sps_kr_ymm_m() {
			TestAssembler(c => c.vcmpord_sps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 23), Register.K1));
		}

		[Fact]
		public void vcmpord_sps_ymm_ymm_m() {
			TestAssembler(c => c.vcmpord_sps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 23));
		}

		[Fact]
		public void vcmpord_sps_kr_zmm_m() {
			TestAssembler(c => c.vcmpord_sps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 23), Register.K1));
		}

		[Fact]
		public void vcmpord_ssd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpord_ssd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 23), Register.K1));
		}

		[Fact]
		public void vcmpord_ssd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpord_ssd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 23));
		}

		[Fact]
		public void vcmpord_ssd_kr_xmm_m() {
			TestAssembler(c => c.vcmpord_ssd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 23), Register.K1));
		}

		[Fact]
		public void vcmpord_ssd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpord_ssd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 23));
		}

		[Fact]
		public void vcmpord_ssh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpord_ssh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 23), Register.K1));
		}

		[Fact]
		public void vcmpord_ssh_kr_xmm_m() {
			TestAssembler(c => c.vcmpord_ssh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 23), Register.K1));
		}

		[Fact]
		public void vcmpord_sss_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpord_sss(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 23), Register.K1));
		}

		[Fact]
		public void vcmpord_sss_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpord_sss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 23));
		}

		[Fact]
		public void vcmpord_sss_kr_xmm_m() {
			TestAssembler(c => c.vcmpord_sss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 23), Register.K1));
		}

		[Fact]
		public void vcmpord_sss_xmm_xmm_m() {
			TestAssembler(c => c.vcmpord_sss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 23));
		}

		[Fact]
		public void vcmpordpd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpordpd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 7), Register.K1));
		}

		[Fact]
		public void vcmpordpd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpordpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 7));
		}

		[Fact]
		public void vcmpordpd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpordpd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 7), Register.K1));
		}

		[Fact]
		public void vcmpordpd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpordpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 7));
		}

		[Fact]
		public void vcmpordpd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpordpd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 7), Register.K1));
		}

		[Fact]
		public void vcmpordpd_kr_xmm_m() {
			TestAssembler(c => c.vcmpordpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vcmpordpd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpordpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7));
		}

		[Fact]
		public void vcmpordpd_kr_ymm_m() {
			TestAssembler(c => c.vcmpordpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vcmpordpd_ymm_ymm_m() {
			TestAssembler(c => c.vcmpordpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7));
		}

		[Fact]
		public void vcmpordpd_kr_zmm_m() {
			TestAssembler(c => c.vcmpordpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vcmpordph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpordph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 7), Register.K1));
		}

		[Fact]
		public void vcmpordph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpordph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 7), Register.K1));
		}

		[Fact]
		public void vcmpordph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpordph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 7), Register.K1));
		}

		[Fact]
		public void vcmpordph_kr_xmm_m() {
			TestAssembler(c => c.vcmpordph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vcmpordph_kr_ymm_m() {
			TestAssembler(c => c.vcmpordph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vcmpordph_kr_zmm_m() {
			TestAssembler(c => c.vcmpordph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vcmpordps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpordps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 7), Register.K1));
		}

		[Fact]
		public void vcmpordps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpordps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 7));
		}

		[Fact]
		public void vcmpordps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpordps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 7), Register.K1));
		}

		[Fact]
		public void vcmpordps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpordps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 7));
		}

		[Fact]
		public void vcmpordps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpordps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 7), Register.K1));
		}

		[Fact]
		public void vcmpordps_kr_xmm_m() {
			TestAssembler(c => c.vcmpordps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vcmpordps_xmm_xmm_m() {
			TestAssembler(c => c.vcmpordps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7));
		}

		[Fact]
		public void vcmpordps_kr_ymm_m() {
			TestAssembler(c => c.vcmpordps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vcmpordps_ymm_ymm_m() {
			TestAssembler(c => c.vcmpordps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7));
		}

		[Fact]
		public void vcmpordps_kr_zmm_m() {
			TestAssembler(c => c.vcmpordps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vcmpordsd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpordsd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 7), Register.K1));
		}

		[Fact]
		public void vcmpordsd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpordsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 7));
		}

		[Fact]
		public void vcmpordsd_kr_xmm_m() {
			TestAssembler(c => c.vcmpordsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vcmpordsd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpordsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7));
		}

		[Fact]
		public void vcmpordsh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpordsh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 7), Register.K1));
		}

		[Fact]
		public void vcmpordsh_kr_xmm_m() {
			TestAssembler(c => c.vcmpordsh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vcmpordss_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpordss(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 7), Register.K1));
		}

		[Fact]
		public void vcmpordss_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpordss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 7));
		}

		[Fact]
		public void vcmpordss_kr_xmm_m() {
			TestAssembler(c => c.vcmpordss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vcmpordss_xmm_xmm_m() {
			TestAssembler(c => c.vcmpordss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7));
		}

		[Fact]
		public void vcmppd_kr_xmm_xmm_i() {
			TestAssembler(c => c.vcmppd(k2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vcmppd_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vcmppd(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5));
		}

		[Fact]
		public void vcmppd_kr_ymm_ymm_i() {
			TestAssembler(c => c.vcmppd(k2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vcmppd_ymm_ymm_ymm_i() {
			TestAssembler(c => c.vcmppd(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5));
		}

		[Fact]
		public void vcmppd_kr_zmm_zmm_i() {
			TestAssembler(c => c.vcmppd(k2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vcmppd_kr_xmm_m_i() {
			TestAssembler(c => c.vcmppd(k2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vcmppd_xmm_xmm_m_i() {
			TestAssembler(c => c.vcmppd(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vcmppd_kr_ymm_m_i() {
			TestAssembler(c => c.vcmppd(k2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vcmppd_ymm_ymm_m_i() {
			TestAssembler(c => c.vcmppd(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vcmppd_kr_zmm_m_i() {
			TestAssembler(c => c.vcmppd(k2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vcmppd_kr_xmm_xmm_u() {
			TestAssembler(c => c.vcmppd(k2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vcmppd_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vcmppd(xmm2, xmm3, xmm4, (byte)0x7F), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU));
		}

		[Fact]
		public void vcmppd_kr_ymm_ymm_u() {
			TestAssembler(c => c.vcmppd(k2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vcmppd_ymm_ymm_ymm_u() {
			TestAssembler(c => c.vcmppd(ymm2, ymm3, ymm4, (byte)0x7F), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU));
		}

		[Fact]
		public void vcmppd_kr_zmm_zmm_u() {
			TestAssembler(c => c.vcmppd(k2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vcmppd_kr_xmm_m_u() {
			TestAssembler(c => c.vcmppd(k2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vcmppd_xmm_xmm_m_u() {
			TestAssembler(c => c.vcmppd(xmm2, xmm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vcmppd_kr_ymm_m_u() {
			TestAssembler(c => c.vcmppd(k2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vcmppd_ymm_ymm_m_u() {
			TestAssembler(c => c.vcmppd(ymm2, ymm3, __ymmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vcmppd_kr_zmm_m_u() {
			TestAssembler(c => c.vcmppd(k2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vcmpph_kr_xmm_xmm_i() {
			TestAssembler(c => c.vcmpph(k2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vcmpph_kr_ymm_ymm_i() {
			TestAssembler(c => c.vcmpph(k2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vcmpph_kr_zmm_zmm_i() {
			TestAssembler(c => c.vcmpph(k2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vcmpph_kr_xmm_m_i() {
			TestAssembler(c => c.vcmpph(k2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vcmpph_kr_ymm_m_i() {
			TestAssembler(c => c.vcmpph(k2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vcmpph_kr_zmm_m_i() {
			TestAssembler(c => c.vcmpph(k2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vcmpph_kr_xmm_xmm_u() {
			TestAssembler(c => c.vcmpph(k2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vcmpph_kr_ymm_ymm_u() {
			TestAssembler(c => c.vcmpph(k2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vcmpph_kr_zmm_zmm_u() {
			TestAssembler(c => c.vcmpph(k2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vcmpph_kr_xmm_m_u() {
			TestAssembler(c => c.vcmpph(k2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vcmpph_kr_ymm_m_u() {
			TestAssembler(c => c.vcmpph(k2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vcmpph_kr_zmm_m_u() {
			TestAssembler(c => c.vcmpph(k2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vcmpps_kr_xmm_xmm_i() {
			TestAssembler(c => c.vcmpps(k2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vcmpps_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vcmpps(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5));
		}

		[Fact]
		public void vcmpps_kr_ymm_ymm_i() {
			TestAssembler(c => c.vcmpps(k2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vcmpps_ymm_ymm_ymm_i() {
			TestAssembler(c => c.vcmpps(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5));
		}

		[Fact]
		public void vcmpps_kr_zmm_zmm_i() {
			TestAssembler(c => c.vcmpps(k2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vcmpps_kr_xmm_m_i() {
			TestAssembler(c => c.vcmpps(k2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vcmpps_xmm_xmm_m_i() {
			TestAssembler(c => c.vcmpps(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vcmpps_kr_ymm_m_i() {
			TestAssembler(c => c.vcmpps(k2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vcmpps_ymm_ymm_m_i() {
			TestAssembler(c => c.vcmpps(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vcmpps_kr_zmm_m_i() {
			TestAssembler(c => c.vcmpps(k2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vcmpps_kr_xmm_xmm_u() {
			TestAssembler(c => c.vcmpps(k2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vcmpps_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vcmpps(xmm2, xmm3, xmm4, (byte)0x7F), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU));
		}

		[Fact]
		public void vcmpps_kr_ymm_ymm_u() {
			TestAssembler(c => c.vcmpps(k2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vcmpps_ymm_ymm_ymm_u() {
			TestAssembler(c => c.vcmpps(ymm2, ymm3, ymm4, (byte)0x7F), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU));
		}

		[Fact]
		public void vcmpps_kr_zmm_zmm_u() {
			TestAssembler(c => c.vcmpps(k2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vcmpps_kr_xmm_m_u() {
			TestAssembler(c => c.vcmpps(k2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vcmpps_xmm_xmm_m_u() {
			TestAssembler(c => c.vcmpps(xmm2, xmm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vcmpps_kr_ymm_m_u() {
			TestAssembler(c => c.vcmpps(k2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vcmpps_ymm_ymm_m_u() {
			TestAssembler(c => c.vcmpps(ymm2, ymm3, __ymmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vcmpps_kr_zmm_m_u() {
			TestAssembler(c => c.vcmpps(k2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vcmpsd_kr_xmm_xmm_i() {
			TestAssembler(c => c.vcmpsd(k2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vcmpsd_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vcmpsd(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5));
		}

		[Fact]
		public void vcmpsd_kr_xmm_m_i() {
			TestAssembler(c => c.vcmpsd(k2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vcmpsd_xmm_xmm_m_i() {
			TestAssembler(c => c.vcmpsd(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vcmpsd_kr_xmm_xmm_u() {
			TestAssembler(c => c.vcmpsd(k2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vcmpsd_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vcmpsd(xmm2, xmm3, xmm4, (byte)0x7F), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU));
		}

		[Fact]
		public void vcmpsd_kr_xmm_m_u() {
			TestAssembler(c => c.vcmpsd(k2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vcmpsd_xmm_xmm_m_u() {
			TestAssembler(c => c.vcmpsd(xmm2, xmm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vcmpsh_kr_xmm_xmm_i() {
			TestAssembler(c => c.vcmpsh(k2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vcmpsh_kr_xmm_m_i() {
			TestAssembler(c => c.vcmpsh(k2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vcmpsh_kr_xmm_xmm_u() {
			TestAssembler(c => c.vcmpsh(k2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vcmpsh_kr_xmm_m_u() {
			TestAssembler(c => c.vcmpsh(k2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vcmpss_kr_xmm_xmm_i() {
			TestAssembler(c => c.vcmpss(k2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vcmpss_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vcmpss(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5));
		}

		[Fact]
		public void vcmpss_kr_xmm_m_i() {
			TestAssembler(c => c.vcmpss(k2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vcmpss_xmm_xmm_m_i() {
			TestAssembler(c => c.vcmpss(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vcmpss_kr_xmm_xmm_u() {
			TestAssembler(c => c.vcmpss(k2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vcmpss_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vcmpss(xmm2, xmm3, xmm4, (byte)0x7F), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU));
		}

		[Fact]
		public void vcmpss_kr_xmm_m_u() {
			TestAssembler(c => c.vcmpss(k2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vcmpss_xmm_xmm_m_u() {
			TestAssembler(c => c.vcmpss(xmm2, xmm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vcmptrue_uspd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmptrue_uspd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 31), Register.K1));
		}

		[Fact]
		public void vcmptrue_uspd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmptrue_uspd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 31));
		}

		[Fact]
		public void vcmptrue_uspd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmptrue_uspd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 31), Register.K1));
		}

		[Fact]
		public void vcmptrue_uspd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmptrue_uspd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 31));
		}

		[Fact]
		public void vcmptrue_uspd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmptrue_uspd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 31), Register.K1));
		}

		[Fact]
		public void vcmptrue_uspd_kr_xmm_m() {
			TestAssembler(c => c.vcmptrue_uspd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 31), Register.K1));
		}

		[Fact]
		public void vcmptrue_uspd_xmm_xmm_m() {
			TestAssembler(c => c.vcmptrue_uspd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 31));
		}

		[Fact]
		public void vcmptrue_uspd_kr_ymm_m() {
			TestAssembler(c => c.vcmptrue_uspd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 31), Register.K1));
		}

		[Fact]
		public void vcmptrue_uspd_ymm_ymm_m() {
			TestAssembler(c => c.vcmptrue_uspd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 31));
		}

		[Fact]
		public void vcmptrue_uspd_kr_zmm_m() {
			TestAssembler(c => c.vcmptrue_uspd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 31), Register.K1));
		}

		[Fact]
		public void vcmptrue_usph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmptrue_usph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 31), Register.K1));
		}

		[Fact]
		public void vcmptrue_usph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmptrue_usph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 31), Register.K1));
		}

		[Fact]
		public void vcmptrue_usph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmptrue_usph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 31), Register.K1));
		}

		[Fact]
		public void vcmptrue_usph_kr_xmm_m() {
			TestAssembler(c => c.vcmptrue_usph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 31), Register.K1));
		}

		[Fact]
		public void vcmptrue_usph_kr_ymm_m() {
			TestAssembler(c => c.vcmptrue_usph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 31), Register.K1));
		}

		[Fact]
		public void vcmptrue_usph_kr_zmm_m() {
			TestAssembler(c => c.vcmptrue_usph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 31), Register.K1));
		}

		[Fact]
		public void vcmptrue_usps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmptrue_usps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 31), Register.K1));
		}

		[Fact]
		public void vcmptrue_usps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmptrue_usps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 31));
		}

		[Fact]
		public void vcmptrue_usps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmptrue_usps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 31), Register.K1));
		}

		[Fact]
		public void vcmptrue_usps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmptrue_usps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 31));
		}

		[Fact]
		public void vcmptrue_usps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmptrue_usps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 31), Register.K1));
		}

		[Fact]
		public void vcmptrue_usps_kr_xmm_m() {
			TestAssembler(c => c.vcmptrue_usps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 31), Register.K1));
		}

		[Fact]
		public void vcmptrue_usps_xmm_xmm_m() {
			TestAssembler(c => c.vcmptrue_usps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 31));
		}

		[Fact]
		public void vcmptrue_usps_kr_ymm_m() {
			TestAssembler(c => c.vcmptrue_usps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 31), Register.K1));
		}

		[Fact]
		public void vcmptrue_usps_ymm_ymm_m() {
			TestAssembler(c => c.vcmptrue_usps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 31));
		}

		[Fact]
		public void vcmptrue_usps_kr_zmm_m() {
			TestAssembler(c => c.vcmptrue_usps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 31), Register.K1));
		}

		[Fact]
		public void vcmptrue_ussd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmptrue_ussd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 31), Register.K1));
		}

		[Fact]
		public void vcmptrue_ussd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmptrue_ussd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 31));
		}

		[Fact]
		public void vcmptrue_ussd_kr_xmm_m() {
			TestAssembler(c => c.vcmptrue_ussd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 31), Register.K1));
		}

		[Fact]
		public void vcmptrue_ussd_xmm_xmm_m() {
			TestAssembler(c => c.vcmptrue_ussd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 31));
		}

		[Fact]
		public void vcmptrue_ussh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmptrue_ussh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 31), Register.K1));
		}

		[Fact]
		public void vcmptrue_ussh_kr_xmm_m() {
			TestAssembler(c => c.vcmptrue_ussh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 31), Register.K1));
		}

		[Fact]
		public void vcmptrue_usss_kr_xmm_xmm() {
			TestAssembler(c => c.vcmptrue_usss(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 31), Register.K1));
		}

		[Fact]
		public void vcmptrue_usss_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmptrue_usss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 31));
		}

		[Fact]
		public void vcmptrue_usss_kr_xmm_m() {
			TestAssembler(c => c.vcmptrue_usss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 31), Register.K1));
		}

		[Fact]
		public void vcmptrue_usss_xmm_xmm_m() {
			TestAssembler(c => c.vcmptrue_usss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 31));
		}

		[Fact]
		public void vcmptruepd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmptruepd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 15), Register.K1));
		}

		[Fact]
		public void vcmptruepd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmptruepd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 15));
		}

		[Fact]
		public void vcmptruepd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmptruepd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 15), Register.K1));
		}

		[Fact]
		public void vcmptruepd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmptruepd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 15));
		}

		[Fact]
		public void vcmptruepd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmptruepd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 15), Register.K1));
		}

		[Fact]
		public void vcmptruepd_kr_xmm_m() {
			TestAssembler(c => c.vcmptruepd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 15), Register.K1));
		}

		[Fact]
		public void vcmptruepd_xmm_xmm_m() {
			TestAssembler(c => c.vcmptruepd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 15));
		}

		[Fact]
		public void vcmptruepd_kr_ymm_m() {
			TestAssembler(c => c.vcmptruepd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 15), Register.K1));
		}

		[Fact]
		public void vcmptruepd_ymm_ymm_m() {
			TestAssembler(c => c.vcmptruepd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 15));
		}

		[Fact]
		public void vcmptruepd_kr_zmm_m() {
			TestAssembler(c => c.vcmptruepd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 15), Register.K1));
		}

		[Fact]
		public void vcmptrueph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmptrueph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 15), Register.K1));
		}

		[Fact]
		public void vcmptrueph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmptrueph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 15), Register.K1));
		}

		[Fact]
		public void vcmptrueph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmptrueph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 15), Register.K1));
		}

		[Fact]
		public void vcmptrueph_kr_xmm_m() {
			TestAssembler(c => c.vcmptrueph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 15), Register.K1));
		}

		[Fact]
		public void vcmptrueph_kr_ymm_m() {
			TestAssembler(c => c.vcmptrueph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 15), Register.K1));
		}

		[Fact]
		public void vcmptrueph_kr_zmm_m() {
			TestAssembler(c => c.vcmptrueph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 15), Register.K1));
		}

		[Fact]
		public void vcmptrueps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmptrueps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 15), Register.K1));
		}

		[Fact]
		public void vcmptrueps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmptrueps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 15));
		}

		[Fact]
		public void vcmptrueps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmptrueps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 15), Register.K1));
		}

		[Fact]
		public void vcmptrueps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmptrueps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 15));
		}

		[Fact]
		public void vcmptrueps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmptrueps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 15), Register.K1));
		}

		[Fact]
		public void vcmptrueps_kr_xmm_m() {
			TestAssembler(c => c.vcmptrueps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 15), Register.K1));
		}

		[Fact]
		public void vcmptrueps_xmm_xmm_m() {
			TestAssembler(c => c.vcmptrueps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 15));
		}

		[Fact]
		public void vcmptrueps_kr_ymm_m() {
			TestAssembler(c => c.vcmptrueps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 15), Register.K1));
		}

		[Fact]
		public void vcmptrueps_ymm_ymm_m() {
			TestAssembler(c => c.vcmptrueps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 15));
		}

		[Fact]
		public void vcmptrueps_kr_zmm_m() {
			TestAssembler(c => c.vcmptrueps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 15), Register.K1));
		}

		[Fact]
		public void vcmptruesd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmptruesd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 15), Register.K1));
		}

		[Fact]
		public void vcmptruesd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmptruesd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 15));
		}

		[Fact]
		public void vcmptruesd_kr_xmm_m() {
			TestAssembler(c => c.vcmptruesd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 15), Register.K1));
		}

		[Fact]
		public void vcmptruesd_xmm_xmm_m() {
			TestAssembler(c => c.vcmptruesd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 15));
		}

		[Fact]
		public void vcmptruesh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmptruesh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 15), Register.K1));
		}

		[Fact]
		public void vcmptruesh_kr_xmm_m() {
			TestAssembler(c => c.vcmptruesh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 15), Register.K1));
		}

		[Fact]
		public void vcmptruess_kr_xmm_xmm() {
			TestAssembler(c => c.vcmptruess(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 15), Register.K1));
		}

		[Fact]
		public void vcmptruess_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmptruess(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 15));
		}

		[Fact]
		public void vcmptruess_kr_xmm_m() {
			TestAssembler(c => c.vcmptruess(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 15), Register.K1));
		}

		[Fact]
		public void vcmptruess_xmm_xmm_m() {
			TestAssembler(c => c.vcmptruess(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 15));
		}

		[Fact]
		public void vcmpunord_spd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpunord_spd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 19), Register.K1));
		}

		[Fact]
		public void vcmpunord_spd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpunord_spd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 19));
		}

		[Fact]
		public void vcmpunord_spd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpunord_spd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 19), Register.K1));
		}

		[Fact]
		public void vcmpunord_spd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpunord_spd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 19));
		}

		[Fact]
		public void vcmpunord_spd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpunord_spd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 19), Register.K1));
		}

		[Fact]
		public void vcmpunord_spd_kr_xmm_m() {
			TestAssembler(c => c.vcmpunord_spd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 19), Register.K1));
		}

		[Fact]
		public void vcmpunord_spd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpunord_spd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 19));
		}

		[Fact]
		public void vcmpunord_spd_kr_ymm_m() {
			TestAssembler(c => c.vcmpunord_spd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 19), Register.K1));
		}

		[Fact]
		public void vcmpunord_spd_ymm_ymm_m() {
			TestAssembler(c => c.vcmpunord_spd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 19));
		}

		[Fact]
		public void vcmpunord_spd_kr_zmm_m() {
			TestAssembler(c => c.vcmpunord_spd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 19), Register.K1));
		}

		[Fact]
		public void vcmpunord_sph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpunord_sph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 19), Register.K1));
		}

		[Fact]
		public void vcmpunord_sph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpunord_sph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 19), Register.K1));
		}

		[Fact]
		public void vcmpunord_sph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpunord_sph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 19), Register.K1));
		}

		[Fact]
		public void vcmpunord_sph_kr_xmm_m() {
			TestAssembler(c => c.vcmpunord_sph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 19), Register.K1));
		}

		[Fact]
		public void vcmpunord_sph_kr_ymm_m() {
			TestAssembler(c => c.vcmpunord_sph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 19), Register.K1));
		}

		[Fact]
		public void vcmpunord_sph_kr_zmm_m() {
			TestAssembler(c => c.vcmpunord_sph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 19), Register.K1));
		}

		[Fact]
		public void vcmpunord_sps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpunord_sps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 19), Register.K1));
		}

		[Fact]
		public void vcmpunord_sps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpunord_sps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 19));
		}

		[Fact]
		public void vcmpunord_sps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpunord_sps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 19), Register.K1));
		}

		[Fact]
		public void vcmpunord_sps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpunord_sps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 19));
		}

		[Fact]
		public void vcmpunord_sps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpunord_sps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 19), Register.K1));
		}

		[Fact]
		public void vcmpunord_sps_kr_xmm_m() {
			TestAssembler(c => c.vcmpunord_sps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 19), Register.K1));
		}

		[Fact]
		public void vcmpunord_sps_xmm_xmm_m() {
			TestAssembler(c => c.vcmpunord_sps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 19));
		}

		[Fact]
		public void vcmpunord_sps_kr_ymm_m() {
			TestAssembler(c => c.vcmpunord_sps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 19), Register.K1));
		}

		[Fact]
		public void vcmpunord_sps_ymm_ymm_m() {
			TestAssembler(c => c.vcmpunord_sps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 19));
		}

		[Fact]
		public void vcmpunord_sps_kr_zmm_m() {
			TestAssembler(c => c.vcmpunord_sps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 19), Register.K1));
		}

		[Fact]
		public void vcmpunord_ssd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpunord_ssd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 19), Register.K1));
		}

		[Fact]
		public void vcmpunord_ssd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpunord_ssd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 19));
		}

		[Fact]
		public void vcmpunord_ssd_kr_xmm_m() {
			TestAssembler(c => c.vcmpunord_ssd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 19), Register.K1));
		}

		[Fact]
		public void vcmpunord_ssd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpunord_ssd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 19));
		}

		[Fact]
		public void vcmpunord_ssh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpunord_ssh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 19), Register.K1));
		}

		[Fact]
		public void vcmpunord_ssh_kr_xmm_m() {
			TestAssembler(c => c.vcmpunord_ssh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 19), Register.K1));
		}

		[Fact]
		public void vcmpunord_sss_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpunord_sss(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 19), Register.K1));
		}

		[Fact]
		public void vcmpunord_sss_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpunord_sss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 19));
		}

		[Fact]
		public void vcmpunord_sss_kr_xmm_m() {
			TestAssembler(c => c.vcmpunord_sss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 19), Register.K1));
		}

		[Fact]
		public void vcmpunord_sss_xmm_xmm_m() {
			TestAssembler(c => c.vcmpunord_sss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 19));
		}

		[Fact]
		public void vcmpunordpd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpunordpd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 3), Register.K1));
		}

		[Fact]
		public void vcmpunordpd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpunordpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 3));
		}

		[Fact]
		public void vcmpunordpd_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpunordpd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 3), Register.K1));
		}

		[Fact]
		public void vcmpunordpd_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpunordpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 3));
		}

		[Fact]
		public void vcmpunordpd_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpunordpd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 3), Register.K1));
		}

		[Fact]
		public void vcmpunordpd_kr_xmm_m() {
			TestAssembler(c => c.vcmpunordpd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vcmpunordpd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpunordpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3));
		}

		[Fact]
		public void vcmpunordpd_kr_ymm_m() {
			TestAssembler(c => c.vcmpunordpd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vcmpunordpd_ymm_ymm_m() {
			TestAssembler(c => c.vcmpunordpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmppd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3));
		}

		[Fact]
		public void vcmpunordpd_kr_zmm_m() {
			TestAssembler(c => c.vcmpunordpd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmppd_kr_k1_zmm_zmmm512b64_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vcmpunordph_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpunordph(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, Register.XMM4, 3), Register.K1));
		}

		[Fact]
		public void vcmpunordph_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpunordph(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, Register.YMM4, 3), Register.K1));
		}

		[Fact]
		public void vcmpunordph_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpunordph(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 3), Register.K1));
		}

		[Fact]
		public void vcmpunordph_kr_xmm_m() {
			TestAssembler(c => c.vcmpunordph(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_xmm_xmmm128b16_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vcmpunordph_kr_ymm_m() {
			TestAssembler(c => c.vcmpunordph(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_ymm_ymmm256b16_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vcmpunordph_kr_zmm_m() {
			TestAssembler(c => c.vcmpunordph(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpph_kr_k1_zmm_zmmm512b16_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vcmpunordps_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpunordps(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 3), Register.K1));
		}

		[Fact]
		public void vcmpunordps_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpunordps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 3));
		}

		[Fact]
		public void vcmpunordps_kr_ymm_ymm() {
			TestAssembler(c => c.vcmpunordps(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 3), Register.K1));
		}

		[Fact]
		public void vcmpunordps_ymm_ymm_ymm() {
			TestAssembler(c => c.vcmpunordps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 3));
		}

		[Fact]
		public void vcmpunordps_kr_zmm_zmm() {
			TestAssembler(c => c.vcmpunordps(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, Register.ZMM4, 3), Register.K1));
		}

		[Fact]
		public void vcmpunordps_kr_xmm_m() {
			TestAssembler(c => c.vcmpunordps(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vcmpunordps_xmm_xmm_m() {
			TestAssembler(c => c.vcmpunordps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3));
		}

		[Fact]
		public void vcmpunordps_kr_ymm_m() {
			TestAssembler(c => c.vcmpunordps(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vcmpunordps_ymm_ymm_m() {
			TestAssembler(c => c.vcmpunordps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3));
		}

		[Fact]
		public void vcmpunordps_kr_zmm_m() {
			TestAssembler(c => c.vcmpunordps(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpps_kr_k1_zmm_zmmm512b32_imm8_sae, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vcmpunordsd_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpunordsd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 3), Register.K1));
		}

		[Fact]
		public void vcmpunordsd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpunordsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 3));
		}

		[Fact]
		public void vcmpunordsd_kr_xmm_m() {
			TestAssembler(c => c.vcmpunordsd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsd_kr_k1_xmm_xmmm64_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vcmpunordsd_xmm_xmm_m() {
			TestAssembler(c => c.vcmpunordsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3));
		}

		[Fact]
		public void vcmpunordsh_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpunordsh(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 3), Register.K1));
		}

		[Fact]
		public void vcmpunordsh_kr_xmm_m() {
			TestAssembler(c => c.vcmpunordsh(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpsh_kr_k1_xmm_xmmm16_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vcmpunordss_kr_xmm_xmm() {
			TestAssembler(c => c.vcmpunordss(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, Register.XMM4, 3), Register.K1));
		}

		[Fact]
		public void vcmpunordss_xmm_xmm_xmm() {
			TestAssembler(c => c.vcmpunordss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 3));
		}

		[Fact]
		public void vcmpunordss_kr_xmm_m() {
			TestAssembler(c => c.vcmpunordss(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcmpss_kr_k1_xmm_xmmm32_imm8_sae, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vcmpunordss_xmm_xmm_m() {
			TestAssembler(c => c.vcmpunordss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcmpss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3));
		}

		[Fact]
		public void vcomisd_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcomisd(xmm2, xmm3), Instruction.Create(Code.VEX_Vcomisd_xmm_xmmm64, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcomisd(xmm2, xmm3), Instruction.Create(Code.EVEX_Vcomisd_xmm_xmmm64_sae, Register.XMM2, Register.XMM3), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcomisd_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcomisd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcomisd_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcomisd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcomisd_xmm_xmmm64_sae, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcomish_xmm_xmm() {
			TestAssembler(c => c.vcomish(xmm2, xmm3), Instruction.Create(Code.EVEX_Vcomish_xmm_xmmm16_sae, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vcomish_xmm_m() {
			TestAssembler(c => c.vcomish(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcomish_xmm_xmmm16_sae, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vcomiss_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcomiss(xmm2, xmm3), Instruction.Create(Code.VEX_Vcomiss_xmm_xmmm32, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcomiss(xmm2, xmm3), Instruction.Create(Code.EVEX_Vcomiss_xmm_xmmm32_sae, Register.XMM2, Register.XMM3), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcomiss_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcomiss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcomiss_xmm_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcomiss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcomiss_xmm_xmmm32_sae, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcompresspd_xmm_xmm() {
			TestAssembler(c => c.vcompresspd(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcompresspd_xmmm128_k1z_xmm, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcompresspd_m_xmm() {
			TestAssembler(c => c.vcompresspd(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcompresspd_xmmm128_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcompresspd_ymm_ymm() {
			TestAssembler(c => c.vcompresspd(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcompresspd_ymmm256_k1z_ymm, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcompresspd_m_ymm() {
			TestAssembler(c => c.vcompresspd(__ymmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcompresspd_ymmm256_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcompresspd_zmm_zmm() {
			TestAssembler(c => c.vcompresspd(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcompresspd_zmmm512_k1z_zmm, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcompresspd_m_zmm() {
			TestAssembler(c => c.vcompresspd(__zmmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcompresspd_zmmm512_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcompressps_xmm_xmm() {
			TestAssembler(c => c.vcompressps(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcompressps_xmmm128_k1z_xmm, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcompressps_m_xmm() {
			TestAssembler(c => c.vcompressps(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcompressps_xmmm128_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcompressps_ymm_ymm() {
			TestAssembler(c => c.vcompressps(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcompressps_ymmm256_k1z_ymm, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcompressps_m_ymm() {
			TestAssembler(c => c.vcompressps(__ymmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcompressps_ymmm256_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcompressps_zmm_zmm() {
			TestAssembler(c => c.vcompressps(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcompressps_zmmm512_k1z_zmm, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcompressps_m_zmm() {
			TestAssembler(c => c.vcompressps(__zmmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcompressps_zmmm512_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvtdq2pd_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtdq2pd(xmm2, xmm3), Instruction.Create(Code.VEX_Vcvtdq2pd_xmm_xmmm64, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtdq2pd(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtdq2pd_xmm_k1z_xmmm64b32, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtdq2pd_ymm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtdq2pd(ymm2, xmm3), Instruction.Create(Code.VEX_Vcvtdq2pd_ymm_xmmm128, Register.YMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtdq2pd(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtdq2pd_ymm_k1z_xmmm128b32, Register.YMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtdq2pd_zmm_ymm() {
			TestAssembler(c => c.vcvtdq2pd(zmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtdq2pd_zmm_k1z_ymmm256b32_er, Register.ZMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvtdq2pd_xmm_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtdq2pd(xmm2.k1, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtdq2pd_xmm_k1z_xmmm64b32, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtdq2pd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtdq2pd_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtdq2pd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtdq2pd_xmm_k1z_xmmm64b32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtdq2pd_ymm_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtdq2pd(ymm2.k1, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtdq2pd_ymm_k1z_xmmm128b32, Register.YMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtdq2pd(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtdq2pd_ymm_xmmm128, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtdq2pd(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtdq2pd_ymm_k1z_xmmm128b32, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtdq2pd_zmm_m() {
			TestAssembler(c => c.vcvtdq2pd(zmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtdq2pd_zmm_k1z_ymmm256b32_er, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtdq2ph_xmm_xmm() {
			TestAssembler(c => c.vcvtdq2ph(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtdq2ph_xmm_k1z_xmmm128b32, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtdq2ph_xmm_ymm() {
			TestAssembler(c => c.vcvtdq2ph(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtdq2ph_xmm_k1z_ymmm256b32, Register.XMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvtdq2ph_ymm_zmm() {
			TestAssembler(c => c.vcvtdq2ph(ymm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtdq2ph_ymm_k1z_zmmm512b32_er, Register.YMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvtdq2ph_xmm_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtdq2ph(xmm2.k1, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtdq2ph_xmm_k1z_ymmm256b32, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (src.Size == MemoryOperandSize.Yword) */
				TestAssembler(c => c.vcvtdq2ph(xmm2.k1, __ymmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtdq2ph_xmm_k1z_ymmm256b32, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
			} /* else */ { /* if (src.Size == MemoryOperandSize.Xword) */
				TestAssembler(c => c.vcvtdq2ph(xmm2.k1, __xmmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtdq2ph_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.vcvtdq2ph(xmm2.k1, __byte_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtdq2ph_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
				});
			}
		}

		[Fact]
		public void vcvtdq2ph_ymm_m() {
			TestAssembler(c => c.vcvtdq2ph(ymm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtdq2ph_ymm_k1z_zmmm512b32_er, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtdq2phx_xmm_m() {
			TestAssembler(c => c.vcvtdq2phx(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtdq2ph_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtdq2phy_xmm_m() {
			TestAssembler(c => c.vcvtdq2phy(xmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtdq2ph_xmm_k1z_ymmm256b32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtdq2ps_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtdq2ps(xmm2, xmm3), Instruction.Create(Code.VEX_Vcvtdq2ps_xmm_xmmm128, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtdq2ps(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtdq2ps_xmm_k1z_xmmm128b32, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtdq2ps_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtdq2ps(ymm2, ymm3), Instruction.Create(Code.VEX_Vcvtdq2ps_ymm_ymmm256, Register.YMM2, Register.YMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtdq2ps(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtdq2ps_ymm_k1z_ymmm256b32, Register.YMM2, Register.YMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtdq2ps_zmm_zmm() {
			TestAssembler(c => c.vcvtdq2ps(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtdq2ps_zmm_k1z_zmmm512b32_er, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvtdq2ps_xmm_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtdq2ps(xmm2.k1, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtdq2ps_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtdq2ps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtdq2ps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtdq2ps(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtdq2ps_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtdq2ps_ymm_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtdq2ps(ymm2.k1, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtdq2ps_ymm_k1z_ymmm256b32, Register.YMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtdq2ps(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtdq2ps_ymm_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtdq2ps(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtdq2ps_ymm_k1z_ymmm256b32, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtdq2ps_zmm_m() {
			TestAssembler(c => c.vcvtdq2ps(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtdq2ps_zmm_k1z_zmmm512b32_er, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtne2ps2bf16_xmm_xmm_xmm() {
			TestAssembler(c => c.vcvtne2ps2bf16(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcvtne2ps2bf16_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vcvtne2ps2bf16_ymm_ymm_ymm() {
			TestAssembler(c => c.vcvtne2ps2bf16(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vcvtne2ps2bf16_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vcvtne2ps2bf16_zmm_zmm_zmm() {
			TestAssembler(c => c.vcvtne2ps2bf16(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vcvtne2ps2bf16_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vcvtne2ps2bf16_xmm_xmm_m() {
			TestAssembler(c => c.vcvtne2ps2bf16(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtne2ps2bf16_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtne2ps2bf16_ymm_ymm_m() {
			TestAssembler(c => c.vcvtne2ps2bf16(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtne2ps2bf16_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtne2ps2bf16_zmm_zmm_m() {
			TestAssembler(c => c.vcvtne2ps2bf16(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtne2ps2bf16_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtneps2bf16_xmm_xmm() {
			TestAssembler(c => c.vcvtneps2bf16(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtneps2bf16_xmm_k1z_xmmm128b32, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtneps2bf16_xmm_ymm() {
			TestAssembler(c => c.vcvtneps2bf16(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtneps2bf16_xmm_k1z_ymmm256b32, Register.XMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvtneps2bf16_ymm_zmm() {
			TestAssembler(c => c.vcvtneps2bf16(ymm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtneps2bf16_ymm_k1z_zmmm512b32, Register.YMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvtneps2bf16_xmm_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtneps2bf16(xmm2.k1, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtneps2bf16_xmm_k1z_ymmm256b32, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (src.Size == MemoryOperandSize.Yword) */
				TestAssembler(c => c.vcvtneps2bf16(xmm2.k1, __ymmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtneps2bf16_xmm_k1z_ymmm256b32, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
			} /* else */ { /* if (src.Size == MemoryOperandSize.Xword) */
				TestAssembler(c => c.vcvtneps2bf16(xmm2.k1, __xmmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtneps2bf16_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.vcvtneps2bf16(xmm2.k1, __byte_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtneps2bf16_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
				});
			}
		}

		[Fact]
		public void vcvtneps2bf16_ymm_m() {
			TestAssembler(c => c.vcvtneps2bf16(ymm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtneps2bf16_ymm_k1z_zmmm512b32, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtneps2bf16x_xmm_m() {
			TestAssembler(c => c.vcvtneps2bf16x(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtneps2bf16_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtneps2bf16y_xmm_m() {
			TestAssembler(c => c.vcvtneps2bf16y(xmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtneps2bf16_xmm_k1z_ymmm256b32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtpd2dq_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtpd2dq(xmm2, xmm3), Instruction.Create(Code.VEX_Vcvtpd2dq_xmm_xmmm128, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtpd2dq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2dq_xmm_k1z_xmmm128b64, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtpd2dq_xmm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtpd2dq(xmm2, ymm3), Instruction.Create(Code.VEX_Vcvtpd2dq_xmm_ymmm256, Register.XMM2, Register.YMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtpd2dq(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2dq_xmm_k1z_ymmm256b64, Register.XMM2, Register.YMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtpd2dq_ymm_zmm() {
			TestAssembler(c => c.vcvtpd2dq(ymm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2dq_ymm_k1z_zmmm512b64_er, Register.YMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvtpd2dq_xmm_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtpd2dq(xmm2.k1, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2dq_xmm_k1z_ymmm256b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (src.Size == MemoryOperandSize.Yword) */
				{ /* if (InstructionPreferVex) */
					TestAssembler(c => c.vcvtpd2dq(xmm2, __ymmword_ptr[rdx]), Instruction.Create(Code.VEX_Vcvtpd2dq_xmm_ymmm256, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
				} /* else */ TestAssembler(c => c.vcvtpd2dq(xmm2.k1, __ymmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2dq_xmm_k1z_ymmm256b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
			} /* else */ { /* if (src.Size == MemoryOperandSize.Xword) */
				{ /* if (InstructionPreferVex) */
					TestAssembler(c => c.vcvtpd2dq(xmm2, __xmmword_ptr[rdx]), Instruction.Create(Code.VEX_Vcvtpd2dq_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
				} /* else */ TestAssembler(c => c.vcvtpd2dq(xmm2.k1, __xmmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2dq_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
			}
			{
				AssertInvalid(() => {
					{ /* if (InstructionPreferVex) */
						TestAssembler(c => c.vcvtpd2dq(xmm2, __byte_ptr[rdx]), Instruction.Create(Code.VEX_Vcvtpd2dq_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
					} /* else */ TestAssembler(c => c.vcvtpd2dq(xmm2.k1, __byte_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2dq_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
				});
			}
		}

		[Fact]
		public void vcvtpd2dq_ymm_m() {
			TestAssembler(c => c.vcvtpd2dq(ymm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2dq_ymm_k1z_zmmm512b64_er, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtpd2dqx_xmm_m() {
			TestAssembler(c => c.vcvtpd2dqx(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2dq_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtpd2dqy_xmm_m() {
			TestAssembler(c => c.vcvtpd2dqy(xmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2dq_xmm_k1z_ymmm256b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtpd2ph_xmm_xmm() {
			TestAssembler(c => c.vcvtpd2ph(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2ph_xmm_k1z_xmmm128b64, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtpd2ph_xmm_ymm() {
			TestAssembler(c => c.vcvtpd2ph(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2ph_xmm_k1z_ymmm256b64, Register.XMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvtpd2ph_xmm_zmm() {
			TestAssembler(c => c.vcvtpd2ph(xmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2ph_xmm_k1z_zmmm512b64_er, Register.XMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvtpd2ph_xmm_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtpd2ph(xmm2.k1, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2ph_xmm_k1z_zmmm512b64_er, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (src.Size == MemoryOperandSize.Zword) */
				TestAssembler(c => c.vcvtpd2ph(xmm2.k1, __zmmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2ph_xmm_k1z_zmmm512b64_er, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
			} /* else */ { /* if (src.Size == MemoryOperandSize.Yword) */
				TestAssembler(c => c.vcvtpd2ph(xmm2.k1, __ymmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2ph_xmm_k1z_ymmm256b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
			} /* else */ { /* if (src.Size == MemoryOperandSize.Xword) */
				TestAssembler(c => c.vcvtpd2ph(xmm2.k1, __xmmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2ph_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.vcvtpd2ph(xmm2.k1, __byte_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2ph_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
				});
			}
		}

		[Fact]
		public void vcvtpd2phx_xmm_m() {
			TestAssembler(c => c.vcvtpd2phx(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2ph_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtpd2phy_xmm_m() {
			TestAssembler(c => c.vcvtpd2phy(xmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2ph_xmm_k1z_ymmm256b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtpd2phz_xmm_m() {
			TestAssembler(c => c.vcvtpd2phz(xmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2ph_xmm_k1z_zmmm512b64_er, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtpd2ps_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtpd2ps(xmm2, xmm3), Instruction.Create(Code.VEX_Vcvtpd2ps_xmm_xmmm128, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtpd2ps(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2ps_xmm_k1z_xmmm128b64, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtpd2ps_xmm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtpd2ps(xmm2, ymm3), Instruction.Create(Code.VEX_Vcvtpd2ps_xmm_ymmm256, Register.XMM2, Register.YMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtpd2ps(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2ps_xmm_k1z_ymmm256b64, Register.XMM2, Register.YMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtpd2ps_ymm_zmm() {
			TestAssembler(c => c.vcvtpd2ps(ymm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2ps_ymm_k1z_zmmm512b64_er, Register.YMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvtpd2ps_xmm_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtpd2ps(xmm2.k1, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2ps_xmm_k1z_ymmm256b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (src.Size == MemoryOperandSize.Yword) */
				{ /* if (InstructionPreferVex) */
					TestAssembler(c => c.vcvtpd2ps(xmm2, __ymmword_ptr[rdx]), Instruction.Create(Code.VEX_Vcvtpd2ps_xmm_ymmm256, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
				} /* else */ TestAssembler(c => c.vcvtpd2ps(xmm2.k1, __ymmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2ps_xmm_k1z_ymmm256b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
			} /* else */ { /* if (src.Size == MemoryOperandSize.Xword) */
				{ /* if (InstructionPreferVex) */
					TestAssembler(c => c.vcvtpd2ps(xmm2, __xmmword_ptr[rdx]), Instruction.Create(Code.VEX_Vcvtpd2ps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
				} /* else */ TestAssembler(c => c.vcvtpd2ps(xmm2.k1, __xmmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2ps_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
			}
			{
				AssertInvalid(() => {
					{ /* if (InstructionPreferVex) */
						TestAssembler(c => c.vcvtpd2ps(xmm2, __byte_ptr[rdx]), Instruction.Create(Code.VEX_Vcvtpd2ps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
					} /* else */ TestAssembler(c => c.vcvtpd2ps(xmm2.k1, __byte_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2ps_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
				});
			}
		}

		[Fact]
		public void vcvtpd2ps_ymm_m() {
			TestAssembler(c => c.vcvtpd2ps(ymm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2ps_ymm_k1z_zmmm512b64_er, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtpd2psx_xmm_m() {
			TestAssembler(c => c.vcvtpd2psx(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2ps_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtpd2psy_xmm_m() {
			TestAssembler(c => c.vcvtpd2psy(xmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2ps_xmm_k1z_ymmm256b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtpd2qq_xmm_xmm() {
			TestAssembler(c => c.vcvtpd2qq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2qq_xmm_k1z_xmmm128b64, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtpd2qq_ymm_ymm() {
			TestAssembler(c => c.vcvtpd2qq(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2qq_ymm_k1z_ymmm256b64, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvtpd2qq_zmm_zmm() {
			TestAssembler(c => c.vcvtpd2qq(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2qq_zmm_k1z_zmmm512b64_er, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvtpd2qq_xmm_m() {
			TestAssembler(c => c.vcvtpd2qq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2qq_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtpd2qq_ymm_m() {
			TestAssembler(c => c.vcvtpd2qq(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2qq_ymm_k1z_ymmm256b64, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtpd2qq_zmm_m() {
			TestAssembler(c => c.vcvtpd2qq(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2qq_zmm_k1z_zmmm512b64_er, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtpd2udq_xmm_xmm() {
			TestAssembler(c => c.vcvtpd2udq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2udq_xmm_k1z_xmmm128b64, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtpd2udq_xmm_ymm() {
			TestAssembler(c => c.vcvtpd2udq(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2udq_xmm_k1z_ymmm256b64, Register.XMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvtpd2udq_ymm_zmm() {
			TestAssembler(c => c.vcvtpd2udq(ymm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2udq_ymm_k1z_zmmm512b64_er, Register.YMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvtpd2udq_xmm_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtpd2udq(xmm2.k1, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2udq_xmm_k1z_ymmm256b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (src.Size == MemoryOperandSize.Yword) */
				TestAssembler(c => c.vcvtpd2udq(xmm2.k1, __ymmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2udq_xmm_k1z_ymmm256b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
			} /* else */ { /* if (src.Size == MemoryOperandSize.Xword) */
				TestAssembler(c => c.vcvtpd2udq(xmm2.k1, __xmmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2udq_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.vcvtpd2udq(xmm2.k1, __byte_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2udq_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
				});
			}
		}

		[Fact]
		public void vcvtpd2udq_ymm_m() {
			TestAssembler(c => c.vcvtpd2udq(ymm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2udq_ymm_k1z_zmmm512b64_er, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtpd2udqx_xmm_m() {
			TestAssembler(c => c.vcvtpd2udqx(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2udq_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtpd2udqy_xmm_m() {
			TestAssembler(c => c.vcvtpd2udqy(xmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2udq_xmm_k1z_ymmm256b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtpd2uqq_xmm_xmm() {
			TestAssembler(c => c.vcvtpd2uqq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2uqq_xmm_k1z_xmmm128b64, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtpd2uqq_ymm_ymm() {
			TestAssembler(c => c.vcvtpd2uqq(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2uqq_ymm_k1z_ymmm256b64, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvtpd2uqq_zmm_zmm() {
			TestAssembler(c => c.vcvtpd2uqq(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2uqq_zmm_k1z_zmmm512b64_er, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvtpd2uqq_xmm_m() {
			TestAssembler(c => c.vcvtpd2uqq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2uqq_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtpd2uqq_ymm_m() {
			TestAssembler(c => c.vcvtpd2uqq(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2uqq_ymm_k1z_ymmm256b64, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtpd2uqq_zmm_m() {
			TestAssembler(c => c.vcvtpd2uqq(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtpd2uqq_zmm_k1z_zmmm512b64_er, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtph2dq_xmm_xmm() {
			TestAssembler(c => c.vcvtph2dq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2dq_xmm_k1z_xmmm64b16, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtph2dq_ymm_xmm() {
			TestAssembler(c => c.vcvtph2dq(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2dq_ymm_k1z_xmmm128b16, Register.YMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtph2dq_zmm_ymm() {
			TestAssembler(c => c.vcvtph2dq(zmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2dq_zmm_k1z_ymmm256b16_er, Register.ZMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvtph2dq_xmm_m() {
			TestAssembler(c => c.vcvtph2dq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2dq_xmm_k1z_xmmm64b16, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtph2dq_ymm_m() {
			TestAssembler(c => c.vcvtph2dq(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2dq_ymm_k1z_xmmm128b16, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtph2dq_zmm_m() {
			TestAssembler(c => c.vcvtph2dq(zmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2dq_zmm_k1z_ymmm256b16_er, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtph2pd_xmm_xmm() {
			TestAssembler(c => c.vcvtph2pd(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2pd_xmm_k1z_xmmm32b16, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtph2pd_ymm_xmm() {
			TestAssembler(c => c.vcvtph2pd(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2pd_ymm_k1z_xmmm64b16, Register.YMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtph2pd_zmm_xmm() {
			TestAssembler(c => c.vcvtph2pd(zmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2pd_zmm_k1z_xmmm128b16_sae, Register.ZMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtph2pd_xmm_m() {
			TestAssembler(c => c.vcvtph2pd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2pd_xmm_k1z_xmmm32b16, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtph2pd_ymm_m() {
			TestAssembler(c => c.vcvtph2pd(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2pd_ymm_k1z_xmmm64b16, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtph2pd_zmm_m() {
			TestAssembler(c => c.vcvtph2pd(zmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2pd_zmm_k1z_xmmm128b16_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtph2ps_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtph2ps(xmm2, xmm3), Instruction.Create(Code.VEX_Vcvtph2ps_xmm_xmmm64, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtph2ps(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2ps_xmm_k1z_xmmm64, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtph2ps_ymm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtph2ps(ymm2, xmm3), Instruction.Create(Code.VEX_Vcvtph2ps_ymm_xmmm128, Register.YMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtph2ps(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2ps_ymm_k1z_xmmm128, Register.YMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtph2ps_zmm_ymm() {
			TestAssembler(c => c.vcvtph2ps(zmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2ps_zmm_k1z_ymmm256_sae, Register.ZMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvtph2ps_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtph2ps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtph2ps_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtph2ps(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2ps_xmm_k1z_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtph2ps_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtph2ps(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtph2ps_ymm_xmmm128, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtph2ps(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2ps_ymm_k1z_xmmm128, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtph2ps_zmm_m() {
			TestAssembler(c => c.vcvtph2ps(zmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2ps_zmm_k1z_ymmm256_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtph2psx_xmm_xmm() {
			TestAssembler(c => c.vcvtph2psx(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2psx_xmm_k1z_xmmm64b16, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtph2psx_ymm_xmm() {
			TestAssembler(c => c.vcvtph2psx(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2psx_ymm_k1z_xmmm128b16, Register.YMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtph2psx_zmm_ymm() {
			TestAssembler(c => c.vcvtph2psx(zmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2psx_zmm_k1z_ymmm256b16_sae, Register.ZMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvtph2psx_xmm_m() {
			TestAssembler(c => c.vcvtph2psx(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2psx_xmm_k1z_xmmm64b16, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtph2psx_ymm_m() {
			TestAssembler(c => c.vcvtph2psx(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2psx_ymm_k1z_xmmm128b16, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtph2psx_zmm_m() {
			TestAssembler(c => c.vcvtph2psx(zmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2psx_zmm_k1z_ymmm256b16_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtph2qq_xmm_xmm() {
			TestAssembler(c => c.vcvtph2qq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2qq_xmm_k1z_xmmm32b16, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtph2qq_ymm_xmm() {
			TestAssembler(c => c.vcvtph2qq(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2qq_ymm_k1z_xmmm64b16, Register.YMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtph2qq_zmm_xmm() {
			TestAssembler(c => c.vcvtph2qq(zmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2qq_zmm_k1z_xmmm128b16_er, Register.ZMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtph2qq_xmm_m() {
			TestAssembler(c => c.vcvtph2qq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2qq_xmm_k1z_xmmm32b16, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtph2qq_ymm_m() {
			TestAssembler(c => c.vcvtph2qq(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2qq_ymm_k1z_xmmm64b16, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtph2qq_zmm_m() {
			TestAssembler(c => c.vcvtph2qq(zmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2qq_zmm_k1z_xmmm128b16_er, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtph2udq_xmm_xmm() {
			TestAssembler(c => c.vcvtph2udq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2udq_xmm_k1z_xmmm64b16, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtph2udq_ymm_xmm() {
			TestAssembler(c => c.vcvtph2udq(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2udq_ymm_k1z_xmmm128b16, Register.YMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtph2udq_zmm_ymm() {
			TestAssembler(c => c.vcvtph2udq(zmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2udq_zmm_k1z_ymmm256b16_er, Register.ZMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvtph2udq_xmm_m() {
			TestAssembler(c => c.vcvtph2udq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2udq_xmm_k1z_xmmm64b16, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtph2udq_ymm_m() {
			TestAssembler(c => c.vcvtph2udq(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2udq_ymm_k1z_xmmm128b16, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtph2udq_zmm_m() {
			TestAssembler(c => c.vcvtph2udq(zmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2udq_zmm_k1z_ymmm256b16_er, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtph2uqq_xmm_xmm() {
			TestAssembler(c => c.vcvtph2uqq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2uqq_xmm_k1z_xmmm32b16, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtph2uqq_ymm_xmm() {
			TestAssembler(c => c.vcvtph2uqq(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2uqq_ymm_k1z_xmmm64b16, Register.YMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtph2uqq_zmm_xmm() {
			TestAssembler(c => c.vcvtph2uqq(zmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2uqq_zmm_k1z_xmmm128b16_er, Register.ZMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtph2uqq_xmm_m() {
			TestAssembler(c => c.vcvtph2uqq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2uqq_xmm_k1z_xmmm32b16, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtph2uqq_ymm_m() {
			TestAssembler(c => c.vcvtph2uqq(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2uqq_ymm_k1z_xmmm64b16, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtph2uqq_zmm_m() {
			TestAssembler(c => c.vcvtph2uqq(zmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2uqq_zmm_k1z_xmmm128b16_er, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtph2uw_xmm_xmm() {
			TestAssembler(c => c.vcvtph2uw(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2uw_xmm_k1z_xmmm128b16, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtph2uw_ymm_ymm() {
			TestAssembler(c => c.vcvtph2uw(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2uw_ymm_k1z_ymmm256b16, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvtph2uw_zmm_zmm() {
			TestAssembler(c => c.vcvtph2uw(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2uw_zmm_k1z_zmmm512b16_er, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvtph2uw_xmm_m() {
			TestAssembler(c => c.vcvtph2uw(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2uw_xmm_k1z_xmmm128b16, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtph2uw_ymm_m() {
			TestAssembler(c => c.vcvtph2uw(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2uw_ymm_k1z_ymmm256b16, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtph2uw_zmm_m() {
			TestAssembler(c => c.vcvtph2uw(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2uw_zmm_k1z_zmmm512b16_er, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtph2w_xmm_xmm() {
			TestAssembler(c => c.vcvtph2w(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2w_xmm_k1z_xmmm128b16, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtph2w_ymm_ymm() {
			TestAssembler(c => c.vcvtph2w(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2w_ymm_k1z_ymmm256b16, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvtph2w_zmm_zmm() {
			TestAssembler(c => c.vcvtph2w(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2w_zmm_k1z_zmmm512b16_er, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvtph2w_xmm_m() {
			TestAssembler(c => c.vcvtph2w(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2w_xmm_k1z_xmmm128b16, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtph2w_ymm_m() {
			TestAssembler(c => c.vcvtph2w(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2w_ymm_k1z_ymmm256b16, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtph2w_zmm_m() {
			TestAssembler(c => c.vcvtph2w(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtph2w_zmm_k1z_zmmm512b16_er, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtps2dq_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtps2dq(xmm2, xmm3), Instruction.Create(Code.VEX_Vcvtps2dq_xmm_xmmm128, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2dq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2dq_xmm_k1z_xmmm128b32, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtps2dq_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtps2dq(ymm2, ymm3), Instruction.Create(Code.VEX_Vcvtps2dq_ymm_ymmm256, Register.YMM2, Register.YMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2dq(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2dq_ymm_k1z_ymmm256b32, Register.YMM2, Register.YMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtps2dq_zmm_zmm() {
			TestAssembler(c => c.vcvtps2dq(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2dq_zmm_k1z_zmmm512b32_er, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvtps2dq_xmm_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtps2dq(xmm2.k1, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2dq_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtps2dq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtps2dq_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2dq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2dq_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtps2dq_ymm_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtps2dq(ymm2.k1, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2dq_ymm_k1z_ymmm256b32, Register.YMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtps2dq(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtps2dq_ymm_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2dq(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2dq_ymm_k1z_ymmm256b32, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtps2dq_zmm_m() {
			TestAssembler(c => c.vcvtps2dq(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2dq_zmm_k1z_zmmm512b32_er, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtps2pd_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtps2pd(xmm2, xmm3), Instruction.Create(Code.VEX_Vcvtps2pd_xmm_xmmm64, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2pd(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2pd_xmm_k1z_xmmm64b32, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtps2pd_ymm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtps2pd(ymm2, xmm3), Instruction.Create(Code.VEX_Vcvtps2pd_ymm_xmmm128, Register.YMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2pd(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2pd_ymm_k1z_xmmm128b32, Register.YMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtps2pd_zmm_ymm() {
			TestAssembler(c => c.vcvtps2pd(zmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2pd_zmm_k1z_ymmm256b32_sae, Register.ZMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvtps2pd_xmm_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtps2pd(xmm2.k1, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2pd_xmm_k1z_xmmm64b32, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtps2pd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtps2pd_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2pd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2pd_xmm_k1z_xmmm64b32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtps2pd_ymm_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtps2pd(ymm2.k1, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2pd_ymm_k1z_xmmm128b32, Register.YMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtps2pd(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtps2pd_ymm_xmmm128, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2pd(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2pd_ymm_k1z_xmmm128b32, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtps2pd_zmm_m() {
			TestAssembler(c => c.vcvtps2pd(zmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2pd_zmm_k1z_ymmm256b32_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtps2ph_xmm_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtps2ph(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vcvtps2ph_xmmm64_xmm_imm8, Register.XMM2, Register.XMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2ph(xmm2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2ph_xmmm64_k1z_xmm_imm8, Register.XMM2, Register.XMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtps2ph_m_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtps2ph(__xmmword_ptr[rcx], xmm3, -5), Instruction.Create(Code.VEX_Vcvtps2ph_xmmm64_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2ph(__xmmword_ptr[rcx].k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2ph_xmmm64_k1z_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtps2ph_xmm_ymm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtps2ph(xmm2, ymm3, -5), Instruction.Create(Code.VEX_Vcvtps2ph_xmmm128_ymm_imm8, Register.XMM2, Register.YMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2ph(xmm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2ph_xmmm128_k1z_ymm_imm8, Register.XMM2, Register.YMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtps2ph_m_ymm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtps2ph(__xmmword_ptr[rcx], ymm3, -5), Instruction.Create(Code.VEX_Vcvtps2ph_xmmm128_ymm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2ph(__xmmword_ptr[rcx].k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2ph_xmmm128_k1z_ymm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtps2ph_ymm_zmm_i() {
			TestAssembler(c => c.vcvtps2ph(ymm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2ph_ymmm256_k1z_zmm_imm8_sae, Register.YMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vcvtps2ph_m_zmm_i() {
			TestAssembler(c => c.vcvtps2ph(__ymmword_ptr[rcx].k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2ph_ymmm256_k1z_zmm_imm8_sae, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vcvtps2ph_xmm_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtps2ph(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vcvtps2ph_xmmm64_xmm_imm8, Register.XMM2, Register.XMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2ph(xmm2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2ph_xmmm64_k1z_xmm_imm8, Register.XMM2, Register.XMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtps2ph_m_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtps2ph(__xmmword_ptr[rcx], xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vcvtps2ph_xmmm64_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2ph(__xmmword_ptr[rcx].k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2ph_xmmm64_k1z_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtps2ph_xmm_ymm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtps2ph(xmm2, ymm3, (byte)0x7F), Instruction.Create(Code.VEX_Vcvtps2ph_xmmm128_ymm_imm8, Register.XMM2, Register.YMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2ph(xmm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2ph_xmmm128_k1z_ymm_imm8, Register.XMM2, Register.YMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtps2ph_m_ymm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtps2ph(__xmmword_ptr[rcx], ymm3, (byte)0x7F), Instruction.Create(Code.VEX_Vcvtps2ph_xmmm128_ymm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtps2ph(__xmmword_ptr[rcx].k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2ph_xmmm128_k1z_ymm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtps2ph_ymm_zmm_u() {
			TestAssembler(c => c.vcvtps2ph(ymm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2ph_ymmm256_k1z_zmm_imm8_sae, Register.YMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vcvtps2ph_m_zmm_u() {
			TestAssembler(c => c.vcvtps2ph(__ymmword_ptr[rcx].k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2ph_ymmm256_k1z_zmm_imm8_sae, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vcvtps2phx_xmm_xmm() {
			TestAssembler(c => c.vcvtps2phx(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2phx_xmm_k1z_xmmm128b32, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtps2phx_xmm_ymm() {
			TestAssembler(c => c.vcvtps2phx(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2phx_xmm_k1z_ymmm256b32, Register.XMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvtps2phx_ymm_zmm() {
			TestAssembler(c => c.vcvtps2phx(ymm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2phx_ymm_k1z_zmmm512b32_er, Register.YMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvtps2phx_xmm_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtps2phx(xmm2.k1, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2phx_xmm_k1z_ymmm256b32, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (src.Size == MemoryOperandSize.Yword) */
				TestAssembler(c => c.vcvtps2phx(xmm2.k1, __ymmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2phx_xmm_k1z_ymmm256b32, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
			} /* else */ { /* if (src.Size == MemoryOperandSize.Xword) */
				TestAssembler(c => c.vcvtps2phx(xmm2.k1, __xmmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2phx_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.vcvtps2phx(xmm2.k1, __byte_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2phx_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
				});
			}
		}

		[Fact]
		public void vcvtps2phx_ymm_m() {
			TestAssembler(c => c.vcvtps2phx(ymm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2phx_ymm_k1z_zmmm512b32_er, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtps2phxx_xmm_m() {
			TestAssembler(c => c.vcvtps2phxx(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2phx_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtps2phxy_xmm_m() {
			TestAssembler(c => c.vcvtps2phxy(xmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2phx_xmm_k1z_ymmm256b32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtps2qq_xmm_xmm() {
			TestAssembler(c => c.vcvtps2qq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2qq_xmm_k1z_xmmm64b32, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtps2qq_ymm_xmm() {
			TestAssembler(c => c.vcvtps2qq(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2qq_ymm_k1z_xmmm128b32, Register.YMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtps2qq_zmm_ymm() {
			TestAssembler(c => c.vcvtps2qq(zmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2qq_zmm_k1z_ymmm256b32_er, Register.ZMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvtps2qq_xmm_m() {
			TestAssembler(c => c.vcvtps2qq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2qq_xmm_k1z_xmmm64b32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtps2qq_ymm_m() {
			TestAssembler(c => c.vcvtps2qq(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2qq_ymm_k1z_xmmm128b32, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtps2qq_zmm_m() {
			TestAssembler(c => c.vcvtps2qq(zmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2qq_zmm_k1z_ymmm256b32_er, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtps2udq_xmm_xmm() {
			TestAssembler(c => c.vcvtps2udq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2udq_xmm_k1z_xmmm128b32, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtps2udq_ymm_ymm() {
			TestAssembler(c => c.vcvtps2udq(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2udq_ymm_k1z_ymmm256b32, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvtps2udq_zmm_zmm() {
			TestAssembler(c => c.vcvtps2udq(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2udq_zmm_k1z_zmmm512b32_er, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvtps2udq_xmm_m() {
			TestAssembler(c => c.vcvtps2udq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2udq_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtps2udq_ymm_m() {
			TestAssembler(c => c.vcvtps2udq(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2udq_ymm_k1z_ymmm256b32, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtps2udq_zmm_m() {
			TestAssembler(c => c.vcvtps2udq(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2udq_zmm_k1z_zmmm512b32_er, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtps2uqq_xmm_xmm() {
			TestAssembler(c => c.vcvtps2uqq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2uqq_xmm_k1z_xmmm64b32, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtps2uqq_ymm_xmm() {
			TestAssembler(c => c.vcvtps2uqq(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2uqq_ymm_k1z_xmmm128b32, Register.YMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtps2uqq_zmm_ymm() {
			TestAssembler(c => c.vcvtps2uqq(zmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2uqq_zmm_k1z_ymmm256b32_er, Register.ZMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvtps2uqq_xmm_m() {
			TestAssembler(c => c.vcvtps2uqq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2uqq_xmm_k1z_xmmm64b32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtps2uqq_ymm_m() {
			TestAssembler(c => c.vcvtps2uqq(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2uqq_ymm_k1z_xmmm128b32, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtps2uqq_zmm_m() {
			TestAssembler(c => c.vcvtps2uqq(zmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtps2uqq_zmm_k1z_ymmm256b32_er, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtqq2pd_xmm_xmm() {
			TestAssembler(c => c.vcvtqq2pd(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtqq2pd_xmm_k1z_xmmm128b64, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtqq2pd_ymm_ymm() {
			TestAssembler(c => c.vcvtqq2pd(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtqq2pd_ymm_k1z_ymmm256b64, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvtqq2pd_zmm_zmm() {
			TestAssembler(c => c.vcvtqq2pd(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtqq2pd_zmm_k1z_zmmm512b64_er, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvtqq2pd_xmm_m() {
			TestAssembler(c => c.vcvtqq2pd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtqq2pd_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtqq2pd_ymm_m() {
			TestAssembler(c => c.vcvtqq2pd(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtqq2pd_ymm_k1z_ymmm256b64, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtqq2pd_zmm_m() {
			TestAssembler(c => c.vcvtqq2pd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtqq2pd_zmm_k1z_zmmm512b64_er, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtqq2ph_xmm_xmm() {
			TestAssembler(c => c.vcvtqq2ph(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtqq2ph_xmm_k1z_xmmm128b64, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtqq2ph_xmm_ymm() {
			TestAssembler(c => c.vcvtqq2ph(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtqq2ph_xmm_k1z_ymmm256b64, Register.XMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvtqq2ph_xmm_zmm() {
			TestAssembler(c => c.vcvtqq2ph(xmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtqq2ph_xmm_k1z_zmmm512b64_er, Register.XMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvtqq2ph_xmm_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtqq2ph(xmm2.k1, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtqq2ph_xmm_k1z_zmmm512b64_er, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (src.Size == MemoryOperandSize.Zword) */
				TestAssembler(c => c.vcvtqq2ph(xmm2.k1, __zmmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtqq2ph_xmm_k1z_zmmm512b64_er, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
			} /* else */ { /* if (src.Size == MemoryOperandSize.Yword) */
				TestAssembler(c => c.vcvtqq2ph(xmm2.k1, __ymmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtqq2ph_xmm_k1z_ymmm256b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
			} /* else */ { /* if (src.Size == MemoryOperandSize.Xword) */
				TestAssembler(c => c.vcvtqq2ph(xmm2.k1, __xmmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtqq2ph_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.vcvtqq2ph(xmm2.k1, __byte_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtqq2ph_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
				});
			}
		}

		[Fact]
		public void vcvtqq2phx_xmm_m() {
			TestAssembler(c => c.vcvtqq2phx(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtqq2ph_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtqq2phy_xmm_m() {
			TestAssembler(c => c.vcvtqq2phy(xmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtqq2ph_xmm_k1z_ymmm256b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtqq2phz_xmm_m() {
			TestAssembler(c => c.vcvtqq2phz(xmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtqq2ph_xmm_k1z_zmmm512b64_er, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtqq2ps_xmm_xmm() {
			TestAssembler(c => c.vcvtqq2ps(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtqq2ps_xmm_k1z_xmmm128b64, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtqq2ps_xmm_ymm() {
			TestAssembler(c => c.vcvtqq2ps(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtqq2ps_xmm_k1z_ymmm256b64, Register.XMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvtqq2ps_ymm_zmm() {
			TestAssembler(c => c.vcvtqq2ps(ymm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtqq2ps_ymm_k1z_zmmm512b64_er, Register.YMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvtqq2ps_xmm_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtqq2ps(xmm2.k1, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtqq2ps_xmm_k1z_ymmm256b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (src.Size == MemoryOperandSize.Yword) */
				TestAssembler(c => c.vcvtqq2ps(xmm2.k1, __ymmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtqq2ps_xmm_k1z_ymmm256b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
			} /* else */ { /* if (src.Size == MemoryOperandSize.Xword) */
				TestAssembler(c => c.vcvtqq2ps(xmm2.k1, __xmmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtqq2ps_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.vcvtqq2ps(xmm2.k1, __byte_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtqq2ps_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
				});
			}
		}

		[Fact]
		public void vcvtqq2ps_ymm_m() {
			TestAssembler(c => c.vcvtqq2ps(ymm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtqq2ps_ymm_k1z_zmmm512b64_er, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtqq2psx_xmm_m() {
			TestAssembler(c => c.vcvtqq2psx(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtqq2ps_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtqq2psy_xmm_m() {
			TestAssembler(c => c.vcvtqq2psy(xmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtqq2ps_xmm_k1z_ymmm256b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtsd2sh_xmm_xmm_xmm() {
			TestAssembler(c => c.vcvtsd2sh(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcvtsd2sh_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vcvtsd2sh_xmm_xmm_m() {
			TestAssembler(c => c.vcvtsd2sh(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtsd2sh_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtsd2si_r32_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtsd2si(edx, xmm3), Instruction.Create(Code.VEX_Vcvtsd2si_r32_xmmm64, Register.EDX, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtsd2si(edx, xmm3), Instruction.Create(Code.EVEX_Vcvtsd2si_r32_xmmm64_er, Register.EDX, Register.XMM3), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtsd2si_r64_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtsd2si(rdx, xmm3), Instruction.Create(Code.VEX_Vcvtsd2si_r64_xmmm64, Register.RDX, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtsd2si(rdx, xmm3), Instruction.Create(Code.EVEX_Vcvtsd2si_r64_xmmm64_er, Register.RDX, Register.XMM3), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtsd2si_r32_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtsd2si(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtsd2si_r32_xmmm64, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtsd2si(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvtsd2si_r32_xmmm64_er, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtsd2si_r64_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtsd2si(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtsd2si_r64_xmmm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtsd2si(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvtsd2si_r64_xmmm64_er, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtsd2ss_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtsd2ss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcvtsd2ss_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtsd2ss(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcvtsd2ss_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtsd2ss_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtsd2ss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtsd2ss_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtsd2ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtsd2ss_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtsd2usi_r32_xmm() {
			TestAssembler(c => c.vcvtsd2usi(edx, xmm3), Instruction.Create(Code.EVEX_Vcvtsd2usi_r32_xmmm64_er, Register.EDX, Register.XMM3));
		}

		[Fact]
		public void vcvtsd2usi_r64_xmm() {
			TestAssembler(c => c.vcvtsd2usi(rdx, xmm3), Instruction.Create(Code.EVEX_Vcvtsd2usi_r64_xmmm64_er, Register.RDX, Register.XMM3));
		}

		[Fact]
		public void vcvtsd2usi_r32_m() {
			TestAssembler(c => c.vcvtsd2usi(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvtsd2usi_r32_xmmm64_er, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vcvtsd2usi_r64_m() {
			TestAssembler(c => c.vcvtsd2usi(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvtsd2usi_r64_xmmm64_er, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vcvtsh2sd_xmm_xmm_xmm() {
			TestAssembler(c => c.vcvtsh2sd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcvtsh2sd_xmm_k1z_xmm_xmmm16_sae, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vcvtsh2sd_xmm_xmm_m() {
			TestAssembler(c => c.vcvtsh2sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtsh2sd_xmm_k1z_xmm_xmmm16_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtsh2si_r32_xmm() {
			TestAssembler(c => c.vcvtsh2si(edx, xmm3), Instruction.Create(Code.EVEX_Vcvtsh2si_r32_xmmm16_er, Register.EDX, Register.XMM3));
		}

		[Fact]
		public void vcvtsh2si_r64_xmm() {
			TestAssembler(c => c.vcvtsh2si(rdx, xmm3), Instruction.Create(Code.EVEX_Vcvtsh2si_r64_xmmm16_er, Register.RDX, Register.XMM3));
		}

		[Fact]
		public void vcvtsh2si_r32_m() {
			TestAssembler(c => c.vcvtsh2si(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvtsh2si_r32_xmmm16_er, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vcvtsh2si_r64_m() {
			TestAssembler(c => c.vcvtsh2si(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvtsh2si_r64_xmmm16_er, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vcvtsh2ss_xmm_xmm_xmm() {
			TestAssembler(c => c.vcvtsh2ss(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcvtsh2ss_xmm_k1z_xmm_xmmm16_sae, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vcvtsh2ss_xmm_xmm_m() {
			TestAssembler(c => c.vcvtsh2ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtsh2ss_xmm_k1z_xmm_xmmm16_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtsh2usi_r32_xmm() {
			TestAssembler(c => c.vcvtsh2usi(edx, xmm3), Instruction.Create(Code.EVEX_Vcvtsh2usi_r32_xmmm16_er, Register.EDX, Register.XMM3));
		}

		[Fact]
		public void vcvtsh2usi_r64_xmm() {
			TestAssembler(c => c.vcvtsh2usi(rdx, xmm3), Instruction.Create(Code.EVEX_Vcvtsh2usi_r64_xmmm16_er, Register.RDX, Register.XMM3));
		}

		[Fact]
		public void vcvtsh2usi_r32_m() {
			TestAssembler(c => c.vcvtsh2usi(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvtsh2usi_r32_xmmm16_er, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vcvtsh2usi_r64_m() {
			TestAssembler(c => c.vcvtsh2usi(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvtsh2usi_r64_xmmm16_er, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vcvtsi2sd_xmm_xmm_r32() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtsi2sd(xmm2, xmm3, esp), Instruction.Create(Code.VEX_Vcvtsi2sd_xmm_xmm_rm32, Register.XMM2, Register.XMM3, Register.ESP), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtsi2sd(xmm2, xmm3, esp), Instruction.Create(Code.EVEX_Vcvtsi2sd_xmm_xmm_rm32_er, Register.XMM2, Register.XMM3, Register.ESP), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtsi2sd_xmm_xmm_r64() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtsi2sd(xmm2, xmm3, rsp), Instruction.Create(Code.VEX_Vcvtsi2sd_xmm_xmm_rm64, Register.XMM2, Register.XMM3, Register.RSP), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtsi2sd(xmm2, xmm3, rsp), Instruction.Create(Code.EVEX_Vcvtsi2sd_xmm_xmm_rm64_er, Register.XMM2, Register.XMM3, Register.RSP), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtsi2sd_xmm_xmm_m() {
			{ /* if (src2.Size == MemoryOperandSize.Qword) */
				{ /* if (InstructionPreferVex) */
					TestAssembler(c => c.vcvtsi2sd(xmm2, xmm3, __qword_ptr[rdx]), Instruction.Create(Code.VEX_Vcvtsi2sd_xmm_xmm_rm64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
				} /* else */ TestAssembler(c => c.vcvtsi2sd(xmm2, xmm3, __qword_ptr[rdx]), Instruction.Create(Code.EVEX_Vcvtsi2sd_xmm_xmm_rm64_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
			} /* else */ { /* if (src2.Size == MemoryOperandSize.Dword) */
				{ /* if (InstructionPreferVex) */
					TestAssembler(c => c.vcvtsi2sd(xmm2, xmm3, __dword_ptr[rdx]), Instruction.Create(Code.VEX_Vcvtsi2sd_xmm_xmm_rm32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
				} /* else */ TestAssembler(c => c.vcvtsi2sd(xmm2, xmm3, __dword_ptr[rdx]), Instruction.Create(Code.EVEX_Vcvtsi2sd_xmm_xmm_rm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
			}
			{
				AssertInvalid(() => {
					{ /* if (InstructionPreferVex) */
						TestAssembler(c => c.vcvtsi2sd(xmm2, xmm3, __zmmword_ptr[rdx]), Instruction.Create(Code.VEX_Vcvtsi2sd_xmm_xmm_rm32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
					} /* else */ TestAssembler(c => c.vcvtsi2sd(xmm2, xmm3, __zmmword_ptr[rdx]), Instruction.Create(Code.EVEX_Vcvtsi2sd_xmm_xmm_rm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
				});
			}
		}

		[Fact]
		public void vcvtsi2sh_xmm_xmm_r32() {
			TestAssembler(c => c.vcvtsi2sh(xmm2, xmm3, esp), Instruction.Create(Code.EVEX_Vcvtsi2sh_xmm_xmm_rm32_er, Register.XMM2, Register.XMM3, Register.ESP));
		}

		[Fact]
		public void vcvtsi2sh_xmm_xmm_r64() {
			TestAssembler(c => c.vcvtsi2sh(xmm2, xmm3, rsp), Instruction.Create(Code.EVEX_Vcvtsi2sh_xmm_xmm_rm64_er, Register.XMM2, Register.XMM3, Register.RSP));
		}

		[Fact]
		public void vcvtsi2sh_xmm_xmm_m() {
			{ /* if (src2.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.vcvtsi2sh(xmm2, xmm3, __qword_ptr[rdx]), Instruction.Create(Code.EVEX_Vcvtsi2sh_xmm_xmm_rm64_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (src2.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.vcvtsi2sh(xmm2, xmm3, __dword_ptr[rdx]), Instruction.Create(Code.EVEX_Vcvtsi2sh_xmm_xmm_rm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.vcvtsi2sh(xmm2, xmm3, __zmmword_ptr[rdx]), Instruction.Create(Code.EVEX_Vcvtsi2sh_xmm_xmm_rm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void vcvtsi2ss_xmm_xmm_r32() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtsi2ss(xmm2, xmm3, esp), Instruction.Create(Code.VEX_Vcvtsi2ss_xmm_xmm_rm32, Register.XMM2, Register.XMM3, Register.ESP), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtsi2ss(xmm2, xmm3, esp), Instruction.Create(Code.EVEX_Vcvtsi2ss_xmm_xmm_rm32_er, Register.XMM2, Register.XMM3, Register.ESP), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtsi2ss_xmm_xmm_r64() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtsi2ss(xmm2, xmm3, rsp), Instruction.Create(Code.VEX_Vcvtsi2ss_xmm_xmm_rm64, Register.XMM2, Register.XMM3, Register.RSP), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtsi2ss(xmm2, xmm3, rsp), Instruction.Create(Code.EVEX_Vcvtsi2ss_xmm_xmm_rm64_er, Register.XMM2, Register.XMM3, Register.RSP), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtsi2ss_xmm_xmm_m() {
			{ /* if (src2.Size == MemoryOperandSize.Qword) */
				{ /* if (InstructionPreferVex) */
					TestAssembler(c => c.vcvtsi2ss(xmm2, xmm3, __qword_ptr[rdx]), Instruction.Create(Code.VEX_Vcvtsi2ss_xmm_xmm_rm64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
				} /* else */ TestAssembler(c => c.vcvtsi2ss(xmm2, xmm3, __qword_ptr[rdx]), Instruction.Create(Code.EVEX_Vcvtsi2ss_xmm_xmm_rm64_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
			} /* else */ { /* if (src2.Size == MemoryOperandSize.Dword) */
				{ /* if (InstructionPreferVex) */
					TestAssembler(c => c.vcvtsi2ss(xmm2, xmm3, __dword_ptr[rdx]), Instruction.Create(Code.VEX_Vcvtsi2ss_xmm_xmm_rm32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
				} /* else */ TestAssembler(c => c.vcvtsi2ss(xmm2, xmm3, __dword_ptr[rdx]), Instruction.Create(Code.EVEX_Vcvtsi2ss_xmm_xmm_rm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
			}
			{
				AssertInvalid(() => {
					{ /* if (InstructionPreferVex) */
						TestAssembler(c => c.vcvtsi2ss(xmm2, xmm3, __zmmword_ptr[rdx]), Instruction.Create(Code.VEX_Vcvtsi2ss_xmm_xmm_rm32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
					} /* else */ TestAssembler(c => c.vcvtsi2ss(xmm2, xmm3, __zmmword_ptr[rdx]), Instruction.Create(Code.EVEX_Vcvtsi2ss_xmm_xmm_rm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
				});
			}
		}

		[Fact]
		public void vcvtss2sd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtss2sd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vcvtss2sd_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtss2sd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcvtss2sd_xmm_k1z_xmm_xmmm32_sae, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtss2sd_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtss2sd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtss2sd_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtss2sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtss2sd_xmm_k1z_xmm_xmmm32_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtss2sh_xmm_xmm_xmm() {
			TestAssembler(c => c.vcvtss2sh(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vcvtss2sh_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vcvtss2sh_xmm_xmm_m() {
			TestAssembler(c => c.vcvtss2sh(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtss2sh_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtss2si_r32_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtss2si(edx, xmm3), Instruction.Create(Code.VEX_Vcvtss2si_r32_xmmm32, Register.EDX, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtss2si(edx, xmm3), Instruction.Create(Code.EVEX_Vcvtss2si_r32_xmmm32_er, Register.EDX, Register.XMM3), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtss2si_r64_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtss2si(rdx, xmm3), Instruction.Create(Code.VEX_Vcvtss2si_r64_xmmm32, Register.RDX, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtss2si(rdx, xmm3), Instruction.Create(Code.EVEX_Vcvtss2si_r64_xmmm32_er, Register.RDX, Register.XMM3), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtss2si_r32_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtss2si(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtss2si_r32_xmmm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtss2si(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvtss2si_r32_xmmm32_er, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtss2si_r64_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvtss2si(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvtss2si_r64_xmmm32, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvtss2si(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvtss2si_r64_xmmm32_er, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvtss2usi_r32_xmm() {
			TestAssembler(c => c.vcvtss2usi(edx, xmm3), Instruction.Create(Code.EVEX_Vcvtss2usi_r32_xmmm32_er, Register.EDX, Register.XMM3));
		}

		[Fact]
		public void vcvtss2usi_r64_xmm() {
			TestAssembler(c => c.vcvtss2usi(rdx, xmm3), Instruction.Create(Code.EVEX_Vcvtss2usi_r64_xmmm32_er, Register.RDX, Register.XMM3));
		}

		[Fact]
		public void vcvtss2usi_r32_m() {
			TestAssembler(c => c.vcvtss2usi(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvtss2usi_r32_xmmm32_er, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vcvtss2usi_r64_m() {
			TestAssembler(c => c.vcvtss2usi(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvtss2usi_r64_xmmm32_er, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vcvttpd2dq_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvttpd2dq(xmm2, xmm3), Instruction.Create(Code.VEX_Vcvttpd2dq_xmm_xmmm128, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvttpd2dq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2dq_xmm_k1z_xmmm128b64, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvttpd2dq_xmm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvttpd2dq(xmm2, ymm3), Instruction.Create(Code.VEX_Vcvttpd2dq_xmm_ymmm256, Register.XMM2, Register.YMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvttpd2dq(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2dq_xmm_k1z_ymmm256b64, Register.XMM2, Register.YMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvttpd2dq_ymm_zmm() {
			TestAssembler(c => c.vcvttpd2dq(ymm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2dq_ymm_k1z_zmmm512b64_sae, Register.YMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvttpd2dq_xmm_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvttpd2dq(xmm2.k1, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2dq_xmm_k1z_ymmm256b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (src.Size == MemoryOperandSize.Yword) */
				{ /* if (InstructionPreferVex) */
					TestAssembler(c => c.vcvttpd2dq(xmm2, __ymmword_ptr[rdx]), Instruction.Create(Code.VEX_Vcvttpd2dq_xmm_ymmm256, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
				} /* else */ TestAssembler(c => c.vcvttpd2dq(xmm2.k1, __ymmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2dq_xmm_k1z_ymmm256b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
			} /* else */ { /* if (src.Size == MemoryOperandSize.Xword) */
				{ /* if (InstructionPreferVex) */
					TestAssembler(c => c.vcvttpd2dq(xmm2, __xmmword_ptr[rdx]), Instruction.Create(Code.VEX_Vcvttpd2dq_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
				} /* else */ TestAssembler(c => c.vcvttpd2dq(xmm2.k1, __xmmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2dq_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
			}
			{
				AssertInvalid(() => {
					{ /* if (InstructionPreferVex) */
						TestAssembler(c => c.vcvttpd2dq(xmm2, __byte_ptr[rdx]), Instruction.Create(Code.VEX_Vcvttpd2dq_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
					} /* else */ TestAssembler(c => c.vcvttpd2dq(xmm2.k1, __byte_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2dq_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
				});
			}
		}

		[Fact]
		public void vcvttpd2dq_ymm_m() {
			TestAssembler(c => c.vcvttpd2dq(ymm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2dq_ymm_k1z_zmmm512b64_sae, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttpd2dqx_xmm_m() {
			TestAssembler(c => c.vcvttpd2dqx(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2dq_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttpd2dqy_xmm_m() {
			TestAssembler(c => c.vcvttpd2dqy(xmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2dq_xmm_k1z_ymmm256b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttpd2qq_xmm_xmm() {
			TestAssembler(c => c.vcvttpd2qq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2qq_xmm_k1z_xmmm128b64, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvttpd2qq_ymm_ymm() {
			TestAssembler(c => c.vcvttpd2qq(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2qq_ymm_k1z_ymmm256b64, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvttpd2qq_zmm_zmm() {
			TestAssembler(c => c.vcvttpd2qq(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2qq_zmm_k1z_zmmm512b64_sae, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvttpd2qq_xmm_m() {
			TestAssembler(c => c.vcvttpd2qq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2qq_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttpd2qq_ymm_m() {
			TestAssembler(c => c.vcvttpd2qq(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2qq_ymm_k1z_ymmm256b64, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttpd2qq_zmm_m() {
			TestAssembler(c => c.vcvttpd2qq(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2qq_zmm_k1z_zmmm512b64_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttpd2udq_xmm_xmm() {
			TestAssembler(c => c.vcvttpd2udq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2udq_xmm_k1z_xmmm128b64, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvttpd2udq_xmm_ymm() {
			TestAssembler(c => c.vcvttpd2udq(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2udq_xmm_k1z_ymmm256b64, Register.XMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvttpd2udq_ymm_zmm() {
			TestAssembler(c => c.vcvttpd2udq(ymm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2udq_ymm_k1z_zmmm512b64_sae, Register.YMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvttpd2udq_xmm_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvttpd2udq(xmm2.k1, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2udq_xmm_k1z_ymmm256b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (src.Size == MemoryOperandSize.Yword) */
				TestAssembler(c => c.vcvttpd2udq(xmm2.k1, __ymmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2udq_xmm_k1z_ymmm256b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
			} /* else */ { /* if (src.Size == MemoryOperandSize.Xword) */
				TestAssembler(c => c.vcvttpd2udq(xmm2.k1, __xmmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2udq_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.vcvttpd2udq(xmm2.k1, __byte_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2udq_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
				});
			}
		}

		[Fact]
		public void vcvttpd2udq_ymm_m() {
			TestAssembler(c => c.vcvttpd2udq(ymm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2udq_ymm_k1z_zmmm512b64_sae, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttpd2udqx_xmm_m() {
			TestAssembler(c => c.vcvttpd2udqx(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2udq_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttpd2udqy_xmm_m() {
			TestAssembler(c => c.vcvttpd2udqy(xmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2udq_xmm_k1z_ymmm256b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttpd2uqq_xmm_xmm() {
			TestAssembler(c => c.vcvttpd2uqq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2uqq_xmm_k1z_xmmm128b64, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvttpd2uqq_ymm_ymm() {
			TestAssembler(c => c.vcvttpd2uqq(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2uqq_ymm_k1z_ymmm256b64, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvttpd2uqq_zmm_zmm() {
			TestAssembler(c => c.vcvttpd2uqq(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2uqq_zmm_k1z_zmmm512b64_sae, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvttpd2uqq_xmm_m() {
			TestAssembler(c => c.vcvttpd2uqq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2uqq_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttpd2uqq_ymm_m() {
			TestAssembler(c => c.vcvttpd2uqq(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2uqq_ymm_k1z_ymmm256b64, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttpd2uqq_zmm_m() {
			TestAssembler(c => c.vcvttpd2uqq(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttpd2uqq_zmm_k1z_zmmm512b64_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttph2dq_xmm_xmm() {
			TestAssembler(c => c.vcvttph2dq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2dq_xmm_k1z_xmmm64b16, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvttph2dq_ymm_xmm() {
			TestAssembler(c => c.vcvttph2dq(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2dq_ymm_k1z_xmmm128b16, Register.YMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvttph2dq_zmm_ymm() {
			TestAssembler(c => c.vcvttph2dq(zmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2dq_zmm_k1z_ymmm256b16_sae, Register.ZMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvttph2dq_xmm_m() {
			TestAssembler(c => c.vcvttph2dq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2dq_xmm_k1z_xmmm64b16, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttph2dq_ymm_m() {
			TestAssembler(c => c.vcvttph2dq(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2dq_ymm_k1z_xmmm128b16, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttph2dq_zmm_m() {
			TestAssembler(c => c.vcvttph2dq(zmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2dq_zmm_k1z_ymmm256b16_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttph2qq_xmm_xmm() {
			TestAssembler(c => c.vcvttph2qq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2qq_xmm_k1z_xmmm32b16, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvttph2qq_ymm_xmm() {
			TestAssembler(c => c.vcvttph2qq(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2qq_ymm_k1z_xmmm64b16, Register.YMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvttph2qq_zmm_xmm() {
			TestAssembler(c => c.vcvttph2qq(zmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2qq_zmm_k1z_xmmm128b16_sae, Register.ZMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvttph2qq_xmm_m() {
			TestAssembler(c => c.vcvttph2qq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2qq_xmm_k1z_xmmm32b16, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttph2qq_ymm_m() {
			TestAssembler(c => c.vcvttph2qq(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2qq_ymm_k1z_xmmm64b16, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttph2qq_zmm_m() {
			TestAssembler(c => c.vcvttph2qq(zmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2qq_zmm_k1z_xmmm128b16_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttph2udq_xmm_xmm() {
			TestAssembler(c => c.vcvttph2udq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2udq_xmm_k1z_xmmm64b16, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvttph2udq_ymm_xmm() {
			TestAssembler(c => c.vcvttph2udq(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2udq_ymm_k1z_xmmm128b16, Register.YMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvttph2udq_zmm_ymm() {
			TestAssembler(c => c.vcvttph2udq(zmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2udq_zmm_k1z_ymmm256b16_sae, Register.ZMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvttph2udq_xmm_m() {
			TestAssembler(c => c.vcvttph2udq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2udq_xmm_k1z_xmmm64b16, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttph2udq_ymm_m() {
			TestAssembler(c => c.vcvttph2udq(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2udq_ymm_k1z_xmmm128b16, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttph2udq_zmm_m() {
			TestAssembler(c => c.vcvttph2udq(zmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2udq_zmm_k1z_ymmm256b16_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttph2uqq_xmm_xmm() {
			TestAssembler(c => c.vcvttph2uqq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2uqq_xmm_k1z_xmmm32b16, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvttph2uqq_ymm_xmm() {
			TestAssembler(c => c.vcvttph2uqq(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2uqq_ymm_k1z_xmmm64b16, Register.YMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvttph2uqq_zmm_xmm() {
			TestAssembler(c => c.vcvttph2uqq(zmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2uqq_zmm_k1z_xmmm128b16_sae, Register.ZMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvttph2uqq_xmm_m() {
			TestAssembler(c => c.vcvttph2uqq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2uqq_xmm_k1z_xmmm32b16, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttph2uqq_ymm_m() {
			TestAssembler(c => c.vcvttph2uqq(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2uqq_ymm_k1z_xmmm64b16, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttph2uqq_zmm_m() {
			TestAssembler(c => c.vcvttph2uqq(zmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2uqq_zmm_k1z_xmmm128b16_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttph2uw_xmm_xmm() {
			TestAssembler(c => c.vcvttph2uw(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2uw_xmm_k1z_xmmm128b16, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvttph2uw_ymm_ymm() {
			TestAssembler(c => c.vcvttph2uw(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2uw_ymm_k1z_ymmm256b16, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvttph2uw_zmm_zmm() {
			TestAssembler(c => c.vcvttph2uw(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2uw_zmm_k1z_zmmm512b16_sae, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvttph2uw_xmm_m() {
			TestAssembler(c => c.vcvttph2uw(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2uw_xmm_k1z_xmmm128b16, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttph2uw_ymm_m() {
			TestAssembler(c => c.vcvttph2uw(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2uw_ymm_k1z_ymmm256b16, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttph2uw_zmm_m() {
			TestAssembler(c => c.vcvttph2uw(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2uw_zmm_k1z_zmmm512b16_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttph2w_xmm_xmm() {
			TestAssembler(c => c.vcvttph2w(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2w_xmm_k1z_xmmm128b16, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvttph2w_ymm_ymm() {
			TestAssembler(c => c.vcvttph2w(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2w_ymm_k1z_ymmm256b16, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvttph2w_zmm_zmm() {
			TestAssembler(c => c.vcvttph2w(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2w_zmm_k1z_zmmm512b16_sae, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvttph2w_xmm_m() {
			TestAssembler(c => c.vcvttph2w(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2w_xmm_k1z_xmmm128b16, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttph2w_ymm_m() {
			TestAssembler(c => c.vcvttph2w(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2w_ymm_k1z_ymmm256b16, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttph2w_zmm_m() {
			TestAssembler(c => c.vcvttph2w(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttph2w_zmm_k1z_zmmm512b16_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttps2dq_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvttps2dq(xmm2, xmm3), Instruction.Create(Code.VEX_Vcvttps2dq_xmm_xmmm128, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvttps2dq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttps2dq_xmm_k1z_xmmm128b32, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvttps2dq_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvttps2dq(ymm2, ymm3), Instruction.Create(Code.VEX_Vcvttps2dq_ymm_ymmm256, Register.YMM2, Register.YMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvttps2dq(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttps2dq_ymm_k1z_ymmm256b32, Register.YMM2, Register.YMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvttps2dq_zmm_zmm() {
			TestAssembler(c => c.vcvttps2dq(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttps2dq_zmm_k1z_zmmm512b32_sae, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvttps2dq_xmm_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvttps2dq(xmm2.k1, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttps2dq_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvttps2dq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvttps2dq_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvttps2dq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttps2dq_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvttps2dq_ymm_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvttps2dq(ymm2.k1, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttps2dq_ymm_k1z_ymmm256b32, Register.YMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvttps2dq(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvttps2dq_ymm_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvttps2dq(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttps2dq_ymm_k1z_ymmm256b32, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvttps2dq_zmm_m() {
			TestAssembler(c => c.vcvttps2dq(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttps2dq_zmm_k1z_zmmm512b32_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttps2qq_xmm_xmm() {
			TestAssembler(c => c.vcvttps2qq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttps2qq_xmm_k1z_xmmm64b32, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvttps2qq_ymm_xmm() {
			TestAssembler(c => c.vcvttps2qq(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttps2qq_ymm_k1z_xmmm128b32, Register.YMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvttps2qq_zmm_ymm() {
			TestAssembler(c => c.vcvttps2qq(zmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttps2qq_zmm_k1z_ymmm256b32_sae, Register.ZMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvttps2qq_xmm_m() {
			TestAssembler(c => c.vcvttps2qq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttps2qq_xmm_k1z_xmmm64b32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttps2qq_ymm_m() {
			TestAssembler(c => c.vcvttps2qq(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttps2qq_ymm_k1z_xmmm128b32, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttps2qq_zmm_m() {
			TestAssembler(c => c.vcvttps2qq(zmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttps2qq_zmm_k1z_ymmm256b32_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttps2udq_xmm_xmm() {
			TestAssembler(c => c.vcvttps2udq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttps2udq_xmm_k1z_xmmm128b32, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvttps2udq_ymm_ymm() {
			TestAssembler(c => c.vcvttps2udq(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttps2udq_ymm_k1z_ymmm256b32, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvttps2udq_zmm_zmm() {
			TestAssembler(c => c.vcvttps2udq(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttps2udq_zmm_k1z_zmmm512b32_sae, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvttps2udq_xmm_m() {
			TestAssembler(c => c.vcvttps2udq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttps2udq_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttps2udq_ymm_m() {
			TestAssembler(c => c.vcvttps2udq(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttps2udq_ymm_k1z_ymmm256b32, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttps2udq_zmm_m() {
			TestAssembler(c => c.vcvttps2udq(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttps2udq_zmm_k1z_zmmm512b32_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttps2uqq_xmm_xmm() {
			TestAssembler(c => c.vcvttps2uqq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttps2uqq_xmm_k1z_xmmm64b32, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvttps2uqq_ymm_xmm() {
			TestAssembler(c => c.vcvttps2uqq(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttps2uqq_ymm_k1z_xmmm128b32, Register.YMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvttps2uqq_zmm_ymm() {
			TestAssembler(c => c.vcvttps2uqq(zmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvttps2uqq_zmm_k1z_ymmm256b32_sae, Register.ZMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvttps2uqq_xmm_m() {
			TestAssembler(c => c.vcvttps2uqq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttps2uqq_xmm_k1z_xmmm64b32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttps2uqq_ymm_m() {
			TestAssembler(c => c.vcvttps2uqq(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttps2uqq_ymm_k1z_xmmm128b32, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttps2uqq_zmm_m() {
			TestAssembler(c => c.vcvttps2uqq(zmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvttps2uqq_zmm_k1z_ymmm256b32_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvttsd2si_r32_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvttsd2si(edx, xmm3), Instruction.Create(Code.VEX_Vcvttsd2si_r32_xmmm64, Register.EDX, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvttsd2si(edx, xmm3), Instruction.Create(Code.EVEX_Vcvttsd2si_r32_xmmm64_sae, Register.EDX, Register.XMM3), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvttsd2si_r64_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvttsd2si(rdx, xmm3), Instruction.Create(Code.VEX_Vcvttsd2si_r64_xmmm64, Register.RDX, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvttsd2si(rdx, xmm3), Instruction.Create(Code.EVEX_Vcvttsd2si_r64_xmmm64_sae, Register.RDX, Register.XMM3), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvttsd2si_r32_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvttsd2si(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvttsd2si_r32_xmmm64, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvttsd2si(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvttsd2si_r32_xmmm64_sae, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvttsd2si_r64_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvttsd2si(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvttsd2si_r64_xmmm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvttsd2si(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvttsd2si_r64_xmmm64_sae, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvttsd2usi_r32_xmm() {
			TestAssembler(c => c.vcvttsd2usi(edx, xmm3), Instruction.Create(Code.EVEX_Vcvttsd2usi_r32_xmmm64_sae, Register.EDX, Register.XMM3));
		}

		[Fact]
		public void vcvttsd2usi_r64_xmm() {
			TestAssembler(c => c.vcvttsd2usi(rdx, xmm3), Instruction.Create(Code.EVEX_Vcvttsd2usi_r64_xmmm64_sae, Register.RDX, Register.XMM3));
		}

		[Fact]
		public void vcvttsd2usi_r32_m() {
			TestAssembler(c => c.vcvttsd2usi(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvttsd2usi_r32_xmmm64_sae, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vcvttsd2usi_r64_m() {
			TestAssembler(c => c.vcvttsd2usi(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvttsd2usi_r64_xmmm64_sae, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vcvttsh2si_r32_xmm() {
			TestAssembler(c => c.vcvttsh2si(edx, xmm3), Instruction.Create(Code.EVEX_Vcvttsh2si_r32_xmmm16_sae, Register.EDX, Register.XMM3));
		}

		[Fact]
		public void vcvttsh2si_r64_xmm() {
			TestAssembler(c => c.vcvttsh2si(rdx, xmm3), Instruction.Create(Code.EVEX_Vcvttsh2si_r64_xmmm16_sae, Register.RDX, Register.XMM3));
		}

		[Fact]
		public void vcvttsh2si_r32_m() {
			TestAssembler(c => c.vcvttsh2si(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvttsh2si_r32_xmmm16_sae, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vcvttsh2si_r64_m() {
			TestAssembler(c => c.vcvttsh2si(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvttsh2si_r64_xmmm16_sae, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vcvttsh2usi_r32_xmm() {
			TestAssembler(c => c.vcvttsh2usi(edx, xmm3), Instruction.Create(Code.EVEX_Vcvttsh2usi_r32_xmmm16_sae, Register.EDX, Register.XMM3));
		}

		[Fact]
		public void vcvttsh2usi_r64_xmm() {
			TestAssembler(c => c.vcvttsh2usi(rdx, xmm3), Instruction.Create(Code.EVEX_Vcvttsh2usi_r64_xmmm16_sae, Register.RDX, Register.XMM3));
		}

		[Fact]
		public void vcvttsh2usi_r32_m() {
			TestAssembler(c => c.vcvttsh2usi(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvttsh2usi_r32_xmmm16_sae, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vcvttsh2usi_r64_m() {
			TestAssembler(c => c.vcvttsh2usi(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvttsh2usi_r64_xmmm16_sae, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vcvttss2si_r32_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvttss2si(edx, xmm3), Instruction.Create(Code.VEX_Vcvttss2si_r32_xmmm32, Register.EDX, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvttss2si(edx, xmm3), Instruction.Create(Code.EVEX_Vcvttss2si_r32_xmmm32_sae, Register.EDX, Register.XMM3), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvttss2si_r64_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvttss2si(rdx, xmm3), Instruction.Create(Code.VEX_Vcvttss2si_r64_xmmm32, Register.RDX, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvttss2si(rdx, xmm3), Instruction.Create(Code.EVEX_Vcvttss2si_r64_xmmm32_sae, Register.RDX, Register.XMM3), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvttss2si_r32_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvttss2si(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvttss2si_r32_xmmm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvttss2si(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvttss2si_r32_xmmm32_sae, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvttss2si_r64_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vcvttss2si(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vcvttss2si_r64_xmmm32, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vcvttss2si(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvttss2si_r64_xmmm32_sae, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vcvttss2usi_r32_xmm() {
			TestAssembler(c => c.vcvttss2usi(edx, xmm3), Instruction.Create(Code.EVEX_Vcvttss2usi_r32_xmmm32_sae, Register.EDX, Register.XMM3));
		}

		[Fact]
		public void vcvttss2usi_r64_xmm() {
			TestAssembler(c => c.vcvttss2usi(rdx, xmm3), Instruction.Create(Code.EVEX_Vcvttss2usi_r64_xmmm32_sae, Register.RDX, Register.XMM3));
		}

		[Fact]
		public void vcvttss2usi_r32_m() {
			TestAssembler(c => c.vcvttss2usi(edx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvttss2usi_r32_xmmm32_sae, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vcvttss2usi_r64_m() {
			TestAssembler(c => c.vcvttss2usi(rdx, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vcvttss2usi_r64_xmmm32_sae, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vcvtudq2pd_xmm_xmm() {
			TestAssembler(c => c.vcvtudq2pd(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtudq2pd_xmm_k1z_xmmm64b32, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtudq2pd_ymm_xmm() {
			TestAssembler(c => c.vcvtudq2pd(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtudq2pd_ymm_k1z_xmmm128b32, Register.YMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtudq2pd_zmm_ymm() {
			TestAssembler(c => c.vcvtudq2pd(zmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtudq2pd_zmm_k1z_ymmm256b32_er, Register.ZMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvtudq2pd_xmm_m() {
			TestAssembler(c => c.vcvtudq2pd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtudq2pd_xmm_k1z_xmmm64b32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtudq2pd_ymm_m() {
			TestAssembler(c => c.vcvtudq2pd(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtudq2pd_ymm_k1z_xmmm128b32, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtudq2pd_zmm_m() {
			TestAssembler(c => c.vcvtudq2pd(zmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtudq2pd_zmm_k1z_ymmm256b32_er, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtudq2ph_xmm_xmm() {
			TestAssembler(c => c.vcvtudq2ph(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtudq2ph_xmm_k1z_xmmm128b32, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtudq2ph_xmm_ymm() {
			TestAssembler(c => c.vcvtudq2ph(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtudq2ph_xmm_k1z_ymmm256b32, Register.XMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvtudq2ph_ymm_zmm() {
			TestAssembler(c => c.vcvtudq2ph(ymm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtudq2ph_ymm_k1z_zmmm512b32_er, Register.YMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvtudq2ph_xmm_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtudq2ph(xmm2.k1, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtudq2ph_xmm_k1z_ymmm256b32, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (src.Size == MemoryOperandSize.Yword) */
				TestAssembler(c => c.vcvtudq2ph(xmm2.k1, __ymmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtudq2ph_xmm_k1z_ymmm256b32, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
			} /* else */ { /* if (src.Size == MemoryOperandSize.Xword) */
				TestAssembler(c => c.vcvtudq2ph(xmm2.k1, __xmmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtudq2ph_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.vcvtudq2ph(xmm2.k1, __byte_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtudq2ph_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
				});
			}
		}

		[Fact]
		public void vcvtudq2ph_ymm_m() {
			TestAssembler(c => c.vcvtudq2ph(ymm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtudq2ph_ymm_k1z_zmmm512b32_er, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtudq2phx_xmm_m() {
			TestAssembler(c => c.vcvtudq2phx(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtudq2ph_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtudq2phy_xmm_m() {
			TestAssembler(c => c.vcvtudq2phy(xmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtudq2ph_xmm_k1z_ymmm256b32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtudq2ps_xmm_xmm() {
			TestAssembler(c => c.vcvtudq2ps(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtudq2ps_xmm_k1z_xmmm128b32, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtudq2ps_ymm_ymm() {
			TestAssembler(c => c.vcvtudq2ps(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtudq2ps_ymm_k1z_ymmm256b32, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvtudq2ps_zmm_zmm() {
			TestAssembler(c => c.vcvtudq2ps(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtudq2ps_zmm_k1z_zmmm512b32_er, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvtudq2ps_xmm_m() {
			TestAssembler(c => c.vcvtudq2ps(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtudq2ps_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtudq2ps_ymm_m() {
			TestAssembler(c => c.vcvtudq2ps(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtudq2ps_ymm_k1z_ymmm256b32, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtudq2ps_zmm_m() {
			TestAssembler(c => c.vcvtudq2ps(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtudq2ps_zmm_k1z_zmmm512b32_er, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtuqq2pd_xmm_xmm() {
			TestAssembler(c => c.vcvtuqq2pd(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtuqq2pd_xmm_k1z_xmmm128b64, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtuqq2pd_ymm_ymm() {
			TestAssembler(c => c.vcvtuqq2pd(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtuqq2pd_ymm_k1z_ymmm256b64, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvtuqq2pd_zmm_zmm() {
			TestAssembler(c => c.vcvtuqq2pd(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtuqq2pd_zmm_k1z_zmmm512b64_er, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvtuqq2pd_xmm_m() {
			TestAssembler(c => c.vcvtuqq2pd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtuqq2pd_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtuqq2pd_ymm_m() {
			TestAssembler(c => c.vcvtuqq2pd(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtuqq2pd_ymm_k1z_ymmm256b64, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtuqq2pd_zmm_m() {
			TestAssembler(c => c.vcvtuqq2pd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtuqq2pd_zmm_k1z_zmmm512b64_er, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtuqq2ph_xmm_xmm() {
			TestAssembler(c => c.vcvtuqq2ph(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtuqq2ph_xmm_k1z_xmmm128b64, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtuqq2ph_xmm_ymm() {
			TestAssembler(c => c.vcvtuqq2ph(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtuqq2ph_xmm_k1z_ymmm256b64, Register.XMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvtuqq2ph_xmm_zmm() {
			TestAssembler(c => c.vcvtuqq2ph(xmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtuqq2ph_xmm_k1z_zmmm512b64_er, Register.XMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvtuqq2ph_xmm_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtuqq2ph(xmm2.k1, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtuqq2ph_xmm_k1z_zmmm512b64_er, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (src.Size == MemoryOperandSize.Zword) */
				TestAssembler(c => c.vcvtuqq2ph(xmm2.k1, __zmmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtuqq2ph_xmm_k1z_zmmm512b64_er, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
			} /* else */ { /* if (src.Size == MemoryOperandSize.Yword) */
				TestAssembler(c => c.vcvtuqq2ph(xmm2.k1, __ymmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtuqq2ph_xmm_k1z_ymmm256b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
			} /* else */ { /* if (src.Size == MemoryOperandSize.Xword) */
				TestAssembler(c => c.vcvtuqq2ph(xmm2.k1, __xmmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtuqq2ph_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.vcvtuqq2ph(xmm2.k1, __byte_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtuqq2ph_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
				});
			}
		}

		[Fact]
		public void vcvtuqq2phx_xmm_m() {
			TestAssembler(c => c.vcvtuqq2phx(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtuqq2ph_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtuqq2phy_xmm_m() {
			TestAssembler(c => c.vcvtuqq2phy(xmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtuqq2ph_xmm_k1z_ymmm256b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtuqq2phz_xmm_m() {
			TestAssembler(c => c.vcvtuqq2phz(xmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtuqq2ph_xmm_k1z_zmmm512b64_er, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtuqq2ps_xmm_xmm() {
			TestAssembler(c => c.vcvtuqq2ps(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtuqq2ps_xmm_k1z_xmmm128b64, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtuqq2ps_xmm_ymm() {
			TestAssembler(c => c.vcvtuqq2ps(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtuqq2ps_xmm_k1z_ymmm256b64, Register.XMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvtuqq2ps_ymm_zmm() {
			TestAssembler(c => c.vcvtuqq2ps(ymm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtuqq2ps_ymm_k1z_zmmm512b64_er, Register.YMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvtuqq2ps_xmm_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vcvtuqq2ps(xmm2.k1, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtuqq2ps_xmm_k1z_ymmm256b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (src.Size == MemoryOperandSize.Yword) */
				TestAssembler(c => c.vcvtuqq2ps(xmm2.k1, __ymmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtuqq2ps_xmm_k1z_ymmm256b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
			} /* else */ { /* if (src.Size == MemoryOperandSize.Xword) */
				TestAssembler(c => c.vcvtuqq2ps(xmm2.k1, __xmmword_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtuqq2ps_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.vcvtuqq2ps(xmm2.k1, __byte_ptr[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtuqq2ps_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
				});
			}
		}

		[Fact]
		public void vcvtuqq2ps_ymm_m() {
			TestAssembler(c => c.vcvtuqq2ps(ymm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtuqq2ps_ymm_k1z_zmmm512b64_er, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtuqq2psx_xmm_m() {
			TestAssembler(c => c.vcvtuqq2psx(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtuqq2ps_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtuqq2psy_xmm_m() {
			TestAssembler(c => c.vcvtuqq2psy(xmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtuqq2ps_xmm_k1z_ymmm256b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtusi2sd_xmm_xmm_r32() {
			TestAssembler(c => c.vcvtusi2sd(xmm2, xmm3, esp), Instruction.Create(Code.EVEX_Vcvtusi2sd_xmm_xmm_rm32_er, Register.XMM2, Register.XMM3, Register.ESP));
		}

		[Fact]
		public void vcvtusi2sd_xmm_xmm_r64() {
			TestAssembler(c => c.vcvtusi2sd(xmm2, xmm3, rsp), Instruction.Create(Code.EVEX_Vcvtusi2sd_xmm_xmm_rm64_er, Register.XMM2, Register.XMM3, Register.RSP));
		}

		[Fact]
		public void vcvtusi2sd_xmm_xmm_m() {
			{ /* if (src2.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.vcvtusi2sd(xmm2, xmm3, __qword_ptr[rdx]), Instruction.Create(Code.EVEX_Vcvtusi2sd_xmm_xmm_rm64_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (src2.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.vcvtusi2sd(xmm2, xmm3, __dword_ptr[rdx]), Instruction.Create(Code.EVEX_Vcvtusi2sd_xmm_xmm_rm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.vcvtusi2sd(xmm2, xmm3, __zmmword_ptr[rdx]), Instruction.Create(Code.EVEX_Vcvtusi2sd_xmm_xmm_rm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void vcvtusi2sh_xmm_xmm_r32() {
			TestAssembler(c => c.vcvtusi2sh(xmm2, xmm3, esp), Instruction.Create(Code.EVEX_Vcvtusi2sh_xmm_xmm_rm32_er, Register.XMM2, Register.XMM3, Register.ESP));
		}

		[Fact]
		public void vcvtusi2sh_xmm_xmm_r64() {
			TestAssembler(c => c.vcvtusi2sh(xmm2, xmm3, rsp), Instruction.Create(Code.EVEX_Vcvtusi2sh_xmm_xmm_rm64_er, Register.XMM2, Register.XMM3, Register.RSP));
		}

		[Fact]
		public void vcvtusi2sh_xmm_xmm_m() {
			{ /* if (src2.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.vcvtusi2sh(xmm2, xmm3, __qword_ptr[rdx]), Instruction.Create(Code.EVEX_Vcvtusi2sh_xmm_xmm_rm64_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (src2.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.vcvtusi2sh(xmm2, xmm3, __dword_ptr[rdx]), Instruction.Create(Code.EVEX_Vcvtusi2sh_xmm_xmm_rm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.vcvtusi2sh(xmm2, xmm3, __zmmword_ptr[rdx]), Instruction.Create(Code.EVEX_Vcvtusi2sh_xmm_xmm_rm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void vcvtusi2ss_xmm_xmm_r32() {
			TestAssembler(c => c.vcvtusi2ss(xmm2, xmm3, esp), Instruction.Create(Code.EVEX_Vcvtusi2ss_xmm_xmm_rm32_er, Register.XMM2, Register.XMM3, Register.ESP));
		}

		[Fact]
		public void vcvtusi2ss_xmm_xmm_r64() {
			TestAssembler(c => c.vcvtusi2ss(xmm2, xmm3, rsp), Instruction.Create(Code.EVEX_Vcvtusi2ss_xmm_xmm_rm64_er, Register.XMM2, Register.XMM3, Register.RSP));
		}

		[Fact]
		public void vcvtusi2ss_xmm_xmm_m() {
			{ /* if (src2.Size == MemoryOperandSize.Qword) */
				TestAssembler(c => c.vcvtusi2ss(xmm2, xmm3, __qword_ptr[rdx]), Instruction.Create(Code.EVEX_Vcvtusi2ss_xmm_xmm_rm64_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else */ { /* if (src2.Size == MemoryOperandSize.Dword) */
				TestAssembler(c => c.vcvtusi2ss(xmm2, xmm3, __dword_ptr[rdx]), Instruction.Create(Code.EVEX_Vcvtusi2ss_xmm_xmm_rm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.vcvtusi2ss(xmm2, xmm3, __zmmword_ptr[rdx]), Instruction.Create(Code.EVEX_Vcvtusi2ss_xmm_xmm_rm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None)));
				});
			}
		}

		[Fact]
		public void vcvtuw2ph_xmm_xmm() {
			TestAssembler(c => c.vcvtuw2ph(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtuw2ph_xmm_k1z_xmmm128b16, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtuw2ph_ymm_ymm() {
			TestAssembler(c => c.vcvtuw2ph(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtuw2ph_ymm_k1z_ymmm256b16, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvtuw2ph_zmm_zmm() {
			TestAssembler(c => c.vcvtuw2ph(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtuw2ph_zmm_k1z_zmmm512b16_er, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvtuw2ph_xmm_m() {
			TestAssembler(c => c.vcvtuw2ph(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtuw2ph_xmm_k1z_xmmm128b16, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtuw2ph_ymm_m() {
			TestAssembler(c => c.vcvtuw2ph(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtuw2ph_ymm_k1z_ymmm256b16, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtuw2ph_zmm_m() {
			TestAssembler(c => c.vcvtuw2ph(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtuw2ph_zmm_k1z_zmmm512b16_er, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtw2ph_xmm_xmm() {
			TestAssembler(c => c.vcvtw2ph(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtw2ph_xmm_k1z_xmmm128b16, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vcvtw2ph_ymm_ymm() {
			TestAssembler(c => c.vcvtw2ph(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtw2ph_ymm_k1z_ymmm256b16, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vcvtw2ph_zmm_zmm() {
			TestAssembler(c => c.vcvtw2ph(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vcvtw2ph_zmm_k1z_zmmm512b16_er, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vcvtw2ph_xmm_m() {
			TestAssembler(c => c.vcvtw2ph(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtw2ph_xmm_k1z_xmmm128b16, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtw2ph_ymm_m() {
			TestAssembler(c => c.vcvtw2ph(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtw2ph_ymm_k1z_ymmm256b16, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vcvtw2ph_zmm_m() {
			TestAssembler(c => c.vcvtw2ph(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vcvtw2ph_zmm_k1z_zmmm512b16_er, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vdbpsadbw_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vdbpsadbw(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vdbpsadbw_xmm_k1z_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vdbpsadbw_ymm_ymm_ymm_i() {
			TestAssembler(c => c.vdbpsadbw(ymm2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vdbpsadbw_ymm_k1z_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vdbpsadbw_zmm_zmm_zmm_i() {
			TestAssembler(c => c.vdbpsadbw(zmm2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vdbpsadbw_zmm_k1z_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vdbpsadbw_xmm_xmm_m_i() {
			TestAssembler(c => c.vdbpsadbw(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vdbpsadbw_xmm_k1z_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vdbpsadbw_ymm_ymm_m_i() {
			TestAssembler(c => c.vdbpsadbw(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vdbpsadbw_ymm_k1z_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vdbpsadbw_zmm_zmm_m_i() {
			TestAssembler(c => c.vdbpsadbw(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vdbpsadbw_zmm_k1z_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vdbpsadbw_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vdbpsadbw(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vdbpsadbw_xmm_k1z_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vdbpsadbw_ymm_ymm_ymm_u() {
			TestAssembler(c => c.vdbpsadbw(ymm2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vdbpsadbw_ymm_k1z_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vdbpsadbw_zmm_zmm_zmm_u() {
			TestAssembler(c => c.vdbpsadbw(zmm2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vdbpsadbw_zmm_k1z_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vdbpsadbw_xmm_xmm_m_u() {
			TestAssembler(c => c.vdbpsadbw(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vdbpsadbw_xmm_k1z_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vdbpsadbw_ymm_ymm_m_u() {
			TestAssembler(c => c.vdbpsadbw(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vdbpsadbw_ymm_k1z_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vdbpsadbw_zmm_zmm_m_u() {
			TestAssembler(c => c.vdbpsadbw(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vdbpsadbw_zmm_k1z_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vdivpd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vdivpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vdivpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vdivpd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vdivpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vdivpd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vdivpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vdivpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vdivpd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vdivpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vdivpd_zmm_zmm_zmm() {
			TestAssembler(c => c.vdivpd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vdivpd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vdivpd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vdivpd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vdivpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vdivpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vdivpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vdivpd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vdivpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vdivpd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vdivpd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vdivpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vdivpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vdivpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vdivpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vdivpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vdivpd_zmm_zmm_m() {
			TestAssembler(c => c.vdivpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vdivpd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vdivph_xmm_xmm_xmm() {
			TestAssembler(c => c.vdivph(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vdivph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vdivph_ymm_ymm_ymm() {
			TestAssembler(c => c.vdivph(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vdivph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vdivph_zmm_zmm_zmm() {
			TestAssembler(c => c.vdivph(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vdivph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vdivph_xmm_xmm_m() {
			TestAssembler(c => c.vdivph(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vdivph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vdivph_ymm_ymm_m() {
			TestAssembler(c => c.vdivph(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vdivph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vdivph_zmm_zmm_m() {
			TestAssembler(c => c.vdivph(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vdivph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vdivps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vdivps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vdivps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vdivps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vdivps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vdivps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vdivps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vdivps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vdivps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vdivps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vdivps_zmm_zmm_zmm() {
			TestAssembler(c => c.vdivps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vdivps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vdivps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vdivps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vdivps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vdivps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vdivps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vdivps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vdivps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vdivps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vdivps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vdivps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vdivps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vdivps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vdivps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vdivps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vdivps_zmm_zmm_m() {
			TestAssembler(c => c.vdivps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vdivps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vdivsd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vdivsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vdivsd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vdivsd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vdivsd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vdivsd_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vdivsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vdivsd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vdivsd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vdivsd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vdivsh_xmm_xmm_xmm() {
			TestAssembler(c => c.vdivsh(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vdivsh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vdivsh_xmm_xmm_m() {
			TestAssembler(c => c.vdivsh(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vdivsh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vdivss_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vdivss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vdivss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vdivss(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vdivss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vdivss_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vdivss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vdivss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vdivss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vdivss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vdpbf16ps_xmm_xmm_xmm() {
			TestAssembler(c => c.vdpbf16ps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vdpbf16ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vdpbf16ps_ymm_ymm_ymm() {
			TestAssembler(c => c.vdpbf16ps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vdpbf16ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vdpbf16ps_zmm_zmm_zmm() {
			TestAssembler(c => c.vdpbf16ps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vdpbf16ps_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vdpbf16ps_xmm_xmm_m() {
			TestAssembler(c => c.vdpbf16ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vdpbf16ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vdpbf16ps_ymm_ymm_m() {
			TestAssembler(c => c.vdpbf16ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vdpbf16ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vdpbf16ps_zmm_zmm_m() {
			TestAssembler(c => c.vdpbf16ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vdpbf16ps_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vdppd_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vdppd(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vdppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5));
		}

		[Fact]
		public void vdppd_xmm_xmm_m_i() {
			TestAssembler(c => c.vdppd(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vdppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vdppd_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vdppd(xmm2, xmm3, xmm4, (byte)0x7F), Instruction.Create(Code.VEX_Vdppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU));
		}

		[Fact]
		public void vdppd_xmm_xmm_m_u() {
			TestAssembler(c => c.vdppd(xmm2, xmm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vdppd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vdpps_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vdpps(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vdpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5));
		}

		[Fact]
		public void vdpps_ymm_ymm_ymm_i() {
			TestAssembler(c => c.vdpps(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vdpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5));
		}

		[Fact]
		public void vdpps_xmm_xmm_m_i() {
			TestAssembler(c => c.vdpps(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vdpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vdpps_ymm_ymm_m_i() {
			TestAssembler(c => c.vdpps(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vdpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vdpps_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vdpps(xmm2, xmm3, xmm4, (byte)0x7F), Instruction.Create(Code.VEX_Vdpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU));
		}

		[Fact]
		public void vdpps_ymm_ymm_ymm_u() {
			TestAssembler(c => c.vdpps(ymm2, ymm3, ymm4, (byte)0x7F), Instruction.Create(Code.VEX_Vdpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU));
		}

		[Fact]
		public void vdpps_xmm_xmm_m_u() {
			TestAssembler(c => c.vdpps(xmm2, xmm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vdpps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vdpps_ymm_ymm_m_u() {
			TestAssembler(c => c.vdpps(ymm2, ymm3, __ymmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vdpps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void verr_r16() {
			TestAssembler(c => c.verr(dx), Instruction.Create(Code.Verr_rm16, Register.DX));
		}

		[Fact]
		public void verr_r32() {
			TestAssembler(c => c.verr(edx), Instruction.Create(Code.Verr_r32m16, Register.EDX));
		}

		[Fact]
		public void verr_r64() {
			TestAssembler(c => c.verr(rdx), Instruction.Create(Code.Verr_r64m16, Register.RDX));
		}

		[Fact]
		public void verr_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.verr(__dword_ptr[rcx]), Instruction.Create(Code.Verr_r32m16, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else skip !(Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void verw_r16() {
			TestAssembler(c => c.verw(dx), Instruction.Create(Code.Verw_rm16, Register.DX));
		}

		[Fact]
		public void verw_r32() {
			TestAssembler(c => c.verw(edx), Instruction.Create(Code.Verw_r32m16, Register.EDX));
		}

		[Fact]
		public void verw_r64() {
			TestAssembler(c => c.verw(rdx), Instruction.Create(Code.Verw_r64m16, Register.RDX));
		}

		[Fact]
		public void verw_m() {
			{ /* if (Bitness >= 32) */
				TestAssembler(c => c.verw(__dword_ptr[rcx]), Instruction.Create(Code.Verw_r32m16, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
			} /* else skip !(Bitness >= 32) not supported by this Assembler bitness */
		}

		[Fact]
		public void vexp2pd_zmm_zmm() {
			TestAssembler(c => c.vexp2pd(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vexp2pd_zmm_k1z_zmmm512b64_sae, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vexp2pd_zmm_m() {
			TestAssembler(c => c.vexp2pd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vexp2pd_zmm_k1z_zmmm512b64_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vexp2ps_zmm_zmm() {
			TestAssembler(c => c.vexp2ps(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vexp2ps_zmm_k1z_zmmm512b32_sae, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vexp2ps_zmm_m() {
			TestAssembler(c => c.vexp2ps(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vexp2ps_zmm_k1z_zmmm512b32_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vexpandpd_xmm_xmm() {
			TestAssembler(c => c.vexpandpd(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vexpandpd_xmm_k1z_xmmm128, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vexpandpd_ymm_ymm() {
			TestAssembler(c => c.vexpandpd(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vexpandpd_ymm_k1z_ymmm256, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vexpandpd_zmm_zmm() {
			TestAssembler(c => c.vexpandpd(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vexpandpd_zmm_k1z_zmmm512, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vexpandpd_xmm_m() {
			TestAssembler(c => c.vexpandpd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vexpandpd_xmm_k1z_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vexpandpd_ymm_m() {
			TestAssembler(c => c.vexpandpd(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vexpandpd_ymm_k1z_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vexpandpd_zmm_m() {
			TestAssembler(c => c.vexpandpd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vexpandpd_zmm_k1z_zmmm512, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vexpandps_xmm_xmm() {
			TestAssembler(c => c.vexpandps(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vexpandps_xmm_k1z_xmmm128, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vexpandps_ymm_ymm() {
			TestAssembler(c => c.vexpandps(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vexpandps_ymm_k1z_ymmm256, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vexpandps_zmm_zmm() {
			TestAssembler(c => c.vexpandps(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vexpandps_zmm_k1z_zmmm512, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vexpandps_xmm_m() {
			TestAssembler(c => c.vexpandps(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vexpandps_xmm_k1z_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vexpandps_ymm_m() {
			TestAssembler(c => c.vexpandps(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vexpandps_ymm_k1z_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vexpandps_zmm_m() {
			TestAssembler(c => c.vexpandps(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vexpandps_zmm_k1z_zmmm512, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vextractf128_xmm_ymm_i() {
			TestAssembler(c => c.vextractf128(xmm2, ymm3, -5), Instruction.Create(Code.VEX_Vextractf128_xmmm128_ymm_imm8, Register.XMM2, Register.YMM3, -5));
		}

		[Fact]
		public void vextractf128_m_ymm_i() {
			TestAssembler(c => c.vextractf128(__xmmword_ptr[rcx], ymm3, -5), Instruction.Create(Code.VEX_Vextractf128_xmmm128_ymm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3, -5));
		}

		[Fact]
		public void vextractf128_xmm_ymm_u() {
			TestAssembler(c => c.vextractf128(xmm2, ymm3, (byte)0x7F), Instruction.Create(Code.VEX_Vextractf128_xmmm128_ymm_imm8, Register.XMM2, Register.YMM3, 0x7FU));
		}

		[Fact]
		public void vextractf128_m_ymm_u() {
			TestAssembler(c => c.vextractf128(__xmmword_ptr[rcx], ymm3, (byte)0x7F), Instruction.Create(Code.VEX_Vextractf128_xmmm128_ymm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3, 0x7FU));
		}

		[Fact]
		public void vextractf32x4_xmm_ymm_i() {
			TestAssembler(c => c.vextractf32x4(xmm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vextractf32x4_xmmm128_k1z_ymm_imm8, Register.XMM2, Register.YMM3, -5), Register.K1));
		}

		[Fact]
		public void vextractf32x4_m_ymm_i() {
			TestAssembler(c => c.vextractf32x4(__xmmword_ptr[rcx].k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vextractf32x4_xmmm128_k1z_ymm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3, -5), Register.K1));
		}

		[Fact]
		public void vextractf32x4_xmm_zmm_i() {
			TestAssembler(c => c.vextractf32x4(xmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vextractf32x4_xmmm128_k1z_zmm_imm8, Register.XMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vextractf32x4_m_zmm_i() {
			TestAssembler(c => c.vextractf32x4(__xmmword_ptr[rcx].k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vextractf32x4_xmmm128_k1z_zmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vextractf32x4_xmm_ymm_u() {
			TestAssembler(c => c.vextractf32x4(xmm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vextractf32x4_xmmm128_k1z_ymm_imm8, Register.XMM2, Register.YMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vextractf32x4_m_ymm_u() {
			TestAssembler(c => c.vextractf32x4(__xmmword_ptr[rcx].k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vextractf32x4_xmmm128_k1z_ymm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vextractf32x4_xmm_zmm_u() {
			TestAssembler(c => c.vextractf32x4(xmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vextractf32x4_xmmm128_k1z_zmm_imm8, Register.XMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vextractf32x4_m_zmm_u() {
			TestAssembler(c => c.vextractf32x4(__xmmword_ptr[rcx].k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vextractf32x4_xmmm128_k1z_zmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vextractf32x8_ymm_zmm_i() {
			TestAssembler(c => c.vextractf32x8(ymm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vextractf32x8_ymmm256_k1z_zmm_imm8, Register.YMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vextractf32x8_m_zmm_i() {
			TestAssembler(c => c.vextractf32x8(__ymmword_ptr[rcx].k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vextractf32x8_ymmm256_k1z_zmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vextractf32x8_ymm_zmm_u() {
			TestAssembler(c => c.vextractf32x8(ymm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vextractf32x8_ymmm256_k1z_zmm_imm8, Register.YMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vextractf32x8_m_zmm_u() {
			TestAssembler(c => c.vextractf32x8(__ymmword_ptr[rcx].k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vextractf32x8_ymmm256_k1z_zmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vextractf64x2_xmm_ymm_i() {
			TestAssembler(c => c.vextractf64x2(xmm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vextractf64x2_xmmm128_k1z_ymm_imm8, Register.XMM2, Register.YMM3, -5), Register.K1));
		}

		[Fact]
		public void vextractf64x2_m_ymm_i() {
			TestAssembler(c => c.vextractf64x2(__xmmword_ptr[rcx].k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vextractf64x2_xmmm128_k1z_ymm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3, -5), Register.K1));
		}

		[Fact]
		public void vextractf64x2_xmm_zmm_i() {
			TestAssembler(c => c.vextractf64x2(xmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vextractf64x2_xmmm128_k1z_zmm_imm8, Register.XMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vextractf64x2_m_zmm_i() {
			TestAssembler(c => c.vextractf64x2(__xmmword_ptr[rcx].k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vextractf64x2_xmmm128_k1z_zmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vextractf64x2_xmm_ymm_u() {
			TestAssembler(c => c.vextractf64x2(xmm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vextractf64x2_xmmm128_k1z_ymm_imm8, Register.XMM2, Register.YMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vextractf64x2_m_ymm_u() {
			TestAssembler(c => c.vextractf64x2(__xmmword_ptr[rcx].k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vextractf64x2_xmmm128_k1z_ymm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vextractf64x2_xmm_zmm_u() {
			TestAssembler(c => c.vextractf64x2(xmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vextractf64x2_xmmm128_k1z_zmm_imm8, Register.XMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vextractf64x2_m_zmm_u() {
			TestAssembler(c => c.vextractf64x2(__xmmword_ptr[rcx].k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vextractf64x2_xmmm128_k1z_zmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vextractf64x4_ymm_zmm_i() {
			TestAssembler(c => c.vextractf64x4(ymm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vextractf64x4_ymmm256_k1z_zmm_imm8, Register.YMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vextractf64x4_m_zmm_i() {
			TestAssembler(c => c.vextractf64x4(__ymmword_ptr[rcx].k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vextractf64x4_ymmm256_k1z_zmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vextractf64x4_ymm_zmm_u() {
			TestAssembler(c => c.vextractf64x4(ymm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vextractf64x4_ymmm256_k1z_zmm_imm8, Register.YMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vextractf64x4_m_zmm_u() {
			TestAssembler(c => c.vextractf64x4(__ymmword_ptr[rcx].k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vextractf64x4_ymmm256_k1z_zmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vextracti128_xmm_ymm_i() {
			TestAssembler(c => c.vextracti128(xmm2, ymm3, -5), Instruction.Create(Code.VEX_Vextracti128_xmmm128_ymm_imm8, Register.XMM2, Register.YMM3, -5));
		}

		[Fact]
		public void vextracti128_m_ymm_i() {
			TestAssembler(c => c.vextracti128(__xmmword_ptr[rcx], ymm3, -5), Instruction.Create(Code.VEX_Vextracti128_xmmm128_ymm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3, -5));
		}

		[Fact]
		public void vextracti128_xmm_ymm_u() {
			TestAssembler(c => c.vextracti128(xmm2, ymm3, (byte)0x7F), Instruction.Create(Code.VEX_Vextracti128_xmmm128_ymm_imm8, Register.XMM2, Register.YMM3, 0x7FU));
		}

		[Fact]
		public void vextracti128_m_ymm_u() {
			TestAssembler(c => c.vextracti128(__xmmword_ptr[rcx], ymm3, (byte)0x7F), Instruction.Create(Code.VEX_Vextracti128_xmmm128_ymm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3, 0x7FU));
		}

		[Fact]
		public void vextracti32x4_xmm_ymm_i() {
			TestAssembler(c => c.vextracti32x4(xmm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vextracti32x4_xmmm128_k1z_ymm_imm8, Register.XMM2, Register.YMM3, -5), Register.K1));
		}

		[Fact]
		public void vextracti32x4_m_ymm_i() {
			TestAssembler(c => c.vextracti32x4(__xmmword_ptr[rcx].k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vextracti32x4_xmmm128_k1z_ymm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3, -5), Register.K1));
		}

		[Fact]
		public void vextracti32x4_xmm_zmm_i() {
			TestAssembler(c => c.vextracti32x4(xmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vextracti32x4_xmmm128_k1z_zmm_imm8, Register.XMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vextracti32x4_m_zmm_i() {
			TestAssembler(c => c.vextracti32x4(__xmmword_ptr[rcx].k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vextracti32x4_xmmm128_k1z_zmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vextracti32x4_xmm_ymm_u() {
			TestAssembler(c => c.vextracti32x4(xmm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vextracti32x4_xmmm128_k1z_ymm_imm8, Register.XMM2, Register.YMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vextracti32x4_m_ymm_u() {
			TestAssembler(c => c.vextracti32x4(__xmmword_ptr[rcx].k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vextracti32x4_xmmm128_k1z_ymm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vextracti32x4_xmm_zmm_u() {
			TestAssembler(c => c.vextracti32x4(xmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vextracti32x4_xmmm128_k1z_zmm_imm8, Register.XMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vextracti32x4_m_zmm_u() {
			TestAssembler(c => c.vextracti32x4(__xmmword_ptr[rcx].k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vextracti32x4_xmmm128_k1z_zmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vextracti32x8_ymm_zmm_i() {
			TestAssembler(c => c.vextracti32x8(ymm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vextracti32x8_ymmm256_k1z_zmm_imm8, Register.YMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vextracti32x8_m_zmm_i() {
			TestAssembler(c => c.vextracti32x8(__ymmword_ptr[rcx].k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vextracti32x8_ymmm256_k1z_zmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vextracti32x8_ymm_zmm_u() {
			TestAssembler(c => c.vextracti32x8(ymm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vextracti32x8_ymmm256_k1z_zmm_imm8, Register.YMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vextracti32x8_m_zmm_u() {
			TestAssembler(c => c.vextracti32x8(__ymmword_ptr[rcx].k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vextracti32x8_ymmm256_k1z_zmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vextracti64x2_xmm_ymm_i() {
			TestAssembler(c => c.vextracti64x2(xmm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vextracti64x2_xmmm128_k1z_ymm_imm8, Register.XMM2, Register.YMM3, -5), Register.K1));
		}

		[Fact]
		public void vextracti64x2_m_ymm_i() {
			TestAssembler(c => c.vextracti64x2(__xmmword_ptr[rcx].k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vextracti64x2_xmmm128_k1z_ymm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3, -5), Register.K1));
		}

		[Fact]
		public void vextracti64x2_xmm_zmm_i() {
			TestAssembler(c => c.vextracti64x2(xmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vextracti64x2_xmmm128_k1z_zmm_imm8, Register.XMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vextracti64x2_m_zmm_i() {
			TestAssembler(c => c.vextracti64x2(__xmmword_ptr[rcx].k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vextracti64x2_xmmm128_k1z_zmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vextracti64x2_xmm_ymm_u() {
			TestAssembler(c => c.vextracti64x2(xmm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vextracti64x2_xmmm128_k1z_ymm_imm8, Register.XMM2, Register.YMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vextracti64x2_m_ymm_u() {
			TestAssembler(c => c.vextracti64x2(__xmmword_ptr[rcx].k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vextracti64x2_xmmm128_k1z_ymm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vextracti64x2_xmm_zmm_u() {
			TestAssembler(c => c.vextracti64x2(xmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vextracti64x2_xmmm128_k1z_zmm_imm8, Register.XMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vextracti64x2_m_zmm_u() {
			TestAssembler(c => c.vextracti64x2(__xmmword_ptr[rcx].k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vextracti64x2_xmmm128_k1z_zmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vextracti64x4_ymm_zmm_i() {
			TestAssembler(c => c.vextracti64x4(ymm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vextracti64x4_ymmm256_k1z_zmm_imm8, Register.YMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vextracti64x4_m_zmm_i() {
			TestAssembler(c => c.vextracti64x4(__ymmword_ptr[rcx].k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vextracti64x4_ymmm256_k1z_zmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vextracti64x4_ymm_zmm_u() {
			TestAssembler(c => c.vextracti64x4(ymm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vextracti64x4_ymmm256_k1z_zmm_imm8, Register.YMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vextracti64x4_m_zmm_u() {
			TestAssembler(c => c.vextracti64x4(__ymmword_ptr[rcx].k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vextracti64x4_ymmm256_k1z_zmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vextractps_r32_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vextractps(edx, xmm3, -5), Instruction.Create(Code.VEX_Vextractps_rm32_xmm_imm8, Register.EDX, Register.XMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vextractps(edx, xmm3, -5), Instruction.Create(Code.EVEX_Vextractps_rm32_xmm_imm8, Register.EDX, Register.XMM3, -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vextractps_r64_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vextractps(rdx, xmm3, -5), Instruction.Create(Code.VEX_Vextractps_r64m32_xmm_imm8, Register.RDX, Register.XMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vextractps(rdx, xmm3, -5), Instruction.Create(Code.EVEX_Vextractps_r64m32_xmm_imm8, Register.RDX, Register.XMM3, -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vextractps_m_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vextractps(__dword_ptr[rcx], xmm3, -5), Instruction.Create(Code.VEX_Vextractps_rm32_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vextractps(__dword_ptr[rcx], xmm3, -5), Instruction.Create(Code.EVEX_Vextractps_rm32_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vextractps_r32_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vextractps(edx, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vextractps_rm32_xmm_imm8, Register.EDX, Register.XMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vextractps(edx, xmm3, (byte)0x7F), Instruction.Create(Code.EVEX_Vextractps_rm32_xmm_imm8, Register.EDX, Register.XMM3, 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vextractps_r64_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vextractps(rdx, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vextractps_r64m32_xmm_imm8, Register.RDX, Register.XMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vextractps(rdx, xmm3, (byte)0x7F), Instruction.Create(Code.EVEX_Vextractps_r64m32_xmm_imm8, Register.RDX, Register.XMM3, 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vextractps_m_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vextractps(__dword_ptr[rcx], xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vextractps_rm32_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vextractps(__dword_ptr[rcx], xmm3, (byte)0x7F), Instruction.Create(Code.EVEX_Vextractps_rm32_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfcmaddcph_xmm_xmm_xmm() {
			TestAssembler(c => c.vfcmaddcph(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfcmaddcph_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfcmaddcph_ymm_ymm_ymm() {
			TestAssembler(c => c.vfcmaddcph(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfcmaddcph_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vfcmaddcph_zmm_zmm_zmm() {
			TestAssembler(c => c.vfcmaddcph(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfcmaddcph_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfcmaddcph_xmm_xmm_m() {
			TestAssembler(c => c.vfcmaddcph(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfcmaddcph_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfcmaddcph_ymm_ymm_m() {
			TestAssembler(c => c.vfcmaddcph(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfcmaddcph_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfcmaddcph_zmm_zmm_m() {
			TestAssembler(c => c.vfcmaddcph(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfcmaddcph_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfcmaddcsh_xmm_xmm_xmm() {
			TestAssembler(c => c.vfcmaddcsh(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfcmaddcsh_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfcmaddcsh_xmm_xmm_m() {
			TestAssembler(c => c.vfcmaddcsh(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfcmaddcsh_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfcmulcph_xmm_xmm_xmm() {
			TestAssembler(c => c.vfcmulcph(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfcmulcph_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfcmulcph_ymm_ymm_ymm() {
			TestAssembler(c => c.vfcmulcph(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfcmulcph_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vfcmulcph_zmm_zmm_zmm() {
			TestAssembler(c => c.vfcmulcph(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfcmulcph_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfcmulcph_xmm_xmm_m() {
			TestAssembler(c => c.vfcmulcph(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfcmulcph_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfcmulcph_ymm_ymm_m() {
			TestAssembler(c => c.vfcmulcph(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfcmulcph_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfcmulcph_zmm_zmm_m() {
			TestAssembler(c => c.vfcmulcph(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfcmulcph_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfcmulcsh_xmm_xmm_xmm() {
			TestAssembler(c => c.vfcmulcsh(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfcmulcsh_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfcmulcsh_xmm_xmm_m() {
			TestAssembler(c => c.vfcmulcsh(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfcmulcsh_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfixupimmpd_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vfixupimmpd(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmpd_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vfixupimmpd_ymm_ymm_ymm_i() {
			TestAssembler(c => c.vfixupimmpd(ymm2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmpd_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vfixupimmpd_zmm_zmm_zmm_i() {
			TestAssembler(c => c.vfixupimmpd(zmm2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmpd_zmm_k1z_zmm_zmmm512b64_imm8_sae, Register.ZMM2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vfixupimmpd_xmm_xmm_m_i() {
			TestAssembler(c => c.vfixupimmpd(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmpd_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vfixupimmpd_ymm_ymm_m_i() {
			TestAssembler(c => c.vfixupimmpd(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmpd_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vfixupimmpd_zmm_zmm_m_i() {
			TestAssembler(c => c.vfixupimmpd(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmpd_zmm_k1z_zmm_zmmm512b64_imm8_sae, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vfixupimmpd_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vfixupimmpd(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmpd_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vfixupimmpd_ymm_ymm_ymm_u() {
			TestAssembler(c => c.vfixupimmpd(ymm2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmpd_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vfixupimmpd_zmm_zmm_zmm_u() {
			TestAssembler(c => c.vfixupimmpd(zmm2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmpd_zmm_k1z_zmm_zmmm512b64_imm8_sae, Register.ZMM2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vfixupimmpd_xmm_xmm_m_u() {
			TestAssembler(c => c.vfixupimmpd(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmpd_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vfixupimmpd_ymm_ymm_m_u() {
			TestAssembler(c => c.vfixupimmpd(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmpd_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vfixupimmpd_zmm_zmm_m_u() {
			TestAssembler(c => c.vfixupimmpd(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmpd_zmm_k1z_zmm_zmmm512b64_imm8_sae, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vfixupimmps_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vfixupimmps(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmps_xmm_k1z_xmm_xmmm128b32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vfixupimmps_ymm_ymm_ymm_i() {
			TestAssembler(c => c.vfixupimmps(ymm2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmps_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vfixupimmps_zmm_zmm_zmm_i() {
			TestAssembler(c => c.vfixupimmps(zmm2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmps_zmm_k1z_zmm_zmmm512b32_imm8_sae, Register.ZMM2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vfixupimmps_xmm_xmm_m_i() {
			TestAssembler(c => c.vfixupimmps(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmps_xmm_k1z_xmm_xmmm128b32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vfixupimmps_ymm_ymm_m_i() {
			TestAssembler(c => c.vfixupimmps(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmps_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vfixupimmps_zmm_zmm_m_i() {
			TestAssembler(c => c.vfixupimmps(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmps_zmm_k1z_zmm_zmmm512b32_imm8_sae, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vfixupimmps_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vfixupimmps(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmps_xmm_k1z_xmm_xmmm128b32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vfixupimmps_ymm_ymm_ymm_u() {
			TestAssembler(c => c.vfixupimmps(ymm2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmps_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vfixupimmps_zmm_zmm_zmm_u() {
			TestAssembler(c => c.vfixupimmps(zmm2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmps_zmm_k1z_zmm_zmmm512b32_imm8_sae, Register.ZMM2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vfixupimmps_xmm_xmm_m_u() {
			TestAssembler(c => c.vfixupimmps(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmps_xmm_k1z_xmm_xmmm128b32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vfixupimmps_ymm_ymm_m_u() {
			TestAssembler(c => c.vfixupimmps(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmps_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vfixupimmps_zmm_zmm_m_u() {
			TestAssembler(c => c.vfixupimmps(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmps_zmm_k1z_zmm_zmmm512b32_imm8_sae, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vfixupimmsd_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vfixupimmsd(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmsd_xmm_k1z_xmm_xmmm64_imm8_sae, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vfixupimmsd_xmm_xmm_m_i() {
			TestAssembler(c => c.vfixupimmsd(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmsd_xmm_k1z_xmm_xmmm64_imm8_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vfixupimmsd_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vfixupimmsd(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmsd_xmm_k1z_xmm_xmmm64_imm8_sae, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vfixupimmsd_xmm_xmm_m_u() {
			TestAssembler(c => c.vfixupimmsd(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmsd_xmm_k1z_xmm_xmmm64_imm8_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vfixupimmss_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vfixupimmss(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmss_xmm_k1z_xmm_xmmm32_imm8_sae, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vfixupimmss_xmm_xmm_m_i() {
			TestAssembler(c => c.vfixupimmss(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmss_xmm_k1z_xmm_xmmm32_imm8_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vfixupimmss_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vfixupimmss(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmss_xmm_k1z_xmm_xmmm32_imm8_sae, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vfixupimmss_xmm_xmm_m_u() {
			TestAssembler(c => c.vfixupimmss(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfixupimmss_xmm_k1z_xmm_xmmm32_imm8_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vfmadd132pd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd132pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmadd132pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd132pd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd132pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd132pd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd132pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmadd132pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd132pd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd132pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd132pd_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmadd132pd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd132pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmadd132pd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmadd132pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd132pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd132pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd132pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd132pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd132pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd132pd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmadd132pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd132pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd132pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd132pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd132pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd132pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd132pd_zmm_zmm_m() {
			TestAssembler(c => c.vfmadd132pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd132pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmadd132ph_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmadd132ph(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd132ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfmadd132ph_ymm_ymm_ymm() {
			TestAssembler(c => c.vfmadd132ph(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd132ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vfmadd132ph_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmadd132ph(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd132ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmadd132ph_xmm_xmm_m() {
			TestAssembler(c => c.vfmadd132ph(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd132ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmadd132ph_ymm_ymm_m() {
			TestAssembler(c => c.vfmadd132ph(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd132ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmadd132ph_zmm_zmm_m() {
			TestAssembler(c => c.vfmadd132ph(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd132ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmadd132ps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd132ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmadd132ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd132ps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd132ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd132ps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd132ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmadd132ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd132ps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd132ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd132ps_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmadd132ps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd132ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmadd132ps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmadd132ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd132ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd132ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd132ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd132ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd132ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd132ps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmadd132ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd132ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd132ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd132ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd132ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd132ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd132ps_zmm_zmm_m() {
			TestAssembler(c => c.vfmadd132ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd132ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmadd132sd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd132sd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmadd132sd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd132sd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd132sd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd132sd_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd132sd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd132sd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd132sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd132sd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd132sh_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmadd132sh(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd132sh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfmadd132sh_xmm_xmm_m() {
			TestAssembler(c => c.vfmadd132sh(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd132sh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmadd132ss_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd132ss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmadd132ss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd132ss(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd132ss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd132ss_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd132ss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd132ss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd132ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd132ss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd213pd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd213pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmadd213pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd213pd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd213pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd213pd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd213pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmadd213pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd213pd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd213pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd213pd_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmadd213pd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd213pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmadd213pd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmadd213pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd213pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd213pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd213pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd213pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd213pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd213pd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmadd213pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd213pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd213pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd213pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd213pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd213pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd213pd_zmm_zmm_m() {
			TestAssembler(c => c.vfmadd213pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd213pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmadd213ph_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmadd213ph(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd213ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfmadd213ph_ymm_ymm_ymm() {
			TestAssembler(c => c.vfmadd213ph(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd213ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vfmadd213ph_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmadd213ph(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd213ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmadd213ph_xmm_xmm_m() {
			TestAssembler(c => c.vfmadd213ph(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd213ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmadd213ph_ymm_ymm_m() {
			TestAssembler(c => c.vfmadd213ph(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd213ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmadd213ph_zmm_zmm_m() {
			TestAssembler(c => c.vfmadd213ph(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd213ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmadd213ps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd213ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmadd213ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd213ps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd213ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd213ps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd213ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmadd213ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd213ps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd213ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd213ps_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmadd213ps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd213ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmadd213ps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmadd213ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd213ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd213ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd213ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd213ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd213ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd213ps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmadd213ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd213ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd213ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd213ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd213ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd213ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd213ps_zmm_zmm_m() {
			TestAssembler(c => c.vfmadd213ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd213ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmadd213sd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd213sd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmadd213sd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd213sd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd213sd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd213sd_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd213sd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd213sd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd213sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd213sd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd213sh_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmadd213sh(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd213sh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfmadd213sh_xmm_xmm_m() {
			TestAssembler(c => c.vfmadd213sh(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd213sh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmadd213ss_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd213ss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmadd213ss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd213ss(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd213ss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd213ss_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd213ss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd213ss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd213ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd213ss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd231pd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd231pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmadd231pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd231pd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd231pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd231pd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd231pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmadd231pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd231pd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd231pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd231pd_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmadd231pd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd231pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmadd231pd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmadd231pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd231pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd231pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd231pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd231pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd231pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd231pd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmadd231pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd231pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd231pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd231pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd231pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd231pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd231pd_zmm_zmm_m() {
			TestAssembler(c => c.vfmadd231pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd231pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmadd231ph_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmadd231ph(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd231ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfmadd231ph_ymm_ymm_ymm() {
			TestAssembler(c => c.vfmadd231ph(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd231ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vfmadd231ph_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmadd231ph(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd231ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmadd231ph_xmm_xmm_m() {
			TestAssembler(c => c.vfmadd231ph(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd231ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmadd231ph_ymm_ymm_m() {
			TestAssembler(c => c.vfmadd231ph(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd231ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmadd231ph_zmm_zmm_m() {
			TestAssembler(c => c.vfmadd231ph(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd231ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmadd231ps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd231ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmadd231ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd231ps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd231ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd231ps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd231ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmadd231ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd231ps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd231ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd231ps_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmadd231ps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd231ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmadd231ps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmadd231ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd231ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd231ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd231ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd231ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd231ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd231ps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmadd231ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd231ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd231ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd231ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd231ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd231ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd231ps_zmm_zmm_m() {
			TestAssembler(c => c.vfmadd231ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd231ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmadd231sd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd231sd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmadd231sd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd231sd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd231sd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd231sd_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd231sd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd231sd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd231sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd231sd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd231sh_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmadd231sh(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd231sh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfmadd231sh_xmm_xmm_m() {
			TestAssembler(c => c.vfmadd231sh(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd231sh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmadd231ss_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd231ss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmadd231ss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd231ss(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmadd231ss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmadd231ss_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmadd231ss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmadd231ss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmadd231ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmadd231ss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmaddcph_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmaddcph(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddcph_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfmaddcph_ymm_ymm_ymm() {
			TestAssembler(c => c.vfmaddcph(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddcph_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vfmaddcph_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmaddcph(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddcph_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmaddcph_xmm_xmm_m() {
			TestAssembler(c => c.vfmaddcph(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddcph_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmaddcph_ymm_ymm_m() {
			TestAssembler(c => c.vfmaddcph(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddcph_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmaddcph_zmm_zmm_m() {
			TestAssembler(c => c.vfmaddcph(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddcph_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmaddcsh_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmaddcsh(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddcsh_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfmaddcsh_xmm_xmm_m() {
			TestAssembler(c => c.vfmaddcsh(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddcsh_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmaddpd_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmaddpd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfmaddpd_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vfmaddpd_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vfmaddpd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfmaddpd_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vfmaddpd_ymm_ymm_ymm_ymm() {
			TestAssembler(c => c.vfmaddpd(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.VEX_Vfmaddpd_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, Register.YMM4, Register.YMM5));
		}

		[Fact]
		public void vfmaddpd_ymm_ymm_m_ymm() {
			TestAssembler(c => c.vfmaddpd(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.VEX_Vfmaddpd_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM5));
		}

		[Fact]
		public void vfmaddpd_xmm_xmm_xmm_m() {
			TestAssembler(c => c.vfmaddpd(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddpd_xmm_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfmaddpd_ymm_ymm_ymm_m() {
			TestAssembler(c => c.vfmaddpd(ymm2, ymm3, ymm4, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddpd_ymm_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfmaddps_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmaddps(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfmaddps_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vfmaddps_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vfmaddps(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfmaddps_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vfmaddps_ymm_ymm_ymm_ymm() {
			TestAssembler(c => c.vfmaddps(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.VEX_Vfmaddps_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, Register.YMM4, Register.YMM5));
		}

		[Fact]
		public void vfmaddps_ymm_ymm_m_ymm() {
			TestAssembler(c => c.vfmaddps(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.VEX_Vfmaddps_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM5));
		}

		[Fact]
		public void vfmaddps_xmm_xmm_xmm_m() {
			TestAssembler(c => c.vfmaddps(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddps_xmm_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfmaddps_ymm_ymm_ymm_m() {
			TestAssembler(c => c.vfmaddps(ymm2, ymm3, ymm4, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddps_ymm_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfmaddsd_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmaddsd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfmaddsd_xmm_xmm_xmmm64_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vfmaddsd_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vfmaddsd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfmaddsd_xmm_xmm_xmmm64_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vfmaddsd_xmm_xmm_xmm_m() {
			TestAssembler(c => c.vfmaddsd(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsd_xmm_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, Register.XMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfmaddss_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmaddss(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfmaddss_xmm_xmm_xmmm32_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vfmaddss_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vfmaddss(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfmaddss_xmm_xmm_xmmm32_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vfmaddss_xmm_xmm_xmm_m() {
			TestAssembler(c => c.vfmaddss(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddss_xmm_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, Register.XMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfmaddsub132pd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmaddsub132pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmaddsub132pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub132pd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub132pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmaddsub132pd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmaddsub132pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmaddsub132pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub132pd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub132pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmaddsub132pd_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmaddsub132pd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub132pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmaddsub132pd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmaddsub132pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub132pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmaddsub132pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsub132pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub132pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub132pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmaddsub132pd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmaddsub132pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub132pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmaddsub132pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsub132pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub132pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub132pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmaddsub132pd_zmm_zmm_m() {
			TestAssembler(c => c.vfmaddsub132pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub132pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmaddsub132ph_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmaddsub132ph(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub132ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfmaddsub132ph_ymm_ymm_ymm() {
			TestAssembler(c => c.vfmaddsub132ph(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub132ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vfmaddsub132ph_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmaddsub132ph(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub132ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmaddsub132ph_xmm_xmm_m() {
			TestAssembler(c => c.vfmaddsub132ph(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub132ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmaddsub132ph_ymm_ymm_m() {
			TestAssembler(c => c.vfmaddsub132ph(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub132ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmaddsub132ph_zmm_zmm_m() {
			TestAssembler(c => c.vfmaddsub132ph(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub132ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmaddsub132ps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmaddsub132ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmaddsub132ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub132ps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub132ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmaddsub132ps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmaddsub132ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmaddsub132ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub132ps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub132ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmaddsub132ps_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmaddsub132ps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub132ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmaddsub132ps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmaddsub132ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub132ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmaddsub132ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsub132ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub132ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub132ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmaddsub132ps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmaddsub132ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub132ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmaddsub132ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsub132ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub132ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub132ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmaddsub132ps_zmm_zmm_m() {
			TestAssembler(c => c.vfmaddsub132ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub132ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmaddsub213pd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmaddsub213pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmaddsub213pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub213pd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub213pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmaddsub213pd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmaddsub213pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmaddsub213pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub213pd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub213pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmaddsub213pd_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmaddsub213pd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub213pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmaddsub213pd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmaddsub213pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub213pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmaddsub213pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsub213pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub213pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub213pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmaddsub213pd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmaddsub213pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub213pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmaddsub213pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsub213pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub213pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub213pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmaddsub213pd_zmm_zmm_m() {
			TestAssembler(c => c.vfmaddsub213pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub213pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmaddsub213ph_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmaddsub213ph(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub213ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfmaddsub213ph_ymm_ymm_ymm() {
			TestAssembler(c => c.vfmaddsub213ph(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub213ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vfmaddsub213ph_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmaddsub213ph(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub213ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmaddsub213ph_xmm_xmm_m() {
			TestAssembler(c => c.vfmaddsub213ph(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub213ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmaddsub213ph_ymm_ymm_m() {
			TestAssembler(c => c.vfmaddsub213ph(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub213ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmaddsub213ph_zmm_zmm_m() {
			TestAssembler(c => c.vfmaddsub213ph(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub213ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmaddsub213ps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmaddsub213ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmaddsub213ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub213ps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub213ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmaddsub213ps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmaddsub213ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmaddsub213ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub213ps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub213ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmaddsub213ps_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmaddsub213ps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub213ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmaddsub213ps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmaddsub213ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub213ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmaddsub213ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsub213ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub213ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub213ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmaddsub213ps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmaddsub213ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub213ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmaddsub213ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsub213ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub213ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub213ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmaddsub213ps_zmm_zmm_m() {
			TestAssembler(c => c.vfmaddsub213ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub213ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmaddsub231pd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmaddsub231pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmaddsub231pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub231pd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub231pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmaddsub231pd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmaddsub231pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmaddsub231pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub231pd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub231pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmaddsub231pd_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmaddsub231pd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub231pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmaddsub231pd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmaddsub231pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub231pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmaddsub231pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsub231pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub231pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub231pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmaddsub231pd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmaddsub231pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub231pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmaddsub231pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsub231pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub231pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub231pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmaddsub231pd_zmm_zmm_m() {
			TestAssembler(c => c.vfmaddsub231pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub231pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmaddsub231ph_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmaddsub231ph(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub231ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfmaddsub231ph_ymm_ymm_ymm() {
			TestAssembler(c => c.vfmaddsub231ph(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub231ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vfmaddsub231ph_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmaddsub231ph(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub231ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmaddsub231ph_xmm_xmm_m() {
			TestAssembler(c => c.vfmaddsub231ph(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub231ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmaddsub231ph_ymm_ymm_m() {
			TestAssembler(c => c.vfmaddsub231ph(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub231ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmaddsub231ph_zmm_zmm_m() {
			TestAssembler(c => c.vfmaddsub231ph(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub231ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmaddsub231ps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmaddsub231ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmaddsub231ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub231ps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub231ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmaddsub231ps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmaddsub231ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmaddsub231ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub231ps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub231ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmaddsub231ps_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmaddsub231ps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub231ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmaddsub231ps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmaddsub231ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub231ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmaddsub231ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsub231ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub231ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub231ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmaddsub231ps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmaddsub231ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub231ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmaddsub231ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsub231ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmaddsub231ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub231ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmaddsub231ps_zmm_zmm_m() {
			TestAssembler(c => c.vfmaddsub231ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmaddsub231ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmaddsubpd_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmaddsubpd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfmaddsubpd_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vfmaddsubpd_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vfmaddsubpd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfmaddsubpd_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vfmaddsubpd_ymm_ymm_ymm_ymm() {
			TestAssembler(c => c.vfmaddsubpd(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.VEX_Vfmaddsubpd_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, Register.YMM4, Register.YMM5));
		}

		[Fact]
		public void vfmaddsubpd_ymm_ymm_m_ymm() {
			TestAssembler(c => c.vfmaddsubpd(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.VEX_Vfmaddsubpd_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM5));
		}

		[Fact]
		public void vfmaddsubpd_xmm_xmm_xmm_m() {
			TestAssembler(c => c.vfmaddsubpd(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsubpd_xmm_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfmaddsubpd_ymm_ymm_ymm_m() {
			TestAssembler(c => c.vfmaddsubpd(ymm2, ymm3, ymm4, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsubpd_ymm_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfmaddsubps_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmaddsubps(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfmaddsubps_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vfmaddsubps_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vfmaddsubps(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfmaddsubps_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vfmaddsubps_ymm_ymm_ymm_ymm() {
			TestAssembler(c => c.vfmaddsubps(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.VEX_Vfmaddsubps_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, Register.YMM4, Register.YMM5));
		}

		[Fact]
		public void vfmaddsubps_ymm_ymm_m_ymm() {
			TestAssembler(c => c.vfmaddsubps(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.VEX_Vfmaddsubps_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM5));
		}

		[Fact]
		public void vfmaddsubps_xmm_xmm_xmm_m() {
			TestAssembler(c => c.vfmaddsubps(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsubps_xmm_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfmaddsubps_ymm_ymm_ymm_m() {
			TestAssembler(c => c.vfmaddsubps(ymm2, ymm3, ymm4, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmaddsubps_ymm_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfmsub132pd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub132pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsub132pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub132pd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub132pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub132pd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub132pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmsub132pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub132pd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub132pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub132pd_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmsub132pd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub132pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmsub132pd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsub132pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub132pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub132pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub132pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub132pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub132pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub132pd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsub132pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub132pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub132pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub132pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub132pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub132pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub132pd_zmm_zmm_m() {
			TestAssembler(c => c.vfmsub132pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub132pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsub132ph_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmsub132ph(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub132ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfmsub132ph_ymm_ymm_ymm() {
			TestAssembler(c => c.vfmsub132ph(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub132ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vfmsub132ph_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmsub132ph(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub132ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmsub132ph_xmm_xmm_m() {
			TestAssembler(c => c.vfmsub132ph(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub132ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsub132ph_ymm_ymm_m() {
			TestAssembler(c => c.vfmsub132ph(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub132ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsub132ph_zmm_zmm_m() {
			TestAssembler(c => c.vfmsub132ph(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub132ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsub132ps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub132ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsub132ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub132ps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub132ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub132ps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub132ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmsub132ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub132ps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub132ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub132ps_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmsub132ps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub132ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmsub132ps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsub132ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub132ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub132ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub132ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub132ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub132ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub132ps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsub132ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub132ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub132ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub132ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub132ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub132ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub132ps_zmm_zmm_m() {
			TestAssembler(c => c.vfmsub132ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub132ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsub132sd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub132sd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsub132sd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub132sd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub132sd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub132sd_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub132sd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub132sd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub132sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub132sd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub132sh_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmsub132sh(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub132sh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfmsub132sh_xmm_xmm_m() {
			TestAssembler(c => c.vfmsub132sh(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub132sh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsub132ss_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub132ss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsub132ss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub132ss(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub132ss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub132ss_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub132ss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub132ss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub132ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub132ss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub213pd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub213pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsub213pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub213pd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub213pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub213pd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub213pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmsub213pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub213pd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub213pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub213pd_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmsub213pd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub213pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmsub213pd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsub213pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub213pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub213pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub213pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub213pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub213pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub213pd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsub213pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub213pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub213pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub213pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub213pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub213pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub213pd_zmm_zmm_m() {
			TestAssembler(c => c.vfmsub213pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub213pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsub213ph_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmsub213ph(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub213ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfmsub213ph_ymm_ymm_ymm() {
			TestAssembler(c => c.vfmsub213ph(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub213ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vfmsub213ph_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmsub213ph(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub213ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmsub213ph_xmm_xmm_m() {
			TestAssembler(c => c.vfmsub213ph(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub213ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsub213ph_ymm_ymm_m() {
			TestAssembler(c => c.vfmsub213ph(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub213ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsub213ph_zmm_zmm_m() {
			TestAssembler(c => c.vfmsub213ph(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub213ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsub213ps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub213ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsub213ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub213ps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub213ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub213ps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub213ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmsub213ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub213ps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub213ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub213ps_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmsub213ps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub213ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmsub213ps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsub213ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub213ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub213ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub213ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub213ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub213ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub213ps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsub213ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub213ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub213ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub213ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub213ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub213ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub213ps_zmm_zmm_m() {
			TestAssembler(c => c.vfmsub213ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub213ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsub213sd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub213sd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsub213sd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub213sd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub213sd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub213sd_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub213sd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub213sd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub213sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub213sd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub213sh_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmsub213sh(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub213sh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfmsub213sh_xmm_xmm_m() {
			TestAssembler(c => c.vfmsub213sh(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub213sh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsub213ss_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub213ss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsub213ss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub213ss(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub213ss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub213ss_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub213ss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub213ss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub213ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub213ss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub231pd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub231pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsub231pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub231pd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub231pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub231pd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub231pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmsub231pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub231pd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub231pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub231pd_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmsub231pd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub231pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmsub231pd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsub231pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub231pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub231pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub231pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub231pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub231pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub231pd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsub231pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub231pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub231pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub231pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub231pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub231pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub231pd_zmm_zmm_m() {
			TestAssembler(c => c.vfmsub231pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub231pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsub231ph_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmsub231ph(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub231ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfmsub231ph_ymm_ymm_ymm() {
			TestAssembler(c => c.vfmsub231ph(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub231ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vfmsub231ph_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmsub231ph(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub231ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmsub231ph_xmm_xmm_m() {
			TestAssembler(c => c.vfmsub231ph(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub231ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsub231ph_ymm_ymm_m() {
			TestAssembler(c => c.vfmsub231ph(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub231ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsub231ph_zmm_zmm_m() {
			TestAssembler(c => c.vfmsub231ph(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub231ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsub231ps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub231ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsub231ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub231ps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub231ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub231ps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub231ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmsub231ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub231ps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub231ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub231ps_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmsub231ps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub231ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmsub231ps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsub231ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub231ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub231ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub231ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub231ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub231ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub231ps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsub231ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub231ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub231ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub231ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub231ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub231ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub231ps_zmm_zmm_m() {
			TestAssembler(c => c.vfmsub231ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub231ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsub231sd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub231sd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsub231sd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub231sd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub231sd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub231sd_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub231sd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub231sd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub231sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub231sd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub231sh_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmsub231sh(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub231sh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfmsub231sh_xmm_xmm_m() {
			TestAssembler(c => c.vfmsub231sh(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub231sh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsub231ss_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub231ss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsub231ss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub231ss(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsub231ss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsub231ss_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsub231ss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsub231ss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsub231ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsub231ss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsubadd132pd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsubadd132pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsubadd132pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd132pd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd132pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsubadd132pd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsubadd132pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmsubadd132pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd132pd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd132pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsubadd132pd_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmsubadd132pd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd132pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmsubadd132pd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsubadd132pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd132pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsubadd132pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubadd132pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd132pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd132pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsubadd132pd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsubadd132pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd132pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsubadd132pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubadd132pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd132pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd132pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsubadd132pd_zmm_zmm_m() {
			TestAssembler(c => c.vfmsubadd132pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd132pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsubadd132ph_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmsubadd132ph(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd132ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfmsubadd132ph_ymm_ymm_ymm() {
			TestAssembler(c => c.vfmsubadd132ph(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd132ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vfmsubadd132ph_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmsubadd132ph(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd132ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmsubadd132ph_xmm_xmm_m() {
			TestAssembler(c => c.vfmsubadd132ph(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd132ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsubadd132ph_ymm_ymm_m() {
			TestAssembler(c => c.vfmsubadd132ph(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd132ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsubadd132ph_zmm_zmm_m() {
			TestAssembler(c => c.vfmsubadd132ph(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd132ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsubadd132ps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsubadd132ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsubadd132ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd132ps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd132ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsubadd132ps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsubadd132ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmsubadd132ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd132ps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd132ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsubadd132ps_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmsubadd132ps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd132ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmsubadd132ps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsubadd132ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd132ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsubadd132ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubadd132ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd132ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd132ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsubadd132ps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsubadd132ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd132ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsubadd132ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubadd132ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd132ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd132ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsubadd132ps_zmm_zmm_m() {
			TestAssembler(c => c.vfmsubadd132ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd132ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsubadd213pd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsubadd213pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsubadd213pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd213pd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd213pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsubadd213pd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsubadd213pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmsubadd213pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd213pd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd213pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsubadd213pd_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmsubadd213pd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd213pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmsubadd213pd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsubadd213pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd213pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsubadd213pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubadd213pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd213pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd213pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsubadd213pd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsubadd213pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd213pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsubadd213pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubadd213pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd213pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd213pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsubadd213pd_zmm_zmm_m() {
			TestAssembler(c => c.vfmsubadd213pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd213pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsubadd213ph_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmsubadd213ph(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd213ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfmsubadd213ph_ymm_ymm_ymm() {
			TestAssembler(c => c.vfmsubadd213ph(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd213ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vfmsubadd213ph_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmsubadd213ph(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd213ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmsubadd213ph_xmm_xmm_m() {
			TestAssembler(c => c.vfmsubadd213ph(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd213ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsubadd213ph_ymm_ymm_m() {
			TestAssembler(c => c.vfmsubadd213ph(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd213ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsubadd213ph_zmm_zmm_m() {
			TestAssembler(c => c.vfmsubadd213ph(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd213ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsubadd213ps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsubadd213ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsubadd213ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd213ps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd213ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsubadd213ps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsubadd213ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmsubadd213ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd213ps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd213ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsubadd213ps_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmsubadd213ps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd213ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmsubadd213ps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsubadd213ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd213ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsubadd213ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubadd213ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd213ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd213ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsubadd213ps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsubadd213ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd213ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsubadd213ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubadd213ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd213ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd213ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsubadd213ps_zmm_zmm_m() {
			TestAssembler(c => c.vfmsubadd213ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd213ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsubadd231pd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsubadd231pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsubadd231pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd231pd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd231pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsubadd231pd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsubadd231pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmsubadd231pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd231pd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd231pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsubadd231pd_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmsubadd231pd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd231pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmsubadd231pd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsubadd231pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd231pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsubadd231pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubadd231pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd231pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd231pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsubadd231pd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsubadd231pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd231pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsubadd231pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubadd231pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd231pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd231pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsubadd231pd_zmm_zmm_m() {
			TestAssembler(c => c.vfmsubadd231pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd231pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsubadd231ph_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmsubadd231ph(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd231ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfmsubadd231ph_ymm_ymm_ymm() {
			TestAssembler(c => c.vfmsubadd231ph(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd231ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vfmsubadd231ph_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmsubadd231ph(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd231ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmsubadd231ph_xmm_xmm_m() {
			TestAssembler(c => c.vfmsubadd231ph(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd231ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsubadd231ph_ymm_ymm_m() {
			TestAssembler(c => c.vfmsubadd231ph(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd231ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsubadd231ph_zmm_zmm_m() {
			TestAssembler(c => c.vfmsubadd231ph(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd231ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsubadd231ps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsubadd231ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfmsubadd231ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd231ps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd231ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsubadd231ps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsubadd231ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfmsubadd231ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd231ps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd231ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsubadd231ps_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmsubadd231ps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd231ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmsubadd231ps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsubadd231ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd231ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsubadd231ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubadd231ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd231ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd231ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsubadd231ps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfmsubadd231ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd231ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfmsubadd231ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubadd231ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfmsubadd231ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd231ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfmsubadd231ps_zmm_zmm_m() {
			TestAssembler(c => c.vfmsubadd231ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmsubadd231ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmsubaddpd_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmsubaddpd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfmsubaddpd_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vfmsubaddpd_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vfmsubaddpd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfmsubaddpd_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vfmsubaddpd_ymm_ymm_ymm_ymm() {
			TestAssembler(c => c.vfmsubaddpd(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.VEX_Vfmsubaddpd_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, Register.YMM4, Register.YMM5));
		}

		[Fact]
		public void vfmsubaddpd_ymm_ymm_m_ymm() {
			TestAssembler(c => c.vfmsubaddpd(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.VEX_Vfmsubaddpd_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM5));
		}

		[Fact]
		public void vfmsubaddpd_xmm_xmm_xmm_m() {
			TestAssembler(c => c.vfmsubaddpd(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubaddpd_xmm_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfmsubaddpd_ymm_ymm_ymm_m() {
			TestAssembler(c => c.vfmsubaddpd(ymm2, ymm3, ymm4, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubaddpd_ymm_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfmsubaddps_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmsubaddps(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfmsubaddps_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vfmsubaddps_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vfmsubaddps(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfmsubaddps_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vfmsubaddps_ymm_ymm_ymm_ymm() {
			TestAssembler(c => c.vfmsubaddps(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.VEX_Vfmsubaddps_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, Register.YMM4, Register.YMM5));
		}

		[Fact]
		public void vfmsubaddps_ymm_ymm_m_ymm() {
			TestAssembler(c => c.vfmsubaddps(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.VEX_Vfmsubaddps_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM5));
		}

		[Fact]
		public void vfmsubaddps_xmm_xmm_xmm_m() {
			TestAssembler(c => c.vfmsubaddps(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubaddps_xmm_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfmsubaddps_ymm_ymm_ymm_m() {
			TestAssembler(c => c.vfmsubaddps(ymm2, ymm3, ymm4, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubaddps_ymm_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfmsubpd_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmsubpd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfmsubpd_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vfmsubpd_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vfmsubpd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfmsubpd_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vfmsubpd_ymm_ymm_ymm_ymm() {
			TestAssembler(c => c.vfmsubpd(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.VEX_Vfmsubpd_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, Register.YMM4, Register.YMM5));
		}

		[Fact]
		public void vfmsubpd_ymm_ymm_m_ymm() {
			TestAssembler(c => c.vfmsubpd(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.VEX_Vfmsubpd_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM5));
		}

		[Fact]
		public void vfmsubpd_xmm_xmm_xmm_m() {
			TestAssembler(c => c.vfmsubpd(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubpd_xmm_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfmsubpd_ymm_ymm_ymm_m() {
			TestAssembler(c => c.vfmsubpd(ymm2, ymm3, ymm4, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubpd_ymm_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfmsubps_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmsubps(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfmsubps_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vfmsubps_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vfmsubps(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfmsubps_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vfmsubps_ymm_ymm_ymm_ymm() {
			TestAssembler(c => c.vfmsubps(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.VEX_Vfmsubps_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, Register.YMM4, Register.YMM5));
		}

		[Fact]
		public void vfmsubps_ymm_ymm_m_ymm() {
			TestAssembler(c => c.vfmsubps(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.VEX_Vfmsubps_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM5));
		}

		[Fact]
		public void vfmsubps_xmm_xmm_xmm_m() {
			TestAssembler(c => c.vfmsubps(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubps_xmm_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfmsubps_ymm_ymm_ymm_m() {
			TestAssembler(c => c.vfmsubps(ymm2, ymm3, ymm4, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubps_ymm_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfmsubsd_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmsubsd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfmsubsd_xmm_xmm_xmmm64_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vfmsubsd_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vfmsubsd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfmsubsd_xmm_xmm_xmmm64_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vfmsubsd_xmm_xmm_xmm_m() {
			TestAssembler(c => c.vfmsubsd(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubsd_xmm_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, Register.XMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfmsubss_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmsubss(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfmsubss_xmm_xmm_xmmm32_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vfmsubss_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vfmsubss(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfmsubss_xmm_xmm_xmmm32_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vfmsubss_xmm_xmm_xmm_m() {
			TestAssembler(c => c.vfmsubss(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfmsubss_xmm_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, Register.XMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfmulcph_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmulcph(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmulcph_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfmulcph_ymm_ymm_ymm() {
			TestAssembler(c => c.vfmulcph(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfmulcph_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vfmulcph_zmm_zmm_zmm() {
			TestAssembler(c => c.vfmulcph(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmulcph_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfmulcph_xmm_xmm_m() {
			TestAssembler(c => c.vfmulcph(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmulcph_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmulcph_ymm_ymm_m() {
			TestAssembler(c => c.vfmulcph(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmulcph_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmulcph_zmm_zmm_m() {
			TestAssembler(c => c.vfmulcph(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmulcph_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfmulcsh_xmm_xmm_xmm() {
			TestAssembler(c => c.vfmulcsh(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfmulcsh_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfmulcsh_xmm_xmm_m() {
			TestAssembler(c => c.vfmulcsh(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfmulcsh_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmadd132pd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd132pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmadd132pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd132pd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd132pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd132pd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd132pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfnmadd132pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd132pd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd132pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd132pd_zmm_zmm_zmm() {
			TestAssembler(c => c.vfnmadd132pd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd132pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfnmadd132pd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmadd132pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd132pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd132pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd132pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd132pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd132pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd132pd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmadd132pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd132pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd132pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd132pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd132pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd132pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd132pd_zmm_zmm_m() {
			TestAssembler(c => c.vfnmadd132pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd132pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmadd132ph_xmm_xmm_xmm() {
			TestAssembler(c => c.vfnmadd132ph(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd132ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfnmadd132ph_ymm_ymm_ymm() {
			TestAssembler(c => c.vfnmadd132ph(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd132ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vfnmadd132ph_zmm_zmm_zmm() {
			TestAssembler(c => c.vfnmadd132ph(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd132ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfnmadd132ph_xmm_xmm_m() {
			TestAssembler(c => c.vfnmadd132ph(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd132ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmadd132ph_ymm_ymm_m() {
			TestAssembler(c => c.vfnmadd132ph(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd132ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmadd132ph_zmm_zmm_m() {
			TestAssembler(c => c.vfnmadd132ph(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd132ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmadd132ps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd132ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmadd132ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd132ps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd132ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd132ps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd132ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfnmadd132ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd132ps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd132ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd132ps_zmm_zmm_zmm() {
			TestAssembler(c => c.vfnmadd132ps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd132ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfnmadd132ps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmadd132ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd132ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd132ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd132ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd132ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd132ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd132ps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmadd132ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd132ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd132ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd132ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd132ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd132ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd132ps_zmm_zmm_m() {
			TestAssembler(c => c.vfnmadd132ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd132ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmadd132sd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd132sd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmadd132sd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd132sd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd132sd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd132sd_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd132sd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd132sd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd132sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd132sd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd132sh_xmm_xmm_xmm() {
			TestAssembler(c => c.vfnmadd132sh(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd132sh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfnmadd132sh_xmm_xmm_m() {
			TestAssembler(c => c.vfnmadd132sh(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd132sh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmadd132ss_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd132ss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmadd132ss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd132ss(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd132ss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd132ss_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd132ss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd132ss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd132ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd132ss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd213pd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd213pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmadd213pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd213pd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd213pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd213pd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd213pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfnmadd213pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd213pd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd213pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd213pd_zmm_zmm_zmm() {
			TestAssembler(c => c.vfnmadd213pd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd213pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfnmadd213pd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmadd213pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd213pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd213pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd213pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd213pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd213pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd213pd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmadd213pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd213pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd213pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd213pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd213pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd213pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd213pd_zmm_zmm_m() {
			TestAssembler(c => c.vfnmadd213pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd213pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmadd213ph_xmm_xmm_xmm() {
			TestAssembler(c => c.vfnmadd213ph(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd213ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfnmadd213ph_ymm_ymm_ymm() {
			TestAssembler(c => c.vfnmadd213ph(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd213ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vfnmadd213ph_zmm_zmm_zmm() {
			TestAssembler(c => c.vfnmadd213ph(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd213ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfnmadd213ph_xmm_xmm_m() {
			TestAssembler(c => c.vfnmadd213ph(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd213ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmadd213ph_ymm_ymm_m() {
			TestAssembler(c => c.vfnmadd213ph(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd213ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmadd213ph_zmm_zmm_m() {
			TestAssembler(c => c.vfnmadd213ph(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd213ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmadd213ps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd213ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmadd213ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd213ps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd213ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd213ps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd213ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfnmadd213ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd213ps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd213ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd213ps_zmm_zmm_zmm() {
			TestAssembler(c => c.vfnmadd213ps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd213ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfnmadd213ps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmadd213ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd213ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd213ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd213ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd213ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd213ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd213ps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmadd213ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd213ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd213ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd213ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd213ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd213ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd213ps_zmm_zmm_m() {
			TestAssembler(c => c.vfnmadd213ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd213ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmadd213sd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd213sd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmadd213sd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd213sd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd213sd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd213sd_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd213sd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd213sd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd213sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd213sd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd213sh_xmm_xmm_xmm() {
			TestAssembler(c => c.vfnmadd213sh(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd213sh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfnmadd213sh_xmm_xmm_m() {
			TestAssembler(c => c.vfnmadd213sh(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd213sh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmadd213ss_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd213ss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmadd213ss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd213ss(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd213ss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd213ss_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd213ss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd213ss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd213ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd213ss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd231pd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd231pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmadd231pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd231pd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd231pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd231pd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd231pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfnmadd231pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd231pd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd231pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd231pd_zmm_zmm_zmm() {
			TestAssembler(c => c.vfnmadd231pd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd231pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfnmadd231pd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmadd231pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd231pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd231pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd231pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd231pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd231pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd231pd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmadd231pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd231pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd231pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd231pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd231pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd231pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd231pd_zmm_zmm_m() {
			TestAssembler(c => c.vfnmadd231pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd231pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmadd231ph_xmm_xmm_xmm() {
			TestAssembler(c => c.vfnmadd231ph(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd231ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfnmadd231ph_ymm_ymm_ymm() {
			TestAssembler(c => c.vfnmadd231ph(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd231ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vfnmadd231ph_zmm_zmm_zmm() {
			TestAssembler(c => c.vfnmadd231ph(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd231ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfnmadd231ph_xmm_xmm_m() {
			TestAssembler(c => c.vfnmadd231ph(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd231ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmadd231ph_ymm_ymm_m() {
			TestAssembler(c => c.vfnmadd231ph(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd231ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmadd231ph_zmm_zmm_m() {
			TestAssembler(c => c.vfnmadd231ph(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd231ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmadd231ps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd231ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmadd231ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd231ps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd231ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd231ps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd231ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfnmadd231ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd231ps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd231ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd231ps_zmm_zmm_zmm() {
			TestAssembler(c => c.vfnmadd231ps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd231ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfnmadd231ps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmadd231ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd231ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd231ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd231ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd231ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd231ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd231ps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmadd231ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd231ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd231ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd231ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd231ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd231ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd231ps_zmm_zmm_m() {
			TestAssembler(c => c.vfnmadd231ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd231ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmadd231sd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd231sd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmadd231sd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd231sd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd231sd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd231sd_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd231sd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd231sd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd231sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd231sd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd231sh_xmm_xmm_xmm() {
			TestAssembler(c => c.vfnmadd231sh(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd231sh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfnmadd231sh_xmm_xmm_m() {
			TestAssembler(c => c.vfnmadd231sh(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd231sh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmadd231ss_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd231ss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmadd231ss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd231ss(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd231ss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmadd231ss_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmadd231ss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmadd231ss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmadd231ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmadd231ss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmaddpd_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vfnmaddpd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfnmaddpd_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vfnmaddpd_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vfnmaddpd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfnmaddpd_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vfnmaddpd_ymm_ymm_ymm_ymm() {
			TestAssembler(c => c.vfnmaddpd(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.VEX_Vfnmaddpd_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, Register.YMM4, Register.YMM5));
		}

		[Fact]
		public void vfnmaddpd_ymm_ymm_m_ymm() {
			TestAssembler(c => c.vfnmaddpd(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.VEX_Vfnmaddpd_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM5));
		}

		[Fact]
		public void vfnmaddpd_xmm_xmm_xmm_m() {
			TestAssembler(c => c.vfnmaddpd(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmaddpd_xmm_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfnmaddpd_ymm_ymm_ymm_m() {
			TestAssembler(c => c.vfnmaddpd(ymm2, ymm3, ymm4, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmaddpd_ymm_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfnmaddps_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vfnmaddps(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfnmaddps_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vfnmaddps_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vfnmaddps(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfnmaddps_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vfnmaddps_ymm_ymm_ymm_ymm() {
			TestAssembler(c => c.vfnmaddps(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.VEX_Vfnmaddps_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, Register.YMM4, Register.YMM5));
		}

		[Fact]
		public void vfnmaddps_ymm_ymm_m_ymm() {
			TestAssembler(c => c.vfnmaddps(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.VEX_Vfnmaddps_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM5));
		}

		[Fact]
		public void vfnmaddps_xmm_xmm_xmm_m() {
			TestAssembler(c => c.vfnmaddps(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmaddps_xmm_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfnmaddps_ymm_ymm_ymm_m() {
			TestAssembler(c => c.vfnmaddps(ymm2, ymm3, ymm4, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmaddps_ymm_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfnmaddsd_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vfnmaddsd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfnmaddsd_xmm_xmm_xmmm64_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vfnmaddsd_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vfnmaddsd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfnmaddsd_xmm_xmm_xmmm64_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vfnmaddsd_xmm_xmm_xmm_m() {
			TestAssembler(c => c.vfnmaddsd(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmaddsd_xmm_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, Register.XMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfnmaddss_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vfnmaddss(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfnmaddss_xmm_xmm_xmmm32_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vfnmaddss_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vfnmaddss(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfnmaddss_xmm_xmm_xmmm32_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vfnmaddss_xmm_xmm_xmm_m() {
			TestAssembler(c => c.vfnmaddss(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmaddss_xmm_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, Register.XMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfnmsub132pd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub132pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmsub132pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub132pd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub132pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub132pd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub132pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfnmsub132pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub132pd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub132pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub132pd_zmm_zmm_zmm() {
			TestAssembler(c => c.vfnmsub132pd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub132pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfnmsub132pd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmsub132pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub132pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub132pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub132pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub132pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub132pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub132pd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmsub132pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub132pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub132pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub132pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub132pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub132pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub132pd_zmm_zmm_m() {
			TestAssembler(c => c.vfnmsub132pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub132pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmsub132ph_xmm_xmm_xmm() {
			TestAssembler(c => c.vfnmsub132ph(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub132ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfnmsub132ph_ymm_ymm_ymm() {
			TestAssembler(c => c.vfnmsub132ph(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub132ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vfnmsub132ph_zmm_zmm_zmm() {
			TestAssembler(c => c.vfnmsub132ph(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub132ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfnmsub132ph_xmm_xmm_m() {
			TestAssembler(c => c.vfnmsub132ph(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub132ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmsub132ph_ymm_ymm_m() {
			TestAssembler(c => c.vfnmsub132ph(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub132ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmsub132ph_zmm_zmm_m() {
			TestAssembler(c => c.vfnmsub132ph(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub132ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmsub132ps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub132ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmsub132ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub132ps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub132ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub132ps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub132ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfnmsub132ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub132ps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub132ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub132ps_zmm_zmm_zmm() {
			TestAssembler(c => c.vfnmsub132ps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub132ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfnmsub132ps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmsub132ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub132ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub132ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub132ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub132ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub132ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub132ps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmsub132ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub132ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub132ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub132ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub132ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub132ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub132ps_zmm_zmm_m() {
			TestAssembler(c => c.vfnmsub132ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub132ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmsub132sd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub132sd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmsub132sd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub132sd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub132sd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub132sd_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub132sd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub132sd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub132sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub132sd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub132sh_xmm_xmm_xmm() {
			TestAssembler(c => c.vfnmsub132sh(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub132sh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfnmsub132sh_xmm_xmm_m() {
			TestAssembler(c => c.vfnmsub132sh(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub132sh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmsub132ss_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub132ss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmsub132ss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub132ss(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub132ss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub132ss_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub132ss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub132ss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub132ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub132ss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub213pd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub213pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmsub213pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub213pd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub213pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub213pd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub213pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfnmsub213pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub213pd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub213pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub213pd_zmm_zmm_zmm() {
			TestAssembler(c => c.vfnmsub213pd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub213pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfnmsub213pd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmsub213pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub213pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub213pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub213pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub213pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub213pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub213pd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmsub213pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub213pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub213pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub213pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub213pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub213pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub213pd_zmm_zmm_m() {
			TestAssembler(c => c.vfnmsub213pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub213pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmsub213ph_xmm_xmm_xmm() {
			TestAssembler(c => c.vfnmsub213ph(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub213ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfnmsub213ph_ymm_ymm_ymm() {
			TestAssembler(c => c.vfnmsub213ph(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub213ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vfnmsub213ph_zmm_zmm_zmm() {
			TestAssembler(c => c.vfnmsub213ph(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub213ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfnmsub213ph_xmm_xmm_m() {
			TestAssembler(c => c.vfnmsub213ph(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub213ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmsub213ph_ymm_ymm_m() {
			TestAssembler(c => c.vfnmsub213ph(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub213ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmsub213ph_zmm_zmm_m() {
			TestAssembler(c => c.vfnmsub213ph(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub213ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmsub213ps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub213ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmsub213ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub213ps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub213ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub213ps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub213ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfnmsub213ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub213ps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub213ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub213ps_zmm_zmm_zmm() {
			TestAssembler(c => c.vfnmsub213ps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub213ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfnmsub213ps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmsub213ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub213ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub213ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub213ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub213ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub213ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub213ps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmsub213ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub213ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub213ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub213ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub213ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub213ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub213ps_zmm_zmm_m() {
			TestAssembler(c => c.vfnmsub213ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub213ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmsub213sd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub213sd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmsub213sd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub213sd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub213sd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub213sd_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub213sd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub213sd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub213sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub213sd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub213sh_xmm_xmm_xmm() {
			TestAssembler(c => c.vfnmsub213sh(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub213sh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfnmsub213sh_xmm_xmm_m() {
			TestAssembler(c => c.vfnmsub213sh(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub213sh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmsub213ss_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub213ss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmsub213ss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub213ss(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub213ss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub213ss_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub213ss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub213ss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub213ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub213ss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub231pd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub231pd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmsub231pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub231pd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub231pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub231pd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub231pd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfnmsub231pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub231pd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub231pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub231pd_zmm_zmm_zmm() {
			TestAssembler(c => c.vfnmsub231pd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub231pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfnmsub231pd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmsub231pd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub231pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub231pd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub231pd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub231pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub231pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub231pd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmsub231pd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub231pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub231pd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub231pd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub231pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub231pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub231pd_zmm_zmm_m() {
			TestAssembler(c => c.vfnmsub231pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub231pd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmsub231ph_xmm_xmm_xmm() {
			TestAssembler(c => c.vfnmsub231ph(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub231ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfnmsub231ph_ymm_ymm_ymm() {
			TestAssembler(c => c.vfnmsub231ph(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub231ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vfnmsub231ph_zmm_zmm_zmm() {
			TestAssembler(c => c.vfnmsub231ph(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub231ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfnmsub231ph_xmm_xmm_m() {
			TestAssembler(c => c.vfnmsub231ph(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub231ph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmsub231ph_ymm_ymm_m() {
			TestAssembler(c => c.vfnmsub231ph(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub231ph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmsub231ph_zmm_zmm_m() {
			TestAssembler(c => c.vfnmsub231ph(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub231ph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmsub231ps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub231ps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmsub231ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub231ps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub231ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub231ps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub231ps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vfnmsub231ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub231ps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub231ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub231ps_zmm_zmm_zmm() {
			TestAssembler(c => c.vfnmsub231ps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub231ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vfnmsub231ps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmsub231ps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub231ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub231ps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub231ps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub231ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub231ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub231ps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vfnmsub231ps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub231ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub231ps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub231ps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub231ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub231ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub231ps_zmm_zmm_m() {
			TestAssembler(c => c.vfnmsub231ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub231ps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmsub231sd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub231sd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmsub231sd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub231sd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub231sd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub231sd_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub231sd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub231sd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub231sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub231sd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub231sh_xmm_xmm_xmm() {
			TestAssembler(c => c.vfnmsub231sh(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub231sh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vfnmsub231sh_xmm_xmm_m() {
			TestAssembler(c => c.vfnmsub231sh(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub231sh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vfnmsub231ss_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub231ss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vfnmsub231ss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub231ss(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub231ss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsub231ss_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vfnmsub231ss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsub231ss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vfnmsub231ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vfnmsub231ss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vfnmsubpd_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vfnmsubpd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfnmsubpd_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vfnmsubpd_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vfnmsubpd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfnmsubpd_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vfnmsubpd_ymm_ymm_ymm_ymm() {
			TestAssembler(c => c.vfnmsubpd(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.VEX_Vfnmsubpd_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, Register.YMM4, Register.YMM5));
		}

		[Fact]
		public void vfnmsubpd_ymm_ymm_m_ymm() {
			TestAssembler(c => c.vfnmsubpd(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.VEX_Vfnmsubpd_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM5));
		}

		[Fact]
		public void vfnmsubpd_xmm_xmm_xmm_m() {
			TestAssembler(c => c.vfnmsubpd(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsubpd_xmm_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfnmsubpd_ymm_ymm_ymm_m() {
			TestAssembler(c => c.vfnmsubpd(ymm2, ymm3, ymm4, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsubpd_ymm_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfnmsubps_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vfnmsubps(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfnmsubps_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vfnmsubps_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vfnmsubps(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfnmsubps_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vfnmsubps_ymm_ymm_ymm_ymm() {
			TestAssembler(c => c.vfnmsubps(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.VEX_Vfnmsubps_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, Register.YMM4, Register.YMM5));
		}

		[Fact]
		public void vfnmsubps_ymm_ymm_m_ymm() {
			TestAssembler(c => c.vfnmsubps(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.VEX_Vfnmsubps_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM5));
		}

		[Fact]
		public void vfnmsubps_xmm_xmm_xmm_m() {
			TestAssembler(c => c.vfnmsubps(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsubps_xmm_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfnmsubps_ymm_ymm_ymm_m() {
			TestAssembler(c => c.vfnmsubps(ymm2, ymm3, ymm4, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsubps_ymm_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfnmsubsd_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vfnmsubsd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfnmsubsd_xmm_xmm_xmmm64_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vfnmsubsd_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vfnmsubsd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfnmsubsd_xmm_xmm_xmmm64_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vfnmsubsd_xmm_xmm_xmm_m() {
			TestAssembler(c => c.vfnmsubsd(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsubsd_xmm_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, Register.XMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfnmsubss_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vfnmsubss(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vfnmsubss_xmm_xmm_xmmm32_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vfnmsubss_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vfnmsubss(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vfnmsubss_xmm_xmm_xmmm32_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vfnmsubss_xmm_xmm_xmm_m() {
			TestAssembler(c => c.vfnmsubss(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vfnmsubss_xmm_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, Register.XMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfpclasspd_kr_xmm_i() {
			TestAssembler(c => c.vfpclasspd(k2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8, Register.K2, Register.XMM3, -5), Register.K1));
		}

		[Fact]
		public void vfpclasspd_kr_ymm_i() {
			TestAssembler(c => c.vfpclasspd(k2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8, Register.K2, Register.YMM3, -5), Register.K1));
		}

		[Fact]
		public void vfpclasspd_kr_zmm_i() {
			TestAssembler(c => c.vfpclasspd(k2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, Register.K2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vfpclasspd_kr_m_i() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vfpclasspd(k2.k1, __dword_bcst[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, Register.K2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (src1.Size == MemoryOperandSize.Zword) */
				TestAssembler(c => c.vfpclasspd(k2.k1, __zmmword_ptr[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, Register.K2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
			} /* else */ { /* if (src1.Size == MemoryOperandSize.Yword) */
				TestAssembler(c => c.vfpclasspd(k2.k1, __ymmword_ptr[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8, Register.K2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
			} /* else */ { /* if (src1.Size == MemoryOperandSize.Xword) */
				TestAssembler(c => c.vfpclasspd(k2.k1, __xmmword_ptr[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8, Register.K2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.vfpclasspd(k2.k1, __byte_ptr[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8, Register.K2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
				});
			}
		}

		[Fact]
		public void vfpclasspd_kr_xmm_u() {
			TestAssembler(c => c.vfpclasspd(k2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8, Register.K2, Register.XMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vfpclasspd_kr_ymm_u() {
			TestAssembler(c => c.vfpclasspd(k2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8, Register.K2, Register.YMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vfpclasspd_kr_zmm_u() {
			TestAssembler(c => c.vfpclasspd(k2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, Register.K2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vfpclasspd_kr_m_u() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vfpclasspd(k2.k1, __dword_bcst[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, Register.K2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (src1.Size == MemoryOperandSize.Zword) */
				TestAssembler(c => c.vfpclasspd(k2.k1, __zmmword_ptr[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, Register.K2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
			} /* else */ { /* if (src1.Size == MemoryOperandSize.Yword) */
				TestAssembler(c => c.vfpclasspd(k2.k1, __ymmword_ptr[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8, Register.K2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
			} /* else */ { /* if (src1.Size == MemoryOperandSize.Xword) */
				TestAssembler(c => c.vfpclasspd(k2.k1, __xmmword_ptr[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8, Register.K2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.vfpclasspd(k2.k1, __byte_ptr[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8, Register.K2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
				});
			}
		}

		[Fact]
		public void vfpclasspdx_kr_m_i() {
			TestAssembler(c => c.vfpclasspdx(k2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8, Register.K2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vfpclasspdx_kr_m_u() {
			TestAssembler(c => c.vfpclasspdx(k2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_xmmm128b64_imm8, Register.K2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vfpclasspdy_kr_m_i() {
			TestAssembler(c => c.vfpclasspdy(k2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8, Register.K2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vfpclasspdy_kr_m_u() {
			TestAssembler(c => c.vfpclasspdy(k2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_ymmm256b64_imm8, Register.K2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vfpclasspdz_kr_m_i() {
			TestAssembler(c => c.vfpclasspdz(k2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, Register.K2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vfpclasspdz_kr_m_u() {
			TestAssembler(c => c.vfpclasspdz(k2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclasspd_kr_k1_zmmm512b64_imm8, Register.K2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vfpclassph_kr_xmm_i() {
			TestAssembler(c => c.vfpclassph(k2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8, Register.K2, Register.XMM3, -5), Register.K1));
		}

		[Fact]
		public void vfpclassph_kr_ymm_i() {
			TestAssembler(c => c.vfpclassph(k2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8, Register.K2, Register.YMM3, -5), Register.K1));
		}

		[Fact]
		public void vfpclassph_kr_zmm_i() {
			TestAssembler(c => c.vfpclassph(k2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8, Register.K2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vfpclassph_kr_m_i() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vfpclassph(k2.k1, __dword_bcst[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8, Register.K2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (src1.Size == MemoryOperandSize.Zword) */
				TestAssembler(c => c.vfpclassph(k2.k1, __zmmword_ptr[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8, Register.K2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
			} /* else */ { /* if (src1.Size == MemoryOperandSize.Yword) */
				TestAssembler(c => c.vfpclassph(k2.k1, __ymmword_ptr[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8, Register.K2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
			} /* else */ { /* if (src1.Size == MemoryOperandSize.Xword) */
				TestAssembler(c => c.vfpclassph(k2.k1, __xmmword_ptr[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8, Register.K2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.vfpclassph(k2.k1, __byte_ptr[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8, Register.K2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
				});
			}
		}

		[Fact]
		public void vfpclassph_kr_xmm_u() {
			TestAssembler(c => c.vfpclassph(k2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8, Register.K2, Register.XMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vfpclassph_kr_ymm_u() {
			TestAssembler(c => c.vfpclassph(k2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8, Register.K2, Register.YMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vfpclassph_kr_zmm_u() {
			TestAssembler(c => c.vfpclassph(k2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8, Register.K2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vfpclassph_kr_m_u() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vfpclassph(k2.k1, __dword_bcst[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8, Register.K2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (src1.Size == MemoryOperandSize.Zword) */
				TestAssembler(c => c.vfpclassph(k2.k1, __zmmword_ptr[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8, Register.K2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
			} /* else */ { /* if (src1.Size == MemoryOperandSize.Yword) */
				TestAssembler(c => c.vfpclassph(k2.k1, __ymmword_ptr[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8, Register.K2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
			} /* else */ { /* if (src1.Size == MemoryOperandSize.Xword) */
				TestAssembler(c => c.vfpclassph(k2.k1, __xmmword_ptr[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8, Register.K2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.vfpclassph(k2.k1, __byte_ptr[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8, Register.K2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
				});
			}
		}

		[Fact]
		public void vfpclassphx_kr_m_i() {
			TestAssembler(c => c.vfpclassphx(k2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8, Register.K2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vfpclassphx_kr_m_u() {
			TestAssembler(c => c.vfpclassphx(k2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclassph_kr_k1_xmmm128b16_imm8, Register.K2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vfpclassphy_kr_m_i() {
			TestAssembler(c => c.vfpclassphy(k2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8, Register.K2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vfpclassphy_kr_m_u() {
			TestAssembler(c => c.vfpclassphy(k2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclassph_kr_k1_ymmm256b16_imm8, Register.K2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vfpclassphz_kr_m_i() {
			TestAssembler(c => c.vfpclassphz(k2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8, Register.K2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vfpclassphz_kr_m_u() {
			TestAssembler(c => c.vfpclassphz(k2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclassph_kr_k1_zmmm512b16_imm8, Register.K2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vfpclassps_kr_xmm_i() {
			TestAssembler(c => c.vfpclassps(k2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8, Register.K2, Register.XMM3, -5), Register.K1));
		}

		[Fact]
		public void vfpclassps_kr_ymm_i() {
			TestAssembler(c => c.vfpclassps(k2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8, Register.K2, Register.YMM3, -5), Register.K1));
		}

		[Fact]
		public void vfpclassps_kr_zmm_i() {
			TestAssembler(c => c.vfpclassps(k2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, Register.K2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vfpclassps_kr_m_i() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vfpclassps(k2.k1, __dword_bcst[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, Register.K2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (src1.Size == MemoryOperandSize.Zword) */
				TestAssembler(c => c.vfpclassps(k2.k1, __zmmword_ptr[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, Register.K2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
			} /* else */ { /* if (src1.Size == MemoryOperandSize.Yword) */
				TestAssembler(c => c.vfpclassps(k2.k1, __ymmword_ptr[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8, Register.K2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
			} /* else */ { /* if (src1.Size == MemoryOperandSize.Xword) */
				TestAssembler(c => c.vfpclassps(k2.k1, __xmmword_ptr[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8, Register.K2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.vfpclassps(k2.k1, __byte_ptr[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8, Register.K2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
				});
			}
		}

		[Fact]
		public void vfpclassps_kr_xmm_u() {
			TestAssembler(c => c.vfpclassps(k2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8, Register.K2, Register.XMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vfpclassps_kr_ymm_u() {
			TestAssembler(c => c.vfpclassps(k2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8, Register.K2, Register.YMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vfpclassps_kr_zmm_u() {
			TestAssembler(c => c.vfpclassps(k2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, Register.K2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vfpclassps_kr_m_u() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vfpclassps(k2.k1, __dword_bcst[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, Register.K2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (src1.Size == MemoryOperandSize.Zword) */
				TestAssembler(c => c.vfpclassps(k2.k1, __zmmword_ptr[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, Register.K2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
			} /* else */ { /* if (src1.Size == MemoryOperandSize.Yword) */
				TestAssembler(c => c.vfpclassps(k2.k1, __ymmword_ptr[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8, Register.K2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
			} /* else */ { /* if (src1.Size == MemoryOperandSize.Xword) */
				TestAssembler(c => c.vfpclassps(k2.k1, __xmmword_ptr[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8, Register.K2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.vfpclassps(k2.k1, __byte_ptr[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8, Register.K2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
				});
			}
		}

		[Fact]
		public void vfpclasspsx_kr_m_i() {
			TestAssembler(c => c.vfpclasspsx(k2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8, Register.K2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vfpclasspsx_kr_m_u() {
			TestAssembler(c => c.vfpclasspsx(k2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_xmmm128b32_imm8, Register.K2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vfpclasspsy_kr_m_i() {
			TestAssembler(c => c.vfpclasspsy(k2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8, Register.K2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vfpclasspsy_kr_m_u() {
			TestAssembler(c => c.vfpclasspsy(k2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_ymmm256b32_imm8, Register.K2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vfpclasspsz_kr_m_i() {
			TestAssembler(c => c.vfpclasspsz(k2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, Register.K2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vfpclasspsz_kr_m_u() {
			TestAssembler(c => c.vfpclasspsz(k2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclassps_kr_k1_zmmm512b32_imm8, Register.K2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vfpclasssd_kr_xmm_i() {
			TestAssembler(c => c.vfpclasssd(k2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclasssd_kr_k1_xmmm64_imm8, Register.K2, Register.XMM3, -5), Register.K1));
		}

		[Fact]
		public void vfpclasssd_kr_m_i() {
			TestAssembler(c => c.vfpclasssd(k2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclasssd_kr_k1_xmmm64_imm8, Register.K2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vfpclasssd_kr_xmm_u() {
			TestAssembler(c => c.vfpclasssd(k2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclasssd_kr_k1_xmmm64_imm8, Register.K2, Register.XMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vfpclasssd_kr_m_u() {
			TestAssembler(c => c.vfpclasssd(k2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclasssd_kr_k1_xmmm64_imm8, Register.K2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vfpclasssh_kr_xmm_i() {
			TestAssembler(c => c.vfpclasssh(k2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclasssh_kr_k1_xmmm16_imm8, Register.K2, Register.XMM3, -5), Register.K1));
		}

		[Fact]
		public void vfpclasssh_kr_m_i() {
			TestAssembler(c => c.vfpclasssh(k2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclasssh_kr_k1_xmmm16_imm8, Register.K2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vfpclasssh_kr_xmm_u() {
			TestAssembler(c => c.vfpclasssh(k2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclasssh_kr_k1_xmmm16_imm8, Register.K2, Register.XMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vfpclasssh_kr_m_u() {
			TestAssembler(c => c.vfpclasssh(k2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclasssh_kr_k1_xmmm16_imm8, Register.K2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vfpclassss_kr_xmm_i() {
			TestAssembler(c => c.vfpclassss(k2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclassss_kr_k1_xmmm32_imm8, Register.K2, Register.XMM3, -5), Register.K1));
		}

		[Fact]
		public void vfpclassss_kr_m_i() {
			TestAssembler(c => c.vfpclassss(k2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vfpclassss_kr_k1_xmmm32_imm8, Register.K2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vfpclassss_kr_xmm_u() {
			TestAssembler(c => c.vfpclassss(k2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclassss_kr_k1_xmmm32_imm8, Register.K2, Register.XMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vfpclassss_kr_m_u() {
			TestAssembler(c => c.vfpclassss(k2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vfpclassss_kr_k1_xmmm32_imm8, Register.K2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vfrczpd_xmm_xmm() {
			TestAssembler(c => c.vfrczpd(xmm2, xmm3), Instruction.Create(Code.XOP_Vfrczpd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vfrczpd_ymm_ymm() {
			TestAssembler(c => c.vfrczpd(ymm2, ymm3), Instruction.Create(Code.XOP_Vfrczpd_ymm_ymmm256, Register.YMM2, Register.YMM3));
		}

		[Fact]
		public void vfrczpd_xmm_m() {
			TestAssembler(c => c.vfrczpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vfrczpd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfrczpd_ymm_m() {
			TestAssembler(c => c.vfrczpd(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.XOP_Vfrczpd_ymm_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfrczps_xmm_xmm() {
			TestAssembler(c => c.vfrczps(xmm2, xmm3), Instruction.Create(Code.XOP_Vfrczps_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vfrczps_ymm_ymm() {
			TestAssembler(c => c.vfrczps(ymm2, ymm3), Instruction.Create(Code.XOP_Vfrczps_ymm_ymmm256, Register.YMM2, Register.YMM3));
		}

		[Fact]
		public void vfrczps_xmm_m() {
			TestAssembler(c => c.vfrczps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vfrczps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfrczps_ymm_m() {
			TestAssembler(c => c.vfrczps(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.XOP_Vfrczps_ymm_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfrczsd_xmm_xmm() {
			TestAssembler(c => c.vfrczsd(xmm2, xmm3), Instruction.Create(Code.XOP_Vfrczsd_xmm_xmmm64, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vfrczsd_xmm_m() {
			TestAssembler(c => c.vfrczsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vfrczsd_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vfrczss_xmm_xmm() {
			TestAssembler(c => c.vfrczss(xmm2, xmm3), Instruction.Create(Code.XOP_Vfrczss_xmm_xmmm32, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vfrczss_xmm_m() {
			TestAssembler(c => c.vfrczss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vfrczss_xmm_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vgatherdpd_xmm_m() {
			TestAssembler(c => c.vgatherdpd(xmm2.k1, __[rdx+xmm3]), ApplyK(Instruction.Create(Code.EVEX_Vgatherdpd_xmm_k1_vm32x, Register.XMM2, new MemoryOperand(Register.RDX, Register.XMM3, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vgatherdpd_ymm_m() {
			TestAssembler(c => c.vgatherdpd(ymm2.k1, __[rdx+xmm3]), ApplyK(Instruction.Create(Code.EVEX_Vgatherdpd_ymm_k1_vm32x, Register.YMM2, new MemoryOperand(Register.RDX, Register.XMM3, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vgatherdpd_zmm_m() {
			TestAssembler(c => c.vgatherdpd(zmm2.k1, __[rdx+ymm3]), ApplyK(Instruction.Create(Code.EVEX_Vgatherdpd_zmm_k1_vm32y, Register.ZMM2, new MemoryOperand(Register.RDX, Register.YMM3, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vgatherdpd_xmm_m_xmm() {
			TestAssembler(c => c.vgatherdpd(xmm2, __[rdx+xmm3], xmm4), Instruction.Create(Code.VEX_Vgatherdpd_xmm_vm32x_xmm, Register.XMM2, new MemoryOperand(Register.RDX, Register.XMM3, 1, 0x0, 0, false, Register.None), Register.XMM4));
		}

		[Fact]
		public void vgatherdpd_ymm_m_ymm() {
			TestAssembler(c => c.vgatherdpd(ymm2, __[rdx+xmm3], ymm4), Instruction.Create(Code.VEX_Vgatherdpd_ymm_vm32x_ymm, Register.YMM2, new MemoryOperand(Register.RDX, Register.XMM3, 1, 0x0, 0, false, Register.None), Register.YMM4));
		}

		[Fact]
		public void vgatherdps_xmm_m() {
			TestAssembler(c => c.vgatherdps(xmm2.k1, __[rdx+xmm3]), ApplyK(Instruction.Create(Code.EVEX_Vgatherdps_xmm_k1_vm32x, Register.XMM2, new MemoryOperand(Register.RDX, Register.XMM3, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vgatherdps_ymm_m() {
			TestAssembler(c => c.vgatherdps(ymm2.k1, __[rdx+ymm3]), ApplyK(Instruction.Create(Code.EVEX_Vgatherdps_ymm_k1_vm32y, Register.YMM2, new MemoryOperand(Register.RDX, Register.YMM3, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vgatherdps_zmm_m() {
			TestAssembler(c => c.vgatherdps(zmm2.k1, __[rdx+zmm3]), ApplyK(Instruction.Create(Code.EVEX_Vgatherdps_zmm_k1_vm32z, Register.ZMM2, new MemoryOperand(Register.RDX, Register.ZMM3, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vgatherdps_xmm_m_xmm() {
			TestAssembler(c => c.vgatherdps(xmm2, __[rdx+xmm3], xmm4), Instruction.Create(Code.VEX_Vgatherdps_xmm_vm32x_xmm, Register.XMM2, new MemoryOperand(Register.RDX, Register.XMM3, 1, 0x0, 0, false, Register.None), Register.XMM4));
		}

		[Fact]
		public void vgatherdps_ymm_m_ymm() {
			TestAssembler(c => c.vgatherdps(ymm2, __[rdx+ymm3], ymm4), Instruction.Create(Code.VEX_Vgatherdps_ymm_vm32y_ymm, Register.YMM2, new MemoryOperand(Register.RDX, Register.YMM3, 1, 0x0, 0, false, Register.None), Register.YMM4));
		}

		[Fact]
		public void vgatherpf0dpd_m() {
			TestAssembler(c => c.vgatherpf0dpd(__[rdx+ymm2].k1), ApplyK(Instruction.Create(Code.EVEX_Vgatherpf0dpd_vm32y_k1, new MemoryOperand(Register.RDX, Register.YMM2, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vgatherpf0dps_m() {
			TestAssembler(c => c.vgatherpf0dps(__[rdx+zmm2].k1), ApplyK(Instruction.Create(Code.EVEX_Vgatherpf0dps_vm32z_k1, new MemoryOperand(Register.RDX, Register.ZMM2, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vgatherpf0qpd_m() {
			TestAssembler(c => c.vgatherpf0qpd(__[rdx+zmm2].k1), ApplyK(Instruction.Create(Code.EVEX_Vgatherpf0qpd_vm64z_k1, new MemoryOperand(Register.RDX, Register.ZMM2, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vgatherpf0qps_m() {
			TestAssembler(c => c.vgatherpf0qps(__[rdx+zmm2].k1), ApplyK(Instruction.Create(Code.EVEX_Vgatherpf0qps_vm64z_k1, new MemoryOperand(Register.RDX, Register.ZMM2, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vgatherpf1dpd_m() {
			TestAssembler(c => c.vgatherpf1dpd(__[rdx+ymm2].k1), ApplyK(Instruction.Create(Code.EVEX_Vgatherpf1dpd_vm32y_k1, new MemoryOperand(Register.RDX, Register.YMM2, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vgatherpf1dps_m() {
			TestAssembler(c => c.vgatherpf1dps(__[rdx+zmm2].k1), ApplyK(Instruction.Create(Code.EVEX_Vgatherpf1dps_vm32z_k1, new MemoryOperand(Register.RDX, Register.ZMM2, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vgatherpf1qpd_m() {
			TestAssembler(c => c.vgatherpf1qpd(__[rdx+zmm2].k1), ApplyK(Instruction.Create(Code.EVEX_Vgatherpf1qpd_vm64z_k1, new MemoryOperand(Register.RDX, Register.ZMM2, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vgatherpf1qps_m() {
			TestAssembler(c => c.vgatherpf1qps(__[rdx+zmm2].k1), ApplyK(Instruction.Create(Code.EVEX_Vgatherpf1qps_vm64z_k1, new MemoryOperand(Register.RDX, Register.ZMM2, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vgatherqpd_xmm_m() {
			TestAssembler(c => c.vgatherqpd(xmm2.k1, __[rdx+xmm3]), ApplyK(Instruction.Create(Code.EVEX_Vgatherqpd_xmm_k1_vm64x, Register.XMM2, new MemoryOperand(Register.RDX, Register.XMM3, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vgatherqpd_ymm_m() {
			TestAssembler(c => c.vgatherqpd(ymm2.k1, __[rdx+ymm3]), ApplyK(Instruction.Create(Code.EVEX_Vgatherqpd_ymm_k1_vm64y, Register.YMM2, new MemoryOperand(Register.RDX, Register.YMM3, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vgatherqpd_zmm_m() {
			TestAssembler(c => c.vgatherqpd(zmm2.k1, __[rdx+zmm3]), ApplyK(Instruction.Create(Code.EVEX_Vgatherqpd_zmm_k1_vm64z, Register.ZMM2, new MemoryOperand(Register.RDX, Register.ZMM3, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vgatherqpd_xmm_m_xmm() {
			TestAssembler(c => c.vgatherqpd(xmm2, __[rdx+xmm3], xmm4), Instruction.Create(Code.VEX_Vgatherqpd_xmm_vm64x_xmm, Register.XMM2, new MemoryOperand(Register.RDX, Register.XMM3, 1, 0x0, 0, false, Register.None), Register.XMM4));
		}

		[Fact]
		public void vgatherqpd_ymm_m_ymm() {
			TestAssembler(c => c.vgatherqpd(ymm2, __[rdx+ymm3], ymm4), Instruction.Create(Code.VEX_Vgatherqpd_ymm_vm64y_ymm, Register.YMM2, new MemoryOperand(Register.RDX, Register.YMM3, 1, 0x0, 0, false, Register.None), Register.YMM4));
		}

		[Fact]
		public void vgatherqps_xmm_m() {
			{ /* if (src.Index.IsXMM()) */
				TestAssembler(c => c.vgatherqps(xmm2.k1, __[rdx+xmm3]), ApplyK(Instruction.Create(Code.EVEX_Vgatherqps_xmm_k1_vm64x, Register.XMM2, new MemoryOperand(Register.RDX, Register.XMM3, 1, 0x0, 0, false, Register.None)), Register.K1));
			} /* else */ { /* if (src.Index.IsYMM()) */
				TestAssembler(c => c.vgatherqps(xmm2.k1, __[rdx+ymm3]), ApplyK(Instruction.Create(Code.EVEX_Vgatherqps_xmm_k1_vm64y, Register.XMM2, new MemoryOperand(Register.RDX, Register.YMM3, 1, 0x0, 0, false, Register.None)), Register.K1));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.vgatherqps(xmm2.k1, __[rdx+zmm1]), ApplyK(Instruction.Create(Code.EVEX_Vgatherqps_xmm_k1_vm64y, Register.XMM2, new MemoryOperand(Register.RDX, Register.ZMM1, 1, 0x0, 0, false, Register.None)), Register.K1));
				});
			}
		}

		[Fact]
		public void vgatherqps_ymm_m() {
			TestAssembler(c => c.vgatherqps(ymm2.k1, __[rdx+zmm3]), ApplyK(Instruction.Create(Code.EVEX_Vgatherqps_ymm_k1_vm64z, Register.YMM2, new MemoryOperand(Register.RDX, Register.ZMM3, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vgatherqps_xmm_m_xmm() {
			{ /* if (src1.Index.IsXMM()) */
				TestAssembler(c => c.vgatherqps(xmm2, __[rdx+xmm3], xmm4), Instruction.Create(Code.VEX_Vgatherqps_xmm_vm64x_xmm, Register.XMM2, new MemoryOperand(Register.RDX, Register.XMM3, 1, 0x0, 0, false, Register.None), Register.XMM4));
			} /* else */ { /* if (src1.Index.IsYMM()) */
				TestAssembler(c => c.vgatherqps(xmm2, __[rdx+ymm3], xmm4), Instruction.Create(Code.VEX_Vgatherqps_xmm_vm64y_xmm, Register.XMM2, new MemoryOperand(Register.RDX, Register.YMM3, 1, 0x0, 0, false, Register.None), Register.XMM4));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.vgatherqps(xmm2, __[rdx+zmm1], xmm4), Instruction.Create(Code.VEX_Vgatherqps_xmm_vm64y_xmm, Register.XMM2, new MemoryOperand(Register.RDX, Register.ZMM1, 1, 0x0, 0, false, Register.None), Register.XMM4));
				});
			}
		}

		[Fact]
		public void vgetexppd_xmm_xmm() {
			TestAssembler(c => c.vgetexppd(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vgetexppd_xmm_k1z_xmmm128b64, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vgetexppd_ymm_ymm() {
			TestAssembler(c => c.vgetexppd(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vgetexppd_ymm_k1z_ymmm256b64, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vgetexppd_zmm_zmm() {
			TestAssembler(c => c.vgetexppd(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vgetexppd_zmm_k1z_zmmm512b64_sae, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vgetexppd_xmm_m() {
			TestAssembler(c => c.vgetexppd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vgetexppd_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vgetexppd_ymm_m() {
			TestAssembler(c => c.vgetexppd(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vgetexppd_ymm_k1z_ymmm256b64, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vgetexppd_zmm_m() {
			TestAssembler(c => c.vgetexppd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vgetexppd_zmm_k1z_zmmm512b64_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vgetexpph_xmm_xmm() {
			TestAssembler(c => c.vgetexpph(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vgetexpph_xmm_k1z_xmmm128b16, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vgetexpph_ymm_ymm() {
			TestAssembler(c => c.vgetexpph(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vgetexpph_ymm_k1z_ymmm256b16, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vgetexpph_zmm_zmm() {
			TestAssembler(c => c.vgetexpph(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vgetexpph_zmm_k1z_zmmm512b16_sae, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vgetexpph_xmm_m() {
			TestAssembler(c => c.vgetexpph(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vgetexpph_xmm_k1z_xmmm128b16, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vgetexpph_ymm_m() {
			TestAssembler(c => c.vgetexpph(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vgetexpph_ymm_k1z_ymmm256b16, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vgetexpph_zmm_m() {
			TestAssembler(c => c.vgetexpph(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vgetexpph_zmm_k1z_zmmm512b16_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vgetexpps_xmm_xmm() {
			TestAssembler(c => c.vgetexpps(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vgetexpps_xmm_k1z_xmmm128b32, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vgetexpps_ymm_ymm() {
			TestAssembler(c => c.vgetexpps(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vgetexpps_ymm_k1z_ymmm256b32, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vgetexpps_zmm_zmm() {
			TestAssembler(c => c.vgetexpps(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vgetexpps_zmm_k1z_zmmm512b32_sae, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vgetexpps_xmm_m() {
			TestAssembler(c => c.vgetexpps(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vgetexpps_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vgetexpps_ymm_m() {
			TestAssembler(c => c.vgetexpps(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vgetexpps_ymm_k1z_ymmm256b32, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vgetexpps_zmm_m() {
			TestAssembler(c => c.vgetexpps(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vgetexpps_zmm_k1z_zmmm512b32_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vgetexpsd_xmm_xmm_xmm() {
			TestAssembler(c => c.vgetexpsd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vgetexpsd_xmm_k1z_xmm_xmmm64_sae, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vgetexpsd_xmm_xmm_m() {
			TestAssembler(c => c.vgetexpsd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vgetexpsd_xmm_k1z_xmm_xmmm64_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vgetexpsh_xmm_xmm_xmm() {
			TestAssembler(c => c.vgetexpsh(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vgetexpsh_xmm_k1z_xmm_xmmm16_sae, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vgetexpsh_xmm_xmm_m() {
			TestAssembler(c => c.vgetexpsh(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vgetexpsh_xmm_k1z_xmm_xmmm16_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vgetexpss_xmm_xmm_xmm() {
			TestAssembler(c => c.vgetexpss(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vgetexpss_xmm_k1z_xmm_xmmm32_sae, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vgetexpss_xmm_xmm_m() {
			TestAssembler(c => c.vgetexpss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vgetexpss_xmm_k1z_xmm_xmmm32_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vgetmantpd_xmm_xmm_i() {
			TestAssembler(c => c.vgetmantpd(xmm2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vgetmantpd_xmm_k1z_xmmm128b64_imm8, Register.XMM2, Register.XMM3, -5), Register.K1));
		}

		[Fact]
		public void vgetmantpd_ymm_ymm_i() {
			TestAssembler(c => c.vgetmantpd(ymm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vgetmantpd_ymm_k1z_ymmm256b64_imm8, Register.YMM2, Register.YMM3, -5), Register.K1));
		}

		[Fact]
		public void vgetmantpd_zmm_zmm_i() {
			TestAssembler(c => c.vgetmantpd(zmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vgetmantpd_zmm_k1z_zmmm512b64_imm8_sae, Register.ZMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vgetmantpd_xmm_m_i() {
			TestAssembler(c => c.vgetmantpd(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vgetmantpd_xmm_k1z_xmmm128b64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vgetmantpd_ymm_m_i() {
			TestAssembler(c => c.vgetmantpd(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vgetmantpd_ymm_k1z_ymmm256b64_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vgetmantpd_zmm_m_i() {
			TestAssembler(c => c.vgetmantpd(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vgetmantpd_zmm_k1z_zmmm512b64_imm8_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vgetmantpd_xmm_xmm_u() {
			TestAssembler(c => c.vgetmantpd(xmm2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgetmantpd_xmm_k1z_xmmm128b64_imm8, Register.XMM2, Register.XMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vgetmantpd_ymm_ymm_u() {
			TestAssembler(c => c.vgetmantpd(ymm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgetmantpd_ymm_k1z_ymmm256b64_imm8, Register.YMM2, Register.YMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vgetmantpd_zmm_zmm_u() {
			TestAssembler(c => c.vgetmantpd(zmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgetmantpd_zmm_k1z_zmmm512b64_imm8_sae, Register.ZMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vgetmantpd_xmm_m_u() {
			TestAssembler(c => c.vgetmantpd(xmm2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgetmantpd_xmm_k1z_xmmm128b64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vgetmantpd_ymm_m_u() {
			TestAssembler(c => c.vgetmantpd(ymm2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgetmantpd_ymm_k1z_ymmm256b64_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vgetmantpd_zmm_m_u() {
			TestAssembler(c => c.vgetmantpd(zmm2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgetmantpd_zmm_k1z_zmmm512b64_imm8_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vgetmantph_xmm_xmm_i() {
			TestAssembler(c => c.vgetmantph(xmm2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vgetmantph_xmm_k1z_xmmm128b16_imm8, Register.XMM2, Register.XMM3, -5), Register.K1));
		}

		[Fact]
		public void vgetmantph_ymm_ymm_i() {
			TestAssembler(c => c.vgetmantph(ymm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vgetmantph_ymm_k1z_ymmm256b16_imm8, Register.YMM2, Register.YMM3, -5), Register.K1));
		}

		[Fact]
		public void vgetmantph_zmm_zmm_i() {
			TestAssembler(c => c.vgetmantph(zmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vgetmantph_zmm_k1z_zmmm512b16_imm8_sae, Register.ZMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vgetmantph_xmm_m_i() {
			TestAssembler(c => c.vgetmantph(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vgetmantph_xmm_k1z_xmmm128b16_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vgetmantph_ymm_m_i() {
			TestAssembler(c => c.vgetmantph(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vgetmantph_ymm_k1z_ymmm256b16_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vgetmantph_zmm_m_i() {
			TestAssembler(c => c.vgetmantph(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vgetmantph_zmm_k1z_zmmm512b16_imm8_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vgetmantph_xmm_xmm_u() {
			TestAssembler(c => c.vgetmantph(xmm2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgetmantph_xmm_k1z_xmmm128b16_imm8, Register.XMM2, Register.XMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vgetmantph_ymm_ymm_u() {
			TestAssembler(c => c.vgetmantph(ymm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgetmantph_ymm_k1z_ymmm256b16_imm8, Register.YMM2, Register.YMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vgetmantph_zmm_zmm_u() {
			TestAssembler(c => c.vgetmantph(zmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgetmantph_zmm_k1z_zmmm512b16_imm8_sae, Register.ZMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vgetmantph_xmm_m_u() {
			TestAssembler(c => c.vgetmantph(xmm2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgetmantph_xmm_k1z_xmmm128b16_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vgetmantph_ymm_m_u() {
			TestAssembler(c => c.vgetmantph(ymm2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgetmantph_ymm_k1z_ymmm256b16_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vgetmantph_zmm_m_u() {
			TestAssembler(c => c.vgetmantph(zmm2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgetmantph_zmm_k1z_zmmm512b16_imm8_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vgetmantps_xmm_xmm_i() {
			TestAssembler(c => c.vgetmantps(xmm2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vgetmantps_xmm_k1z_xmmm128b32_imm8, Register.XMM2, Register.XMM3, -5), Register.K1));
		}

		[Fact]
		public void vgetmantps_ymm_ymm_i() {
			TestAssembler(c => c.vgetmantps(ymm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vgetmantps_ymm_k1z_ymmm256b32_imm8, Register.YMM2, Register.YMM3, -5), Register.K1));
		}

		[Fact]
		public void vgetmantps_zmm_zmm_i() {
			TestAssembler(c => c.vgetmantps(zmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vgetmantps_zmm_k1z_zmmm512b32_imm8_sae, Register.ZMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vgetmantps_xmm_m_i() {
			TestAssembler(c => c.vgetmantps(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vgetmantps_xmm_k1z_xmmm128b32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vgetmantps_ymm_m_i() {
			TestAssembler(c => c.vgetmantps(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vgetmantps_ymm_k1z_ymmm256b32_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vgetmantps_zmm_m_i() {
			TestAssembler(c => c.vgetmantps(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vgetmantps_zmm_k1z_zmmm512b32_imm8_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vgetmantps_xmm_xmm_u() {
			TestAssembler(c => c.vgetmantps(xmm2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgetmantps_xmm_k1z_xmmm128b32_imm8, Register.XMM2, Register.XMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vgetmantps_ymm_ymm_u() {
			TestAssembler(c => c.vgetmantps(ymm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgetmantps_ymm_k1z_ymmm256b32_imm8, Register.YMM2, Register.YMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vgetmantps_zmm_zmm_u() {
			TestAssembler(c => c.vgetmantps(zmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgetmantps_zmm_k1z_zmmm512b32_imm8_sae, Register.ZMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vgetmantps_xmm_m_u() {
			TestAssembler(c => c.vgetmantps(xmm2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgetmantps_xmm_k1z_xmmm128b32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vgetmantps_ymm_m_u() {
			TestAssembler(c => c.vgetmantps(ymm2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgetmantps_ymm_k1z_ymmm256b32_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vgetmantps_zmm_m_u() {
			TestAssembler(c => c.vgetmantps(zmm2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgetmantps_zmm_k1z_zmmm512b32_imm8_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vgetmantsd_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vgetmantsd(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vgetmantsd_xmm_k1z_xmm_xmmm64_imm8_sae, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vgetmantsd_xmm_xmm_m_i() {
			TestAssembler(c => c.vgetmantsd(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vgetmantsd_xmm_k1z_xmm_xmmm64_imm8_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vgetmantsd_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vgetmantsd(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgetmantsd_xmm_k1z_xmm_xmmm64_imm8_sae, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vgetmantsd_xmm_xmm_m_u() {
			TestAssembler(c => c.vgetmantsd(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgetmantsd_xmm_k1z_xmm_xmmm64_imm8_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vgetmantsh_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vgetmantsh(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vgetmantsh_xmm_k1z_xmm_xmmm16_imm8_sae, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vgetmantsh_xmm_xmm_m_i() {
			TestAssembler(c => c.vgetmantsh(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vgetmantsh_xmm_k1z_xmm_xmmm16_imm8_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vgetmantsh_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vgetmantsh(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgetmantsh_xmm_k1z_xmm_xmmm16_imm8_sae, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vgetmantsh_xmm_xmm_m_u() {
			TestAssembler(c => c.vgetmantsh(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgetmantsh_xmm_k1z_xmm_xmmm16_imm8_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vgetmantss_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vgetmantss(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vgetmantss_xmm_k1z_xmm_xmmm32_imm8_sae, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vgetmantss_xmm_xmm_m_i() {
			TestAssembler(c => c.vgetmantss(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vgetmantss_xmm_k1z_xmm_xmmm32_imm8_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vgetmantss_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vgetmantss(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgetmantss_xmm_k1z_xmm_xmmm32_imm8_sae, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vgetmantss_xmm_xmm_m_u() {
			TestAssembler(c => c.vgetmantss(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgetmantss_xmm_k1z_xmm_xmmm32_imm8_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vgf2p8affineinvqb_xmm_xmm_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vgf2p8affineinvqb(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vgf2p8affineinvqb_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineinvqb(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vgf2p8affineinvqb_ymm_ymm_ymm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vgf2p8affineinvqb(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vgf2p8affineinvqb_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineinvqb(ymm2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vgf2p8affineinvqb_zmm_zmm_zmm_i() {
			TestAssembler(c => c.vgf2p8affineinvqb(zmm2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vgf2p8affineinvqb_xmm_xmm_m_i() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vgf2p8affineinvqb(xmm2.k1, xmm3, __dword_bcst[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vgf2p8affineinvqb(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vgf2p8affineinvqb_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineinvqb(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vgf2p8affineinvqb_ymm_ymm_m_i() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vgf2p8affineinvqb(ymm2.k1, ymm3, __dword_bcst[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vgf2p8affineinvqb(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vgf2p8affineinvqb_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineinvqb(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vgf2p8affineinvqb_zmm_zmm_m_i() {
			TestAssembler(c => c.vgf2p8affineinvqb(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vgf2p8affineinvqb_xmm_xmm_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vgf2p8affineinvqb(xmm2, xmm3, xmm4, (byte)0x7F), Instruction.Create(Code.VEX_Vgf2p8affineinvqb_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineinvqb(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vgf2p8affineinvqb_ymm_ymm_ymm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vgf2p8affineinvqb(ymm2, ymm3, ymm4, (byte)0x7F), Instruction.Create(Code.VEX_Vgf2p8affineinvqb_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineinvqb(ymm2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vgf2p8affineinvqb_zmm_zmm_zmm_u() {
			TestAssembler(c => c.vgf2p8affineinvqb(zmm2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vgf2p8affineinvqb_xmm_xmm_m_u() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vgf2p8affineinvqb(xmm2.k1, xmm3, __dword_bcst[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vgf2p8affineinvqb(xmm2, xmm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vgf2p8affineinvqb_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineinvqb(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vgf2p8affineinvqb_ymm_ymm_m_u() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vgf2p8affineinvqb(ymm2.k1, ymm3, __dword_bcst[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vgf2p8affineinvqb(ymm2, ymm3, __ymmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vgf2p8affineinvqb_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineinvqb(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vgf2p8affineinvqb_zmm_zmm_m_u() {
			TestAssembler(c => c.vgf2p8affineinvqb(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineinvqb_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vgf2p8affineqb_xmm_xmm_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vgf2p8affineqb(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vgf2p8affineqb_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineqb(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vgf2p8affineqb_ymm_ymm_ymm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vgf2p8affineqb(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vgf2p8affineqb_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineqb(ymm2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vgf2p8affineqb_zmm_zmm_zmm_i() {
			TestAssembler(c => c.vgf2p8affineqb(zmm2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineqb_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vgf2p8affineqb_xmm_xmm_m_i() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vgf2p8affineqb(xmm2.k1, xmm3, __dword_bcst[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vgf2p8affineqb(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vgf2p8affineqb_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineqb(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vgf2p8affineqb_ymm_ymm_m_i() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vgf2p8affineqb(ymm2.k1, ymm3, __dword_bcst[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vgf2p8affineqb(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vgf2p8affineqb_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineqb(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vgf2p8affineqb_zmm_zmm_m_i() {
			TestAssembler(c => c.vgf2p8affineqb(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineqb_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vgf2p8affineqb_xmm_xmm_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vgf2p8affineqb(xmm2, xmm3, xmm4, (byte)0x7F), Instruction.Create(Code.VEX_Vgf2p8affineqb_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineqb(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vgf2p8affineqb_ymm_ymm_ymm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vgf2p8affineqb(ymm2, ymm3, ymm4, (byte)0x7F), Instruction.Create(Code.VEX_Vgf2p8affineqb_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineqb(ymm2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vgf2p8affineqb_zmm_zmm_zmm_u() {
			TestAssembler(c => c.vgf2p8affineqb(zmm2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineqb_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vgf2p8affineqb_xmm_xmm_m_u() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vgf2p8affineqb(xmm2.k1, xmm3, __dword_bcst[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vgf2p8affineqb(xmm2, xmm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vgf2p8affineqb_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineqb(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineqb_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vgf2p8affineqb_ymm_ymm_m_u() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vgf2p8affineqb(ymm2.k1, ymm3, __dword_bcst[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vgf2p8affineqb(ymm2, ymm3, __ymmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vgf2p8affineqb_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8affineqb(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineqb_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vgf2p8affineqb_zmm_zmm_m_u() {
			TestAssembler(c => c.vgf2p8affineqb(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8affineqb_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vgf2p8mulb_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vgf2p8mulb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vgf2p8mulb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8mulb(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8mulb_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vgf2p8mulb_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vgf2p8mulb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vgf2p8mulb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8mulb(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8mulb_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vgf2p8mulb_zmm_zmm_zmm() {
			TestAssembler(c => c.vgf2p8mulb(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8mulb_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vgf2p8mulb_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vgf2p8mulb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vgf2p8mulb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8mulb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8mulb_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vgf2p8mulb_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vgf2p8mulb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vgf2p8mulb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vgf2p8mulb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8mulb_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vgf2p8mulb_zmm_zmm_m() {
			TestAssembler(c => c.vgf2p8mulb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vgf2p8mulb_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vhaddpd_xmm_xmm_xmm() {
			TestAssembler(c => c.vhaddpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vhaddpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vhaddpd_ymm_ymm_ymm() {
			TestAssembler(c => c.vhaddpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vhaddpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vhaddpd_xmm_xmm_m() {
			TestAssembler(c => c.vhaddpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vhaddpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vhaddpd_ymm_ymm_m() {
			TestAssembler(c => c.vhaddpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vhaddpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vhaddps_xmm_xmm_xmm() {
			TestAssembler(c => c.vhaddps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vhaddps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vhaddps_ymm_ymm_ymm() {
			TestAssembler(c => c.vhaddps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vhaddps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vhaddps_xmm_xmm_m() {
			TestAssembler(c => c.vhaddps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vhaddps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vhaddps_ymm_ymm_m() {
			TestAssembler(c => c.vhaddps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vhaddps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vhsubpd_xmm_xmm_xmm() {
			TestAssembler(c => c.vhsubpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vhsubpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vhsubpd_ymm_ymm_ymm() {
			TestAssembler(c => c.vhsubpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vhsubpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vhsubpd_xmm_xmm_m() {
			TestAssembler(c => c.vhsubpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vhsubpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vhsubpd_ymm_ymm_m() {
			TestAssembler(c => c.vhsubpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vhsubpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vhsubps_xmm_xmm_xmm() {
			TestAssembler(c => c.vhsubps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vhsubps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vhsubps_ymm_ymm_ymm() {
			TestAssembler(c => c.vhsubps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vhsubps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vhsubps_xmm_xmm_m() {
			TestAssembler(c => c.vhsubps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vhsubps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vhsubps_ymm_ymm_m() {
			TestAssembler(c => c.vhsubps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vhsubps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vinsertf128_ymm_ymm_xmm_i() {
			TestAssembler(c => c.vinsertf128(ymm2, ymm3, xmm4, -5), Instruction.Create(Code.VEX_Vinsertf128_ymm_ymm_xmmm128_imm8, Register.YMM2, Register.YMM3, Register.XMM4, -5));
		}

		[Fact]
		public void vinsertf128_ymm_ymm_m_i() {
			TestAssembler(c => c.vinsertf128(ymm2, ymm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vinsertf128_ymm_ymm_xmmm128_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vinsertf128_ymm_ymm_xmm_u() {
			TestAssembler(c => c.vinsertf128(ymm2, ymm3, xmm4, (byte)0x7F), Instruction.Create(Code.VEX_Vinsertf128_ymm_ymm_xmmm128_imm8, Register.YMM2, Register.YMM3, Register.XMM4, 0x7FU));
		}

		[Fact]
		public void vinsertf128_ymm_ymm_m_u() {
			TestAssembler(c => c.vinsertf128(ymm2, ymm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vinsertf128_ymm_ymm_xmmm128_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vinsertf32x4_ymm_ymm_xmm_i() {
			TestAssembler(c => c.vinsertf32x4(ymm2.k1, ymm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vinsertf32x4_ymm_k1z_ymm_xmmm128_imm8, Register.YMM2, Register.YMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vinsertf32x4_zmm_zmm_xmm_i() {
			TestAssembler(c => c.vinsertf32x4(zmm2.k1, zmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vinsertf32x4_zmm_k1z_zmm_xmmm128_imm8, Register.ZMM2, Register.ZMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vinsertf32x4_ymm_ymm_m_i() {
			TestAssembler(c => c.vinsertf32x4(ymm2.k1, ymm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vinsertf32x4_ymm_k1z_ymm_xmmm128_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vinsertf32x4_zmm_zmm_m_i() {
			TestAssembler(c => c.vinsertf32x4(zmm2.k1, zmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vinsertf32x4_zmm_k1z_zmm_xmmm128_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vinsertf32x4_ymm_ymm_xmm_u() {
			TestAssembler(c => c.vinsertf32x4(ymm2.k1, ymm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vinsertf32x4_ymm_k1z_ymm_xmmm128_imm8, Register.YMM2, Register.YMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vinsertf32x4_zmm_zmm_xmm_u() {
			TestAssembler(c => c.vinsertf32x4(zmm2.k1, zmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vinsertf32x4_zmm_k1z_zmm_xmmm128_imm8, Register.ZMM2, Register.ZMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vinsertf32x4_ymm_ymm_m_u() {
			TestAssembler(c => c.vinsertf32x4(ymm2.k1, ymm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vinsertf32x4_ymm_k1z_ymm_xmmm128_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vinsertf32x4_zmm_zmm_m_u() {
			TestAssembler(c => c.vinsertf32x4(zmm2.k1, zmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vinsertf32x4_zmm_k1z_zmm_xmmm128_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vinsertf32x8_zmm_zmm_ymm_i() {
			TestAssembler(c => c.vinsertf32x8(zmm2.k1, zmm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vinsertf32x8_zmm_k1z_zmm_ymmm256_imm8, Register.ZMM2, Register.ZMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vinsertf32x8_zmm_zmm_m_i() {
			TestAssembler(c => c.vinsertf32x8(zmm2.k1, zmm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vinsertf32x8_zmm_k1z_zmm_ymmm256_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vinsertf32x8_zmm_zmm_ymm_u() {
			TestAssembler(c => c.vinsertf32x8(zmm2.k1, zmm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vinsertf32x8_zmm_k1z_zmm_ymmm256_imm8, Register.ZMM2, Register.ZMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vinsertf32x8_zmm_zmm_m_u() {
			TestAssembler(c => c.vinsertf32x8(zmm2.k1, zmm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vinsertf32x8_zmm_k1z_zmm_ymmm256_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vinsertf64x2_ymm_ymm_xmm_i() {
			TestAssembler(c => c.vinsertf64x2(ymm2.k1, ymm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vinsertf64x2_ymm_k1z_ymm_xmmm128_imm8, Register.YMM2, Register.YMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vinsertf64x2_zmm_zmm_xmm_i() {
			TestAssembler(c => c.vinsertf64x2(zmm2.k1, zmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vinsertf64x2_zmm_k1z_zmm_xmmm128_imm8, Register.ZMM2, Register.ZMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vinsertf64x2_ymm_ymm_m_i() {
			TestAssembler(c => c.vinsertf64x2(ymm2.k1, ymm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vinsertf64x2_ymm_k1z_ymm_xmmm128_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vinsertf64x2_zmm_zmm_m_i() {
			TestAssembler(c => c.vinsertf64x2(zmm2.k1, zmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vinsertf64x2_zmm_k1z_zmm_xmmm128_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vinsertf64x2_ymm_ymm_xmm_u() {
			TestAssembler(c => c.vinsertf64x2(ymm2.k1, ymm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vinsertf64x2_ymm_k1z_ymm_xmmm128_imm8, Register.YMM2, Register.YMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vinsertf64x2_zmm_zmm_xmm_u() {
			TestAssembler(c => c.vinsertf64x2(zmm2.k1, zmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vinsertf64x2_zmm_k1z_zmm_xmmm128_imm8, Register.ZMM2, Register.ZMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vinsertf64x2_ymm_ymm_m_u() {
			TestAssembler(c => c.vinsertf64x2(ymm2.k1, ymm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vinsertf64x2_ymm_k1z_ymm_xmmm128_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vinsertf64x2_zmm_zmm_m_u() {
			TestAssembler(c => c.vinsertf64x2(zmm2.k1, zmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vinsertf64x2_zmm_k1z_zmm_xmmm128_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vinsertf64x4_zmm_zmm_ymm_i() {
			TestAssembler(c => c.vinsertf64x4(zmm2.k1, zmm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vinsertf64x4_zmm_k1z_zmm_ymmm256_imm8, Register.ZMM2, Register.ZMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vinsertf64x4_zmm_zmm_m_i() {
			TestAssembler(c => c.vinsertf64x4(zmm2.k1, zmm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vinsertf64x4_zmm_k1z_zmm_ymmm256_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vinsertf64x4_zmm_zmm_ymm_u() {
			TestAssembler(c => c.vinsertf64x4(zmm2.k1, zmm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vinsertf64x4_zmm_k1z_zmm_ymmm256_imm8, Register.ZMM2, Register.ZMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vinsertf64x4_zmm_zmm_m_u() {
			TestAssembler(c => c.vinsertf64x4(zmm2.k1, zmm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vinsertf64x4_zmm_k1z_zmm_ymmm256_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vinserti128_ymm_ymm_xmm_i() {
			TestAssembler(c => c.vinserti128(ymm2, ymm3, xmm4, -5), Instruction.Create(Code.VEX_Vinserti128_ymm_ymm_xmmm128_imm8, Register.YMM2, Register.YMM3, Register.XMM4, -5));
		}

		[Fact]
		public void vinserti128_ymm_ymm_m_i() {
			TestAssembler(c => c.vinserti128(ymm2, ymm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vinserti128_ymm_ymm_xmmm128_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vinserti128_ymm_ymm_xmm_u() {
			TestAssembler(c => c.vinserti128(ymm2, ymm3, xmm4, (byte)0x7F), Instruction.Create(Code.VEX_Vinserti128_ymm_ymm_xmmm128_imm8, Register.YMM2, Register.YMM3, Register.XMM4, 0x7FU));
		}

		[Fact]
		public void vinserti128_ymm_ymm_m_u() {
			TestAssembler(c => c.vinserti128(ymm2, ymm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vinserti128_ymm_ymm_xmmm128_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vinserti32x4_ymm_ymm_xmm_i() {
			TestAssembler(c => c.vinserti32x4(ymm2.k1, ymm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vinserti32x4_ymm_k1z_ymm_xmmm128_imm8, Register.YMM2, Register.YMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vinserti32x4_zmm_zmm_xmm_i() {
			TestAssembler(c => c.vinserti32x4(zmm2.k1, zmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vinserti32x4_zmm_k1z_zmm_xmmm128_imm8, Register.ZMM2, Register.ZMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vinserti32x4_ymm_ymm_m_i() {
			TestAssembler(c => c.vinserti32x4(ymm2.k1, ymm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vinserti32x4_ymm_k1z_ymm_xmmm128_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vinserti32x4_zmm_zmm_m_i() {
			TestAssembler(c => c.vinserti32x4(zmm2.k1, zmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vinserti32x4_zmm_k1z_zmm_xmmm128_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vinserti32x4_ymm_ymm_xmm_u() {
			TestAssembler(c => c.vinserti32x4(ymm2.k1, ymm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vinserti32x4_ymm_k1z_ymm_xmmm128_imm8, Register.YMM2, Register.YMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vinserti32x4_zmm_zmm_xmm_u() {
			TestAssembler(c => c.vinserti32x4(zmm2.k1, zmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vinserti32x4_zmm_k1z_zmm_xmmm128_imm8, Register.ZMM2, Register.ZMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vinserti32x4_ymm_ymm_m_u() {
			TestAssembler(c => c.vinserti32x4(ymm2.k1, ymm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vinserti32x4_ymm_k1z_ymm_xmmm128_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vinserti32x4_zmm_zmm_m_u() {
			TestAssembler(c => c.vinserti32x4(zmm2.k1, zmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vinserti32x4_zmm_k1z_zmm_xmmm128_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vinserti32x8_zmm_zmm_ymm_i() {
			TestAssembler(c => c.vinserti32x8(zmm2.k1, zmm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vinserti32x8_zmm_k1z_zmm_ymmm256_imm8, Register.ZMM2, Register.ZMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vinserti32x8_zmm_zmm_m_i() {
			TestAssembler(c => c.vinserti32x8(zmm2.k1, zmm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vinserti32x8_zmm_k1z_zmm_ymmm256_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vinserti32x8_zmm_zmm_ymm_u() {
			TestAssembler(c => c.vinserti32x8(zmm2.k1, zmm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vinserti32x8_zmm_k1z_zmm_ymmm256_imm8, Register.ZMM2, Register.ZMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vinserti32x8_zmm_zmm_m_u() {
			TestAssembler(c => c.vinserti32x8(zmm2.k1, zmm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vinserti32x8_zmm_k1z_zmm_ymmm256_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vinserti64x2_ymm_ymm_xmm_i() {
			TestAssembler(c => c.vinserti64x2(ymm2.k1, ymm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vinserti64x2_ymm_k1z_ymm_xmmm128_imm8, Register.YMM2, Register.YMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vinserti64x2_zmm_zmm_xmm_i() {
			TestAssembler(c => c.vinserti64x2(zmm2.k1, zmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vinserti64x2_zmm_k1z_zmm_xmmm128_imm8, Register.ZMM2, Register.ZMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vinserti64x2_ymm_ymm_m_i() {
			TestAssembler(c => c.vinserti64x2(ymm2.k1, ymm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vinserti64x2_ymm_k1z_ymm_xmmm128_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vinserti64x2_zmm_zmm_m_i() {
			TestAssembler(c => c.vinserti64x2(zmm2.k1, zmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vinserti64x2_zmm_k1z_zmm_xmmm128_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vinserti64x2_ymm_ymm_xmm_u() {
			TestAssembler(c => c.vinserti64x2(ymm2.k1, ymm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vinserti64x2_ymm_k1z_ymm_xmmm128_imm8, Register.YMM2, Register.YMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vinserti64x2_zmm_zmm_xmm_u() {
			TestAssembler(c => c.vinserti64x2(zmm2.k1, zmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vinserti64x2_zmm_k1z_zmm_xmmm128_imm8, Register.ZMM2, Register.ZMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vinserti64x2_ymm_ymm_m_u() {
			TestAssembler(c => c.vinserti64x2(ymm2.k1, ymm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vinserti64x2_ymm_k1z_ymm_xmmm128_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vinserti64x2_zmm_zmm_m_u() {
			TestAssembler(c => c.vinserti64x2(zmm2.k1, zmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vinserti64x2_zmm_k1z_zmm_xmmm128_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vinserti64x4_zmm_zmm_ymm_i() {
			TestAssembler(c => c.vinserti64x4(zmm2.k1, zmm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vinserti64x4_zmm_k1z_zmm_ymmm256_imm8, Register.ZMM2, Register.ZMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vinserti64x4_zmm_zmm_m_i() {
			TestAssembler(c => c.vinserti64x4(zmm2.k1, zmm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vinserti64x4_zmm_k1z_zmm_ymmm256_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vinserti64x4_zmm_zmm_ymm_u() {
			TestAssembler(c => c.vinserti64x4(zmm2.k1, zmm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vinserti64x4_zmm_k1z_zmm_ymmm256_imm8, Register.ZMM2, Register.ZMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vinserti64x4_zmm_zmm_m_u() {
			TestAssembler(c => c.vinserti64x4(zmm2.k1, zmm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vinserti64x4_zmm_k1z_zmm_ymmm256_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vinsertps_xmm_xmm_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vinsertps(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vinsertps_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vinsertps(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.EVEX_Vinsertps_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vinsertps_xmm_xmm_m_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vinsertps(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vinsertps_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vinsertps(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.EVEX_Vinsertps_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vinsertps_xmm_xmm_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vinsertps(xmm2, xmm3, xmm4, (byte)0x7F), Instruction.Create(Code.VEX_Vinsertps_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vinsertps(xmm2, xmm3, xmm4, (byte)0x7F), Instruction.Create(Code.EVEX_Vinsertps_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vinsertps_xmm_xmm_m_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vinsertps(xmm2, xmm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vinsertps_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vinsertps(xmm2, xmm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.EVEX_Vinsertps_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vlddqu_xmm_m() {
			TestAssembler(c => c.vlddqu(xmm2, __[rcx]), Instruction.Create(Code.VEX_Vlddqu_xmm_m128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vlddqu_ymm_m() {
			TestAssembler(c => c.vlddqu(ymm2, __[rcx]), Instruction.Create(Code.VEX_Vlddqu_ymm_m256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vldmxcsr_m() {
			TestAssembler(c => c.vldmxcsr(__[rcx]), Instruction.Create(Code.VEX_Vldmxcsr_m32, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vmaskmovdqu_xmm_xmm() {
			TestAssembler(c => c.vmaskmovdqu(xmm2, xmm3), Instruction.CreateVmaskmovdqu(64, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vmaskmovpd_m_xmm_xmm() {
			TestAssembler(c => c.vmaskmovpd(__[rcx], xmm3, xmm4), Instruction.Create(Code.VEX_Vmaskmovpd_m128_xmm_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vmaskmovpd_m_ymm_ymm() {
			TestAssembler(c => c.vmaskmovpd(__[rcx], ymm3, ymm4), Instruction.Create(Code.VEX_Vmaskmovpd_m256_ymm_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vmaskmovpd_xmm_xmm_m() {
			TestAssembler(c => c.vmaskmovpd(xmm2, xmm3, __[rcx]), Instruction.Create(Code.VEX_Vmaskmovpd_xmm_xmm_m128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vmaskmovpd_ymm_ymm_m() {
			TestAssembler(c => c.vmaskmovpd(ymm2, ymm3, __[rcx]), Instruction.Create(Code.VEX_Vmaskmovpd_ymm_ymm_m256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vmaskmovps_m_xmm_xmm() {
			TestAssembler(c => c.vmaskmovps(__[rcx], xmm3, xmm4), Instruction.Create(Code.VEX_Vmaskmovps_m128_xmm_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vmaskmovps_m_ymm_ymm() {
			TestAssembler(c => c.vmaskmovps(__[rcx], ymm3, ymm4), Instruction.Create(Code.VEX_Vmaskmovps_m256_ymm_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vmaskmovps_xmm_xmm_m() {
			TestAssembler(c => c.vmaskmovps(xmm2, xmm3, __[rcx]), Instruction.Create(Code.VEX_Vmaskmovps_xmm_xmm_m128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vmaskmovps_ymm_ymm_m() {
			TestAssembler(c => c.vmaskmovps(ymm2, ymm3, __[rcx]), Instruction.Create(Code.VEX_Vmaskmovps_ymm_ymm_m256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vmaxpd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmaxpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vmaxpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmaxpd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vmaxpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmaxpd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmaxpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vmaxpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmaxpd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vmaxpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmaxpd_zmm_zmm_zmm() {
			TestAssembler(c => c.vmaxpd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vmaxpd_zmm_k1z_zmm_zmmm512b64_sae, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vmaxpd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vmaxpd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vmaxpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmaxpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmaxpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmaxpd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmaxpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmaxpd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vmaxpd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vmaxpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmaxpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmaxpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmaxpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmaxpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmaxpd_zmm_zmm_m() {
			TestAssembler(c => c.vmaxpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmaxpd_zmm_k1z_zmm_zmmm512b64_sae, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmaxph_xmm_xmm_xmm() {
			TestAssembler(c => c.vmaxph(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vmaxph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vmaxph_ymm_ymm_ymm() {
			TestAssembler(c => c.vmaxph(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vmaxph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vmaxph_zmm_zmm_zmm() {
			TestAssembler(c => c.vmaxph(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vmaxph_zmm_k1z_zmm_zmmm512b16_sae, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vmaxph_xmm_xmm_m() {
			TestAssembler(c => c.vmaxph(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmaxph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmaxph_ymm_ymm_m() {
			TestAssembler(c => c.vmaxph(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmaxph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmaxph_zmm_zmm_m() {
			TestAssembler(c => c.vmaxph(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmaxph_zmm_k1z_zmm_zmmm512b16_sae, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmaxps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmaxps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vmaxps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmaxps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vmaxps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmaxps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmaxps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vmaxps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmaxps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vmaxps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmaxps_zmm_zmm_zmm() {
			TestAssembler(c => c.vmaxps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vmaxps_zmm_k1z_zmm_zmmm512b32_sae, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vmaxps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vmaxps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vmaxps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmaxps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmaxps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmaxps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmaxps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmaxps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vmaxps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vmaxps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmaxps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmaxps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmaxps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmaxps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmaxps_zmm_zmm_m() {
			TestAssembler(c => c.vmaxps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmaxps_zmm_k1z_zmm_zmmm512b32_sae, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmaxsd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmaxsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vmaxsd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmaxsd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vmaxsd_xmm_k1z_xmm_xmmm64_sae, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmaxsd_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmaxsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmaxsd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmaxsd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmaxsd_xmm_k1z_xmm_xmmm64_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmaxsh_xmm_xmm_xmm() {
			TestAssembler(c => c.vmaxsh(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vmaxsh_xmm_k1z_xmm_xmmm16_sae, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vmaxsh_xmm_xmm_m() {
			TestAssembler(c => c.vmaxsh(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmaxsh_xmm_k1z_xmm_xmmm16_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmaxss_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmaxss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vmaxss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmaxss(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vmaxss_xmm_k1z_xmm_xmmm32_sae, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmaxss_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmaxss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmaxss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmaxss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmaxss_xmm_k1z_xmm_xmmm32_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmcall() {
			TestAssembler(c => c.vmcall(), Instruction.Create(Code.Vmcall));
		}

		[Fact]
		public void vmclear_m() {
			TestAssembler(c => c.vmclear(__[rcx]), Instruction.Create(Code.Vmclear_m64, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vmfunc() {
			TestAssembler(c => c.vmfunc(), Instruction.Create(Code.Vmfunc));
		}

		[Fact]
		public void vmgexit() {
			TestAssembler(c => c.vmgexit(), Instruction.Create(Code.Vmgexit));
		}

		[Fact]
		public void vminpd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vminpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vminpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vminpd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vminpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vminpd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vminpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vminpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vminpd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vminpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vminpd_zmm_zmm_zmm() {
			TestAssembler(c => c.vminpd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vminpd_zmm_k1z_zmm_zmmm512b64_sae, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vminpd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vminpd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vminpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vminpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vminpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vminpd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vminpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vminpd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vminpd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vminpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vminpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vminpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vminpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vminpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vminpd_zmm_zmm_m() {
			TestAssembler(c => c.vminpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vminpd_zmm_k1z_zmm_zmmm512b64_sae, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vminph_xmm_xmm_xmm() {
			TestAssembler(c => c.vminph(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vminph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vminph_ymm_ymm_ymm() {
			TestAssembler(c => c.vminph(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vminph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vminph_zmm_zmm_zmm() {
			TestAssembler(c => c.vminph(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vminph_zmm_k1z_zmm_zmmm512b16_sae, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vminph_xmm_xmm_m() {
			TestAssembler(c => c.vminph(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vminph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vminph_ymm_ymm_m() {
			TestAssembler(c => c.vminph(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vminph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vminph_zmm_zmm_m() {
			TestAssembler(c => c.vminph(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vminph_zmm_k1z_zmm_zmmm512b16_sae, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vminps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vminps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vminps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vminps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vminps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vminps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vminps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vminps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vminps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vminps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vminps_zmm_zmm_zmm() {
			TestAssembler(c => c.vminps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vminps_zmm_k1z_zmm_zmmm512b32_sae, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vminps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vminps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vminps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vminps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vminps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vminps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vminps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vminps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vminps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vminps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vminps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vminps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vminps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vminps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vminps_zmm_zmm_m() {
			TestAssembler(c => c.vminps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vminps_zmm_k1z_zmm_zmmm512b32_sae, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vminsd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vminsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vminsd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vminsd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vminsd_xmm_k1z_xmm_xmmm64_sae, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vminsd_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vminsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vminsd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vminsd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vminsd_xmm_k1z_xmm_xmmm64_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vminsh_xmm_xmm_xmm() {
			TestAssembler(c => c.vminsh(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vminsh_xmm_k1z_xmm_xmmm16_sae, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vminsh_xmm_xmm_m() {
			TestAssembler(c => c.vminsh(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vminsh_xmm_k1z_xmm_xmmm16_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vminss_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vminss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vminss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vminss(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vminss_xmm_k1z_xmm_xmmm32_sae, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vminss_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vminss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vminss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vminss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vminss_xmm_k1z_xmm_xmmm32_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmlaunch() {
			TestAssembler(c => c.vmlaunch(), Instruction.Create(Code.Vmlaunch));
		}

		[Fact]
		public void vmload() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.vmload(), Instruction.Create(Code.Vmloadq));
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void vmmcall() {
			TestAssembler(c => c.vmmcall(), Instruction.Create(Code.Vmmcall));
		}

		[Fact]
		public void vmovapd_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovapd(xmm2, xmm3), Instruction.Create(Code.VEX_Vmovapd_xmm_xmmm128, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovapd(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovapd_xmm_k1z_xmmm128, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovapd_m_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovapd(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.VEX_Vmovapd_xmmm128_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovapd(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovapd_xmmm128_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovapd_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovapd(ymm2, ymm3), Instruction.Create(Code.VEX_Vmovapd_ymm_ymmm256, Register.YMM2, Register.YMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovapd(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vmovapd_ymm_k1z_ymmm256, Register.YMM2, Register.YMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovapd_m_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovapd(__ymmword_ptr[rcx], ymm3), Instruction.Create(Code.VEX_Vmovapd_ymmm256_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovapd(__ymmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vmovapd_ymmm256_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovapd_zmm_zmm() {
			TestAssembler(c => c.vmovapd(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovapd_zmm_k1z_zmmm512, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vmovapd_m_zmm() {
			TestAssembler(c => c.vmovapd(__zmmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovapd_zmmm512_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vmovapd_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovapd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovapd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovapd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovapd_xmm_k1z_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovapd_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovapd(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovapd_ymm_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovapd(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovapd_ymm_k1z_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovapd_zmm_m() {
			TestAssembler(c => c.vmovapd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovapd_zmm_k1z_zmmm512, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmovaps_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovaps(xmm2, xmm3), Instruction.Create(Code.VEX_Vmovaps_xmm_xmmm128, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovaps(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovaps_xmm_k1z_xmmm128, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovaps_m_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovaps(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.VEX_Vmovaps_xmmm128_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovaps(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovaps_xmmm128_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovaps_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovaps(ymm2, ymm3), Instruction.Create(Code.VEX_Vmovaps_ymm_ymmm256, Register.YMM2, Register.YMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovaps(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vmovaps_ymm_k1z_ymmm256, Register.YMM2, Register.YMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovaps_m_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovaps(__ymmword_ptr[rcx], ymm3), Instruction.Create(Code.VEX_Vmovaps_ymmm256_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovaps(__ymmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vmovaps_ymmm256_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovaps_zmm_zmm() {
			TestAssembler(c => c.vmovaps(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovaps_zmm_k1z_zmmm512, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vmovaps_m_zmm() {
			TestAssembler(c => c.vmovaps(__zmmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovaps_zmmm512_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vmovaps_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovaps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovaps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovaps(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovaps_xmm_k1z_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovaps_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovaps(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovaps_ymm_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovaps(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovaps_ymm_k1z_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovaps_zmm_m() {
			TestAssembler(c => c.vmovaps(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovaps_zmm_k1z_zmmm512, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmovd_xmm_r32() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovd(xmm2, ebx), Instruction.Create(Code.VEX_Vmovd_xmm_rm32, Register.XMM2, Register.EBX), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovd(xmm2, ebx), Instruction.Create(Code.EVEX_Vmovd_xmm_rm32, Register.XMM2, Register.EBX), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovd_r32_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovd(edx, xmm3), Instruction.Create(Code.VEX_Vmovd_rm32_xmm, Register.EDX, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovd(edx, xmm3), Instruction.Create(Code.EVEX_Vmovd_rm32_xmm, Register.EDX, Register.XMM3), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovd_m_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovd(__dword_ptr[rcx], xmm3), Instruction.Create(Code.VEX_Vmovd_rm32_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovd(__dword_ptr[rcx], xmm3), Instruction.Create(Code.EVEX_Vmovd_rm32_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovd_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovd(xmm2, __dword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovd_xmm_rm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovd(xmm2, __dword_ptr[rcx]), Instruction.Create(Code.EVEX_Vmovd_xmm_rm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovddup_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovddup(xmm2, xmm3), Instruction.Create(Code.VEX_Vmovddup_xmm_xmmm64, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovddup(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovddup_xmm_k1z_xmmm64, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovddup_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovddup(ymm2, ymm3), Instruction.Create(Code.VEX_Vmovddup_ymm_ymmm256, Register.YMM2, Register.YMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovddup(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vmovddup_ymm_k1z_ymmm256, Register.YMM2, Register.YMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovddup_zmm_zmm() {
			TestAssembler(c => c.vmovddup(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovddup_zmm_k1z_zmmm512, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vmovddup_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovddup(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovddup_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovddup(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovddup_xmm_k1z_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovddup_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovddup(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovddup_ymm_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovddup(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovddup_ymm_k1z_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovddup_zmm_m() {
			TestAssembler(c => c.vmovddup(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovddup_zmm_k1z_zmmm512, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmovdqa_xmm_xmm() {
			TestAssembler(c => c.vmovdqa(xmm2, xmm3), Instruction.Create(Code.VEX_Vmovdqa_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vmovdqa_m_xmm() {
			TestAssembler(c => c.vmovdqa(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.VEX_Vmovdqa_xmmm128_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3));
		}

		[Fact]
		public void vmovdqa_ymm_ymm() {
			TestAssembler(c => c.vmovdqa(ymm2, ymm3), Instruction.Create(Code.VEX_Vmovdqa_ymm_ymmm256, Register.YMM2, Register.YMM3));
		}

		[Fact]
		public void vmovdqa_m_ymm() {
			TestAssembler(c => c.vmovdqa(__ymmword_ptr[rcx], ymm3), Instruction.Create(Code.VEX_Vmovdqa_ymmm256_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3));
		}

		[Fact]
		public void vmovdqa_xmm_m() {
			TestAssembler(c => c.vmovdqa(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovdqa_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vmovdqa_ymm_m() {
			TestAssembler(c => c.vmovdqa(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovdqa_ymm_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vmovdqa32_xmm_xmm() {
			TestAssembler(c => c.vmovdqa32(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqa32_xmm_k1z_xmmm128, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vmovdqa32_m_xmm() {
			TestAssembler(c => c.vmovdqa32(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqa32_xmmm128_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vmovdqa32_ymm_ymm() {
			TestAssembler(c => c.vmovdqa32(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqa32_ymm_k1z_ymmm256, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vmovdqa32_m_ymm() {
			TestAssembler(c => c.vmovdqa32(__ymmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqa32_ymmm256_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vmovdqa32_zmm_zmm() {
			TestAssembler(c => c.vmovdqa32(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqa32_zmm_k1z_zmmm512, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vmovdqa32_m_zmm() {
			TestAssembler(c => c.vmovdqa32(__zmmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqa32_zmmm512_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vmovdqa32_xmm_m() {
			TestAssembler(c => c.vmovdqa32(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovdqa32_xmm_k1z_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmovdqa32_ymm_m() {
			TestAssembler(c => c.vmovdqa32(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovdqa32_ymm_k1z_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmovdqa32_zmm_m() {
			TestAssembler(c => c.vmovdqa32(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovdqa32_zmm_k1z_zmmm512, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmovdqa64_xmm_xmm() {
			TestAssembler(c => c.vmovdqa64(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqa64_xmm_k1z_xmmm128, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vmovdqa64_m_xmm() {
			TestAssembler(c => c.vmovdqa64(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqa64_xmmm128_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vmovdqa64_ymm_ymm() {
			TestAssembler(c => c.vmovdqa64(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqa64_ymm_k1z_ymmm256, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vmovdqa64_m_ymm() {
			TestAssembler(c => c.vmovdqa64(__ymmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqa64_ymmm256_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vmovdqa64_zmm_zmm() {
			TestAssembler(c => c.vmovdqa64(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqa64_zmm_k1z_zmmm512, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vmovdqa64_m_zmm() {
			TestAssembler(c => c.vmovdqa64(__zmmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqa64_zmmm512_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vmovdqa64_xmm_m() {
			TestAssembler(c => c.vmovdqa64(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovdqa64_xmm_k1z_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmovdqa64_ymm_m() {
			TestAssembler(c => c.vmovdqa64(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovdqa64_ymm_k1z_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmovdqa64_zmm_m() {
			TestAssembler(c => c.vmovdqa64(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovdqa64_zmm_k1z_zmmm512, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmovdqu_xmm_xmm() {
			TestAssembler(c => c.vmovdqu(xmm2, xmm3), Instruction.Create(Code.VEX_Vmovdqu_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vmovdqu_m_xmm() {
			TestAssembler(c => c.vmovdqu(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.VEX_Vmovdqu_xmmm128_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3));
		}

		[Fact]
		public void vmovdqu_ymm_ymm() {
			TestAssembler(c => c.vmovdqu(ymm2, ymm3), Instruction.Create(Code.VEX_Vmovdqu_ymm_ymmm256, Register.YMM2, Register.YMM3));
		}

		[Fact]
		public void vmovdqu_m_ymm() {
			TestAssembler(c => c.vmovdqu(__ymmword_ptr[rcx], ymm3), Instruction.Create(Code.VEX_Vmovdqu_ymmm256_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3));
		}

		[Fact]
		public void vmovdqu_xmm_m() {
			TestAssembler(c => c.vmovdqu(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovdqu_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vmovdqu_ymm_m() {
			TestAssembler(c => c.vmovdqu(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovdqu_ymm_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vmovdqu16_xmm_xmm() {
			TestAssembler(c => c.vmovdqu16(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu16_xmm_k1z_xmmm128, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vmovdqu16_m_xmm() {
			TestAssembler(c => c.vmovdqu16(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu16_xmmm128_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vmovdqu16_ymm_ymm() {
			TestAssembler(c => c.vmovdqu16(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu16_ymm_k1z_ymmm256, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vmovdqu16_m_ymm() {
			TestAssembler(c => c.vmovdqu16(__ymmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu16_ymmm256_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vmovdqu16_zmm_zmm() {
			TestAssembler(c => c.vmovdqu16(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu16_zmm_k1z_zmmm512, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vmovdqu16_m_zmm() {
			TestAssembler(c => c.vmovdqu16(__zmmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu16_zmmm512_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vmovdqu16_xmm_m() {
			TestAssembler(c => c.vmovdqu16(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu16_xmm_k1z_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmovdqu16_ymm_m() {
			TestAssembler(c => c.vmovdqu16(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu16_ymm_k1z_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmovdqu16_zmm_m() {
			TestAssembler(c => c.vmovdqu16(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu16_zmm_k1z_zmmm512, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmovdqu32_xmm_xmm() {
			TestAssembler(c => c.vmovdqu32(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu32_xmm_k1z_xmmm128, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vmovdqu32_m_xmm() {
			TestAssembler(c => c.vmovdqu32(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu32_xmmm128_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vmovdqu32_ymm_ymm() {
			TestAssembler(c => c.vmovdqu32(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu32_ymm_k1z_ymmm256, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vmovdqu32_m_ymm() {
			TestAssembler(c => c.vmovdqu32(__ymmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu32_ymmm256_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vmovdqu32_zmm_zmm() {
			TestAssembler(c => c.vmovdqu32(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu32_zmm_k1z_zmmm512, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vmovdqu32_m_zmm() {
			TestAssembler(c => c.vmovdqu32(__zmmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu32_zmmm512_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vmovdqu32_xmm_m() {
			TestAssembler(c => c.vmovdqu32(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu32_xmm_k1z_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmovdqu32_ymm_m() {
			TestAssembler(c => c.vmovdqu32(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu32_ymm_k1z_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmovdqu32_zmm_m() {
			TestAssembler(c => c.vmovdqu32(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu32_zmm_k1z_zmmm512, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmovdqu64_xmm_xmm() {
			TestAssembler(c => c.vmovdqu64(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu64_xmm_k1z_xmmm128, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vmovdqu64_m_xmm() {
			TestAssembler(c => c.vmovdqu64(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu64_xmmm128_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vmovdqu64_ymm_ymm() {
			TestAssembler(c => c.vmovdqu64(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu64_ymm_k1z_ymmm256, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vmovdqu64_m_ymm() {
			TestAssembler(c => c.vmovdqu64(__ymmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu64_ymmm256_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vmovdqu64_zmm_zmm() {
			TestAssembler(c => c.vmovdqu64(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu64_zmm_k1z_zmmm512, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vmovdqu64_m_zmm() {
			TestAssembler(c => c.vmovdqu64(__zmmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu64_zmmm512_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vmovdqu64_xmm_m() {
			TestAssembler(c => c.vmovdqu64(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu64_xmm_k1z_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmovdqu64_ymm_m() {
			TestAssembler(c => c.vmovdqu64(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu64_ymm_k1z_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmovdqu64_zmm_m() {
			TestAssembler(c => c.vmovdqu64(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu64_zmm_k1z_zmmm512, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmovdqu8_xmm_xmm() {
			TestAssembler(c => c.vmovdqu8(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu8_xmm_k1z_xmmm128, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vmovdqu8_m_xmm() {
			TestAssembler(c => c.vmovdqu8(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu8_xmmm128_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vmovdqu8_ymm_ymm() {
			TestAssembler(c => c.vmovdqu8(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu8_ymm_k1z_ymmm256, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vmovdqu8_m_ymm() {
			TestAssembler(c => c.vmovdqu8(__ymmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu8_ymmm256_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vmovdqu8_zmm_zmm() {
			TestAssembler(c => c.vmovdqu8(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu8_zmm_k1z_zmmm512, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vmovdqu8_m_zmm() {
			TestAssembler(c => c.vmovdqu8(__zmmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu8_zmmm512_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vmovdqu8_xmm_m() {
			TestAssembler(c => c.vmovdqu8(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu8_xmm_k1z_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmovdqu8_ymm_m() {
			TestAssembler(c => c.vmovdqu8(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu8_ymm_k1z_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmovdqu8_zmm_m() {
			TestAssembler(c => c.vmovdqu8(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovdqu8_zmm_k1z_zmmm512, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmovhlps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovhlps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vmovhlps_xmm_xmm_xmm, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovhlps(xmm2, xmm3, xmm4), Instruction.Create(Code.EVEX_Vmovhlps_xmm_xmm_xmm, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovhpd_m_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovhpd(__[rcx], xmm3), Instruction.Create(Code.VEX_Vmovhpd_m64_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovhpd(__[rcx], xmm3), Instruction.Create(Code.EVEX_Vmovhpd_m64_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovhpd_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovhpd(xmm2, xmm3, __[rcx]), Instruction.Create(Code.VEX_Vmovhpd_xmm_xmm_m64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovhpd(xmm2, xmm3, __[rcx]), Instruction.Create(Code.EVEX_Vmovhpd_xmm_xmm_m64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovhps_m_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovhps(__[rcx], xmm3), Instruction.Create(Code.VEX_Vmovhps_m64_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovhps(__[rcx], xmm3), Instruction.Create(Code.EVEX_Vmovhps_m64_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovhps_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovhps(xmm2, xmm3, __[rcx]), Instruction.Create(Code.VEX_Vmovhps_xmm_xmm_m64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovhps(xmm2, xmm3, __[rcx]), Instruction.Create(Code.EVEX_Vmovhps_xmm_xmm_m64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovlhps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovlhps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vmovlhps_xmm_xmm_xmm, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovlhps(xmm2, xmm3, xmm4), Instruction.Create(Code.EVEX_Vmovlhps_xmm_xmm_xmm, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovlpd_m_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovlpd(__[rcx], xmm3), Instruction.Create(Code.VEX_Vmovlpd_m64_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovlpd(__[rcx], xmm3), Instruction.Create(Code.EVEX_Vmovlpd_m64_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovlpd_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovlpd(xmm2, xmm3, __[rcx]), Instruction.Create(Code.VEX_Vmovlpd_xmm_xmm_m64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovlpd(xmm2, xmm3, __[rcx]), Instruction.Create(Code.EVEX_Vmovlpd_xmm_xmm_m64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovlps_m_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovlps(__[rcx], xmm3), Instruction.Create(Code.VEX_Vmovlps_m64_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovlps(__[rcx], xmm3), Instruction.Create(Code.EVEX_Vmovlps_m64_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovlps_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovlps(xmm2, xmm3, __[rcx]), Instruction.Create(Code.VEX_Vmovlps_xmm_xmm_m64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovlps(xmm2, xmm3, __[rcx]), Instruction.Create(Code.EVEX_Vmovlps_xmm_xmm_m64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovmskpd_r32_xmm() {
			TestAssembler(c => c.vmovmskpd(edx, xmm3), Instruction.Create(Code.VEX_Vmovmskpd_r32_xmm, Register.EDX, Register.XMM3));
		}

		[Fact]
		public void vmovmskpd_r64_xmm() {
			TestAssembler(c => c.vmovmskpd(rdx, xmm3), Instruction.Create(Code.VEX_Vmovmskpd_r64_xmm, Register.RDX, Register.XMM3));
		}

		[Fact]
		public void vmovmskpd_r32_ymm() {
			TestAssembler(c => c.vmovmskpd(edx, ymm3), Instruction.Create(Code.VEX_Vmovmskpd_r32_ymm, Register.EDX, Register.YMM3));
		}

		[Fact]
		public void vmovmskpd_r64_ymm() {
			TestAssembler(c => c.vmovmskpd(rdx, ymm3), Instruction.Create(Code.VEX_Vmovmskpd_r64_ymm, Register.RDX, Register.YMM3));
		}

		[Fact]
		public void vmovmskps_r32_xmm() {
			TestAssembler(c => c.vmovmskps(edx, xmm3), Instruction.Create(Code.VEX_Vmovmskps_r32_xmm, Register.EDX, Register.XMM3));
		}

		[Fact]
		public void vmovmskps_r64_xmm() {
			TestAssembler(c => c.vmovmskps(rdx, xmm3), Instruction.Create(Code.VEX_Vmovmskps_r64_xmm, Register.RDX, Register.XMM3));
		}

		[Fact]
		public void vmovmskps_r32_ymm() {
			TestAssembler(c => c.vmovmskps(edx, ymm3), Instruction.Create(Code.VEX_Vmovmskps_r32_ymm, Register.EDX, Register.YMM3));
		}

		[Fact]
		public void vmovmskps_r64_ymm() {
			TestAssembler(c => c.vmovmskps(rdx, ymm3), Instruction.Create(Code.VEX_Vmovmskps_r64_ymm, Register.RDX, Register.YMM3));
		}

		[Fact]
		public void vmovntdq_m_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovntdq(__[rcx], xmm3), Instruction.Create(Code.VEX_Vmovntdq_m128_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovntdq(__[rcx], xmm3), Instruction.Create(Code.EVEX_Vmovntdq_m128_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovntdq_m_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovntdq(__[rcx], ymm3), Instruction.Create(Code.VEX_Vmovntdq_m256_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovntdq(__[rcx], ymm3), Instruction.Create(Code.EVEX_Vmovntdq_m256_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovntdq_m_zmm() {
			TestAssembler(c => c.vmovntdq(__[rcx], zmm3), Instruction.Create(Code.EVEX_Vmovntdq_m512_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3));
		}

		[Fact]
		public void vmovntdqa_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovntdqa(xmm2, __[rcx]), Instruction.Create(Code.VEX_Vmovntdqa_xmm_m128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovntdqa(xmm2, __[rcx]), Instruction.Create(Code.EVEX_Vmovntdqa_xmm_m128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovntdqa_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovntdqa(ymm2, __[rcx]), Instruction.Create(Code.VEX_Vmovntdqa_ymm_m256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovntdqa(ymm2, __[rcx]), Instruction.Create(Code.EVEX_Vmovntdqa_ymm_m256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovntdqa_zmm_m() {
			TestAssembler(c => c.vmovntdqa(zmm2, __[rcx]), Instruction.Create(Code.EVEX_Vmovntdqa_zmm_m512, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vmovntpd_m_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovntpd(__[rcx], xmm3), Instruction.Create(Code.VEX_Vmovntpd_m128_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovntpd(__[rcx], xmm3), Instruction.Create(Code.EVEX_Vmovntpd_m128_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovntpd_m_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovntpd(__[rcx], ymm3), Instruction.Create(Code.VEX_Vmovntpd_m256_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovntpd(__[rcx], ymm3), Instruction.Create(Code.EVEX_Vmovntpd_m256_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovntpd_m_zmm() {
			TestAssembler(c => c.vmovntpd(__[rcx], zmm3), Instruction.Create(Code.EVEX_Vmovntpd_m512_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3));
		}

		[Fact]
		public void vmovntps_m_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovntps(__[rcx], xmm3), Instruction.Create(Code.VEX_Vmovntps_m128_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovntps(__[rcx], xmm3), Instruction.Create(Code.EVEX_Vmovntps_m128_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovntps_m_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovntps(__[rcx], ymm3), Instruction.Create(Code.VEX_Vmovntps_m256_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovntps(__[rcx], ymm3), Instruction.Create(Code.EVEX_Vmovntps_m256_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovntps_m_zmm() {
			TestAssembler(c => c.vmovntps(__[rcx], zmm3), Instruction.Create(Code.EVEX_Vmovntps_m512_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3));
		}

		[Fact]
		public void vmovq_xmm_r64() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovq(xmm2, rbx), Instruction.Create(Code.VEX_Vmovq_xmm_rm64, Register.XMM2, Register.RBX), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovq(xmm2, rbx), Instruction.Create(Code.EVEX_Vmovq_xmm_rm64, Register.XMM2, Register.RBX), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovq_r64_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovq(rdx, xmm3), Instruction.Create(Code.VEX_Vmovq_rm64_xmm, Register.RDX, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovq(rdx, xmm3), Instruction.Create(Code.EVEX_Vmovq_rm64_xmm, Register.RDX, Register.XMM3), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovq_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovq(xmm2, xmm3), Instruction.Create(Code.VEX_Vmovq_xmm_xmmm64, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovq(xmm2, xmm3), Instruction.Create(Code.EVEX_Vmovq_xmm_xmmm64, Register.XMM2, Register.XMM3), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovq_m_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovq(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.VEX_Vmovq_xmmm64_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovq(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.EVEX_Vmovq_xmmm64_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovq_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovq_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vmovq_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovsd_m_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovsd(__[rcx], xmm3), Instruction.Create(Code.VEX_Vmovsd_m64_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovsd(__[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovsd_m64_k1_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovsd_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovsd(xmm2, __[rcx]), Instruction.Create(Code.VEX_Vmovsd_xmm_m64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovsd(xmm2.k1, __[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovsd_xmm_k1z_m64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovsd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vmovsd_xmm_xmm_xmm, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovsd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vmovsd_xmm_k1z_xmm_xmm, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovsh_m_xmm() {
			TestAssembler(c => c.vmovsh(__[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovsh_m16_k1_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vmovsh_xmm_m() {
			TestAssembler(c => c.vmovsh(xmm2.k1, __[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovsh_xmm_k1z_m16, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmovsh_xmm_xmm_xmm() {
			TestAssembler(c => c.vmovsh(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vmovsh_xmm_k1z_xmm_xmm, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vmovshdup_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovshdup(xmm2, xmm3), Instruction.Create(Code.VEX_Vmovshdup_xmm_xmmm128, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovshdup(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovshdup_xmm_k1z_xmmm128, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovshdup_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovshdup(ymm2, ymm3), Instruction.Create(Code.VEX_Vmovshdup_ymm_ymmm256, Register.YMM2, Register.YMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovshdup(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vmovshdup_ymm_k1z_ymmm256, Register.YMM2, Register.YMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovshdup_zmm_zmm() {
			TestAssembler(c => c.vmovshdup(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovshdup_zmm_k1z_zmmm512, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vmovshdup_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovshdup(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovshdup_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovshdup(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovshdup_xmm_k1z_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovshdup_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovshdup(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovshdup_ymm_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovshdup(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovshdup_ymm_k1z_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovshdup_zmm_m() {
			TestAssembler(c => c.vmovshdup(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovshdup_zmm_k1z_zmmm512, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmovsldup_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovsldup(xmm2, xmm3), Instruction.Create(Code.VEX_Vmovsldup_xmm_xmmm128, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovsldup(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovsldup_xmm_k1z_xmmm128, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovsldup_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovsldup(ymm2, ymm3), Instruction.Create(Code.VEX_Vmovsldup_ymm_ymmm256, Register.YMM2, Register.YMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovsldup(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vmovsldup_ymm_k1z_ymmm256, Register.YMM2, Register.YMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovsldup_zmm_zmm() {
			TestAssembler(c => c.vmovsldup(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovsldup_zmm_k1z_zmmm512, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vmovsldup_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovsldup(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovsldup_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovsldup(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovsldup_xmm_k1z_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovsldup_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovsldup(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovsldup_ymm_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovsldup(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovsldup_ymm_k1z_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovsldup_zmm_m() {
			TestAssembler(c => c.vmovsldup(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovsldup_zmm_k1z_zmmm512, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmovss_m_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovss(__[rcx], xmm3), Instruction.Create(Code.VEX_Vmovss_m32_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovss(__[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovss_m32_k1_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovss_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovss(xmm2, __[rcx]), Instruction.Create(Code.VEX_Vmovss_xmm_m32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovss(xmm2.k1, __[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovss_xmm_k1z_m32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovss_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vmovss_xmm_xmm_xmm, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovss(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vmovss_xmm_k1z_xmm_xmm, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovupd_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovupd(xmm2, xmm3), Instruction.Create(Code.VEX_Vmovupd_xmm_xmmm128, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovupd(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovupd_xmm_k1z_xmmm128, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovupd_m_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovupd(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.VEX_Vmovupd_xmmm128_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovupd(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovupd_xmmm128_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovupd_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovupd(ymm2, ymm3), Instruction.Create(Code.VEX_Vmovupd_ymm_ymmm256, Register.YMM2, Register.YMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovupd(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vmovupd_ymm_k1z_ymmm256, Register.YMM2, Register.YMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovupd_m_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovupd(__ymmword_ptr[rcx], ymm3), Instruction.Create(Code.VEX_Vmovupd_ymmm256_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovupd(__ymmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vmovupd_ymmm256_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovupd_zmm_zmm() {
			TestAssembler(c => c.vmovupd(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovupd_zmm_k1z_zmmm512, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vmovupd_m_zmm() {
			TestAssembler(c => c.vmovupd(__zmmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovupd_zmmm512_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vmovupd_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovupd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovupd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovupd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovupd_xmm_k1z_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovupd_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovupd(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovupd_ymm_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovupd(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovupd_ymm_k1z_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovupd_zmm_m() {
			TestAssembler(c => c.vmovupd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovupd_zmm_k1z_zmmm512, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmovups_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovups(xmm2, xmm3), Instruction.Create(Code.VEX_Vmovups_xmm_xmmm128, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovups(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovups_xmm_k1z_xmmm128, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovups_m_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovups(__xmmword_ptr[rcx], xmm3), Instruction.Create(Code.VEX_Vmovups_xmmm128_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovups(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovups_xmmm128_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovups_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovups(ymm2, ymm3), Instruction.Create(Code.VEX_Vmovups_ymm_ymmm256, Register.YMM2, Register.YMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovups(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vmovups_ymm_k1z_ymmm256, Register.YMM2, Register.YMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovups_m_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovups(__ymmword_ptr[rcx], ymm3), Instruction.Create(Code.VEX_Vmovups_ymmm256_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovups(__ymmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vmovups_ymmm256_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovups_zmm_zmm() {
			TestAssembler(c => c.vmovups(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovups_zmm_k1z_zmmm512, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vmovups_m_zmm() {
			TestAssembler(c => c.vmovups(__zmmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vmovups_zmmm512_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vmovups_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovups(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovups_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovups(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovups_xmm_k1z_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovups_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmovups(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmovups_ymm_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmovups(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovups_ymm_k1z_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmovups_zmm_m() {
			TestAssembler(c => c.vmovups(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmovups_zmm_k1z_zmmm512, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmovw_xmm_r32() {
			TestAssembler(c => c.vmovw(xmm2, ebx), Instruction.Create(Code.EVEX_Vmovw_xmm_r32m16, Register.XMM2, Register.EBX));
		}

		[Fact]
		public void vmovw_xmm_r64() {
			TestAssembler(c => c.vmovw(xmm2, rbx), Instruction.Create(Code.EVEX_Vmovw_xmm_r64m16, Register.XMM2, Register.RBX));
		}

		[Fact]
		public void vmovw_r32_xmm() {
			TestAssembler(c => c.vmovw(edx, xmm3), Instruction.Create(Code.EVEX_Vmovw_r32m16_xmm, Register.EDX, Register.XMM3));
		}

		[Fact]
		public void vmovw_r64_xmm() {
			TestAssembler(c => c.vmovw(rdx, xmm3), Instruction.Create(Code.EVEX_Vmovw_r64m16_xmm, Register.RDX, Register.XMM3));
		}

		[Fact]
		public void vmovw_m_xmm() {
			TestAssembler(c => c.vmovw(__dword_ptr[rcx], xmm3), Instruction.Create(Code.EVEX_Vmovw_r32m16_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3));
		}

		[Fact]
		public void vmovw_xmm_m() {
			TestAssembler(c => c.vmovw(xmm2, __dword_ptr[rcx]), Instruction.Create(Code.EVEX_Vmovw_xmm_r32m16, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vmpsadbw_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vmpsadbw(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vmpsadbw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5));
		}

		[Fact]
		public void vmpsadbw_ymm_ymm_ymm_i() {
			TestAssembler(c => c.vmpsadbw(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vmpsadbw_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5));
		}

		[Fact]
		public void vmpsadbw_xmm_xmm_m_i() {
			TestAssembler(c => c.vmpsadbw(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vmpsadbw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vmpsadbw_ymm_ymm_m_i() {
			TestAssembler(c => c.vmpsadbw(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vmpsadbw_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vmpsadbw_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vmpsadbw(xmm2, xmm3, xmm4, (byte)0x7F), Instruction.Create(Code.VEX_Vmpsadbw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU));
		}

		[Fact]
		public void vmpsadbw_ymm_ymm_ymm_u() {
			TestAssembler(c => c.vmpsadbw(ymm2, ymm3, ymm4, (byte)0x7F), Instruction.Create(Code.VEX_Vmpsadbw_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU));
		}

		[Fact]
		public void vmpsadbw_xmm_xmm_m_u() {
			TestAssembler(c => c.vmpsadbw(xmm2, xmm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vmpsadbw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vmpsadbw_ymm_ymm_m_u() {
			TestAssembler(c => c.vmpsadbw(ymm2, ymm3, __ymmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vmpsadbw_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vmptrld_m() {
			TestAssembler(c => c.vmptrld(__[rcx]), Instruction.Create(Code.Vmptrld_m64, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vmptrst_m() {
			TestAssembler(c => c.vmptrst(__[rcx]), Instruction.Create(Code.Vmptrst_m64, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vmread_r64_r64() {
			TestAssembler(c => c.vmread(rdx, rbx), Instruction.Create(Code.Vmread_rm64_r64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void vmread_m_r64() {
			TestAssembler(c => c.vmread(__qword_ptr[rcx], rbx), Instruction.Create(Code.Vmread_rm64_r64, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX));
		}

		[Fact]
		public void vmresume() {
			TestAssembler(c => c.vmresume(), Instruction.Create(Code.Vmresume));
		}

		[Fact]
		public void vmrun() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.vmrun(), Instruction.Create(Code.Vmrunq));
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void vmsave() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.vmsave(), Instruction.Create(Code.Vmsaveq));
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void vmulpd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmulpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vmulpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmulpd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vmulpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmulpd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmulpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vmulpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmulpd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vmulpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmulpd_zmm_zmm_zmm() {
			TestAssembler(c => c.vmulpd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vmulpd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vmulpd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vmulpd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vmulpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmulpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmulpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmulpd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmulpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmulpd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vmulpd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vmulpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmulpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmulpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmulpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmulpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmulpd_zmm_zmm_m() {
			TestAssembler(c => c.vmulpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmulpd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmulph_xmm_xmm_xmm() {
			TestAssembler(c => c.vmulph(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vmulph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vmulph_ymm_ymm_ymm() {
			TestAssembler(c => c.vmulph(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vmulph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vmulph_zmm_zmm_zmm() {
			TestAssembler(c => c.vmulph(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vmulph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vmulph_xmm_xmm_m() {
			TestAssembler(c => c.vmulph(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmulph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmulph_ymm_ymm_m() {
			TestAssembler(c => c.vmulph(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmulph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmulph_zmm_zmm_m() {
			TestAssembler(c => c.vmulph(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmulph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmulps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmulps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vmulps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmulps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vmulps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmulps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmulps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vmulps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmulps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vmulps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmulps_zmm_zmm_zmm() {
			TestAssembler(c => c.vmulps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vmulps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vmulps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vmulps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vmulps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmulps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmulps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmulps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmulps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmulps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vmulps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vmulps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmulps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmulps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmulps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmulps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmulps_zmm_zmm_m() {
			TestAssembler(c => c.vmulps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmulps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmulsd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmulsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vmulsd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmulsd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vmulsd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmulsd_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmulsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmulsd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmulsd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmulsd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmulsh_xmm_xmm_xmm() {
			TestAssembler(c => c.vmulsh(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vmulsh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vmulsh_xmm_xmm_m() {
			TestAssembler(c => c.vmulsh(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmulsh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vmulss_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmulss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vmulss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmulss(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vmulss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmulss_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vmulss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vmulss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vmulss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vmulss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vmwrite_r64_r64() {
			TestAssembler(c => c.vmwrite(rdx, rbx), Instruction.Create(Code.Vmwrite_r64_rm64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void vmwrite_r64_m() {
			TestAssembler(c => c.vmwrite(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Vmwrite_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vmxoff() {
			TestAssembler(c => c.vmxoff(), Instruction.Create(Code.Vmxoff));
		}

		[Fact]
		public void vmxon_m() {
			TestAssembler(c => c.vmxon(__[rcx]), Instruction.Create(Code.Vmxon_m64, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vorpd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vorpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vorpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vorpd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vorpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vorpd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vorpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vorpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vorpd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vorpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vorpd_zmm_zmm_zmm() {
			TestAssembler(c => c.vorpd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vorpd_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vorpd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vorpd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vorpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vorpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vorpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vorpd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vorpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vorpd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vorpd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vorpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vorpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vorpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vorpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vorpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vorpd_zmm_zmm_m() {
			TestAssembler(c => c.vorpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vorpd_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vorps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vorps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vorps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vorps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vorps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vorps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vorps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vorps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vorps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vorps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vorps_zmm_zmm_zmm() {
			TestAssembler(c => c.vorps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vorps_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vorps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vorps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vorps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vorps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vorps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vorps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vorps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vorps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vorps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vorps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vorps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vorps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vorps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vorps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vorps_zmm_zmm_m() {
			TestAssembler(c => c.vorps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vorps_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vp2intersectd_kr_xmm_xmm() {
			TestAssembler(c => c.vp2intersectd(k2, xmm3, xmm4), Instruction.Create(Code.EVEX_Vp2intersectd_kp1_xmm_xmmm128b32, Register.K2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vp2intersectd_kr_ymm_ymm() {
			TestAssembler(c => c.vp2intersectd(k2, ymm3, ymm4), Instruction.Create(Code.EVEX_Vp2intersectd_kp1_ymm_ymmm256b32, Register.K2, Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vp2intersectd_kr_zmm_zmm() {
			TestAssembler(c => c.vp2intersectd(k2, zmm3, zmm4), Instruction.Create(Code.EVEX_Vp2intersectd_kp1_zmm_zmmm512b32, Register.K2, Register.ZMM3, Register.ZMM4));
		}

		[Fact]
		public void vp2intersectd_kr_xmm_m() {
			TestAssembler(c => c.vp2intersectd(k2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vp2intersectd_kp1_xmm_xmmm128b32, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vp2intersectd_kr_ymm_m() {
			TestAssembler(c => c.vp2intersectd(k2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vp2intersectd_kp1_ymm_ymmm256b32, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vp2intersectd_kr_zmm_m() {
			TestAssembler(c => c.vp2intersectd(k2, zmm3, __zmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vp2intersectd_kp1_zmm_zmmm512b32, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vp2intersectq_kr_xmm_xmm() {
			TestAssembler(c => c.vp2intersectq(k2, xmm3, xmm4), Instruction.Create(Code.EVEX_Vp2intersectq_kp1_xmm_xmmm128b64, Register.K2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vp2intersectq_kr_ymm_ymm() {
			TestAssembler(c => c.vp2intersectq(k2, ymm3, ymm4), Instruction.Create(Code.EVEX_Vp2intersectq_kp1_ymm_ymmm256b64, Register.K2, Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vp2intersectq_kr_zmm_zmm() {
			TestAssembler(c => c.vp2intersectq(k2, zmm3, zmm4), Instruction.Create(Code.EVEX_Vp2intersectq_kp1_zmm_zmmm512b64, Register.K2, Register.ZMM3, Register.ZMM4));
		}

		[Fact]
		public void vp2intersectq_kr_xmm_m() {
			TestAssembler(c => c.vp2intersectq(k2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vp2intersectq_kp1_xmm_xmmm128b64, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vp2intersectq_kr_ymm_m() {
			TestAssembler(c => c.vp2intersectq(k2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vp2intersectq_kp1_ymm_ymmm256b64, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vp2intersectq_kr_zmm_m() {
			TestAssembler(c => c.vp2intersectq(k2, zmm3, __zmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vp2intersectq_kp1_zmm_zmmm512b64, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vp4dpwssd_zmm_zmm_m() {
			TestAssembler(c => c.vp4dpwssd(zmm2.k1, zmm3, __[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vp4dpwssd_zmm_k1z_zmmp3_m128, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vp4dpwssds_zmm_zmm_m() {
			TestAssembler(c => c.vp4dpwssds(zmm2.k1, zmm3, __[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vp4dpwssds_zmm_k1z_zmmp3_m128, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpabsb_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpabsb(xmm2, xmm3), Instruction.Create(Code.VEX_Vpabsb_xmm_xmmm128, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpabsb(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpabsb_xmm_k1z_xmmm128, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpabsb_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpabsb(ymm2, ymm3), Instruction.Create(Code.VEX_Vpabsb_ymm_ymmm256, Register.YMM2, Register.YMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpabsb(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpabsb_ymm_k1z_ymmm256, Register.YMM2, Register.YMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpabsb_zmm_zmm() {
			TestAssembler(c => c.vpabsb(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpabsb_zmm_k1z_zmmm512, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpabsb_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpabsb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpabsb_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpabsb(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpabsb_xmm_k1z_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpabsb_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpabsb(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpabsb_ymm_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpabsb(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpabsb_ymm_k1z_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpabsb_zmm_m() {
			TestAssembler(c => c.vpabsb(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpabsb_zmm_k1z_zmmm512, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpabsd_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpabsd(xmm2, xmm3), Instruction.Create(Code.VEX_Vpabsd_xmm_xmmm128, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpabsd(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpabsd_xmm_k1z_xmmm128b32, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpabsd_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpabsd(ymm2, ymm3), Instruction.Create(Code.VEX_Vpabsd_ymm_ymmm256, Register.YMM2, Register.YMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpabsd(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpabsd_ymm_k1z_ymmm256b32, Register.YMM2, Register.YMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpabsd_zmm_zmm() {
			TestAssembler(c => c.vpabsd(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpabsd_zmm_k1z_zmmm512b32, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpabsd_xmm_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vpabsd(xmm2.k1, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpabsd_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpabsd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpabsd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpabsd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpabsd_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpabsd_ymm_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vpabsd(ymm2.k1, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpabsd_ymm_k1z_ymmm256b32, Register.YMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpabsd(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpabsd_ymm_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpabsd(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpabsd_ymm_k1z_ymmm256b32, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpabsd_zmm_m() {
			TestAssembler(c => c.vpabsd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpabsd_zmm_k1z_zmmm512b32, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpabsq_xmm_xmm() {
			TestAssembler(c => c.vpabsq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpabsq_xmm_k1z_xmmm128b64, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpabsq_ymm_ymm() {
			TestAssembler(c => c.vpabsq(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpabsq_ymm_k1z_ymmm256b64, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpabsq_zmm_zmm() {
			TestAssembler(c => c.vpabsq(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpabsq_zmm_k1z_zmmm512b64, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpabsq_xmm_m() {
			TestAssembler(c => c.vpabsq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpabsq_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpabsq_ymm_m() {
			TestAssembler(c => c.vpabsq(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpabsq_ymm_k1z_ymmm256b64, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpabsq_zmm_m() {
			TestAssembler(c => c.vpabsq(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpabsq_zmm_k1z_zmmm512b64, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpabsw_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpabsw(xmm2, xmm3), Instruction.Create(Code.VEX_Vpabsw_xmm_xmmm128, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpabsw(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpabsw_xmm_k1z_xmmm128, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpabsw_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpabsw(ymm2, ymm3), Instruction.Create(Code.VEX_Vpabsw_ymm_ymmm256, Register.YMM2, Register.YMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpabsw(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpabsw_ymm_k1z_ymmm256, Register.YMM2, Register.YMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpabsw_zmm_zmm() {
			TestAssembler(c => c.vpabsw(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpabsw_zmm_k1z_zmmm512, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpabsw_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpabsw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpabsw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpabsw(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpabsw_xmm_k1z_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpabsw_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpabsw(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpabsw_ymm_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpabsw(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpabsw_ymm_k1z_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpabsw_zmm_m() {
			TestAssembler(c => c.vpabsw(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpabsw_zmm_k1z_zmmm512, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpackssdw_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpackssdw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpackssdw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpackssdw(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpackssdw_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpackssdw_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpackssdw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpackssdw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpackssdw(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpackssdw_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpackssdw_zmm_zmm_zmm() {
			TestAssembler(c => c.vpackssdw(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpackssdw_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpackssdw_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpackssdw(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpackssdw_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpackssdw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpackssdw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpackssdw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpackssdw_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpackssdw_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpackssdw(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpackssdw_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpackssdw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpackssdw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpackssdw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpackssdw_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpackssdw_zmm_zmm_m() {
			TestAssembler(c => c.vpackssdw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpackssdw_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpacksswb_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpacksswb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpacksswb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpacksswb(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpacksswb_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpacksswb_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpacksswb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpacksswb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpacksswb(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpacksswb_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpacksswb_zmm_zmm_zmm() {
			TestAssembler(c => c.vpacksswb(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpacksswb_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpacksswb_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpacksswb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpacksswb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpacksswb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpacksswb_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpacksswb_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpacksswb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpacksswb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpacksswb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpacksswb_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpacksswb_zmm_zmm_m() {
			TestAssembler(c => c.vpacksswb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpacksswb_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpackusdw_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpackusdw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpackusdw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpackusdw(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpackusdw_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpackusdw_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpackusdw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpackusdw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpackusdw(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpackusdw_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpackusdw_zmm_zmm_zmm() {
			TestAssembler(c => c.vpackusdw(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpackusdw_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpackusdw_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpackusdw(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpackusdw_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpackusdw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpackusdw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpackusdw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpackusdw_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpackusdw_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpackusdw(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpackusdw_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpackusdw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpackusdw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpackusdw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpackusdw_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpackusdw_zmm_zmm_m() {
			TestAssembler(c => c.vpackusdw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpackusdw_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpackuswb_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpackuswb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpackuswb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpackuswb(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpackuswb_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpackuswb_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpackuswb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpackuswb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpackuswb(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpackuswb_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpackuswb_zmm_zmm_zmm() {
			TestAssembler(c => c.vpackuswb(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpackuswb_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpackuswb_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpackuswb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpackuswb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpackuswb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpackuswb_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpackuswb_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpackuswb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpackuswb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpackuswb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpackuswb_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpackuswb_zmm_zmm_m() {
			TestAssembler(c => c.vpackuswb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpackuswb_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpaddb_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpaddb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddb(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpaddb_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddb_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpaddb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddb(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpaddb_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddb_zmm_zmm_zmm() {
			TestAssembler(c => c.vpaddb(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpaddb_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpaddb_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpaddb_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddb_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpaddb_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddb_zmm_zmm_m() {
			TestAssembler(c => c.vpaddb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpaddb_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpaddd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpaddd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpaddd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpaddd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpaddd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddd_zmm_zmm_zmm() {
			TestAssembler(c => c.vpaddd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpaddd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpaddd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpaddd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpaddd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpaddd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpaddd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpaddd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpaddd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddd_zmm_zmm_m() {
			TestAssembler(c => c.vpaddd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpaddd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpaddq_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpaddq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddq(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpaddq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddq_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpaddq_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddq(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpaddq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddq_zmm_zmm_zmm() {
			TestAssembler(c => c.vpaddq(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpaddq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpaddq_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpaddq(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpaddq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpaddq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddq_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpaddq(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpaddq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddq_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpaddq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddq_zmm_zmm_m() {
			TestAssembler(c => c.vpaddq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpaddq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpaddsb_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddsb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpaddsb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddsb(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpaddsb_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddsb_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddsb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpaddsb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddsb(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpaddsb_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddsb_zmm_zmm_zmm() {
			TestAssembler(c => c.vpaddsb(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpaddsb_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpaddsb_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddsb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddsb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddsb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpaddsb_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddsb_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddsb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddsb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddsb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpaddsb_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddsb_zmm_zmm_m() {
			TestAssembler(c => c.vpaddsb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpaddsb_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpaddsw_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddsw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpaddsw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddsw(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpaddsw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddsw_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddsw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpaddsw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddsw(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpaddsw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddsw_zmm_zmm_zmm() {
			TestAssembler(c => c.vpaddsw(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpaddsw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpaddsw_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddsw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddsw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddsw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpaddsw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddsw_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddsw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddsw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddsw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpaddsw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddsw_zmm_zmm_m() {
			TestAssembler(c => c.vpaddsw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpaddsw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpaddusb_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddusb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpaddusb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddusb(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpaddusb_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddusb_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddusb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpaddusb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddusb(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpaddusb_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddusb_zmm_zmm_zmm() {
			TestAssembler(c => c.vpaddusb(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpaddusb_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpaddusb_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddusb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddusb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddusb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpaddusb_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddusb_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddusb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddusb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddusb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpaddusb_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddusb_zmm_zmm_m() {
			TestAssembler(c => c.vpaddusb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpaddusb_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpaddusw_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddusw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpaddusw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddusw(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpaddusw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddusw_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddusw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpaddusw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddusw(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpaddusw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddusw_zmm_zmm_zmm() {
			TestAssembler(c => c.vpaddusw(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpaddusw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpaddusw_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddusw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddusw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddusw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpaddusw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddusw_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddusw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddusw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddusw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpaddusw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddusw_zmm_zmm_m() {
			TestAssembler(c => c.vpaddusw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpaddusw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpaddw_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpaddw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddw(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpaddw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddw_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpaddw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddw(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpaddw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddw_zmm_zmm_zmm() {
			TestAssembler(c => c.vpaddw(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpaddw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpaddw_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpaddw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddw_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpaddw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpaddw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpaddw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpaddw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpaddw_zmm_zmm_m() {
			TestAssembler(c => c.vpaddw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpaddw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpalignr_xmm_xmm_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpalignr(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vpalignr_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpalignr(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpalignr_xmm_k1z_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpalignr_ymm_ymm_ymm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpalignr(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vpalignr_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpalignr(ymm2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpalignr_ymm_k1z_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpalignr_zmm_zmm_zmm_i() {
			TestAssembler(c => c.vpalignr(zmm2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpalignr_zmm_k1z_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vpalignr_xmm_xmm_m_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpalignr(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpalignr_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpalignr(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpalignr_xmm_k1z_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpalignr_ymm_ymm_m_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpalignr(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpalignr_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpalignr(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpalignr_ymm_k1z_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpalignr_zmm_zmm_m_i() {
			TestAssembler(c => c.vpalignr(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpalignr_zmm_k1z_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpalignr_xmm_xmm_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpalignr(xmm2, xmm3, xmm4, (byte)0x7F), Instruction.Create(Code.VEX_Vpalignr_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpalignr(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpalignr_xmm_k1z_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpalignr_ymm_ymm_ymm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpalignr(ymm2, ymm3, ymm4, (byte)0x7F), Instruction.Create(Code.VEX_Vpalignr_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpalignr(ymm2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpalignr_ymm_k1z_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpalignr_zmm_zmm_zmm_u() {
			TestAssembler(c => c.vpalignr(zmm2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpalignr_zmm_k1z_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpalignr_xmm_xmm_m_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpalignr(xmm2, xmm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vpalignr_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpalignr(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpalignr_xmm_k1z_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpalignr_ymm_ymm_m_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpalignr(ymm2, ymm3, __ymmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vpalignr_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpalignr(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpalignr_ymm_k1z_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpalignr_zmm_zmm_m_u() {
			TestAssembler(c => c.vpalignr(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpalignr_zmm_k1z_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpand_xmm_xmm_xmm() {
			TestAssembler(c => c.vpand(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpand_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vpand_ymm_ymm_ymm() {
			TestAssembler(c => c.vpand(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpand_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vpand_xmm_xmm_m() {
			TestAssembler(c => c.vpand(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpand_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpand_ymm_ymm_m() {
			TestAssembler(c => c.vpand(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpand_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpandd_xmm_xmm_xmm() {
			TestAssembler(c => c.vpandd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpandd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpandd_ymm_ymm_ymm() {
			TestAssembler(c => c.vpandd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpandd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpandd_zmm_zmm_zmm() {
			TestAssembler(c => c.vpandd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpandd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpandd_xmm_xmm_m() {
			TestAssembler(c => c.vpandd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpandd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpandd_ymm_ymm_m() {
			TestAssembler(c => c.vpandd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpandd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpandd_zmm_zmm_m() {
			TestAssembler(c => c.vpandd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpandd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpandn_xmm_xmm_xmm() {
			TestAssembler(c => c.vpandn(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpandn_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vpandn_ymm_ymm_ymm() {
			TestAssembler(c => c.vpandn(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpandn_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vpandn_xmm_xmm_m() {
			TestAssembler(c => c.vpandn(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpandn_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpandn_ymm_ymm_m() {
			TestAssembler(c => c.vpandn(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpandn_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpandnd_xmm_xmm_xmm() {
			TestAssembler(c => c.vpandnd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpandnd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpandnd_ymm_ymm_ymm() {
			TestAssembler(c => c.vpandnd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpandnd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpandnd_zmm_zmm_zmm() {
			TestAssembler(c => c.vpandnd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpandnd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpandnd_xmm_xmm_m() {
			TestAssembler(c => c.vpandnd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpandnd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpandnd_ymm_ymm_m() {
			TestAssembler(c => c.vpandnd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpandnd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpandnd_zmm_zmm_m() {
			TestAssembler(c => c.vpandnd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpandnd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpandnq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpandnq(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpandnq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpandnq_ymm_ymm_ymm() {
			TestAssembler(c => c.vpandnq(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpandnq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpandnq_zmm_zmm_zmm() {
			TestAssembler(c => c.vpandnq(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpandnq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpandnq_xmm_xmm_m() {
			TestAssembler(c => c.vpandnq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpandnq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpandnq_ymm_ymm_m() {
			TestAssembler(c => c.vpandnq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpandnq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpandnq_zmm_zmm_m() {
			TestAssembler(c => c.vpandnq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpandnq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpandq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpandq(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpandq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpandq_ymm_ymm_ymm() {
			TestAssembler(c => c.vpandq(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpandq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpandq_zmm_zmm_zmm() {
			TestAssembler(c => c.vpandq(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpandq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpandq_xmm_xmm_m() {
			TestAssembler(c => c.vpandq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpandq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpandq_ymm_ymm_m() {
			TestAssembler(c => c.vpandq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpandq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpandq_zmm_zmm_m() {
			TestAssembler(c => c.vpandq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpandq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpavgb_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpavgb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpavgb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpavgb(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpavgb_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpavgb_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpavgb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpavgb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpavgb(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpavgb_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpavgb_zmm_zmm_zmm() {
			TestAssembler(c => c.vpavgb(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpavgb_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpavgb_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpavgb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpavgb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpavgb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpavgb_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpavgb_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpavgb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpavgb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpavgb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpavgb_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpavgb_zmm_zmm_m() {
			TestAssembler(c => c.vpavgb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpavgb_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpavgw_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpavgw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpavgw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpavgw(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpavgw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpavgw_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpavgw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpavgw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpavgw(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpavgw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpavgw_zmm_zmm_zmm() {
			TestAssembler(c => c.vpavgw(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpavgw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpavgw_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpavgw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpavgw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpavgw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpavgw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpavgw_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpavgw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpavgw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpavgw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpavgw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpavgw_zmm_zmm_m() {
			TestAssembler(c => c.vpavgw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpavgw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpblendd_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vpblendd(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vpblendd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5));
		}

		[Fact]
		public void vpblendd_ymm_ymm_ymm_i() {
			TestAssembler(c => c.vpblendd(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vpblendd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5));
		}

		[Fact]
		public void vpblendd_xmm_xmm_m_i() {
			TestAssembler(c => c.vpblendd(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpblendd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vpblendd_ymm_ymm_m_i() {
			TestAssembler(c => c.vpblendd(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpblendd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vpblendd_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vpblendd(xmm2, xmm3, xmm4, (byte)0x7F), Instruction.Create(Code.VEX_Vpblendd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU));
		}

		[Fact]
		public void vpblendd_ymm_ymm_ymm_u() {
			TestAssembler(c => c.vpblendd(ymm2, ymm3, ymm4, (byte)0x7F), Instruction.Create(Code.VEX_Vpblendd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU));
		}

		[Fact]
		public void vpblendd_xmm_xmm_m_u() {
			TestAssembler(c => c.vpblendd(xmm2, xmm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vpblendd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vpblendd_ymm_ymm_m_u() {
			TestAssembler(c => c.vpblendd(ymm2, ymm3, __ymmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vpblendd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vpblendmb_xmm_xmm_xmm() {
			TestAssembler(c => c.vpblendmb(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpblendmb_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpblendmb_ymm_ymm_ymm() {
			TestAssembler(c => c.vpblendmb(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpblendmb_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpblendmb_zmm_zmm_zmm() {
			TestAssembler(c => c.vpblendmb(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpblendmb_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpblendmb_xmm_xmm_m() {
			TestAssembler(c => c.vpblendmb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpblendmb_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpblendmb_ymm_ymm_m() {
			TestAssembler(c => c.vpblendmb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpblendmb_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpblendmb_zmm_zmm_m() {
			TestAssembler(c => c.vpblendmb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpblendmb_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpblendmd_xmm_xmm_xmm() {
			TestAssembler(c => c.vpblendmd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpblendmd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpblendmd_ymm_ymm_ymm() {
			TestAssembler(c => c.vpblendmd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpblendmd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpblendmd_zmm_zmm_zmm() {
			TestAssembler(c => c.vpblendmd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpblendmd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpblendmd_xmm_xmm_m() {
			TestAssembler(c => c.vpblendmd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpblendmd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpblendmd_ymm_ymm_m() {
			TestAssembler(c => c.vpblendmd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpblendmd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpblendmd_zmm_zmm_m() {
			TestAssembler(c => c.vpblendmd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpblendmd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpblendmq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpblendmq(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpblendmq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpblendmq_ymm_ymm_ymm() {
			TestAssembler(c => c.vpblendmq(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpblendmq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpblendmq_zmm_zmm_zmm() {
			TestAssembler(c => c.vpblendmq(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpblendmq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpblendmq_xmm_xmm_m() {
			TestAssembler(c => c.vpblendmq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpblendmq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpblendmq_ymm_ymm_m() {
			TestAssembler(c => c.vpblendmq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpblendmq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpblendmq_zmm_zmm_m() {
			TestAssembler(c => c.vpblendmq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpblendmq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpblendmw_xmm_xmm_xmm() {
			TestAssembler(c => c.vpblendmw(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpblendmw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpblendmw_ymm_ymm_ymm() {
			TestAssembler(c => c.vpblendmw(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpblendmw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpblendmw_zmm_zmm_zmm() {
			TestAssembler(c => c.vpblendmw(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpblendmw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpblendmw_xmm_xmm_m() {
			TestAssembler(c => c.vpblendmw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpblendmw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpblendmw_ymm_ymm_m() {
			TestAssembler(c => c.vpblendmw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpblendmw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpblendmw_zmm_zmm_m() {
			TestAssembler(c => c.vpblendmw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpblendmw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpblendvb_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vpblendvb(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.VEX_Vpblendvb_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vpblendvb_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vpblendvb(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.VEX_Vpblendvb_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vpblendvb_ymm_ymm_ymm_ymm() {
			TestAssembler(c => c.vpblendvb(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.VEX_Vpblendvb_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, Register.YMM4, Register.YMM5));
		}

		[Fact]
		public void vpblendvb_ymm_ymm_m_ymm() {
			TestAssembler(c => c.vpblendvb(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.VEX_Vpblendvb_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM5));
		}

		[Fact]
		public void vpblendw_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vpblendw(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vpblendw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5));
		}

		[Fact]
		public void vpblendw_ymm_ymm_ymm_i() {
			TestAssembler(c => c.vpblendw(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vpblendw_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5));
		}

		[Fact]
		public void vpblendw_xmm_xmm_m_i() {
			TestAssembler(c => c.vpblendw(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpblendw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vpblendw_ymm_ymm_m_i() {
			TestAssembler(c => c.vpblendw(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpblendw_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vpblendw_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vpblendw(xmm2, xmm3, xmm4, (byte)0x7F), Instruction.Create(Code.VEX_Vpblendw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU));
		}

		[Fact]
		public void vpblendw_ymm_ymm_ymm_u() {
			TestAssembler(c => c.vpblendw(ymm2, ymm3, ymm4, (byte)0x7F), Instruction.Create(Code.VEX_Vpblendw_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU));
		}

		[Fact]
		public void vpblendw_xmm_xmm_m_u() {
			TestAssembler(c => c.vpblendw(xmm2, xmm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vpblendw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vpblendw_ymm_ymm_m_u() {
			TestAssembler(c => c.vpblendw(ymm2, ymm3, __ymmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vpblendw_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vpbroadcastb_xmm_r32() {
			TestAssembler(c => c.vpbroadcastb(xmm2.k1, ebx), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastb_xmm_k1z_r32, Register.XMM2, Register.EBX), Register.K1));
		}

		[Fact]
		public void vpbroadcastb_ymm_r32() {
			TestAssembler(c => c.vpbroadcastb(ymm2.k1, ebx), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastb_ymm_k1z_r32, Register.YMM2, Register.EBX), Register.K1));
		}

		[Fact]
		public void vpbroadcastb_zmm_r32() {
			TestAssembler(c => c.vpbroadcastb(zmm2.k1, ebx), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastb_zmm_k1z_r32, Register.ZMM2, Register.EBX), Register.K1));
		}

		[Fact]
		public void vpbroadcastb_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpbroadcastb(xmm2, xmm3), Instruction.Create(Code.VEX_Vpbroadcastb_xmm_xmmm8, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastb(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastb_xmm_k1z_xmmm8, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpbroadcastb_ymm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpbroadcastb(ymm2, xmm3), Instruction.Create(Code.VEX_Vpbroadcastb_ymm_xmmm8, Register.YMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastb(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastb_ymm_k1z_xmmm8, Register.YMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpbroadcastb_zmm_xmm() {
			TestAssembler(c => c.vpbroadcastb(zmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastb_zmm_k1z_xmmm8, Register.ZMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpbroadcastb_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpbroadcastb(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpbroadcastb_xmm_xmmm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastb(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastb_xmm_k1z_xmmm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpbroadcastb_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpbroadcastb(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpbroadcastb_ymm_xmmm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastb(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastb_ymm_k1z_xmmm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpbroadcastb_zmm_m() {
			TestAssembler(c => c.vpbroadcastb(zmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastb_zmm_k1z_xmmm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpbroadcastd_xmm_r32() {
			TestAssembler(c => c.vpbroadcastd(xmm2.k1, ebx), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastd_xmm_k1z_r32, Register.XMM2, Register.EBX), Register.K1));
		}

		[Fact]
		public void vpbroadcastd_ymm_r32() {
			TestAssembler(c => c.vpbroadcastd(ymm2.k1, ebx), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastd_ymm_k1z_r32, Register.YMM2, Register.EBX), Register.K1));
		}

		[Fact]
		public void vpbroadcastd_zmm_r32() {
			TestAssembler(c => c.vpbroadcastd(zmm2.k1, ebx), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastd_zmm_k1z_r32, Register.ZMM2, Register.EBX), Register.K1));
		}

		[Fact]
		public void vpbroadcastd_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpbroadcastd(xmm2, xmm3), Instruction.Create(Code.VEX_Vpbroadcastd_xmm_xmmm32, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastd(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastd_xmm_k1z_xmmm32, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpbroadcastd_ymm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpbroadcastd(ymm2, xmm3), Instruction.Create(Code.VEX_Vpbroadcastd_ymm_xmmm32, Register.YMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastd(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastd_ymm_k1z_xmmm32, Register.YMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpbroadcastd_zmm_xmm() {
			TestAssembler(c => c.vpbroadcastd(zmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastd_zmm_k1z_xmmm32, Register.ZMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpbroadcastd_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpbroadcastd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpbroadcastd_xmm_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastd_xmm_k1z_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpbroadcastd_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpbroadcastd(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpbroadcastd_ymm_xmmm32, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastd(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastd_ymm_k1z_xmmm32, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpbroadcastd_zmm_m() {
			TestAssembler(c => c.vpbroadcastd(zmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastd_zmm_k1z_xmmm32, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpbroadcastmb2q_xmm_kr() {
			TestAssembler(c => c.vpbroadcastmb2q(xmm2, k3), Instruction.Create(Code.EVEX_Vpbroadcastmb2q_xmm_kr, Register.XMM2, Register.K3));
		}

		[Fact]
		public void vpbroadcastmb2q_ymm_kr() {
			TestAssembler(c => c.vpbroadcastmb2q(ymm2, k3), Instruction.Create(Code.EVEX_Vpbroadcastmb2q_ymm_kr, Register.YMM2, Register.K3));
		}

		[Fact]
		public void vpbroadcastmb2q_zmm_kr() {
			TestAssembler(c => c.vpbroadcastmb2q(zmm2, k3), Instruction.Create(Code.EVEX_Vpbroadcastmb2q_zmm_kr, Register.ZMM2, Register.K3));
		}

		[Fact]
		public void vpbroadcastmw2d_xmm_kr() {
			TestAssembler(c => c.vpbroadcastmw2d(xmm2, k3), Instruction.Create(Code.EVEX_Vpbroadcastmw2d_xmm_kr, Register.XMM2, Register.K3));
		}

		[Fact]
		public void vpbroadcastmw2d_ymm_kr() {
			TestAssembler(c => c.vpbroadcastmw2d(ymm2, k3), Instruction.Create(Code.EVEX_Vpbroadcastmw2d_ymm_kr, Register.YMM2, Register.K3));
		}

		[Fact]
		public void vpbroadcastmw2d_zmm_kr() {
			TestAssembler(c => c.vpbroadcastmw2d(zmm2, k3), Instruction.Create(Code.EVEX_Vpbroadcastmw2d_zmm_kr, Register.ZMM2, Register.K3));
		}

		[Fact]
		public void vpbroadcastq_xmm_r64() {
			TestAssembler(c => c.vpbroadcastq(xmm2.k1, rbx), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastq_xmm_k1z_r64, Register.XMM2, Register.RBX), Register.K1));
		}

		[Fact]
		public void vpbroadcastq_ymm_r64() {
			TestAssembler(c => c.vpbroadcastq(ymm2.k1, rbx), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastq_ymm_k1z_r64, Register.YMM2, Register.RBX), Register.K1));
		}

		[Fact]
		public void vpbroadcastq_zmm_r64() {
			TestAssembler(c => c.vpbroadcastq(zmm2.k1, rbx), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastq_zmm_k1z_r64, Register.ZMM2, Register.RBX), Register.K1));
		}

		[Fact]
		public void vpbroadcastq_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpbroadcastq(xmm2, xmm3), Instruction.Create(Code.VEX_Vpbroadcastq_xmm_xmmm64, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastq_xmm_k1z_xmmm64, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpbroadcastq_ymm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpbroadcastq(ymm2, xmm3), Instruction.Create(Code.VEX_Vpbroadcastq_ymm_xmmm64, Register.YMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastq(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastq_ymm_k1z_xmmm64, Register.YMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpbroadcastq_zmm_xmm() {
			TestAssembler(c => c.vpbroadcastq(zmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastq_zmm_k1z_xmmm64, Register.ZMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpbroadcastq_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpbroadcastq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpbroadcastq_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastq_xmm_k1z_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpbroadcastq_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpbroadcastq(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpbroadcastq_ymm_xmmm64, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastq(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastq_ymm_k1z_xmmm64, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpbroadcastq_zmm_m() {
			TestAssembler(c => c.vpbroadcastq(zmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastq_zmm_k1z_xmmm64, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpbroadcastw_xmm_r32() {
			TestAssembler(c => c.vpbroadcastw(xmm2.k1, ebx), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastw_xmm_k1z_r32, Register.XMM2, Register.EBX), Register.K1));
		}

		[Fact]
		public void vpbroadcastw_ymm_r32() {
			TestAssembler(c => c.vpbroadcastw(ymm2.k1, ebx), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastw_ymm_k1z_r32, Register.YMM2, Register.EBX), Register.K1));
		}

		[Fact]
		public void vpbroadcastw_zmm_r32() {
			TestAssembler(c => c.vpbroadcastw(zmm2.k1, ebx), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastw_zmm_k1z_r32, Register.ZMM2, Register.EBX), Register.K1));
		}

		[Fact]
		public void vpbroadcastw_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpbroadcastw(xmm2, xmm3), Instruction.Create(Code.VEX_Vpbroadcastw_xmm_xmmm16, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastw(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastw_xmm_k1z_xmmm16, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpbroadcastw_ymm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpbroadcastw(ymm2, xmm3), Instruction.Create(Code.VEX_Vpbroadcastw_ymm_xmmm16, Register.YMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastw(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastw_ymm_k1z_xmmm16, Register.YMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpbroadcastw_zmm_xmm() {
			TestAssembler(c => c.vpbroadcastw(zmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastw_zmm_k1z_xmmm16, Register.ZMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpbroadcastw_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpbroadcastw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpbroadcastw_xmm_xmmm16, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastw(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastw_xmm_k1z_xmmm16, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpbroadcastw_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpbroadcastw(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpbroadcastw_ymm_xmmm16, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpbroadcastw(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastw_ymm_k1z_xmmm16, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpbroadcastw_zmm_m() {
			TestAssembler(c => c.vpbroadcastw(zmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpbroadcastw_zmm_k1z_xmmm16, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpclmulhqhqdq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpclmulhqhqdq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 17));
		}

		[Fact]
		public void vpclmulhqhqdq_ymm_ymm_ymm() {
			TestAssembler(c => c.vpclmulhqhqdq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 17));
		}

		[Fact]
		public void vpclmulhqhqdq_zmm_zmm_zmm() {
			TestAssembler(c => c.vpclmulhqhqdq(zmm2, zmm3, zmm4), Instruction.Create(Code.EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, 17));
		}

		[Fact]
		public void vpclmulhqhqdq_xmm_xmm_m() {
			TestAssembler(c => c.vpclmulhqhqdq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 17));
		}

		[Fact]
		public void vpclmulhqhqdq_ymm_ymm_m() {
			TestAssembler(c => c.vpclmulhqhqdq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 17));
		}

		[Fact]
		public void vpclmulhqhqdq_zmm_zmm_m() {
			TestAssembler(c => c.vpclmulhqhqdq(zmm2, zmm3, __zmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 17));
		}

		[Fact]
		public void vpclmulhqlqdq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpclmulhqlqdq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 1));
		}

		[Fact]
		public void vpclmulhqlqdq_ymm_ymm_ymm() {
			TestAssembler(c => c.vpclmulhqlqdq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 1));
		}

		[Fact]
		public void vpclmulhqlqdq_zmm_zmm_zmm() {
			TestAssembler(c => c.vpclmulhqlqdq(zmm2, zmm3, zmm4), Instruction.Create(Code.EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, 1));
		}

		[Fact]
		public void vpclmulhqlqdq_xmm_xmm_m() {
			TestAssembler(c => c.vpclmulhqlqdq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1));
		}

		[Fact]
		public void vpclmulhqlqdq_ymm_ymm_m() {
			TestAssembler(c => c.vpclmulhqlqdq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1));
		}

		[Fact]
		public void vpclmulhqlqdq_zmm_zmm_m() {
			TestAssembler(c => c.vpclmulhqlqdq(zmm2, zmm3, __zmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1));
		}

		[Fact]
		public void vpclmullqhqdq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpclmullqhqdq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 16));
		}

		[Fact]
		public void vpclmullqhqdq_ymm_ymm_ymm() {
			TestAssembler(c => c.vpclmullqhqdq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 16));
		}

		[Fact]
		public void vpclmullqhqdq_zmm_zmm_zmm() {
			TestAssembler(c => c.vpclmullqhqdq(zmm2, zmm3, zmm4), Instruction.Create(Code.EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, 16));
		}

		[Fact]
		public void vpclmullqhqdq_xmm_xmm_m() {
			TestAssembler(c => c.vpclmullqhqdq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 16));
		}

		[Fact]
		public void vpclmullqhqdq_ymm_ymm_m() {
			TestAssembler(c => c.vpclmullqhqdq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 16));
		}

		[Fact]
		public void vpclmullqhqdq_zmm_zmm_m() {
			TestAssembler(c => c.vpclmullqhqdq(zmm2, zmm3, __zmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 16));
		}

		[Fact]
		public void vpclmullqlqdq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpclmullqlqdq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0));
		}

		[Fact]
		public void vpclmullqlqdq_ymm_ymm_ymm() {
			TestAssembler(c => c.vpclmullqlqdq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0));
		}

		[Fact]
		public void vpclmullqlqdq_zmm_zmm_zmm() {
			TestAssembler(c => c.vpclmullqlqdq(zmm2, zmm3, zmm4), Instruction.Create(Code.EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, 0));
		}

		[Fact]
		public void vpclmullqlqdq_xmm_xmm_m() {
			TestAssembler(c => c.vpclmullqlqdq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0));
		}

		[Fact]
		public void vpclmullqlqdq_ymm_ymm_m() {
			TestAssembler(c => c.vpclmullqlqdq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0));
		}

		[Fact]
		public void vpclmullqlqdq_zmm_zmm_m() {
			TestAssembler(c => c.vpclmullqlqdq(zmm2, zmm3, __zmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0));
		}

		[Fact]
		public void vpclmulqdq_xmm_xmm_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpclmulqdq(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpclmulqdq(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.EVEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpclmulqdq_ymm_ymm_ymm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpclmulqdq(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpclmulqdq(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.EVEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpclmulqdq_zmm_zmm_zmm_i() {
			TestAssembler(c => c.vpclmulqdq(zmm2, zmm3, zmm4, -5), Instruction.Create(Code.EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, -5));
		}

		[Fact]
		public void vpclmulqdq_xmm_xmm_m_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpclmulqdq(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpclmulqdq(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.EVEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpclmulqdq_ymm_ymm_m_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpclmulqdq(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpclmulqdq(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.EVEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpclmulqdq_zmm_zmm_m_i() {
			TestAssembler(c => c.vpclmulqdq(zmm2, zmm3, __zmmword_ptr[rcx], -5), Instruction.Create(Code.EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vpclmulqdq_xmm_xmm_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpclmulqdq(xmm2, xmm3, xmm4, (byte)0x7F), Instruction.Create(Code.VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpclmulqdq(xmm2, xmm3, xmm4, (byte)0x7F), Instruction.Create(Code.EVEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpclmulqdq_ymm_ymm_ymm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpclmulqdq(ymm2, ymm3, ymm4, (byte)0x7F), Instruction.Create(Code.VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpclmulqdq(ymm2, ymm3, ymm4, (byte)0x7F), Instruction.Create(Code.EVEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpclmulqdq_zmm_zmm_zmm_u() {
			TestAssembler(c => c.vpclmulqdq(zmm2, zmm3, zmm4, (byte)0x7F), Instruction.Create(Code.EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, 0x7FU));
		}

		[Fact]
		public void vpclmulqdq_xmm_xmm_m_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpclmulqdq(xmm2, xmm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpclmulqdq(xmm2, xmm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.EVEX_Vpclmulqdq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpclmulqdq_ymm_ymm_m_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpclmulqdq(ymm2, ymm3, __ymmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpclmulqdq(ymm2, ymm3, __ymmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.EVEX_Vpclmulqdq_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpclmulqdq_zmm_zmm_m_u() {
			TestAssembler(c => c.vpclmulqdq(zmm2, zmm3, __zmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.EVEX_Vpclmulqdq_zmm_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vpcmov_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcmov(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.XOP_Vpcmov_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vpcmov_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vpcmov(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.XOP_Vpcmov_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vpcmov_ymm_ymm_ymm_ymm() {
			TestAssembler(c => c.vpcmov(ymm2, ymm3, ymm4, ymm5), Instruction.Create(Code.XOP_Vpcmov_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, Register.YMM4, Register.YMM5));
		}

		[Fact]
		public void vpcmov_ymm_ymm_m_ymm() {
			TestAssembler(c => c.vpcmov(ymm2, ymm3, __ymmword_ptr[rcx], ymm5), Instruction.Create(Code.XOP_Vpcmov_ymm_ymm_ymmm256_ymm, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM5));
		}

		[Fact]
		public void vpcmov_xmm_xmm_xmm_m() {
			TestAssembler(c => c.vpcmov(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcmov_xmm_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpcmov_ymm_ymm_ymm_m() {
			TestAssembler(c => c.vpcmov(ymm2, ymm3, ymm4, __ymmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcmov_ymm_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpcmpb_kr_xmm_xmm_i() {
			TestAssembler(c => c.vpcmpb(k2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vpcmpb_kr_ymm_ymm_i() {
			TestAssembler(c => c.vpcmpb(k2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vpcmpb_kr_zmm_zmm_i() {
			TestAssembler(c => c.vpcmpb(k2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vpcmpb_kr_xmm_m_i() {
			TestAssembler(c => c.vpcmpb(k2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpcmpb_kr_ymm_m_i() {
			TestAssembler(c => c.vpcmpb(k2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpcmpb_kr_zmm_m_i() {
			TestAssembler(c => c.vpcmpb(k2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpcmpb_kr_xmm_xmm_u() {
			TestAssembler(c => c.vpcmpb(k2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpb_kr_ymm_ymm_u() {
			TestAssembler(c => c.vpcmpb(k2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpb_kr_zmm_zmm_u() {
			TestAssembler(c => c.vpcmpb(k2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpb_kr_xmm_m_u() {
			TestAssembler(c => c.vpcmpb(k2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpb_kr_ymm_m_u() {
			TestAssembler(c => c.vpcmpb(k2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpb_kr_zmm_m_u() {
			TestAssembler(c => c.vpcmpb(k2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpd_kr_xmm_xmm_i() {
			TestAssembler(c => c.vpcmpd(k2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vpcmpd_kr_ymm_ymm_i() {
			TestAssembler(c => c.vpcmpd(k2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vpcmpd_kr_zmm_zmm_i() {
			TestAssembler(c => c.vpcmpd(k2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vpcmpd_kr_xmm_m_i() {
			TestAssembler(c => c.vpcmpd(k2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpcmpd_kr_ymm_m_i() {
			TestAssembler(c => c.vpcmpd(k2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpcmpd_kr_zmm_m_i() {
			TestAssembler(c => c.vpcmpd(k2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpcmpd_kr_xmm_xmm_u() {
			TestAssembler(c => c.vpcmpd(k2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpd_kr_ymm_ymm_u() {
			TestAssembler(c => c.vpcmpd(k2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpd_kr_zmm_zmm_u() {
			TestAssembler(c => c.vpcmpd(k2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpd_kr_xmm_m_u() {
			TestAssembler(c => c.vpcmpd(k2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpd_kr_ymm_m_u() {
			TestAssembler(c => c.vpcmpd(k2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpd_kr_zmm_m_u() {
			TestAssembler(c => c.vpcmpd(k2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpeqb_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpeqb(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpeqb_kr_k1_xmm_xmmm128, Register.K2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpcmpeqb_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcmpeqb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpcmpeqb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vpcmpeqb_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpeqb(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpeqb_kr_k1_ymm_ymmm256, Register.K2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpcmpeqb_ymm_ymm_ymm() {
			TestAssembler(c => c.vpcmpeqb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpcmpeqb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vpcmpeqb_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpeqb(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpeqb_kr_k1_zmm_zmmm512, Register.K2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpcmpeqb_kr_xmm_m() {
			TestAssembler(c => c.vpcmpeqb(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpeqb_kr_k1_xmm_xmmm128, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpcmpeqb_xmm_xmm_m() {
			TestAssembler(c => c.vpcmpeqb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpeqb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpcmpeqb_kr_ymm_m() {
			TestAssembler(c => c.vpcmpeqb(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpeqb_kr_k1_ymm_ymmm256, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpcmpeqb_ymm_ymm_m() {
			TestAssembler(c => c.vpcmpeqb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpeqb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpcmpeqb_kr_zmm_m() {
			TestAssembler(c => c.vpcmpeqb(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpeqb_kr_k1_zmm_zmmm512, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpcmpeqd_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpeqd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpeqd_kr_k1_xmm_xmmm128b32, Register.K2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpcmpeqd_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcmpeqd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpcmpeqd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vpcmpeqd_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpeqd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpeqd_kr_k1_ymm_ymmm256b32, Register.K2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpcmpeqd_ymm_ymm_ymm() {
			TestAssembler(c => c.vpcmpeqd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpcmpeqd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vpcmpeqd_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpeqd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpeqd_kr_k1_zmm_zmmm512b32, Register.K2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpcmpeqd_kr_xmm_m() {
			TestAssembler(c => c.vpcmpeqd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpeqd_kr_k1_xmm_xmmm128b32, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpcmpeqd_xmm_xmm_m() {
			TestAssembler(c => c.vpcmpeqd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpeqd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpcmpeqd_kr_ymm_m() {
			TestAssembler(c => c.vpcmpeqd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpeqd_kr_k1_ymm_ymmm256b32, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpcmpeqd_ymm_ymm_m() {
			TestAssembler(c => c.vpcmpeqd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpeqd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpcmpeqd_kr_zmm_m() {
			TestAssembler(c => c.vpcmpeqd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpeqd_kr_k1_zmm_zmmm512b32, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpcmpeqq_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpeqq(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpeqq_kr_k1_xmm_xmmm128b64, Register.K2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpcmpeqq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcmpeqq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpcmpeqq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vpcmpeqq_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpeqq(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpeqq_kr_k1_ymm_ymmm256b64, Register.K2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpcmpeqq_ymm_ymm_ymm() {
			TestAssembler(c => c.vpcmpeqq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpcmpeqq_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vpcmpeqq_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpeqq(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpeqq_kr_k1_zmm_zmmm512b64, Register.K2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpcmpeqq_kr_xmm_m() {
			TestAssembler(c => c.vpcmpeqq(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpeqq_kr_k1_xmm_xmmm128b64, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpcmpeqq_xmm_xmm_m() {
			TestAssembler(c => c.vpcmpeqq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpeqq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpcmpeqq_kr_ymm_m() {
			TestAssembler(c => c.vpcmpeqq(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpeqq_kr_k1_ymm_ymmm256b64, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpcmpeqq_ymm_ymm_m() {
			TestAssembler(c => c.vpcmpeqq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpeqq_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpcmpeqq_kr_zmm_m() {
			TestAssembler(c => c.vpcmpeqq(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpeqq_kr_k1_zmm_zmmm512b64, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpcmpequb_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpequb(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 0), Register.K1));
		}

		[Fact]
		public void vpcmpequb_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpequb(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 0), Register.K1));
		}

		[Fact]
		public void vpcmpequb_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpequb(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 0), Register.K1));
		}

		[Fact]
		public void vpcmpequb_kr_xmm_m() {
			TestAssembler(c => c.vpcmpequb(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0), Register.K1));
		}

		[Fact]
		public void vpcmpequb_kr_ymm_m() {
			TestAssembler(c => c.vpcmpequb(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0), Register.K1));
		}

		[Fact]
		public void vpcmpequb_kr_zmm_m() {
			TestAssembler(c => c.vpcmpequb(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0), Register.K1));
		}

		[Fact]
		public void vpcmpequd_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpequd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 0), Register.K1));
		}

		[Fact]
		public void vpcmpequd_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpequd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 0), Register.K1));
		}

		[Fact]
		public void vpcmpequd_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpequd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 0), Register.K1));
		}

		[Fact]
		public void vpcmpequd_kr_xmm_m() {
			TestAssembler(c => c.vpcmpequd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0), Register.K1));
		}

		[Fact]
		public void vpcmpequd_kr_ymm_m() {
			TestAssembler(c => c.vpcmpequd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0), Register.K1));
		}

		[Fact]
		public void vpcmpequd_kr_zmm_m() {
			TestAssembler(c => c.vpcmpequd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0), Register.K1));
		}

		[Fact]
		public void vpcmpequq_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpequq(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 0), Register.K1));
		}

		[Fact]
		public void vpcmpequq_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpequq(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 0), Register.K1));
		}

		[Fact]
		public void vpcmpequq_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpequq(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 0), Register.K1));
		}

		[Fact]
		public void vpcmpequq_kr_xmm_m() {
			TestAssembler(c => c.vpcmpequq(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0), Register.K1));
		}

		[Fact]
		public void vpcmpequq_kr_ymm_m() {
			TestAssembler(c => c.vpcmpequq(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0), Register.K1));
		}

		[Fact]
		public void vpcmpequq_kr_zmm_m() {
			TestAssembler(c => c.vpcmpequq(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0), Register.K1));
		}

		[Fact]
		public void vpcmpequw_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpequw(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 0), Register.K1));
		}

		[Fact]
		public void vpcmpequw_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpequw(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 0), Register.K1));
		}

		[Fact]
		public void vpcmpequw_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpequw(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 0), Register.K1));
		}

		[Fact]
		public void vpcmpequw_kr_xmm_m() {
			TestAssembler(c => c.vpcmpequw(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0), Register.K1));
		}

		[Fact]
		public void vpcmpequw_kr_ymm_m() {
			TestAssembler(c => c.vpcmpequw(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0), Register.K1));
		}

		[Fact]
		public void vpcmpequw_kr_zmm_m() {
			TestAssembler(c => c.vpcmpequw(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0), Register.K1));
		}

		[Fact]
		public void vpcmpeqw_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpeqw(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpeqw_kr_k1_xmm_xmmm128, Register.K2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpcmpeqw_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcmpeqw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpcmpeqw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vpcmpeqw_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpeqw(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpeqw_kr_k1_ymm_ymmm256, Register.K2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpcmpeqw_ymm_ymm_ymm() {
			TestAssembler(c => c.vpcmpeqw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpcmpeqw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vpcmpeqw_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpeqw(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpeqw_kr_k1_zmm_zmmm512, Register.K2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpcmpeqw_kr_xmm_m() {
			TestAssembler(c => c.vpcmpeqw(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpeqw_kr_k1_xmm_xmmm128, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpcmpeqw_xmm_xmm_m() {
			TestAssembler(c => c.vpcmpeqw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpeqw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpcmpeqw_kr_ymm_m() {
			TestAssembler(c => c.vpcmpeqw(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpeqw_kr_k1_ymm_ymmm256, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpcmpeqw_ymm_ymm_m() {
			TestAssembler(c => c.vpcmpeqw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpeqw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpcmpeqw_kr_zmm_m() {
			TestAssembler(c => c.vpcmpeqw(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpeqw_kr_k1_zmm_zmmm512, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpcmpestri_xmm_xmm_i() {
			TestAssembler(c => c.vpcmpestri(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpcmpestri_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void vpcmpestri_xmm_m_i() {
			TestAssembler(c => c.vpcmpestri(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpcmpestri_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vpcmpestri_xmm_xmm_u() {
			TestAssembler(c => c.vpcmpestri(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpcmpestri_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void vpcmpestri_xmm_m_u() {
			TestAssembler(c => c.vpcmpestri(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vpcmpestri_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vpcmpestri64_xmm_xmm_i() {
			TestAssembler(c => c.vpcmpestri64(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpcmpestri64_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void vpcmpestri64_xmm_m_i() {
			TestAssembler(c => c.vpcmpestri64(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpcmpestri64_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vpcmpestri64_xmm_xmm_u() {
			TestAssembler(c => c.vpcmpestri64(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpcmpestri64_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void vpcmpestri64_xmm_m_u() {
			TestAssembler(c => c.vpcmpestri64(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vpcmpestri64_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vpcmpestrm_xmm_xmm_i() {
			TestAssembler(c => c.vpcmpestrm(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpcmpestrm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void vpcmpestrm_xmm_m_i() {
			TestAssembler(c => c.vpcmpestrm(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpcmpestrm_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vpcmpestrm_xmm_xmm_u() {
			TestAssembler(c => c.vpcmpestrm(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpcmpestrm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void vpcmpestrm_xmm_m_u() {
			TestAssembler(c => c.vpcmpestrm(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vpcmpestrm_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vpcmpestrm64_xmm_xmm_i() {
			TestAssembler(c => c.vpcmpestrm64(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpcmpestrm64_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void vpcmpestrm64_xmm_m_i() {
			TestAssembler(c => c.vpcmpestrm64(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpcmpestrm64_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vpcmpestrm64_xmm_xmm_u() {
			TestAssembler(c => c.vpcmpestrm64(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpcmpestrm64_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void vpcmpestrm64_xmm_m_u() {
			TestAssembler(c => c.vpcmpestrm64(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vpcmpestrm64_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vpcmpfalseb_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpfalseb(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseb_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpfalseb(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseb_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpfalseb(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseb_kr_xmm_m() {
			TestAssembler(c => c.vpcmpfalseb(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseb_kr_ymm_m() {
			TestAssembler(c => c.vpcmpfalseb(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseb_kr_zmm_m() {
			TestAssembler(c => c.vpcmpfalseb(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalsed_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpfalsed(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalsed_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpfalsed(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalsed_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpfalsed(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalsed_kr_xmm_m() {
			TestAssembler(c => c.vpcmpfalsed(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalsed_kr_ymm_m() {
			TestAssembler(c => c.vpcmpfalsed(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalsed_kr_zmm_m() {
			TestAssembler(c => c.vpcmpfalsed(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseq_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpfalseq(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseq_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpfalseq(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseq_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpfalseq(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseq_kr_xmm_m() {
			TestAssembler(c => c.vpcmpfalseq(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseq_kr_ymm_m() {
			TestAssembler(c => c.vpcmpfalseq(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseq_kr_zmm_m() {
			TestAssembler(c => c.vpcmpfalseq(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseub_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpfalseub(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseub_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpfalseub(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseub_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpfalseub(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseub_kr_xmm_m() {
			TestAssembler(c => c.vpcmpfalseub(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseub_kr_ymm_m() {
			TestAssembler(c => c.vpcmpfalseub(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseub_kr_zmm_m() {
			TestAssembler(c => c.vpcmpfalseub(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseud_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpfalseud(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseud_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpfalseud(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseud_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpfalseud(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseud_kr_xmm_m() {
			TestAssembler(c => c.vpcmpfalseud(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseud_kr_ymm_m() {
			TestAssembler(c => c.vpcmpfalseud(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseud_kr_zmm_m() {
			TestAssembler(c => c.vpcmpfalseud(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseuq_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpfalseuq(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseuq_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpfalseuq(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseuq_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpfalseuq(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseuq_kr_xmm_m() {
			TestAssembler(c => c.vpcmpfalseuq(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseuq_kr_ymm_m() {
			TestAssembler(c => c.vpcmpfalseuq(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseuq_kr_zmm_m() {
			TestAssembler(c => c.vpcmpfalseuq(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseuw_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpfalseuw(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseuw_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpfalseuw(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseuw_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpfalseuw(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseuw_kr_xmm_m() {
			TestAssembler(c => c.vpcmpfalseuw(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseuw_kr_ymm_m() {
			TestAssembler(c => c.vpcmpfalseuw(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalseuw_kr_zmm_m() {
			TestAssembler(c => c.vpcmpfalseuw(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalsew_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpfalsew(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalsew_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpfalsew(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalsew_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpfalsew(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalsew_kr_xmm_m() {
			TestAssembler(c => c.vpcmpfalsew(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalsew_kr_ymm_m() {
			TestAssembler(c => c.vpcmpfalsew(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vpcmpfalsew_kr_zmm_m() {
			TestAssembler(c => c.vpcmpfalsew(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3), Register.K1));
		}

		[Fact]
		public void vpcmpgtb_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpgtb(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpgtb_kr_k1_xmm_xmmm128, Register.K2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpcmpgtb_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcmpgtb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpcmpgtb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vpcmpgtb_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpgtb(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpgtb_kr_k1_ymm_ymmm256, Register.K2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpcmpgtb_ymm_ymm_ymm() {
			TestAssembler(c => c.vpcmpgtb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpcmpgtb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vpcmpgtb_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpgtb(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpgtb_kr_k1_zmm_zmmm512, Register.K2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpcmpgtb_kr_xmm_m() {
			TestAssembler(c => c.vpcmpgtb(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpgtb_kr_k1_xmm_xmmm128, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpcmpgtb_xmm_xmm_m() {
			TestAssembler(c => c.vpcmpgtb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpgtb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpcmpgtb_kr_ymm_m() {
			TestAssembler(c => c.vpcmpgtb(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpgtb_kr_k1_ymm_ymmm256, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpcmpgtb_ymm_ymm_m() {
			TestAssembler(c => c.vpcmpgtb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpgtb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpcmpgtb_kr_zmm_m() {
			TestAssembler(c => c.vpcmpgtb(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpgtb_kr_k1_zmm_zmmm512, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpcmpgtd_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpgtd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpgtd_kr_k1_xmm_xmmm128b32, Register.K2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpcmpgtd_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcmpgtd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpcmpgtd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vpcmpgtd_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpgtd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpgtd_kr_k1_ymm_ymmm256b32, Register.K2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpcmpgtd_ymm_ymm_ymm() {
			TestAssembler(c => c.vpcmpgtd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpcmpgtd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vpcmpgtd_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpgtd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpgtd_kr_k1_zmm_zmmm512b32, Register.K2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpcmpgtd_kr_xmm_m() {
			TestAssembler(c => c.vpcmpgtd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpgtd_kr_k1_xmm_xmmm128b32, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpcmpgtd_xmm_xmm_m() {
			TestAssembler(c => c.vpcmpgtd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpgtd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpcmpgtd_kr_ymm_m() {
			TestAssembler(c => c.vpcmpgtd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpgtd_kr_k1_ymm_ymmm256b32, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpcmpgtd_ymm_ymm_m() {
			TestAssembler(c => c.vpcmpgtd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpgtd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpcmpgtd_kr_zmm_m() {
			TestAssembler(c => c.vpcmpgtd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpgtd_kr_k1_zmm_zmmm512b32, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpcmpgtq_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpgtq(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpgtq_kr_k1_xmm_xmmm128b64, Register.K2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpcmpgtq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcmpgtq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpcmpgtq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vpcmpgtq_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpgtq(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpgtq_kr_k1_ymm_ymmm256b64, Register.K2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpcmpgtq_ymm_ymm_ymm() {
			TestAssembler(c => c.vpcmpgtq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpcmpgtq_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vpcmpgtq_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpgtq(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpgtq_kr_k1_zmm_zmmm512b64, Register.K2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpcmpgtq_kr_xmm_m() {
			TestAssembler(c => c.vpcmpgtq(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpgtq_kr_k1_xmm_xmmm128b64, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpcmpgtq_xmm_xmm_m() {
			TestAssembler(c => c.vpcmpgtq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpgtq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpcmpgtq_kr_ymm_m() {
			TestAssembler(c => c.vpcmpgtq(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpgtq_kr_k1_ymm_ymmm256b64, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpcmpgtq_ymm_ymm_m() {
			TestAssembler(c => c.vpcmpgtq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpgtq_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpcmpgtq_kr_zmm_m() {
			TestAssembler(c => c.vpcmpgtq(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpgtq_kr_k1_zmm_zmmm512b64, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpcmpgtw_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpgtw(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpgtw_kr_k1_xmm_xmmm128, Register.K2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpcmpgtw_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcmpgtw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpcmpgtw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vpcmpgtw_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpgtw(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpgtw_kr_k1_ymm_ymmm256, Register.K2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpcmpgtw_ymm_ymm_ymm() {
			TestAssembler(c => c.vpcmpgtw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpcmpgtw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vpcmpgtw_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpgtw(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpgtw_kr_k1_zmm_zmmm512, Register.K2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpcmpgtw_kr_xmm_m() {
			TestAssembler(c => c.vpcmpgtw(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpgtw_kr_k1_xmm_xmmm128, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpcmpgtw_xmm_xmm_m() {
			TestAssembler(c => c.vpcmpgtw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpgtw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpcmpgtw_kr_ymm_m() {
			TestAssembler(c => c.vpcmpgtw(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpgtw_kr_k1_ymm_ymmm256, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpcmpgtw_ymm_ymm_m() {
			TestAssembler(c => c.vpcmpgtw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpcmpgtw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpcmpgtw_kr_zmm_m() {
			TestAssembler(c => c.vpcmpgtw(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpgtw_kr_k1_zmm_zmmm512, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpcmpistri_xmm_xmm_i() {
			TestAssembler(c => c.vpcmpistri(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpcmpistri_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void vpcmpistri_xmm_m_i() {
			TestAssembler(c => c.vpcmpistri(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpcmpistri_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vpcmpistri_xmm_xmm_u() {
			TestAssembler(c => c.vpcmpistri(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpcmpistri_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void vpcmpistri_xmm_m_u() {
			TestAssembler(c => c.vpcmpistri(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vpcmpistri_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vpcmpistrm_xmm_xmm_i() {
			TestAssembler(c => c.vpcmpistrm(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpcmpistrm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void vpcmpistrm_xmm_m_i() {
			TestAssembler(c => c.vpcmpistrm(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpcmpistrm_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vpcmpistrm_xmm_xmm_u() {
			TestAssembler(c => c.vpcmpistrm(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpcmpistrm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void vpcmpistrm_xmm_m_u() {
			TestAssembler(c => c.vpcmpistrm(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vpcmpistrm_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vpcmpleb_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpleb(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 2), Register.K1));
		}

		[Fact]
		public void vpcmpleb_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpleb(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 2), Register.K1));
		}

		[Fact]
		public void vpcmpleb_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpleb(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 2), Register.K1));
		}

		[Fact]
		public void vpcmpleb_kr_xmm_m() {
			TestAssembler(c => c.vpcmpleb(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vpcmpleb_kr_ymm_m() {
			TestAssembler(c => c.vpcmpleb(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vpcmpleb_kr_zmm_m() {
			TestAssembler(c => c.vpcmpleb(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vpcmpled_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpled(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 2), Register.K1));
		}

		[Fact]
		public void vpcmpled_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpled(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 2), Register.K1));
		}

		[Fact]
		public void vpcmpled_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpled(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 2), Register.K1));
		}

		[Fact]
		public void vpcmpled_kr_xmm_m() {
			TestAssembler(c => c.vpcmpled(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vpcmpled_kr_ymm_m() {
			TestAssembler(c => c.vpcmpled(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vpcmpled_kr_zmm_m() {
			TestAssembler(c => c.vpcmpled(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vpcmpleq_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpleq(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 2), Register.K1));
		}

		[Fact]
		public void vpcmpleq_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpleq(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 2), Register.K1));
		}

		[Fact]
		public void vpcmpleq_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpleq(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 2), Register.K1));
		}

		[Fact]
		public void vpcmpleq_kr_xmm_m() {
			TestAssembler(c => c.vpcmpleq(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vpcmpleq_kr_ymm_m() {
			TestAssembler(c => c.vpcmpleq(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vpcmpleq_kr_zmm_m() {
			TestAssembler(c => c.vpcmpleq(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vpcmpleub_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpleub(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 2), Register.K1));
		}

		[Fact]
		public void vpcmpleub_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpleub(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 2), Register.K1));
		}

		[Fact]
		public void vpcmpleub_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpleub(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 2), Register.K1));
		}

		[Fact]
		public void vpcmpleub_kr_xmm_m() {
			TestAssembler(c => c.vpcmpleub(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vpcmpleub_kr_ymm_m() {
			TestAssembler(c => c.vpcmpleub(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vpcmpleub_kr_zmm_m() {
			TestAssembler(c => c.vpcmpleub(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vpcmpleud_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpleud(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 2), Register.K1));
		}

		[Fact]
		public void vpcmpleud_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpleud(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 2), Register.K1));
		}

		[Fact]
		public void vpcmpleud_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpleud(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 2), Register.K1));
		}

		[Fact]
		public void vpcmpleud_kr_xmm_m() {
			TestAssembler(c => c.vpcmpleud(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vpcmpleud_kr_ymm_m() {
			TestAssembler(c => c.vpcmpleud(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vpcmpleud_kr_zmm_m() {
			TestAssembler(c => c.vpcmpleud(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vpcmpleuq_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpleuq(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 2), Register.K1));
		}

		[Fact]
		public void vpcmpleuq_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpleuq(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 2), Register.K1));
		}

		[Fact]
		public void vpcmpleuq_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpleuq(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 2), Register.K1));
		}

		[Fact]
		public void vpcmpleuq_kr_xmm_m() {
			TestAssembler(c => c.vpcmpleuq(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vpcmpleuq_kr_ymm_m() {
			TestAssembler(c => c.vpcmpleuq(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vpcmpleuq_kr_zmm_m() {
			TestAssembler(c => c.vpcmpleuq(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vpcmpleuw_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpleuw(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 2), Register.K1));
		}

		[Fact]
		public void vpcmpleuw_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpleuw(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 2), Register.K1));
		}

		[Fact]
		public void vpcmpleuw_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpleuw(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 2), Register.K1));
		}

		[Fact]
		public void vpcmpleuw_kr_xmm_m() {
			TestAssembler(c => c.vpcmpleuw(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vpcmpleuw_kr_ymm_m() {
			TestAssembler(c => c.vpcmpleuw(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vpcmpleuw_kr_zmm_m() {
			TestAssembler(c => c.vpcmpleuw(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vpcmplew_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmplew(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 2), Register.K1));
		}

		[Fact]
		public void vpcmplew_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmplew(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 2), Register.K1));
		}

		[Fact]
		public void vpcmplew_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmplew(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 2), Register.K1));
		}

		[Fact]
		public void vpcmplew_kr_xmm_m() {
			TestAssembler(c => c.vpcmplew(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vpcmplew_kr_ymm_m() {
			TestAssembler(c => c.vpcmplew(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vpcmplew_kr_zmm_m() {
			TestAssembler(c => c.vpcmplew(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2), Register.K1));
		}

		[Fact]
		public void vpcmpltb_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpltb(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 1), Register.K1));
		}

		[Fact]
		public void vpcmpltb_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpltb(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 1), Register.K1));
		}

		[Fact]
		public void vpcmpltb_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpltb(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 1), Register.K1));
		}

		[Fact]
		public void vpcmpltb_kr_xmm_m() {
			TestAssembler(c => c.vpcmpltb(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vpcmpltb_kr_ymm_m() {
			TestAssembler(c => c.vpcmpltb(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vpcmpltb_kr_zmm_m() {
			TestAssembler(c => c.vpcmpltb(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vpcmpltd_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpltd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 1), Register.K1));
		}

		[Fact]
		public void vpcmpltd_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpltd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 1), Register.K1));
		}

		[Fact]
		public void vpcmpltd_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpltd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 1), Register.K1));
		}

		[Fact]
		public void vpcmpltd_kr_xmm_m() {
			TestAssembler(c => c.vpcmpltd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vpcmpltd_kr_ymm_m() {
			TestAssembler(c => c.vpcmpltd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vpcmpltd_kr_zmm_m() {
			TestAssembler(c => c.vpcmpltd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vpcmpltq_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpltq(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 1), Register.K1));
		}

		[Fact]
		public void vpcmpltq_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpltq(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 1), Register.K1));
		}

		[Fact]
		public void vpcmpltq_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpltq(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 1), Register.K1));
		}

		[Fact]
		public void vpcmpltq_kr_xmm_m() {
			TestAssembler(c => c.vpcmpltq(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vpcmpltq_kr_ymm_m() {
			TestAssembler(c => c.vpcmpltq(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vpcmpltq_kr_zmm_m() {
			TestAssembler(c => c.vpcmpltq(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vpcmpltub_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpltub(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 1), Register.K1));
		}

		[Fact]
		public void vpcmpltub_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpltub(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 1), Register.K1));
		}

		[Fact]
		public void vpcmpltub_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpltub(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 1), Register.K1));
		}

		[Fact]
		public void vpcmpltub_kr_xmm_m() {
			TestAssembler(c => c.vpcmpltub(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vpcmpltub_kr_ymm_m() {
			TestAssembler(c => c.vpcmpltub(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vpcmpltub_kr_zmm_m() {
			TestAssembler(c => c.vpcmpltub(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vpcmpltud_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpltud(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 1), Register.K1));
		}

		[Fact]
		public void vpcmpltud_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpltud(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 1), Register.K1));
		}

		[Fact]
		public void vpcmpltud_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpltud(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 1), Register.K1));
		}

		[Fact]
		public void vpcmpltud_kr_xmm_m() {
			TestAssembler(c => c.vpcmpltud(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vpcmpltud_kr_ymm_m() {
			TestAssembler(c => c.vpcmpltud(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vpcmpltud_kr_zmm_m() {
			TestAssembler(c => c.vpcmpltud(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vpcmpltuq_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpltuq(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 1), Register.K1));
		}

		[Fact]
		public void vpcmpltuq_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpltuq(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 1), Register.K1));
		}

		[Fact]
		public void vpcmpltuq_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpltuq(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 1), Register.K1));
		}

		[Fact]
		public void vpcmpltuq_kr_xmm_m() {
			TestAssembler(c => c.vpcmpltuq(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vpcmpltuq_kr_ymm_m() {
			TestAssembler(c => c.vpcmpltuq(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vpcmpltuq_kr_zmm_m() {
			TestAssembler(c => c.vpcmpltuq(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vpcmpltuw_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpltuw(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 1), Register.K1));
		}

		[Fact]
		public void vpcmpltuw_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpltuw(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 1), Register.K1));
		}

		[Fact]
		public void vpcmpltuw_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpltuw(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 1), Register.K1));
		}

		[Fact]
		public void vpcmpltuw_kr_xmm_m() {
			TestAssembler(c => c.vpcmpltuw(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vpcmpltuw_kr_ymm_m() {
			TestAssembler(c => c.vpcmpltuw(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vpcmpltuw_kr_zmm_m() {
			TestAssembler(c => c.vpcmpltuw(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vpcmpltw_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpltw(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 1), Register.K1));
		}

		[Fact]
		public void vpcmpltw_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpltw(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 1), Register.K1));
		}

		[Fact]
		public void vpcmpltw_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpltw(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 1), Register.K1));
		}

		[Fact]
		public void vpcmpltw_kr_xmm_m() {
			TestAssembler(c => c.vpcmpltw(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vpcmpltw_kr_ymm_m() {
			TestAssembler(c => c.vpcmpltw(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vpcmpltw_kr_zmm_m() {
			TestAssembler(c => c.vpcmpltw(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1), Register.K1));
		}

		[Fact]
		public void vpcmpneqb_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpneqb(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 4), Register.K1));
		}

		[Fact]
		public void vpcmpneqb_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpneqb(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 4), Register.K1));
		}

		[Fact]
		public void vpcmpneqb_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpneqb(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 4), Register.K1));
		}

		[Fact]
		public void vpcmpneqb_kr_xmm_m() {
			TestAssembler(c => c.vpcmpneqb(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vpcmpneqb_kr_ymm_m() {
			TestAssembler(c => c.vpcmpneqb(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vpcmpneqb_kr_zmm_m() {
			TestAssembler(c => c.vpcmpneqb(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vpcmpneqd_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpneqd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 4), Register.K1));
		}

		[Fact]
		public void vpcmpneqd_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpneqd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 4), Register.K1));
		}

		[Fact]
		public void vpcmpneqd_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpneqd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 4), Register.K1));
		}

		[Fact]
		public void vpcmpneqd_kr_xmm_m() {
			TestAssembler(c => c.vpcmpneqd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vpcmpneqd_kr_ymm_m() {
			TestAssembler(c => c.vpcmpneqd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vpcmpneqd_kr_zmm_m() {
			TestAssembler(c => c.vpcmpneqd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vpcmpneqq_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpneqq(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 4), Register.K1));
		}

		[Fact]
		public void vpcmpneqq_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpneqq(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 4), Register.K1));
		}

		[Fact]
		public void vpcmpneqq_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpneqq(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 4), Register.K1));
		}

		[Fact]
		public void vpcmpneqq_kr_xmm_m() {
			TestAssembler(c => c.vpcmpneqq(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vpcmpneqq_kr_ymm_m() {
			TestAssembler(c => c.vpcmpneqq(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vpcmpneqq_kr_zmm_m() {
			TestAssembler(c => c.vpcmpneqq(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vpcmpnequb_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpnequb(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 4), Register.K1));
		}

		[Fact]
		public void vpcmpnequb_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpnequb(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 4), Register.K1));
		}

		[Fact]
		public void vpcmpnequb_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpnequb(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 4), Register.K1));
		}

		[Fact]
		public void vpcmpnequb_kr_xmm_m() {
			TestAssembler(c => c.vpcmpnequb(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vpcmpnequb_kr_ymm_m() {
			TestAssembler(c => c.vpcmpnequb(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vpcmpnequb_kr_zmm_m() {
			TestAssembler(c => c.vpcmpnequb(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vpcmpnequd_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpnequd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 4), Register.K1));
		}

		[Fact]
		public void vpcmpnequd_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpnequd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 4), Register.K1));
		}

		[Fact]
		public void vpcmpnequd_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpnequd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 4), Register.K1));
		}

		[Fact]
		public void vpcmpnequd_kr_xmm_m() {
			TestAssembler(c => c.vpcmpnequd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vpcmpnequd_kr_ymm_m() {
			TestAssembler(c => c.vpcmpnequd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vpcmpnequd_kr_zmm_m() {
			TestAssembler(c => c.vpcmpnequd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vpcmpnequq_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpnequq(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 4), Register.K1));
		}

		[Fact]
		public void vpcmpnequq_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpnequq(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 4), Register.K1));
		}

		[Fact]
		public void vpcmpnequq_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpnequq(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 4), Register.K1));
		}

		[Fact]
		public void vpcmpnequq_kr_xmm_m() {
			TestAssembler(c => c.vpcmpnequq(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vpcmpnequq_kr_ymm_m() {
			TestAssembler(c => c.vpcmpnequq(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vpcmpnequq_kr_zmm_m() {
			TestAssembler(c => c.vpcmpnequq(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vpcmpnequw_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpnequw(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 4), Register.K1));
		}

		[Fact]
		public void vpcmpnequw_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpnequw(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 4), Register.K1));
		}

		[Fact]
		public void vpcmpnequw_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpnequw(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 4), Register.K1));
		}

		[Fact]
		public void vpcmpnequw_kr_xmm_m() {
			TestAssembler(c => c.vpcmpnequw(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vpcmpnequw_kr_ymm_m() {
			TestAssembler(c => c.vpcmpnequw(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vpcmpnequw_kr_zmm_m() {
			TestAssembler(c => c.vpcmpnequw(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vpcmpneqw_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpneqw(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 4), Register.K1));
		}

		[Fact]
		public void vpcmpneqw_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpneqw(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 4), Register.K1));
		}

		[Fact]
		public void vpcmpneqw_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpneqw(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 4), Register.K1));
		}

		[Fact]
		public void vpcmpneqw_kr_xmm_m() {
			TestAssembler(c => c.vpcmpneqw(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vpcmpneqw_kr_ymm_m() {
			TestAssembler(c => c.vpcmpneqw(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vpcmpneqw_kr_zmm_m() {
			TestAssembler(c => c.vpcmpneqw(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4), Register.K1));
		}

		[Fact]
		public void vpcmpnleb_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpnleb(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleb_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpnleb(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleb_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpnleb(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleb_kr_xmm_m() {
			TestAssembler(c => c.vpcmpnleb(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleb_kr_ymm_m() {
			TestAssembler(c => c.vpcmpnleb(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleb_kr_zmm_m() {
			TestAssembler(c => c.vpcmpnleb(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vpcmpnled_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpnled(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 6), Register.K1));
		}

		[Fact]
		public void vpcmpnled_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpnled(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 6), Register.K1));
		}

		[Fact]
		public void vpcmpnled_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpnled(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 6), Register.K1));
		}

		[Fact]
		public void vpcmpnled_kr_xmm_m() {
			TestAssembler(c => c.vpcmpnled(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vpcmpnled_kr_ymm_m() {
			TestAssembler(c => c.vpcmpnled(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vpcmpnled_kr_zmm_m() {
			TestAssembler(c => c.vpcmpnled(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleq_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpnleq(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleq_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpnleq(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleq_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpnleq(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleq_kr_xmm_m() {
			TestAssembler(c => c.vpcmpnleq(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleq_kr_ymm_m() {
			TestAssembler(c => c.vpcmpnleq(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleq_kr_zmm_m() {
			TestAssembler(c => c.vpcmpnleq(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleub_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpnleub(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleub_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpnleub(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleub_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpnleub(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleub_kr_xmm_m() {
			TestAssembler(c => c.vpcmpnleub(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleub_kr_ymm_m() {
			TestAssembler(c => c.vpcmpnleub(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleub_kr_zmm_m() {
			TestAssembler(c => c.vpcmpnleub(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleud_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpnleud(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleud_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpnleud(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleud_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpnleud(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleud_kr_xmm_m() {
			TestAssembler(c => c.vpcmpnleud(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleud_kr_ymm_m() {
			TestAssembler(c => c.vpcmpnleud(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleud_kr_zmm_m() {
			TestAssembler(c => c.vpcmpnleud(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleuq_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpnleuq(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleuq_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpnleuq(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleuq_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpnleuq(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleuq_kr_xmm_m() {
			TestAssembler(c => c.vpcmpnleuq(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleuq_kr_ymm_m() {
			TestAssembler(c => c.vpcmpnleuq(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleuq_kr_zmm_m() {
			TestAssembler(c => c.vpcmpnleuq(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleuw_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpnleuw(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleuw_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpnleuw(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleuw_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpnleuw(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleuw_kr_xmm_m() {
			TestAssembler(c => c.vpcmpnleuw(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleuw_kr_ymm_m() {
			TestAssembler(c => c.vpcmpnleuw(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vpcmpnleuw_kr_zmm_m() {
			TestAssembler(c => c.vpcmpnleuw(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vpcmpnlew_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpnlew(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 6), Register.K1));
		}

		[Fact]
		public void vpcmpnlew_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpnlew(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 6), Register.K1));
		}

		[Fact]
		public void vpcmpnlew_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpnlew(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 6), Register.K1));
		}

		[Fact]
		public void vpcmpnlew_kr_xmm_m() {
			TestAssembler(c => c.vpcmpnlew(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vpcmpnlew_kr_ymm_m() {
			TestAssembler(c => c.vpcmpnlew(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vpcmpnlew_kr_zmm_m() {
			TestAssembler(c => c.vpcmpnlew(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6), Register.K1));
		}

		[Fact]
		public void vpcmpnltb_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpnltb(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltb_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpnltb(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltb_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpnltb(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltb_kr_xmm_m() {
			TestAssembler(c => c.vpcmpnltb(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltb_kr_ymm_m() {
			TestAssembler(c => c.vpcmpnltb(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltb_kr_zmm_m() {
			TestAssembler(c => c.vpcmpnltb(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltd_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpnltd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltd_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpnltd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltd_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpnltd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltd_kr_xmm_m() {
			TestAssembler(c => c.vpcmpnltd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltd_kr_ymm_m() {
			TestAssembler(c => c.vpcmpnltd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltd_kr_zmm_m() {
			TestAssembler(c => c.vpcmpnltd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltq_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpnltq(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltq_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpnltq(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltq_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpnltq(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltq_kr_xmm_m() {
			TestAssembler(c => c.vpcmpnltq(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltq_kr_ymm_m() {
			TestAssembler(c => c.vpcmpnltq(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltq_kr_zmm_m() {
			TestAssembler(c => c.vpcmpnltq(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltub_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpnltub(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltub_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpnltub(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltub_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpnltub(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltub_kr_xmm_m() {
			TestAssembler(c => c.vpcmpnltub(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltub_kr_ymm_m() {
			TestAssembler(c => c.vpcmpnltub(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltub_kr_zmm_m() {
			TestAssembler(c => c.vpcmpnltub(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltud_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpnltud(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltud_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpnltud(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltud_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpnltud(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltud_kr_xmm_m() {
			TestAssembler(c => c.vpcmpnltud(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltud_kr_ymm_m() {
			TestAssembler(c => c.vpcmpnltud(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltud_kr_zmm_m() {
			TestAssembler(c => c.vpcmpnltud(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltuq_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpnltuq(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltuq_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpnltuq(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltuq_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpnltuq(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltuq_kr_xmm_m() {
			TestAssembler(c => c.vpcmpnltuq(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltuq_kr_ymm_m() {
			TestAssembler(c => c.vpcmpnltuq(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltuq_kr_zmm_m() {
			TestAssembler(c => c.vpcmpnltuq(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltuw_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpnltuw(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltuw_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpnltuw(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltuw_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpnltuw(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltuw_kr_xmm_m() {
			TestAssembler(c => c.vpcmpnltuw(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltuw_kr_ymm_m() {
			TestAssembler(c => c.vpcmpnltuw(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltuw_kr_zmm_m() {
			TestAssembler(c => c.vpcmpnltuw(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltw_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmpnltw(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltw_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmpnltw(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltw_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmpnltw(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltw_kr_xmm_m() {
			TestAssembler(c => c.vpcmpnltw(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltw_kr_ymm_m() {
			TestAssembler(c => c.vpcmpnltw(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vpcmpnltw_kr_zmm_m() {
			TestAssembler(c => c.vpcmpnltw(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5), Register.K1));
		}

		[Fact]
		public void vpcmpq_kr_xmm_xmm_i() {
			TestAssembler(c => c.vpcmpq(k2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vpcmpq_kr_ymm_ymm_i() {
			TestAssembler(c => c.vpcmpq(k2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vpcmpq_kr_zmm_zmm_i() {
			TestAssembler(c => c.vpcmpq(k2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vpcmpq_kr_xmm_m_i() {
			TestAssembler(c => c.vpcmpq(k2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpcmpq_kr_ymm_m_i() {
			TestAssembler(c => c.vpcmpq(k2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpcmpq_kr_zmm_m_i() {
			TestAssembler(c => c.vpcmpq(k2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpcmpq_kr_xmm_xmm_u() {
			TestAssembler(c => c.vpcmpq(k2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpq_kr_ymm_ymm_u() {
			TestAssembler(c => c.vpcmpq(k2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpq_kr_zmm_zmm_u() {
			TestAssembler(c => c.vpcmpq(k2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpq_kr_xmm_m_u() {
			TestAssembler(c => c.vpcmpq(k2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpq_kr_ymm_m_u() {
			TestAssembler(c => c.vpcmpq(k2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpq_kr_zmm_m_u() {
			TestAssembler(c => c.vpcmpq(k2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmptrueb_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmptrueb(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueb_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmptrueb(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueb_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmptrueb(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueb_kr_xmm_m() {
			TestAssembler(c => c.vpcmptrueb(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueb_kr_ymm_m() {
			TestAssembler(c => c.vpcmptrueb(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueb_kr_zmm_m() {
			TestAssembler(c => c.vpcmptrueb(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpb_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vpcmptrued_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmptrued(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 7), Register.K1));
		}

		[Fact]
		public void vpcmptrued_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmptrued(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 7), Register.K1));
		}

		[Fact]
		public void vpcmptrued_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmptrued(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 7), Register.K1));
		}

		[Fact]
		public void vpcmptrued_kr_xmm_m() {
			TestAssembler(c => c.vpcmptrued(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vpcmptrued_kr_ymm_m() {
			TestAssembler(c => c.vpcmptrued(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vpcmptrued_kr_zmm_m() {
			TestAssembler(c => c.vpcmptrued(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpd_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueq_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmptrueq(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueq_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmptrueq(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueq_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmptrueq(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueq_kr_xmm_m() {
			TestAssembler(c => c.vpcmptrueq(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueq_kr_ymm_m() {
			TestAssembler(c => c.vpcmptrueq(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueq_kr_zmm_m() {
			TestAssembler(c => c.vpcmptrueq(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueub_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmptrueub(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueub_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmptrueub(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueub_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmptrueub(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueub_kr_xmm_m() {
			TestAssembler(c => c.vpcmptrueub(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueub_kr_ymm_m() {
			TestAssembler(c => c.vpcmptrueub(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueub_kr_zmm_m() {
			TestAssembler(c => c.vpcmptrueub(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueud_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmptrueud(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueud_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmptrueud(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueud_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmptrueud(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueud_kr_xmm_m() {
			TestAssembler(c => c.vpcmptrueud(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueud_kr_ymm_m() {
			TestAssembler(c => c.vpcmptrueud(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueud_kr_zmm_m() {
			TestAssembler(c => c.vpcmptrueud(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueuq_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmptrueuq(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueuq_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmptrueuq(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueuq_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmptrueuq(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueuq_kr_xmm_m() {
			TestAssembler(c => c.vpcmptrueuq(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueuq_kr_ymm_m() {
			TestAssembler(c => c.vpcmptrueuq(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueuq_kr_zmm_m() {
			TestAssembler(c => c.vpcmptrueuq(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueuw_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmptrueuw(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueuw_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmptrueuw(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueuw_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmptrueuw(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueuw_kr_xmm_m() {
			TestAssembler(c => c.vpcmptrueuw(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueuw_kr_ymm_m() {
			TestAssembler(c => c.vpcmptrueuw(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vpcmptrueuw_kr_zmm_m() {
			TestAssembler(c => c.vpcmptrueuw(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vpcmptruew_kr_xmm_xmm() {
			TestAssembler(c => c.vpcmptruew(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 7), Register.K1));
		}

		[Fact]
		public void vpcmptruew_kr_ymm_ymm() {
			TestAssembler(c => c.vpcmptruew(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 7), Register.K1));
		}

		[Fact]
		public void vpcmptruew_kr_zmm_zmm() {
			TestAssembler(c => c.vpcmptruew(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 7), Register.K1));
		}

		[Fact]
		public void vpcmptruew_kr_xmm_m() {
			TestAssembler(c => c.vpcmptruew(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vpcmptruew_kr_ymm_m() {
			TestAssembler(c => c.vpcmptruew(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vpcmptruew_kr_zmm_m() {
			TestAssembler(c => c.vpcmptruew(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7), Register.K1));
		}

		[Fact]
		public void vpcmpub_kr_xmm_xmm_i() {
			TestAssembler(c => c.vpcmpub(k2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vpcmpub_kr_ymm_ymm_i() {
			TestAssembler(c => c.vpcmpub(k2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vpcmpub_kr_zmm_zmm_i() {
			TestAssembler(c => c.vpcmpub(k2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vpcmpub_kr_xmm_m_i() {
			TestAssembler(c => c.vpcmpub(k2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpcmpub_kr_ymm_m_i() {
			TestAssembler(c => c.vpcmpub(k2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpcmpub_kr_zmm_m_i() {
			TestAssembler(c => c.vpcmpub(k2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpcmpub_kr_xmm_xmm_u() {
			TestAssembler(c => c.vpcmpub(k2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpub_kr_ymm_ymm_u() {
			TestAssembler(c => c.vpcmpub(k2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpub_kr_zmm_zmm_u() {
			TestAssembler(c => c.vpcmpub(k2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpub_kr_xmm_m_u() {
			TestAssembler(c => c.vpcmpub(k2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpub_kr_ymm_m_u() {
			TestAssembler(c => c.vpcmpub(k2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpub_kr_zmm_m_u() {
			TestAssembler(c => c.vpcmpub(k2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpub_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpud_kr_xmm_xmm_i() {
			TestAssembler(c => c.vpcmpud(k2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vpcmpud_kr_ymm_ymm_i() {
			TestAssembler(c => c.vpcmpud(k2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vpcmpud_kr_zmm_zmm_i() {
			TestAssembler(c => c.vpcmpud(k2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vpcmpud_kr_xmm_m_i() {
			TestAssembler(c => c.vpcmpud(k2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpcmpud_kr_ymm_m_i() {
			TestAssembler(c => c.vpcmpud(k2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpcmpud_kr_zmm_m_i() {
			TestAssembler(c => c.vpcmpud(k2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpcmpud_kr_xmm_xmm_u() {
			TestAssembler(c => c.vpcmpud(k2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpud_kr_ymm_ymm_u() {
			TestAssembler(c => c.vpcmpud(k2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpud_kr_zmm_zmm_u() {
			TestAssembler(c => c.vpcmpud(k2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpud_kr_xmm_m_u() {
			TestAssembler(c => c.vpcmpud(k2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_xmm_xmmm128b32_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpud_kr_ymm_m_u() {
			TestAssembler(c => c.vpcmpud(k2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_ymm_ymmm256b32_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpud_kr_zmm_m_u() {
			TestAssembler(c => c.vpcmpud(k2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpud_kr_k1_zmm_zmmm512b32_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpuq_kr_xmm_xmm_i() {
			TestAssembler(c => c.vpcmpuq(k2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vpcmpuq_kr_ymm_ymm_i() {
			TestAssembler(c => c.vpcmpuq(k2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vpcmpuq_kr_zmm_zmm_i() {
			TestAssembler(c => c.vpcmpuq(k2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vpcmpuq_kr_xmm_m_i() {
			TestAssembler(c => c.vpcmpuq(k2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpcmpuq_kr_ymm_m_i() {
			TestAssembler(c => c.vpcmpuq(k2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpcmpuq_kr_zmm_m_i() {
			TestAssembler(c => c.vpcmpuq(k2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpcmpuq_kr_xmm_xmm_u() {
			TestAssembler(c => c.vpcmpuq(k2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpuq_kr_ymm_ymm_u() {
			TestAssembler(c => c.vpcmpuq(k2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpuq_kr_zmm_zmm_u() {
			TestAssembler(c => c.vpcmpuq(k2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpuq_kr_xmm_m_u() {
			TestAssembler(c => c.vpcmpuq(k2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_xmm_xmmm128b64_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpuq_kr_ymm_m_u() {
			TestAssembler(c => c.vpcmpuq(k2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_ymm_ymmm256b64_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpuq_kr_zmm_m_u() {
			TestAssembler(c => c.vpcmpuq(k2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuq_kr_k1_zmm_zmmm512b64_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpuw_kr_xmm_xmm_i() {
			TestAssembler(c => c.vpcmpuw(k2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vpcmpuw_kr_ymm_ymm_i() {
			TestAssembler(c => c.vpcmpuw(k2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vpcmpuw_kr_zmm_zmm_i() {
			TestAssembler(c => c.vpcmpuw(k2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vpcmpuw_kr_xmm_m_i() {
			TestAssembler(c => c.vpcmpuw(k2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpcmpuw_kr_ymm_m_i() {
			TestAssembler(c => c.vpcmpuw(k2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpcmpuw_kr_zmm_m_i() {
			TestAssembler(c => c.vpcmpuw(k2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpcmpuw_kr_xmm_xmm_u() {
			TestAssembler(c => c.vpcmpuw(k2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpuw_kr_ymm_ymm_u() {
			TestAssembler(c => c.vpcmpuw(k2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpuw_kr_zmm_zmm_u() {
			TestAssembler(c => c.vpcmpuw(k2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpuw_kr_xmm_m_u() {
			TestAssembler(c => c.vpcmpuw(k2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpuw_kr_ymm_m_u() {
			TestAssembler(c => c.vpcmpuw(k2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpuw_kr_zmm_m_u() {
			TestAssembler(c => c.vpcmpuw(k2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpuw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpw_kr_xmm_xmm_i() {
			TestAssembler(c => c.vpcmpw(k2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vpcmpw_kr_ymm_ymm_i() {
			TestAssembler(c => c.vpcmpw(k2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vpcmpw_kr_zmm_zmm_i() {
			TestAssembler(c => c.vpcmpw(k2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vpcmpw_kr_xmm_m_i() {
			TestAssembler(c => c.vpcmpw(k2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpcmpw_kr_ymm_m_i() {
			TestAssembler(c => c.vpcmpw(k2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpcmpw_kr_zmm_m_i() {
			TestAssembler(c => c.vpcmpw(k2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpcmpw_kr_xmm_xmm_u() {
			TestAssembler(c => c.vpcmpw(k2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpw_kr_ymm_ymm_u() {
			TestAssembler(c => c.vpcmpw(k2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpw_kr_zmm_zmm_u() {
			TestAssembler(c => c.vpcmpw(k2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpw_kr_xmm_m_u() {
			TestAssembler(c => c.vpcmpw(k2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_xmm_xmmm128_imm8, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpw_kr_ymm_m_u() {
			TestAssembler(c => c.vpcmpw(k2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_ymm_ymmm256_imm8, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcmpw_kr_zmm_m_u() {
			TestAssembler(c => c.vpcmpw(k2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpcmpw_kr_k1_zmm_zmmm512_imm8, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpcomb_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vpcomb(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5));
		}

		[Fact]
		public void vpcomb_xmm_xmm_m_i() {
			TestAssembler(c => c.vpcomb(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vpcomb_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vpcomb(xmm2, xmm3, xmm4, (byte)0x7F), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU));
		}

		[Fact]
		public void vpcomb_xmm_xmm_m_u() {
			TestAssembler(c => c.vpcomb(xmm2, xmm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vpcomd_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vpcomd(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5));
		}

		[Fact]
		public void vpcomd_xmm_xmm_m_i() {
			TestAssembler(c => c.vpcomd(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vpcomd_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vpcomd(xmm2, xmm3, xmm4, (byte)0x7F), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU));
		}

		[Fact]
		public void vpcomd_xmm_xmm_m_u() {
			TestAssembler(c => c.vpcomd(xmm2, xmm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vpcomeqb_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomeqb(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 4));
		}

		[Fact]
		public void vpcomeqb_xmm_xmm_m() {
			TestAssembler(c => c.vpcomeqb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4));
		}

		[Fact]
		public void vpcomeqd_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomeqd(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 4));
		}

		[Fact]
		public void vpcomeqd_xmm_xmm_m() {
			TestAssembler(c => c.vpcomeqd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4));
		}

		[Fact]
		public void vpcomeqq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomeqq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 4));
		}

		[Fact]
		public void vpcomeqq_xmm_xmm_m() {
			TestAssembler(c => c.vpcomeqq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4));
		}

		[Fact]
		public void vpcomequb_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomequb(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 4));
		}

		[Fact]
		public void vpcomequb_xmm_xmm_m() {
			TestAssembler(c => c.vpcomequb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4));
		}

		[Fact]
		public void vpcomequd_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomequd(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 4));
		}

		[Fact]
		public void vpcomequd_xmm_xmm_m() {
			TestAssembler(c => c.vpcomequd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4));
		}

		[Fact]
		public void vpcomequq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomequq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 4));
		}

		[Fact]
		public void vpcomequq_xmm_xmm_m() {
			TestAssembler(c => c.vpcomequq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4));
		}

		[Fact]
		public void vpcomequw_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomequw(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 4));
		}

		[Fact]
		public void vpcomequw_xmm_xmm_m() {
			TestAssembler(c => c.vpcomequw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4));
		}

		[Fact]
		public void vpcomeqw_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomeqw(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 4));
		}

		[Fact]
		public void vpcomeqw_xmm_xmm_m() {
			TestAssembler(c => c.vpcomeqw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 4));
		}

		[Fact]
		public void vpcomfalseb_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomfalseb(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 6));
		}

		[Fact]
		public void vpcomfalseb_xmm_xmm_m() {
			TestAssembler(c => c.vpcomfalseb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6));
		}

		[Fact]
		public void vpcomfalsed_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomfalsed(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 6));
		}

		[Fact]
		public void vpcomfalsed_xmm_xmm_m() {
			TestAssembler(c => c.vpcomfalsed(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6));
		}

		[Fact]
		public void vpcomfalseq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomfalseq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 6));
		}

		[Fact]
		public void vpcomfalseq_xmm_xmm_m() {
			TestAssembler(c => c.vpcomfalseq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6));
		}

		[Fact]
		public void vpcomfalseub_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomfalseub(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 6));
		}

		[Fact]
		public void vpcomfalseub_xmm_xmm_m() {
			TestAssembler(c => c.vpcomfalseub(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6));
		}

		[Fact]
		public void vpcomfalseud_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomfalseud(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 6));
		}

		[Fact]
		public void vpcomfalseud_xmm_xmm_m() {
			TestAssembler(c => c.vpcomfalseud(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6));
		}

		[Fact]
		public void vpcomfalseuq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomfalseuq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 6));
		}

		[Fact]
		public void vpcomfalseuq_xmm_xmm_m() {
			TestAssembler(c => c.vpcomfalseuq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6));
		}

		[Fact]
		public void vpcomfalseuw_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomfalseuw(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 6));
		}

		[Fact]
		public void vpcomfalseuw_xmm_xmm_m() {
			TestAssembler(c => c.vpcomfalseuw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6));
		}

		[Fact]
		public void vpcomfalsew_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomfalsew(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 6));
		}

		[Fact]
		public void vpcomfalsew_xmm_xmm_m() {
			TestAssembler(c => c.vpcomfalsew(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 6));
		}

		[Fact]
		public void vpcomgeb_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomgeb(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 3));
		}

		[Fact]
		public void vpcomgeb_xmm_xmm_m() {
			TestAssembler(c => c.vpcomgeb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3));
		}

		[Fact]
		public void vpcomged_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomged(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 3));
		}

		[Fact]
		public void vpcomged_xmm_xmm_m() {
			TestAssembler(c => c.vpcomged(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3));
		}

		[Fact]
		public void vpcomgeq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomgeq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 3));
		}

		[Fact]
		public void vpcomgeq_xmm_xmm_m() {
			TestAssembler(c => c.vpcomgeq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3));
		}

		[Fact]
		public void vpcomgeub_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomgeub(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 3));
		}

		[Fact]
		public void vpcomgeub_xmm_xmm_m() {
			TestAssembler(c => c.vpcomgeub(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3));
		}

		[Fact]
		public void vpcomgeud_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomgeud(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 3));
		}

		[Fact]
		public void vpcomgeud_xmm_xmm_m() {
			TestAssembler(c => c.vpcomgeud(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3));
		}

		[Fact]
		public void vpcomgeuq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomgeuq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 3));
		}

		[Fact]
		public void vpcomgeuq_xmm_xmm_m() {
			TestAssembler(c => c.vpcomgeuq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3));
		}

		[Fact]
		public void vpcomgeuw_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomgeuw(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 3));
		}

		[Fact]
		public void vpcomgeuw_xmm_xmm_m() {
			TestAssembler(c => c.vpcomgeuw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3));
		}

		[Fact]
		public void vpcomgew_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomgew(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 3));
		}

		[Fact]
		public void vpcomgew_xmm_xmm_m() {
			TestAssembler(c => c.vpcomgew(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3));
		}

		[Fact]
		public void vpcomgtb_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomgtb(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 2));
		}

		[Fact]
		public void vpcomgtb_xmm_xmm_m() {
			TestAssembler(c => c.vpcomgtb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2));
		}

		[Fact]
		public void vpcomgtd_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomgtd(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 2));
		}

		[Fact]
		public void vpcomgtd_xmm_xmm_m() {
			TestAssembler(c => c.vpcomgtd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2));
		}

		[Fact]
		public void vpcomgtq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomgtq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 2));
		}

		[Fact]
		public void vpcomgtq_xmm_xmm_m() {
			TestAssembler(c => c.vpcomgtq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2));
		}

		[Fact]
		public void vpcomgtub_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomgtub(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 2));
		}

		[Fact]
		public void vpcomgtub_xmm_xmm_m() {
			TestAssembler(c => c.vpcomgtub(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2));
		}

		[Fact]
		public void vpcomgtud_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomgtud(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 2));
		}

		[Fact]
		public void vpcomgtud_xmm_xmm_m() {
			TestAssembler(c => c.vpcomgtud(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2));
		}

		[Fact]
		public void vpcomgtuq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomgtuq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 2));
		}

		[Fact]
		public void vpcomgtuq_xmm_xmm_m() {
			TestAssembler(c => c.vpcomgtuq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2));
		}

		[Fact]
		public void vpcomgtuw_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomgtuw(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 2));
		}

		[Fact]
		public void vpcomgtuw_xmm_xmm_m() {
			TestAssembler(c => c.vpcomgtuw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2));
		}

		[Fact]
		public void vpcomgtw_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomgtw(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 2));
		}

		[Fact]
		public void vpcomgtw_xmm_xmm_m() {
			TestAssembler(c => c.vpcomgtw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 2));
		}

		[Fact]
		public void vpcomleb_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomleb(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 1));
		}

		[Fact]
		public void vpcomleb_xmm_xmm_m() {
			TestAssembler(c => c.vpcomleb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1));
		}

		[Fact]
		public void vpcomled_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomled(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 1));
		}

		[Fact]
		public void vpcomled_xmm_xmm_m() {
			TestAssembler(c => c.vpcomled(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1));
		}

		[Fact]
		public void vpcomleq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomleq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 1));
		}

		[Fact]
		public void vpcomleq_xmm_xmm_m() {
			TestAssembler(c => c.vpcomleq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1));
		}

		[Fact]
		public void vpcomleub_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomleub(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 1));
		}

		[Fact]
		public void vpcomleub_xmm_xmm_m() {
			TestAssembler(c => c.vpcomleub(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1));
		}

		[Fact]
		public void vpcomleud_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomleud(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 1));
		}

		[Fact]
		public void vpcomleud_xmm_xmm_m() {
			TestAssembler(c => c.vpcomleud(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1));
		}

		[Fact]
		public void vpcomleuq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomleuq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 1));
		}

		[Fact]
		public void vpcomleuq_xmm_xmm_m() {
			TestAssembler(c => c.vpcomleuq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1));
		}

		[Fact]
		public void vpcomleuw_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomleuw(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 1));
		}

		[Fact]
		public void vpcomleuw_xmm_xmm_m() {
			TestAssembler(c => c.vpcomleuw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1));
		}

		[Fact]
		public void vpcomlew_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomlew(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 1));
		}

		[Fact]
		public void vpcomlew_xmm_xmm_m() {
			TestAssembler(c => c.vpcomlew(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 1));
		}

		[Fact]
		public void vpcomltb_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomltb(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0));
		}

		[Fact]
		public void vpcomltb_xmm_xmm_m() {
			TestAssembler(c => c.vpcomltb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0));
		}

		[Fact]
		public void vpcomltd_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomltd(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0));
		}

		[Fact]
		public void vpcomltd_xmm_xmm_m() {
			TestAssembler(c => c.vpcomltd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0));
		}

		[Fact]
		public void vpcomltq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomltq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0));
		}

		[Fact]
		public void vpcomltq_xmm_xmm_m() {
			TestAssembler(c => c.vpcomltq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0));
		}

		[Fact]
		public void vpcomltub_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomltub(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0));
		}

		[Fact]
		public void vpcomltub_xmm_xmm_m() {
			TestAssembler(c => c.vpcomltub(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0));
		}

		[Fact]
		public void vpcomltud_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomltud(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0));
		}

		[Fact]
		public void vpcomltud_xmm_xmm_m() {
			TestAssembler(c => c.vpcomltud(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0));
		}

		[Fact]
		public void vpcomltuq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomltuq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0));
		}

		[Fact]
		public void vpcomltuq_xmm_xmm_m() {
			TestAssembler(c => c.vpcomltuq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0));
		}

		[Fact]
		public void vpcomltuw_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomltuw(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0));
		}

		[Fact]
		public void vpcomltuw_xmm_xmm_m() {
			TestAssembler(c => c.vpcomltuw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0));
		}

		[Fact]
		public void vpcomltw_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomltw(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0));
		}

		[Fact]
		public void vpcomltw_xmm_xmm_m() {
			TestAssembler(c => c.vpcomltw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0));
		}

		[Fact]
		public void vpcomneqb_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomneqb(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 5));
		}

		[Fact]
		public void vpcomneqb_xmm_xmm_m() {
			TestAssembler(c => c.vpcomneqb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5));
		}

		[Fact]
		public void vpcomneqd_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomneqd(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 5));
		}

		[Fact]
		public void vpcomneqd_xmm_xmm_m() {
			TestAssembler(c => c.vpcomneqd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5));
		}

		[Fact]
		public void vpcomneqq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomneqq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 5));
		}

		[Fact]
		public void vpcomneqq_xmm_xmm_m() {
			TestAssembler(c => c.vpcomneqq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5));
		}

		[Fact]
		public void vpcomnequb_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomnequb(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 5));
		}

		[Fact]
		public void vpcomnequb_xmm_xmm_m() {
			TestAssembler(c => c.vpcomnequb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5));
		}

		[Fact]
		public void vpcomnequd_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomnequd(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 5));
		}

		[Fact]
		public void vpcomnequd_xmm_xmm_m() {
			TestAssembler(c => c.vpcomnequd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5));
		}

		[Fact]
		public void vpcomnequq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomnequq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 5));
		}

		[Fact]
		public void vpcomnequq_xmm_xmm_m() {
			TestAssembler(c => c.vpcomnequq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5));
		}

		[Fact]
		public void vpcomnequw_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomnequw(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 5));
		}

		[Fact]
		public void vpcomnequw_xmm_xmm_m() {
			TestAssembler(c => c.vpcomnequw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5));
		}

		[Fact]
		public void vpcomneqw_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomneqw(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 5));
		}

		[Fact]
		public void vpcomneqw_xmm_xmm_m() {
			TestAssembler(c => c.vpcomneqw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 5));
		}

		[Fact]
		public void vpcompressb_xmm_xmm() {
			TestAssembler(c => c.vpcompressb(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpcompressb_xmmm128_k1z_xmm, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpcompressb_m_xmm() {
			TestAssembler(c => c.vpcompressb(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpcompressb_xmmm128_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpcompressb_ymm_ymm() {
			TestAssembler(c => c.vpcompressb(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpcompressb_ymmm256_k1z_ymm, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpcompressb_m_ymm() {
			TestAssembler(c => c.vpcompressb(__ymmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpcompressb_ymmm256_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpcompressb_zmm_zmm() {
			TestAssembler(c => c.vpcompressb(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpcompressb_zmmm512_k1z_zmm, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpcompressb_m_zmm() {
			TestAssembler(c => c.vpcompressb(__zmmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpcompressb_zmmm512_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpcompressd_xmm_xmm() {
			TestAssembler(c => c.vpcompressd(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpcompressd_xmmm128_k1z_xmm, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpcompressd_m_xmm() {
			TestAssembler(c => c.vpcompressd(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpcompressd_xmmm128_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpcompressd_ymm_ymm() {
			TestAssembler(c => c.vpcompressd(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpcompressd_ymmm256_k1z_ymm, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpcompressd_m_ymm() {
			TestAssembler(c => c.vpcompressd(__ymmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpcompressd_ymmm256_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpcompressd_zmm_zmm() {
			TestAssembler(c => c.vpcompressd(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpcompressd_zmmm512_k1z_zmm, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpcompressd_m_zmm() {
			TestAssembler(c => c.vpcompressd(__zmmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpcompressd_zmmm512_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpcompressq_xmm_xmm() {
			TestAssembler(c => c.vpcompressq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpcompressq_xmmm128_k1z_xmm, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpcompressq_m_xmm() {
			TestAssembler(c => c.vpcompressq(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpcompressq_xmmm128_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpcompressq_ymm_ymm() {
			TestAssembler(c => c.vpcompressq(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpcompressq_ymmm256_k1z_ymm, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpcompressq_m_ymm() {
			TestAssembler(c => c.vpcompressq(__ymmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpcompressq_ymmm256_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpcompressq_zmm_zmm() {
			TestAssembler(c => c.vpcompressq(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpcompressq_zmmm512_k1z_zmm, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpcompressq_m_zmm() {
			TestAssembler(c => c.vpcompressq(__zmmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpcompressq_zmmm512_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpcompressw_xmm_xmm() {
			TestAssembler(c => c.vpcompressw(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpcompressw_xmmm128_k1z_xmm, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpcompressw_m_xmm() {
			TestAssembler(c => c.vpcompressw(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpcompressw_xmmm128_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpcompressw_ymm_ymm() {
			TestAssembler(c => c.vpcompressw(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpcompressw_ymmm256_k1z_ymm, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpcompressw_m_ymm() {
			TestAssembler(c => c.vpcompressw(__ymmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpcompressw_ymmm256_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpcompressw_zmm_zmm() {
			TestAssembler(c => c.vpcompressw(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpcompressw_zmmm512_k1z_zmm, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpcompressw_m_zmm() {
			TestAssembler(c => c.vpcompressw(__zmmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpcompressw_zmmm512_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpcomq_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vpcomq(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5));
		}

		[Fact]
		public void vpcomq_xmm_xmm_m_i() {
			TestAssembler(c => c.vpcomq(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vpcomq_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vpcomq(xmm2, xmm3, xmm4, (byte)0x7F), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU));
		}

		[Fact]
		public void vpcomq_xmm_xmm_m_u() {
			TestAssembler(c => c.vpcomq(xmm2, xmm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vpcomtrueb_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomtrueb(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 7));
		}

		[Fact]
		public void vpcomtrueb_xmm_xmm_m() {
			TestAssembler(c => c.vpcomtrueb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomb_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7));
		}

		[Fact]
		public void vpcomtrued_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomtrued(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 7));
		}

		[Fact]
		public void vpcomtrued_xmm_xmm_m() {
			TestAssembler(c => c.vpcomtrued(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7));
		}

		[Fact]
		public void vpcomtrueq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomtrueq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 7));
		}

		[Fact]
		public void vpcomtrueq_xmm_xmm_m() {
			TestAssembler(c => c.vpcomtrueq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7));
		}

		[Fact]
		public void vpcomtrueub_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomtrueub(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 7));
		}

		[Fact]
		public void vpcomtrueub_xmm_xmm_m() {
			TestAssembler(c => c.vpcomtrueub(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7));
		}

		[Fact]
		public void vpcomtrueud_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomtrueud(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 7));
		}

		[Fact]
		public void vpcomtrueud_xmm_xmm_m() {
			TestAssembler(c => c.vpcomtrueud(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7));
		}

		[Fact]
		public void vpcomtrueuq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomtrueuq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 7));
		}

		[Fact]
		public void vpcomtrueuq_xmm_xmm_m() {
			TestAssembler(c => c.vpcomtrueuq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7));
		}

		[Fact]
		public void vpcomtrueuw_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomtrueuw(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 7));
		}

		[Fact]
		public void vpcomtrueuw_xmm_xmm_m() {
			TestAssembler(c => c.vpcomtrueuw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7));
		}

		[Fact]
		public void vpcomtruew_xmm_xmm_xmm() {
			TestAssembler(c => c.vpcomtruew(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 7));
		}

		[Fact]
		public void vpcomtruew_xmm_xmm_m() {
			TestAssembler(c => c.vpcomtruew(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 7));
		}

		[Fact]
		public void vpcomub_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vpcomub(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5));
		}

		[Fact]
		public void vpcomub_xmm_xmm_m_i() {
			TestAssembler(c => c.vpcomub(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vpcomub_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vpcomub(xmm2, xmm3, xmm4, (byte)0x7F), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU));
		}

		[Fact]
		public void vpcomub_xmm_xmm_m_u() {
			TestAssembler(c => c.vpcomub(xmm2, xmm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.XOP_Vpcomub_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vpcomud_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vpcomud(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5));
		}

		[Fact]
		public void vpcomud_xmm_xmm_m_i() {
			TestAssembler(c => c.vpcomud(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vpcomud_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vpcomud(xmm2, xmm3, xmm4, (byte)0x7F), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU));
		}

		[Fact]
		public void vpcomud_xmm_xmm_m_u() {
			TestAssembler(c => c.vpcomud(xmm2, xmm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.XOP_Vpcomud_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vpcomuq_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vpcomuq(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5));
		}

		[Fact]
		public void vpcomuq_xmm_xmm_m_i() {
			TestAssembler(c => c.vpcomuq(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vpcomuq_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vpcomuq(xmm2, xmm3, xmm4, (byte)0x7F), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU));
		}

		[Fact]
		public void vpcomuq_xmm_xmm_m_u() {
			TestAssembler(c => c.vpcomuq(xmm2, xmm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.XOP_Vpcomuq_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vpcomuw_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vpcomuw(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5));
		}

		[Fact]
		public void vpcomuw_xmm_xmm_m_i() {
			TestAssembler(c => c.vpcomuw(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vpcomuw_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vpcomuw(xmm2, xmm3, xmm4, (byte)0x7F), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU));
		}

		[Fact]
		public void vpcomuw_xmm_xmm_m_u() {
			TestAssembler(c => c.vpcomuw(xmm2, xmm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.XOP_Vpcomuw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vpcomw_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vpcomw(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5));
		}

		[Fact]
		public void vpcomw_xmm_xmm_m_i() {
			TestAssembler(c => c.vpcomw(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vpcomw_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vpcomw(xmm2, xmm3, xmm4, (byte)0x7F), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU));
		}

		[Fact]
		public void vpcomw_xmm_xmm_m_u() {
			TestAssembler(c => c.vpcomw(xmm2, xmm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.XOP_Vpcomw_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vpconflictd_xmm_xmm() {
			TestAssembler(c => c.vpconflictd(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpconflictd_xmm_k1z_xmmm128b32, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpconflictd_ymm_ymm() {
			TestAssembler(c => c.vpconflictd(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpconflictd_ymm_k1z_ymmm256b32, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpconflictd_zmm_zmm() {
			TestAssembler(c => c.vpconflictd(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpconflictd_zmm_k1z_zmmm512b32, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpconflictd_xmm_m() {
			TestAssembler(c => c.vpconflictd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpconflictd_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpconflictd_ymm_m() {
			TestAssembler(c => c.vpconflictd(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpconflictd_ymm_k1z_ymmm256b32, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpconflictd_zmm_m() {
			TestAssembler(c => c.vpconflictd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpconflictd_zmm_k1z_zmmm512b32, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpconflictq_xmm_xmm() {
			TestAssembler(c => c.vpconflictq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpconflictq_xmm_k1z_xmmm128b64, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpconflictq_ymm_ymm() {
			TestAssembler(c => c.vpconflictq(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpconflictq_ymm_k1z_ymmm256b64, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpconflictq_zmm_zmm() {
			TestAssembler(c => c.vpconflictq(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpconflictq_zmm_k1z_zmmm512b64, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpconflictq_xmm_m() {
			TestAssembler(c => c.vpconflictq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpconflictq_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpconflictq_ymm_m() {
			TestAssembler(c => c.vpconflictq(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpconflictq_ymm_k1z_ymmm256b64, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpconflictq_zmm_m() {
			TestAssembler(c => c.vpconflictq(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpconflictq_zmm_k1z_zmmm512b64, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpdpbusd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpdpbusd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpdpbusd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpbusd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpdpbusd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpdpbusd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpdpbusd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpdpbusd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpbusd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpdpbusd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpdpbusd_zmm_zmm_zmm() {
			TestAssembler(c => c.vpdpbusd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpdpbusd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpdpbusd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpdpbusd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpdpbusd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpdpbusd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpdpbusd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpbusd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpdpbusd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpdpbusd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpdpbusd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpdpbusd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpdpbusd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpdpbusd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpbusd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpdpbusd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpdpbusd_zmm_zmm_m() {
			TestAssembler(c => c.vpdpbusd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpdpbusd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpdpbusds_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpdpbusds(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpdpbusds_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpbusds(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpdpbusds_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpdpbusds_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpdpbusds(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpdpbusds_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpbusds(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpdpbusds_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpdpbusds_zmm_zmm_zmm() {
			TestAssembler(c => c.vpdpbusds(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpdpbusds_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpdpbusds_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpdpbusds(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpdpbusds_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpdpbusds(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpdpbusds_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpbusds(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpdpbusds_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpdpbusds_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpdpbusds(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpdpbusds_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpdpbusds(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpdpbusds_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpbusds(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpdpbusds_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpdpbusds_zmm_zmm_m() {
			TestAssembler(c => c.vpdpbusds(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpdpbusds_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpdpwssd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpdpwssd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpdpwssd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpwssd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpdpwssd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpdpwssd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpdpwssd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpdpwssd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpwssd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpdpwssd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpdpwssd_zmm_zmm_zmm() {
			TestAssembler(c => c.vpdpwssd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpdpwssd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpdpwssd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpdpwssd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpdpwssd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpdpwssd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpdpwssd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpwssd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpdpwssd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpdpwssd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpdpwssd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpdpwssd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpdpwssd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpdpwssd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpwssd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpdpwssd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpdpwssd_zmm_zmm_m() {
			TestAssembler(c => c.vpdpwssd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpdpwssd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpdpwssds_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpdpwssds(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpdpwssds_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpwssds(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpdpwssds_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpdpwssds_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpdpwssds(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpdpwssds_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpwssds(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpdpwssds_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpdpwssds_zmm_zmm_zmm() {
			TestAssembler(c => c.vpdpwssds(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpdpwssds_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpdpwssds_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpdpwssds(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpdpwssds_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpdpwssds(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpdpwssds_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpwssds(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpdpwssds_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpdpwssds_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpdpwssds(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpdpwssds_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpdpwssds(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpdpwssds_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpdpwssds(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpdpwssds_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpdpwssds_zmm_zmm_m() {
			TestAssembler(c => c.vpdpwssds(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpdpwssds_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vperm2f128_ymm_ymm_ymm_i() {
			TestAssembler(c => c.vperm2f128(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vperm2f128_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5));
		}

		[Fact]
		public void vperm2f128_ymm_ymm_m_i() {
			TestAssembler(c => c.vperm2f128(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vperm2f128_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vperm2f128_ymm_ymm_ymm_u() {
			TestAssembler(c => c.vperm2f128(ymm2, ymm3, ymm4, (byte)0x7F), Instruction.Create(Code.VEX_Vperm2f128_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU));
		}

		[Fact]
		public void vperm2f128_ymm_ymm_m_u() {
			TestAssembler(c => c.vperm2f128(ymm2, ymm3, __ymmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vperm2f128_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vperm2i128_ymm_ymm_ymm_i() {
			TestAssembler(c => c.vperm2i128(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vperm2i128_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5));
		}

		[Fact]
		public void vperm2i128_ymm_ymm_m_i() {
			TestAssembler(c => c.vperm2i128(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vperm2i128_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vperm2i128_ymm_ymm_ymm_u() {
			TestAssembler(c => c.vperm2i128(ymm2, ymm3, ymm4, (byte)0x7F), Instruction.Create(Code.VEX_Vperm2i128_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU));
		}

		[Fact]
		public void vperm2i128_ymm_ymm_m_u() {
			TestAssembler(c => c.vperm2i128(ymm2, ymm3, __ymmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vperm2i128_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vpermb_xmm_xmm_xmm() {
			TestAssembler(c => c.vpermb(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermb_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpermb_ymm_ymm_ymm() {
			TestAssembler(c => c.vpermb(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpermb_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpermb_zmm_zmm_zmm() {
			TestAssembler(c => c.vpermb(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermb_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpermb_xmm_xmm_m() {
			TestAssembler(c => c.vpermb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermb_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermb_ymm_ymm_m() {
			TestAssembler(c => c.vpermb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermb_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermb_zmm_zmm_m() {
			TestAssembler(c => c.vpermb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermb_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpermd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpermd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermd_zmm_zmm_zmm() {
			TestAssembler(c => c.vpermd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpermd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpermd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpermd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpermd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermd_zmm_zmm_m() {
			TestAssembler(c => c.vpermd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermi2b_xmm_xmm_xmm() {
			TestAssembler(c => c.vpermi2b(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermi2b_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpermi2b_ymm_ymm_ymm() {
			TestAssembler(c => c.vpermi2b(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpermi2b_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpermi2b_zmm_zmm_zmm() {
			TestAssembler(c => c.vpermi2b(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermi2b_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpermi2b_xmm_xmm_m() {
			TestAssembler(c => c.vpermi2b(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermi2b_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermi2b_ymm_ymm_m() {
			TestAssembler(c => c.vpermi2b(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermi2b_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermi2b_zmm_zmm_m() {
			TestAssembler(c => c.vpermi2b(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermi2b_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermi2d_xmm_xmm_xmm() {
			TestAssembler(c => c.vpermi2d(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermi2d_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpermi2d_ymm_ymm_ymm() {
			TestAssembler(c => c.vpermi2d(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpermi2d_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpermi2d_zmm_zmm_zmm() {
			TestAssembler(c => c.vpermi2d(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermi2d_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpermi2d_xmm_xmm_m() {
			TestAssembler(c => c.vpermi2d(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermi2d_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermi2d_ymm_ymm_m() {
			TestAssembler(c => c.vpermi2d(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermi2d_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermi2d_zmm_zmm_m() {
			TestAssembler(c => c.vpermi2d(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermi2d_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermi2pd_xmm_xmm_xmm() {
			TestAssembler(c => c.vpermi2pd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermi2pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpermi2pd_ymm_ymm_ymm() {
			TestAssembler(c => c.vpermi2pd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpermi2pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpermi2pd_zmm_zmm_zmm() {
			TestAssembler(c => c.vpermi2pd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermi2pd_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpermi2pd_xmm_xmm_m() {
			TestAssembler(c => c.vpermi2pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermi2pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermi2pd_ymm_ymm_m() {
			TestAssembler(c => c.vpermi2pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermi2pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermi2pd_zmm_zmm_m() {
			TestAssembler(c => c.vpermi2pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermi2pd_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermi2ps_xmm_xmm_xmm() {
			TestAssembler(c => c.vpermi2ps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermi2ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpermi2ps_ymm_ymm_ymm() {
			TestAssembler(c => c.vpermi2ps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpermi2ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpermi2ps_zmm_zmm_zmm() {
			TestAssembler(c => c.vpermi2ps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermi2ps_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpermi2ps_xmm_xmm_m() {
			TestAssembler(c => c.vpermi2ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermi2ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermi2ps_ymm_ymm_m() {
			TestAssembler(c => c.vpermi2ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermi2ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermi2ps_zmm_zmm_m() {
			TestAssembler(c => c.vpermi2ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermi2ps_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermi2q_xmm_xmm_xmm() {
			TestAssembler(c => c.vpermi2q(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermi2q_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpermi2q_ymm_ymm_ymm() {
			TestAssembler(c => c.vpermi2q(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpermi2q_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpermi2q_zmm_zmm_zmm() {
			TestAssembler(c => c.vpermi2q(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermi2q_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpermi2q_xmm_xmm_m() {
			TestAssembler(c => c.vpermi2q(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermi2q_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermi2q_ymm_ymm_m() {
			TestAssembler(c => c.vpermi2q(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermi2q_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermi2q_zmm_zmm_m() {
			TestAssembler(c => c.vpermi2q(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermi2q_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermi2w_xmm_xmm_xmm() {
			TestAssembler(c => c.vpermi2w(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermi2w_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpermi2w_ymm_ymm_ymm() {
			TestAssembler(c => c.vpermi2w(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpermi2w_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpermi2w_zmm_zmm_zmm() {
			TestAssembler(c => c.vpermi2w(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermi2w_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpermi2w_xmm_xmm_m() {
			TestAssembler(c => c.vpermi2w(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermi2w_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermi2w_ymm_ymm_m() {
			TestAssembler(c => c.vpermi2w(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermi2w_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermi2w_zmm_zmm_m() {
			TestAssembler(c => c.vpermi2w(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermi2w_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermil2pd_xmm_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vpermil2pd(xmm2, xmm3, xmm4, xmm5, 3), Instruction.Create(Code.VEX_Vpermil2pd_xmm_xmm_xmmm128_xmm_imm4, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5, 3));
		}

		[Fact]
		public void vpermil2pd_xmm_xmm_m_xmm_i() {
			TestAssembler(c => c.vpermil2pd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5, 3), Instruction.Create(Code.VEX_Vpermil2pd_xmm_xmm_xmmm128_xmm_imm4, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5, 3));
		}

		[Fact]
		public void vpermil2pd_ymm_ymm_ymm_ymm_i() {
			TestAssembler(c => c.vpermil2pd(ymm2, ymm3, ymm4, ymm5, 3), Instruction.Create(Code.VEX_Vpermil2pd_ymm_ymm_ymmm256_ymm_imm4, Register.YMM2, Register.YMM3, Register.YMM4, Register.YMM5, 3));
		}

		[Fact]
		public void vpermil2pd_ymm_ymm_m_ymm_i() {
			TestAssembler(c => c.vpermil2pd(ymm2, ymm3, __ymmword_ptr[rcx], ymm5, 3), Instruction.Create(Code.VEX_Vpermil2pd_ymm_ymm_ymmm256_ymm_imm4, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM5, 3));
		}

		[Fact]
		public void vpermil2pd_xmm_xmm_xmm_m_i() {
			TestAssembler(c => c.vpermil2pd(xmm2, xmm3, xmm4, __xmmword_ptr[rcx], 3), Instruction.Create(Code.VEX_Vpermil2pd_xmm_xmm_xmm_xmmm128_imm4, Register.XMM2, Register.XMM3, Register.XMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3));
		}

		[Fact]
		public void vpermil2pd_ymm_ymm_ymm_m_i() {
			TestAssembler(c => c.vpermil2pd(ymm2, ymm3, ymm4, __ymmword_ptr[rcx], 3), Instruction.Create(Code.VEX_Vpermil2pd_ymm_ymm_ymm_ymmm256_imm4, Register.YMM2, Register.YMM3, Register.YMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3));
		}

		[Fact]
		public void vpermil2pd_xmm_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vpermil2pd(xmm2, xmm3, xmm4, xmm5, (byte)3), Instruction.Create(Code.VEX_Vpermil2pd_xmm_xmm_xmmm128_xmm_imm4, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5, 3U));
		}

		[Fact]
		public void vpermil2pd_xmm_xmm_m_xmm_u() {
			TestAssembler(c => c.vpermil2pd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5, (byte)3), Instruction.Create(Code.VEX_Vpermil2pd_xmm_xmm_xmmm128_xmm_imm4, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5, 3U));
		}

		[Fact]
		public void vpermil2pd_ymm_ymm_ymm_ymm_u() {
			TestAssembler(c => c.vpermil2pd(ymm2, ymm3, ymm4, ymm5, (byte)3), Instruction.Create(Code.VEX_Vpermil2pd_ymm_ymm_ymmm256_ymm_imm4, Register.YMM2, Register.YMM3, Register.YMM4, Register.YMM5, 3U));
		}

		[Fact]
		public void vpermil2pd_ymm_ymm_m_ymm_u() {
			TestAssembler(c => c.vpermil2pd(ymm2, ymm3, __ymmword_ptr[rcx], ymm5, (byte)3), Instruction.Create(Code.VEX_Vpermil2pd_ymm_ymm_ymmm256_ymm_imm4, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM5, 3U));
		}

		[Fact]
		public void vpermil2pd_xmm_xmm_xmm_m_u() {
			TestAssembler(c => c.vpermil2pd(xmm2, xmm3, xmm4, __xmmword_ptr[rcx], (byte)3), Instruction.Create(Code.VEX_Vpermil2pd_xmm_xmm_xmm_xmmm128_imm4, Register.XMM2, Register.XMM3, Register.XMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3U));
		}

		[Fact]
		public void vpermil2pd_ymm_ymm_ymm_m_u() {
			TestAssembler(c => c.vpermil2pd(ymm2, ymm3, ymm4, __ymmword_ptr[rcx], (byte)3), Instruction.Create(Code.VEX_Vpermil2pd_ymm_ymm_ymm_ymmm256_imm4, Register.YMM2, Register.YMM3, Register.YMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3U));
		}

		[Fact]
		public void vpermil2ps_xmm_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vpermil2ps(xmm2, xmm3, xmm4, xmm5, 3), Instruction.Create(Code.VEX_Vpermil2ps_xmm_xmm_xmmm128_xmm_imm4, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5, 3));
		}

		[Fact]
		public void vpermil2ps_xmm_xmm_m_xmm_i() {
			TestAssembler(c => c.vpermil2ps(xmm2, xmm3, __xmmword_ptr[rcx], xmm5, 3), Instruction.Create(Code.VEX_Vpermil2ps_xmm_xmm_xmmm128_xmm_imm4, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5, 3));
		}

		[Fact]
		public void vpermil2ps_ymm_ymm_ymm_ymm_i() {
			TestAssembler(c => c.vpermil2ps(ymm2, ymm3, ymm4, ymm5, 3), Instruction.Create(Code.VEX_Vpermil2ps_ymm_ymm_ymmm256_ymm_imm4, Register.YMM2, Register.YMM3, Register.YMM4, Register.YMM5, 3));
		}

		[Fact]
		public void vpermil2ps_ymm_ymm_m_ymm_i() {
			TestAssembler(c => c.vpermil2ps(ymm2, ymm3, __ymmword_ptr[rcx], ymm5, 3), Instruction.Create(Code.VEX_Vpermil2ps_ymm_ymm_ymmm256_ymm_imm4, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM5, 3));
		}

		[Fact]
		public void vpermil2ps_xmm_xmm_xmm_m_i() {
			TestAssembler(c => c.vpermil2ps(xmm2, xmm3, xmm4, __xmmword_ptr[rcx], 3), Instruction.Create(Code.VEX_Vpermil2ps_xmm_xmm_xmm_xmmm128_imm4, Register.XMM2, Register.XMM3, Register.XMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3));
		}

		[Fact]
		public void vpermil2ps_ymm_ymm_ymm_m_i() {
			TestAssembler(c => c.vpermil2ps(ymm2, ymm3, ymm4, __ymmword_ptr[rcx], 3), Instruction.Create(Code.VEX_Vpermil2ps_ymm_ymm_ymm_ymmm256_imm4, Register.YMM2, Register.YMM3, Register.YMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3));
		}

		[Fact]
		public void vpermil2ps_xmm_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vpermil2ps(xmm2, xmm3, xmm4, xmm5, (byte)3), Instruction.Create(Code.VEX_Vpermil2ps_xmm_xmm_xmmm128_xmm_imm4, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5, 3U));
		}

		[Fact]
		public void vpermil2ps_xmm_xmm_m_xmm_u() {
			TestAssembler(c => c.vpermil2ps(xmm2, xmm3, __xmmword_ptr[rcx], xmm5, (byte)3), Instruction.Create(Code.VEX_Vpermil2ps_xmm_xmm_xmmm128_xmm_imm4, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5, 3U));
		}

		[Fact]
		public void vpermil2ps_ymm_ymm_ymm_ymm_u() {
			TestAssembler(c => c.vpermil2ps(ymm2, ymm3, ymm4, ymm5, (byte)3), Instruction.Create(Code.VEX_Vpermil2ps_ymm_ymm_ymmm256_ymm_imm4, Register.YMM2, Register.YMM3, Register.YMM4, Register.YMM5, 3U));
		}

		[Fact]
		public void vpermil2ps_ymm_ymm_m_ymm_u() {
			TestAssembler(c => c.vpermil2ps(ymm2, ymm3, __ymmword_ptr[rcx], ymm5, (byte)3), Instruction.Create(Code.VEX_Vpermil2ps_ymm_ymm_ymmm256_ymm_imm4, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM5, 3U));
		}

		[Fact]
		public void vpermil2ps_xmm_xmm_xmm_m_u() {
			TestAssembler(c => c.vpermil2ps(xmm2, xmm3, xmm4, __xmmword_ptr[rcx], (byte)3), Instruction.Create(Code.VEX_Vpermil2ps_xmm_xmm_xmm_xmmm128_imm4, Register.XMM2, Register.XMM3, Register.XMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3U));
		}

		[Fact]
		public void vpermil2ps_ymm_ymm_ymm_m_u() {
			TestAssembler(c => c.vpermil2ps(ymm2, ymm3, ymm4, __ymmword_ptr[rcx], (byte)3), Instruction.Create(Code.VEX_Vpermil2ps_ymm_ymm_ymm_ymmm256_imm4, Register.YMM2, Register.YMM3, Register.YMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 3U));
		}

		[Fact]
		public void vpermilpd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermilpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpermilpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilpd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermilpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermilpd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermilpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpermilpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilpd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpermilpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermilpd_zmm_zmm_zmm() {
			TestAssembler(c => c.vpermilpd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermilpd_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpermilpd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpermilpd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpermilpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermilpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpermilpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilpd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermilpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermilpd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpermilpd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpermilpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermilpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpermilpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermilpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermilpd_zmm_zmm_m() {
			TestAssembler(c => c.vpermilpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermilpd_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermilpd_xmm_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermilpd(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpermilpd_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilpd(xmm2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8, Register.XMM2, Register.XMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermilpd_ymm_ymm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermilpd(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpermilpd_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilpd(ymm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8, Register.YMM2, Register.YMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermilpd_zmm_zmm_i() {
			TestAssembler(c => c.vpermilpd(zmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpermilpd_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vpermilpd_xmm_m_i() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpermilpd(xmm2.k1, __dword_bcst[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermilpd(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpermilpd_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilpd(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermilpd_ymm_m_i() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpermilpd(ymm2.k1, __dword_bcst[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8, Register.YMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermilpd(ymm2, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpermilpd_ymm_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilpd(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermilpd_zmm_m_i() {
			TestAssembler(c => c.vpermilpd(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpermilpd_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpermilpd_xmm_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermilpd(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpermilpd_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilpd(xmm2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8, Register.XMM2, Register.XMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermilpd_ymm_ymm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermilpd(ymm2, ymm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpermilpd_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilpd(ymm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8, Register.YMM2, Register.YMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermilpd_zmm_zmm_u() {
			TestAssembler(c => c.vpermilpd(zmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpermilpd_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpermilpd_xmm_m_u() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpermilpd(xmm2.k1, __dword_bcst[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermilpd(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vpermilpd_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilpd(xmm2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpermilpd_xmm_k1z_xmmm128b64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermilpd_ymm_m_u() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpermilpd(ymm2.k1, __dword_bcst[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8, Register.YMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermilpd(ymm2, __ymmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vpermilpd_ymm_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilpd(ymm2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpermilpd_ymm_k1z_ymmm256b64_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermilpd_zmm_m_u() {
			TestAssembler(c => c.vpermilpd(zmm2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpermilpd_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpermilps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermilps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpermilps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermilps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermilps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermilps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpermilps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpermilps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermilps_zmm_zmm_zmm() {
			TestAssembler(c => c.vpermilps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermilps_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpermilps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpermilps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpermilps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermilps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpermilps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermilps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermilps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpermilps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpermilps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermilps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpermilps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermilps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermilps_zmm_zmm_m() {
			TestAssembler(c => c.vpermilps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermilps_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermilps_xmm_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermilps(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpermilps_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilps(xmm2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8, Register.XMM2, Register.XMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermilps_ymm_ymm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermilps(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpermilps_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilps(ymm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8, Register.YMM2, Register.YMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermilps_zmm_zmm_i() {
			TestAssembler(c => c.vpermilps(zmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpermilps_zmm_k1z_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vpermilps_xmm_m_i() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpermilps(xmm2.k1, __dword_bcst[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermilps(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpermilps_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilps(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermilps_ymm_m_i() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpermilps(ymm2.k1, __dword_bcst[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8, Register.YMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermilps(ymm2, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpermilps_ymm_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilps(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermilps_zmm_m_i() {
			TestAssembler(c => c.vpermilps(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpermilps_zmm_k1z_zmmm512b32_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpermilps_xmm_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermilps(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpermilps_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilps(xmm2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8, Register.XMM2, Register.XMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermilps_ymm_ymm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermilps(ymm2, ymm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpermilps_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilps(ymm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8, Register.YMM2, Register.YMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermilps_zmm_zmm_u() {
			TestAssembler(c => c.vpermilps(zmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpermilps_zmm_k1z_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpermilps_xmm_m_u() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpermilps(xmm2.k1, __dword_bcst[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermilps(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vpermilps_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilps(xmm2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpermilps_xmm_k1z_xmmm128b32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermilps_ymm_m_u() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpermilps(ymm2.k1, __dword_bcst[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8, Register.YMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermilps(ymm2, __ymmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vpermilps_ymm_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermilps(ymm2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpermilps_ymm_k1z_ymmm256b32_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermilps_zmm_m_u() {
			TestAssembler(c => c.vpermilps(zmm2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpermilps_zmm_k1z_zmmm512b32_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpermpd_ymm_ymm_ymm() {
			TestAssembler(c => c.vpermpd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpermpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpermpd_zmm_zmm_zmm() {
			TestAssembler(c => c.vpermpd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermpd_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpermpd_ymm_ymm_m() {
			TestAssembler(c => c.vpermpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermpd_zmm_zmm_m() {
			TestAssembler(c => c.vpermpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermpd_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermpd_ymm_ymm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermpd(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpermpd_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermpd(ymm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8, Register.YMM2, Register.YMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermpd_zmm_zmm_i() {
			TestAssembler(c => c.vpermpd(zmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpermpd_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vpermpd_ymm_m_i() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpermpd(ymm2.k1, __dword_bcst[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8, Register.YMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermpd(ymm2, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpermpd_ymm_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermpd(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermpd_zmm_m_i() {
			TestAssembler(c => c.vpermpd(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpermpd_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpermpd_ymm_ymm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermpd(ymm2, ymm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpermpd_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermpd(ymm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8, Register.YMM2, Register.YMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermpd_zmm_zmm_u() {
			TestAssembler(c => c.vpermpd(zmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpermpd_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpermpd_ymm_m_u() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpermpd(ymm2.k1, __dword_bcst[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8, Register.YMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermpd(ymm2, __ymmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vpermpd_ymm_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermpd(ymm2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpermpd_ymm_k1z_ymmm256b64_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermpd_zmm_m_u() {
			TestAssembler(c => c.vpermpd(zmm2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpermpd_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpermps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpermps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpermps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermps_zmm_zmm_zmm() {
			TestAssembler(c => c.vpermps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermps_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpermps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpermps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpermps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpermps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermps_zmm_zmm_m() {
			TestAssembler(c => c.vpermps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermps_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermq_ymm_ymm_ymm() {
			TestAssembler(c => c.vpermq(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpermq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpermq_zmm_zmm_zmm() {
			TestAssembler(c => c.vpermq(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpermq_ymm_ymm_m() {
			TestAssembler(c => c.vpermq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermq_zmm_zmm_m() {
			TestAssembler(c => c.vpermq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermq_ymm_ymm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermq(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpermq_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermq(ymm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8, Register.YMM2, Register.YMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermq_zmm_zmm_i() {
			TestAssembler(c => c.vpermq(zmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpermq_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vpermq_ymm_m_i() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpermq(ymm2.k1, __dword_bcst[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8, Register.YMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermq(ymm2, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpermq_ymm_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermq(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermq_zmm_m_i() {
			TestAssembler(c => c.vpermq(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpermq_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpermq_ymm_ymm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermq(ymm2, ymm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpermq_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermq(ymm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8, Register.YMM2, Register.YMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermq_zmm_zmm_u() {
			TestAssembler(c => c.vpermq(zmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpermq_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpermq_ymm_m_u() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpermq(ymm2.k1, __dword_bcst[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8, Register.YMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpermq(ymm2, __ymmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vpermq_ymm_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpermq(ymm2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpermq_ymm_k1z_ymmm256b64_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpermq_zmm_m_u() {
			TestAssembler(c => c.vpermq(zmm2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpermq_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpermt2b_xmm_xmm_xmm() {
			TestAssembler(c => c.vpermt2b(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermt2b_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpermt2b_ymm_ymm_ymm() {
			TestAssembler(c => c.vpermt2b(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpermt2b_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpermt2b_zmm_zmm_zmm() {
			TestAssembler(c => c.vpermt2b(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermt2b_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpermt2b_xmm_xmm_m() {
			TestAssembler(c => c.vpermt2b(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermt2b_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermt2b_ymm_ymm_m() {
			TestAssembler(c => c.vpermt2b(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermt2b_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermt2b_zmm_zmm_m() {
			TestAssembler(c => c.vpermt2b(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermt2b_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermt2d_xmm_xmm_xmm() {
			TestAssembler(c => c.vpermt2d(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermt2d_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpermt2d_ymm_ymm_ymm() {
			TestAssembler(c => c.vpermt2d(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpermt2d_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpermt2d_zmm_zmm_zmm() {
			TestAssembler(c => c.vpermt2d(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermt2d_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpermt2d_xmm_xmm_m() {
			TestAssembler(c => c.vpermt2d(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermt2d_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermt2d_ymm_ymm_m() {
			TestAssembler(c => c.vpermt2d(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermt2d_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermt2d_zmm_zmm_m() {
			TestAssembler(c => c.vpermt2d(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermt2d_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermt2pd_xmm_xmm_xmm() {
			TestAssembler(c => c.vpermt2pd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermt2pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpermt2pd_ymm_ymm_ymm() {
			TestAssembler(c => c.vpermt2pd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpermt2pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpermt2pd_zmm_zmm_zmm() {
			TestAssembler(c => c.vpermt2pd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermt2pd_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpermt2pd_xmm_xmm_m() {
			TestAssembler(c => c.vpermt2pd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermt2pd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermt2pd_ymm_ymm_m() {
			TestAssembler(c => c.vpermt2pd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermt2pd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermt2pd_zmm_zmm_m() {
			TestAssembler(c => c.vpermt2pd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermt2pd_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermt2ps_xmm_xmm_xmm() {
			TestAssembler(c => c.vpermt2ps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermt2ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpermt2ps_ymm_ymm_ymm() {
			TestAssembler(c => c.vpermt2ps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpermt2ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpermt2ps_zmm_zmm_zmm() {
			TestAssembler(c => c.vpermt2ps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermt2ps_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpermt2ps_xmm_xmm_m() {
			TestAssembler(c => c.vpermt2ps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermt2ps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermt2ps_ymm_ymm_m() {
			TestAssembler(c => c.vpermt2ps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermt2ps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermt2ps_zmm_zmm_m() {
			TestAssembler(c => c.vpermt2ps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermt2ps_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermt2q_xmm_xmm_xmm() {
			TestAssembler(c => c.vpermt2q(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermt2q_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpermt2q_ymm_ymm_ymm() {
			TestAssembler(c => c.vpermt2q(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpermt2q_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpermt2q_zmm_zmm_zmm() {
			TestAssembler(c => c.vpermt2q(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermt2q_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpermt2q_xmm_xmm_m() {
			TestAssembler(c => c.vpermt2q(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermt2q_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermt2q_ymm_ymm_m() {
			TestAssembler(c => c.vpermt2q(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermt2q_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermt2q_zmm_zmm_m() {
			TestAssembler(c => c.vpermt2q(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermt2q_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermt2w_xmm_xmm_xmm() {
			TestAssembler(c => c.vpermt2w(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermt2w_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpermt2w_ymm_ymm_ymm() {
			TestAssembler(c => c.vpermt2w(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpermt2w_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpermt2w_zmm_zmm_zmm() {
			TestAssembler(c => c.vpermt2w(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermt2w_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpermt2w_xmm_xmm_m() {
			TestAssembler(c => c.vpermt2w(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermt2w_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermt2w_ymm_ymm_m() {
			TestAssembler(c => c.vpermt2w(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermt2w_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermt2w_zmm_zmm_m() {
			TestAssembler(c => c.vpermt2w(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermt2w_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermw_xmm_xmm_xmm() {
			TestAssembler(c => c.vpermw(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpermw_ymm_ymm_ymm() {
			TestAssembler(c => c.vpermw(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpermw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpermw_zmm_zmm_zmm() {
			TestAssembler(c => c.vpermw(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpermw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpermw_xmm_xmm_m() {
			TestAssembler(c => c.vpermw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermw_ymm_ymm_m() {
			TestAssembler(c => c.vpermw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpermw_zmm_zmm_m() {
			TestAssembler(c => c.vpermw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpermw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpexpandb_xmm_xmm() {
			TestAssembler(c => c.vpexpandb(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpexpandb_xmm_k1z_xmmm128, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpexpandb_ymm_ymm() {
			TestAssembler(c => c.vpexpandb(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpexpandb_ymm_k1z_ymmm256, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpexpandb_zmm_zmm() {
			TestAssembler(c => c.vpexpandb(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpexpandb_zmm_k1z_zmmm512, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpexpandb_xmm_m() {
			TestAssembler(c => c.vpexpandb(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpexpandb_xmm_k1z_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpexpandb_ymm_m() {
			TestAssembler(c => c.vpexpandb(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpexpandb_ymm_k1z_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpexpandb_zmm_m() {
			TestAssembler(c => c.vpexpandb(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpexpandb_zmm_k1z_zmmm512, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpexpandd_xmm_xmm() {
			TestAssembler(c => c.vpexpandd(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpexpandd_xmm_k1z_xmmm128, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpexpandd_ymm_ymm() {
			TestAssembler(c => c.vpexpandd(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpexpandd_ymm_k1z_ymmm256, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpexpandd_zmm_zmm() {
			TestAssembler(c => c.vpexpandd(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpexpandd_zmm_k1z_zmmm512, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpexpandd_xmm_m() {
			TestAssembler(c => c.vpexpandd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpexpandd_xmm_k1z_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpexpandd_ymm_m() {
			TestAssembler(c => c.vpexpandd(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpexpandd_ymm_k1z_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpexpandd_zmm_m() {
			TestAssembler(c => c.vpexpandd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpexpandd_zmm_k1z_zmmm512, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpexpandq_xmm_xmm() {
			TestAssembler(c => c.vpexpandq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpexpandq_xmm_k1z_xmmm128, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpexpandq_ymm_ymm() {
			TestAssembler(c => c.vpexpandq(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpexpandq_ymm_k1z_ymmm256, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpexpandq_zmm_zmm() {
			TestAssembler(c => c.vpexpandq(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpexpandq_zmm_k1z_zmmm512, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpexpandq_xmm_m() {
			TestAssembler(c => c.vpexpandq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpexpandq_xmm_k1z_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpexpandq_ymm_m() {
			TestAssembler(c => c.vpexpandq(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpexpandq_ymm_k1z_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpexpandq_zmm_m() {
			TestAssembler(c => c.vpexpandq(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpexpandq_zmm_k1z_zmmm512, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpexpandw_xmm_xmm() {
			TestAssembler(c => c.vpexpandw(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpexpandw_xmm_k1z_xmmm128, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpexpandw_ymm_ymm() {
			TestAssembler(c => c.vpexpandw(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpexpandw_ymm_k1z_ymmm256, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpexpandw_zmm_zmm() {
			TestAssembler(c => c.vpexpandw(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpexpandw_zmm_k1z_zmmm512, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpexpandw_xmm_m() {
			TestAssembler(c => c.vpexpandw(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpexpandw_xmm_k1z_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpexpandw_ymm_m() {
			TestAssembler(c => c.vpexpandw(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpexpandw_ymm_k1z_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpexpandw_zmm_m() {
			TestAssembler(c => c.vpexpandw(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpexpandw_zmm_k1z_zmmm512, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpextrb_r32_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpextrb(edx, xmm3, -5), Instruction.Create(Code.VEX_Vpextrb_r32m8_xmm_imm8, Register.EDX, Register.XMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrb(edx, xmm3, -5), Instruction.Create(Code.EVEX_Vpextrb_r32m8_xmm_imm8, Register.EDX, Register.XMM3, -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpextrb_r64_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpextrb(rdx, xmm3, -5), Instruction.Create(Code.VEX_Vpextrb_r64m8_xmm_imm8, Register.RDX, Register.XMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrb(rdx, xmm3, -5), Instruction.Create(Code.EVEX_Vpextrb_r64m8_xmm_imm8, Register.RDX, Register.XMM3, -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpextrb_m_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpextrb(__dword_ptr[rcx], xmm3, -5), Instruction.Create(Code.VEX_Vpextrb_r32m8_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrb(__dword_ptr[rcx], xmm3, -5), Instruction.Create(Code.EVEX_Vpextrb_r32m8_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpextrb_r32_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpextrb(edx, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpextrb_r32m8_xmm_imm8, Register.EDX, Register.XMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrb(edx, xmm3, (byte)0x7F), Instruction.Create(Code.EVEX_Vpextrb_r32m8_xmm_imm8, Register.EDX, Register.XMM3, 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpextrb_r64_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpextrb(rdx, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpextrb_r64m8_xmm_imm8, Register.RDX, Register.XMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrb(rdx, xmm3, (byte)0x7F), Instruction.Create(Code.EVEX_Vpextrb_r64m8_xmm_imm8, Register.RDX, Register.XMM3, 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpextrb_m_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpextrb(__dword_ptr[rcx], xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpextrb_r32m8_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrb(__dword_ptr[rcx], xmm3, (byte)0x7F), Instruction.Create(Code.EVEX_Vpextrb_r32m8_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpextrd_r32_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpextrd(edx, xmm3, -5), Instruction.Create(Code.VEX_Vpextrd_rm32_xmm_imm8, Register.EDX, Register.XMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrd(edx, xmm3, -5), Instruction.Create(Code.EVEX_Vpextrd_rm32_xmm_imm8, Register.EDX, Register.XMM3, -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpextrd_m_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpextrd(__dword_ptr[rcx], xmm3, -5), Instruction.Create(Code.VEX_Vpextrd_rm32_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrd(__dword_ptr[rcx], xmm3, -5), Instruction.Create(Code.EVEX_Vpextrd_rm32_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpextrd_r32_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpextrd(edx, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpextrd_rm32_xmm_imm8, Register.EDX, Register.XMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrd(edx, xmm3, (byte)0x7F), Instruction.Create(Code.EVEX_Vpextrd_rm32_xmm_imm8, Register.EDX, Register.XMM3, 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpextrd_m_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpextrd(__dword_ptr[rcx], xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpextrd_rm32_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrd(__dword_ptr[rcx], xmm3, (byte)0x7F), Instruction.Create(Code.EVEX_Vpextrd_rm32_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpextrq_r64_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpextrq(rdx, xmm3, -5), Instruction.Create(Code.VEX_Vpextrq_rm64_xmm_imm8, Register.RDX, Register.XMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrq(rdx, xmm3, -5), Instruction.Create(Code.EVEX_Vpextrq_rm64_xmm_imm8, Register.RDX, Register.XMM3, -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpextrq_m_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpextrq(__qword_ptr[rcx], xmm3, -5), Instruction.Create(Code.VEX_Vpextrq_rm64_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrq(__qword_ptr[rcx], xmm3, -5), Instruction.Create(Code.EVEX_Vpextrq_rm64_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpextrq_r64_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpextrq(rdx, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpextrq_rm64_xmm_imm8, Register.RDX, Register.XMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrq(rdx, xmm3, (byte)0x7F), Instruction.Create(Code.EVEX_Vpextrq_rm64_xmm_imm8, Register.RDX, Register.XMM3, 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpextrq_m_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpextrq(__qword_ptr[rcx], xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpextrq_rm64_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrq(__qword_ptr[rcx], xmm3, (byte)0x7F), Instruction.Create(Code.EVEX_Vpextrq_rm64_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpextrw_r32_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpextrw(edx, xmm3, -5), Instruction.Create(Code.VEX_Vpextrw_r32_xmm_imm8, Register.EDX, Register.XMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrw(edx, xmm3, -5), Instruction.Create(Code.EVEX_Vpextrw_r32_xmm_imm8, Register.EDX, Register.XMM3, -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpextrw_r64_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpextrw(rdx, xmm3, -5), Instruction.Create(Code.VEX_Vpextrw_r64_xmm_imm8, Register.RDX, Register.XMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrw(rdx, xmm3, -5), Instruction.Create(Code.EVEX_Vpextrw_r64_xmm_imm8, Register.RDX, Register.XMM3, -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpextrw_m_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpextrw(__dword_ptr[rcx], xmm3, -5), Instruction.Create(Code.VEX_Vpextrw_r32m16_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrw(__dword_ptr[rcx], xmm3, -5), Instruction.Create(Code.EVEX_Vpextrw_r32m16_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpextrw_r32_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpextrw(edx, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpextrw_r32_xmm_imm8, Register.EDX, Register.XMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrw(edx, xmm3, (byte)0x7F), Instruction.Create(Code.EVEX_Vpextrw_r32_xmm_imm8, Register.EDX, Register.XMM3, 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpextrw_r64_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpextrw(rdx, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpextrw_r64_xmm_imm8, Register.RDX, Register.XMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrw(rdx, xmm3, (byte)0x7F), Instruction.Create(Code.EVEX_Vpextrw_r64_xmm_imm8, Register.RDX, Register.XMM3, 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpextrw_m_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpextrw(__dword_ptr[rcx], xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpextrw_r32m16_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpextrw(__dword_ptr[rcx], xmm3, (byte)0x7F), Instruction.Create(Code.EVEX_Vpextrw_r32m16_xmm_imm8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpgatherdd_xmm_m() {
			TestAssembler(c => c.vpgatherdd(xmm2.k1, __[rdx+xmm3]), ApplyK(Instruction.Create(Code.EVEX_Vpgatherdd_xmm_k1_vm32x, Register.XMM2, new MemoryOperand(Register.RDX, Register.XMM3, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpgatherdd_ymm_m() {
			TestAssembler(c => c.vpgatherdd(ymm2.k1, __[rdx+ymm3]), ApplyK(Instruction.Create(Code.EVEX_Vpgatherdd_ymm_k1_vm32y, Register.YMM2, new MemoryOperand(Register.RDX, Register.YMM3, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpgatherdd_zmm_m() {
			TestAssembler(c => c.vpgatherdd(zmm2.k1, __[rdx+zmm3]), ApplyK(Instruction.Create(Code.EVEX_Vpgatherdd_zmm_k1_vm32z, Register.ZMM2, new MemoryOperand(Register.RDX, Register.ZMM3, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpgatherdd_xmm_m_xmm() {
			TestAssembler(c => c.vpgatherdd(xmm2, __[rdx+xmm3], xmm4), Instruction.Create(Code.VEX_Vpgatherdd_xmm_vm32x_xmm, Register.XMM2, new MemoryOperand(Register.RDX, Register.XMM3, 1, 0x0, 0, false, Register.None), Register.XMM4));
		}

		[Fact]
		public void vpgatherdd_ymm_m_ymm() {
			TestAssembler(c => c.vpgatherdd(ymm2, __[rdx+ymm3], ymm4), Instruction.Create(Code.VEX_Vpgatherdd_ymm_vm32y_ymm, Register.YMM2, new MemoryOperand(Register.RDX, Register.YMM3, 1, 0x0, 0, false, Register.None), Register.YMM4));
		}

		[Fact]
		public void vpgatherdq_xmm_m() {
			TestAssembler(c => c.vpgatherdq(xmm2.k1, __[rdx+xmm3]), ApplyK(Instruction.Create(Code.EVEX_Vpgatherdq_xmm_k1_vm32x, Register.XMM2, new MemoryOperand(Register.RDX, Register.XMM3, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpgatherdq_ymm_m() {
			TestAssembler(c => c.vpgatherdq(ymm2.k1, __[rdx+xmm3]), ApplyK(Instruction.Create(Code.EVEX_Vpgatherdq_ymm_k1_vm32x, Register.YMM2, new MemoryOperand(Register.RDX, Register.XMM3, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpgatherdq_zmm_m() {
			TestAssembler(c => c.vpgatherdq(zmm2.k1, __[rdx+ymm3]), ApplyK(Instruction.Create(Code.EVEX_Vpgatherdq_zmm_k1_vm32y, Register.ZMM2, new MemoryOperand(Register.RDX, Register.YMM3, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpgatherdq_xmm_m_xmm() {
			TestAssembler(c => c.vpgatherdq(xmm2, __[rdx+xmm3], xmm4), Instruction.Create(Code.VEX_Vpgatherdq_xmm_vm32x_xmm, Register.XMM2, new MemoryOperand(Register.RDX, Register.XMM3, 1, 0x0, 0, false, Register.None), Register.XMM4));
		}

		[Fact]
		public void vpgatherdq_ymm_m_ymm() {
			TestAssembler(c => c.vpgatherdq(ymm2, __[rdx+xmm3], ymm4), Instruction.Create(Code.VEX_Vpgatherdq_ymm_vm32x_ymm, Register.YMM2, new MemoryOperand(Register.RDX, Register.XMM3, 1, 0x0, 0, false, Register.None), Register.YMM4));
		}

		[Fact]
		public void vpgatherqd_xmm_m() {
			{ /* if (src.Index.IsXMM()) */
				TestAssembler(c => c.vpgatherqd(xmm2.k1, __[rdx+xmm3]), ApplyK(Instruction.Create(Code.EVEX_Vpgatherqd_xmm_k1_vm64x, Register.XMM2, new MemoryOperand(Register.RDX, Register.XMM3, 1, 0x0, 0, false, Register.None)), Register.K1));
			} /* else */ { /* if (src.Index.IsYMM()) */
				TestAssembler(c => c.vpgatherqd(xmm2.k1, __[rdx+ymm3]), ApplyK(Instruction.Create(Code.EVEX_Vpgatherqd_xmm_k1_vm64y, Register.XMM2, new MemoryOperand(Register.RDX, Register.YMM3, 1, 0x0, 0, false, Register.None)), Register.K1));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.vpgatherqd(xmm2.k1, __[rdx+zmm1]), ApplyK(Instruction.Create(Code.EVEX_Vpgatherqd_xmm_k1_vm64y, Register.XMM2, new MemoryOperand(Register.RDX, Register.ZMM1, 1, 0x0, 0, false, Register.None)), Register.K1));
				});
			}
		}

		[Fact]
		public void vpgatherqd_ymm_m() {
			TestAssembler(c => c.vpgatherqd(ymm2.k1, __[rdx+zmm3]), ApplyK(Instruction.Create(Code.EVEX_Vpgatherqd_ymm_k1_vm64z, Register.YMM2, new MemoryOperand(Register.RDX, Register.ZMM3, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpgatherqd_xmm_m_xmm() {
			{ /* if (src1.Index.IsXMM()) */
				TestAssembler(c => c.vpgatherqd(xmm2, __[rdx+xmm3], xmm4), Instruction.Create(Code.VEX_Vpgatherqd_xmm_vm64x_xmm, Register.XMM2, new MemoryOperand(Register.RDX, Register.XMM3, 1, 0x0, 0, false, Register.None), Register.XMM4));
			} /* else */ { /* if (src1.Index.IsYMM()) */
				TestAssembler(c => c.vpgatherqd(xmm2, __[rdx+ymm3], xmm4), Instruction.Create(Code.VEX_Vpgatherqd_xmm_vm64y_xmm, Register.XMM2, new MemoryOperand(Register.RDX, Register.YMM3, 1, 0x0, 0, false, Register.None), Register.XMM4));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.vpgatherqd(xmm2, __[rdx+zmm1], xmm4), Instruction.Create(Code.VEX_Vpgatherqd_xmm_vm64y_xmm, Register.XMM2, new MemoryOperand(Register.RDX, Register.ZMM1, 1, 0x0, 0, false, Register.None), Register.XMM4));
				});
			}
		}

		[Fact]
		public void vpgatherqq_xmm_m() {
			TestAssembler(c => c.vpgatherqq(xmm2.k1, __[rdx+xmm3]), ApplyK(Instruction.Create(Code.EVEX_Vpgatherqq_xmm_k1_vm64x, Register.XMM2, new MemoryOperand(Register.RDX, Register.XMM3, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpgatherqq_ymm_m() {
			TestAssembler(c => c.vpgatherqq(ymm2.k1, __[rdx+ymm3]), ApplyK(Instruction.Create(Code.EVEX_Vpgatherqq_ymm_k1_vm64y, Register.YMM2, new MemoryOperand(Register.RDX, Register.YMM3, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpgatherqq_zmm_m() {
			TestAssembler(c => c.vpgatherqq(zmm2.k1, __[rdx+zmm3]), ApplyK(Instruction.Create(Code.EVEX_Vpgatherqq_zmm_k1_vm64z, Register.ZMM2, new MemoryOperand(Register.RDX, Register.ZMM3, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpgatherqq_xmm_m_xmm() {
			TestAssembler(c => c.vpgatherqq(xmm2, __[rdx+xmm3], xmm4), Instruction.Create(Code.VEX_Vpgatherqq_xmm_vm64x_xmm, Register.XMM2, new MemoryOperand(Register.RDX, Register.XMM3, 1, 0x0, 0, false, Register.None), Register.XMM4));
		}

		[Fact]
		public void vpgatherqq_ymm_m_ymm() {
			TestAssembler(c => c.vpgatherqq(ymm2, __[rdx+ymm3], ymm4), Instruction.Create(Code.VEX_Vpgatherqq_ymm_vm64y_ymm, Register.YMM2, new MemoryOperand(Register.RDX, Register.YMM3, 1, 0x0, 0, false, Register.None), Register.YMM4));
		}

		[Fact]
		public void vphaddbd_xmm_xmm() {
			TestAssembler(c => c.vphaddbd(xmm2, xmm3), Instruction.Create(Code.XOP_Vphaddbd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vphaddbd_xmm_m() {
			TestAssembler(c => c.vphaddbd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vphaddbd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vphaddbq_xmm_xmm() {
			TestAssembler(c => c.vphaddbq(xmm2, xmm3), Instruction.Create(Code.XOP_Vphaddbq_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vphaddbq_xmm_m() {
			TestAssembler(c => c.vphaddbq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vphaddbq_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vphaddbw_xmm_xmm() {
			TestAssembler(c => c.vphaddbw(xmm2, xmm3), Instruction.Create(Code.XOP_Vphaddbw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vphaddbw_xmm_m() {
			TestAssembler(c => c.vphaddbw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vphaddbw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vphaddd_xmm_xmm_xmm() {
			TestAssembler(c => c.vphaddd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vphaddd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vphaddd_ymm_ymm_ymm() {
			TestAssembler(c => c.vphaddd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vphaddd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vphaddd_xmm_xmm_m() {
			TestAssembler(c => c.vphaddd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vphaddd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vphaddd_ymm_ymm_m() {
			TestAssembler(c => c.vphaddd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vphaddd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vphadddq_xmm_xmm() {
			TestAssembler(c => c.vphadddq(xmm2, xmm3), Instruction.Create(Code.XOP_Vphadddq_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vphadddq_xmm_m() {
			TestAssembler(c => c.vphadddq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vphadddq_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vphaddsw_xmm_xmm_xmm() {
			TestAssembler(c => c.vphaddsw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vphaddsw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vphaddsw_ymm_ymm_ymm() {
			TestAssembler(c => c.vphaddsw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vphaddsw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vphaddsw_xmm_xmm_m() {
			TestAssembler(c => c.vphaddsw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vphaddsw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vphaddsw_ymm_ymm_m() {
			TestAssembler(c => c.vphaddsw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vphaddsw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vphaddubd_xmm_xmm() {
			TestAssembler(c => c.vphaddubd(xmm2, xmm3), Instruction.Create(Code.XOP_Vphaddubd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vphaddubd_xmm_m() {
			TestAssembler(c => c.vphaddubd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vphaddubd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vphaddubq_xmm_xmm() {
			TestAssembler(c => c.vphaddubq(xmm2, xmm3), Instruction.Create(Code.XOP_Vphaddubq_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vphaddubq_xmm_m() {
			TestAssembler(c => c.vphaddubq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vphaddubq_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vphaddubw_xmm_xmm() {
			TestAssembler(c => c.vphaddubw(xmm2, xmm3), Instruction.Create(Code.XOP_Vphaddubw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vphaddubw_xmm_m() {
			TestAssembler(c => c.vphaddubw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vphaddubw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vphaddudq_xmm_xmm() {
			TestAssembler(c => c.vphaddudq(xmm2, xmm3), Instruction.Create(Code.XOP_Vphaddudq_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vphaddudq_xmm_m() {
			TestAssembler(c => c.vphaddudq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vphaddudq_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vphadduwd_xmm_xmm() {
			TestAssembler(c => c.vphadduwd(xmm2, xmm3), Instruction.Create(Code.XOP_Vphadduwd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vphadduwd_xmm_m() {
			TestAssembler(c => c.vphadduwd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vphadduwd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vphadduwq_xmm_xmm() {
			TestAssembler(c => c.vphadduwq(xmm2, xmm3), Instruction.Create(Code.XOP_Vphadduwq_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vphadduwq_xmm_m() {
			TestAssembler(c => c.vphadduwq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vphadduwq_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vphaddw_xmm_xmm_xmm() {
			TestAssembler(c => c.vphaddw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vphaddw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vphaddw_ymm_ymm_ymm() {
			TestAssembler(c => c.vphaddw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vphaddw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vphaddw_xmm_xmm_m() {
			TestAssembler(c => c.vphaddw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vphaddw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vphaddw_ymm_ymm_m() {
			TestAssembler(c => c.vphaddw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vphaddw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vphaddwd_xmm_xmm() {
			TestAssembler(c => c.vphaddwd(xmm2, xmm3), Instruction.Create(Code.XOP_Vphaddwd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vphaddwd_xmm_m() {
			TestAssembler(c => c.vphaddwd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vphaddwd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vphaddwq_xmm_xmm() {
			TestAssembler(c => c.vphaddwq(xmm2, xmm3), Instruction.Create(Code.XOP_Vphaddwq_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vphaddwq_xmm_m() {
			TestAssembler(c => c.vphaddwq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vphaddwq_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vphminposuw_xmm_xmm() {
			TestAssembler(c => c.vphminposuw(xmm2, xmm3), Instruction.Create(Code.VEX_Vphminposuw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vphminposuw_xmm_m() {
			TestAssembler(c => c.vphminposuw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vphminposuw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vphsubbw_xmm_xmm() {
			TestAssembler(c => c.vphsubbw(xmm2, xmm3), Instruction.Create(Code.XOP_Vphsubbw_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vphsubbw_xmm_m() {
			TestAssembler(c => c.vphsubbw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vphsubbw_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vphsubd_xmm_xmm_xmm() {
			TestAssembler(c => c.vphsubd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vphsubd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vphsubd_ymm_ymm_ymm() {
			TestAssembler(c => c.vphsubd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vphsubd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vphsubd_xmm_xmm_m() {
			TestAssembler(c => c.vphsubd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vphsubd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vphsubd_ymm_ymm_m() {
			TestAssembler(c => c.vphsubd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vphsubd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vphsubdq_xmm_xmm() {
			TestAssembler(c => c.vphsubdq(xmm2, xmm3), Instruction.Create(Code.XOP_Vphsubdq_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vphsubdq_xmm_m() {
			TestAssembler(c => c.vphsubdq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vphsubdq_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vphsubsw_xmm_xmm_xmm() {
			TestAssembler(c => c.vphsubsw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vphsubsw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vphsubsw_ymm_ymm_ymm() {
			TestAssembler(c => c.vphsubsw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vphsubsw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vphsubsw_xmm_xmm_m() {
			TestAssembler(c => c.vphsubsw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vphsubsw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vphsubsw_ymm_ymm_m() {
			TestAssembler(c => c.vphsubsw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vphsubsw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vphsubw_xmm_xmm_xmm() {
			TestAssembler(c => c.vphsubw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vphsubw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vphsubw_ymm_ymm_ymm() {
			TestAssembler(c => c.vphsubw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vphsubw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vphsubw_xmm_xmm_m() {
			TestAssembler(c => c.vphsubw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vphsubw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vphsubw_ymm_ymm_m() {
			TestAssembler(c => c.vphsubw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vphsubw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vphsubwd_xmm_xmm() {
			TestAssembler(c => c.vphsubwd(xmm2, xmm3), Instruction.Create(Code.XOP_Vphsubwd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vphsubwd_xmm_m() {
			TestAssembler(c => c.vphsubwd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vphsubwd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpinsrb_xmm_xmm_r32_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpinsrb(xmm2, xmm3, esp, -5), Instruction.Create(Code.VEX_Vpinsrb_xmm_xmm_r32m8_imm8, Register.XMM2, Register.XMM3, Register.ESP, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrb(xmm2, xmm3, esp, -5), Instruction.Create(Code.EVEX_Vpinsrb_xmm_xmm_r32m8_imm8, Register.XMM2, Register.XMM3, Register.ESP, -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpinsrb_xmm_xmm_r64_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpinsrb(xmm2, xmm3, rsp, -5), Instruction.Create(Code.VEX_Vpinsrb_xmm_xmm_r64m8_imm8, Register.XMM2, Register.XMM3, Register.RSP, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrb(xmm2, xmm3, rsp, -5), Instruction.Create(Code.EVEX_Vpinsrb_xmm_xmm_r64m8_imm8, Register.XMM2, Register.XMM3, Register.RSP, -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpinsrb_xmm_xmm_m_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpinsrb(xmm2, xmm3, __dword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpinsrb_xmm_xmm_r32m8_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrb(xmm2, xmm3, __dword_ptr[rcx], -5), Instruction.Create(Code.EVEX_Vpinsrb_xmm_xmm_r32m8_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpinsrb_xmm_xmm_r32_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpinsrb(xmm2, xmm3, esp, (byte)0x7F), Instruction.Create(Code.VEX_Vpinsrb_xmm_xmm_r32m8_imm8, Register.XMM2, Register.XMM3, Register.ESP, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrb(xmm2, xmm3, esp, (byte)0x7F), Instruction.Create(Code.EVEX_Vpinsrb_xmm_xmm_r32m8_imm8, Register.XMM2, Register.XMM3, Register.ESP, 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpinsrb_xmm_xmm_r64_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpinsrb(xmm2, xmm3, rsp, (byte)0x7F), Instruction.Create(Code.VEX_Vpinsrb_xmm_xmm_r64m8_imm8, Register.XMM2, Register.XMM3, Register.RSP, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrb(xmm2, xmm3, rsp, (byte)0x7F), Instruction.Create(Code.EVEX_Vpinsrb_xmm_xmm_r64m8_imm8, Register.XMM2, Register.XMM3, Register.RSP, 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpinsrb_xmm_xmm_m_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpinsrb(xmm2, xmm3, __dword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vpinsrb_xmm_xmm_r32m8_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrb(xmm2, xmm3, __dword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.EVEX_Vpinsrb_xmm_xmm_r32m8_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpinsrd_xmm_xmm_r32_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpinsrd(xmm2, xmm3, esp, -5), Instruction.Create(Code.VEX_Vpinsrd_xmm_xmm_rm32_imm8, Register.XMM2, Register.XMM3, Register.ESP, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrd(xmm2, xmm3, esp, -5), Instruction.Create(Code.EVEX_Vpinsrd_xmm_xmm_rm32_imm8, Register.XMM2, Register.XMM3, Register.ESP, -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpinsrd_xmm_xmm_m_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpinsrd(xmm2, xmm3, __dword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpinsrd_xmm_xmm_rm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrd(xmm2, xmm3, __dword_ptr[rcx], -5), Instruction.Create(Code.EVEX_Vpinsrd_xmm_xmm_rm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpinsrd_xmm_xmm_r32_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpinsrd(xmm2, xmm3, esp, (byte)0x7F), Instruction.Create(Code.VEX_Vpinsrd_xmm_xmm_rm32_imm8, Register.XMM2, Register.XMM3, Register.ESP, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrd(xmm2, xmm3, esp, (byte)0x7F), Instruction.Create(Code.EVEX_Vpinsrd_xmm_xmm_rm32_imm8, Register.XMM2, Register.XMM3, Register.ESP, 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpinsrd_xmm_xmm_m_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpinsrd(xmm2, xmm3, __dword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vpinsrd_xmm_xmm_rm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrd(xmm2, xmm3, __dword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.EVEX_Vpinsrd_xmm_xmm_rm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpinsrq_xmm_xmm_r64_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpinsrq(xmm2, xmm3, rsp, -5), Instruction.Create(Code.VEX_Vpinsrq_xmm_xmm_rm64_imm8, Register.XMM2, Register.XMM3, Register.RSP, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrq(xmm2, xmm3, rsp, -5), Instruction.Create(Code.EVEX_Vpinsrq_xmm_xmm_rm64_imm8, Register.XMM2, Register.XMM3, Register.RSP, -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpinsrq_xmm_xmm_m_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpinsrq(xmm2, xmm3, __qword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpinsrq_xmm_xmm_rm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrq(xmm2, xmm3, __qword_ptr[rcx], -5), Instruction.Create(Code.EVEX_Vpinsrq_xmm_xmm_rm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpinsrq_xmm_xmm_r64_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpinsrq(xmm2, xmm3, rsp, (byte)0x7F), Instruction.Create(Code.VEX_Vpinsrq_xmm_xmm_rm64_imm8, Register.XMM2, Register.XMM3, Register.RSP, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrq(xmm2, xmm3, rsp, (byte)0x7F), Instruction.Create(Code.EVEX_Vpinsrq_xmm_xmm_rm64_imm8, Register.XMM2, Register.XMM3, Register.RSP, 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpinsrq_xmm_xmm_m_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpinsrq(xmm2, xmm3, __qword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vpinsrq_xmm_xmm_rm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrq(xmm2, xmm3, __qword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.EVEX_Vpinsrq_xmm_xmm_rm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpinsrw_xmm_xmm_r32_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpinsrw(xmm2, xmm3, esp, -5), Instruction.Create(Code.VEX_Vpinsrw_xmm_xmm_r32m16_imm8, Register.XMM2, Register.XMM3, Register.ESP, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrw(xmm2, xmm3, esp, -5), Instruction.Create(Code.EVEX_Vpinsrw_xmm_xmm_r32m16_imm8, Register.XMM2, Register.XMM3, Register.ESP, -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpinsrw_xmm_xmm_r64_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpinsrw(xmm2, xmm3, rsp, -5), Instruction.Create(Code.VEX_Vpinsrw_xmm_xmm_r64m16_imm8, Register.XMM2, Register.XMM3, Register.RSP, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrw(xmm2, xmm3, rsp, -5), Instruction.Create(Code.EVEX_Vpinsrw_xmm_xmm_r64m16_imm8, Register.XMM2, Register.XMM3, Register.RSP, -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpinsrw_xmm_xmm_m_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpinsrw(xmm2, xmm3, __dword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpinsrw_xmm_xmm_r32m16_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrw(xmm2, xmm3, __dword_ptr[rcx], -5), Instruction.Create(Code.EVEX_Vpinsrw_xmm_xmm_r32m16_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpinsrw_xmm_xmm_r32_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpinsrw(xmm2, xmm3, esp, (byte)0x7F), Instruction.Create(Code.VEX_Vpinsrw_xmm_xmm_r32m16_imm8, Register.XMM2, Register.XMM3, Register.ESP, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrw(xmm2, xmm3, esp, (byte)0x7F), Instruction.Create(Code.EVEX_Vpinsrw_xmm_xmm_r32m16_imm8, Register.XMM2, Register.XMM3, Register.ESP, 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpinsrw_xmm_xmm_r64_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpinsrw(xmm2, xmm3, rsp, (byte)0x7F), Instruction.Create(Code.VEX_Vpinsrw_xmm_xmm_r64m16_imm8, Register.XMM2, Register.XMM3, Register.RSP, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrw(xmm2, xmm3, rsp, (byte)0x7F), Instruction.Create(Code.EVEX_Vpinsrw_xmm_xmm_r64m16_imm8, Register.XMM2, Register.XMM3, Register.RSP, 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpinsrw_xmm_xmm_m_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpinsrw(xmm2, xmm3, __dword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vpinsrw_xmm_xmm_r32m16_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpinsrw(xmm2, xmm3, __dword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.EVEX_Vpinsrw_xmm_xmm_r32m16_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vplzcntd_xmm_xmm() {
			TestAssembler(c => c.vplzcntd(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vplzcntd_xmm_k1z_xmmm128b32, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vplzcntd_ymm_ymm() {
			TestAssembler(c => c.vplzcntd(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vplzcntd_ymm_k1z_ymmm256b32, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vplzcntd_zmm_zmm() {
			TestAssembler(c => c.vplzcntd(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vplzcntd_zmm_k1z_zmmm512b32, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vplzcntd_xmm_m() {
			TestAssembler(c => c.vplzcntd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vplzcntd_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vplzcntd_ymm_m() {
			TestAssembler(c => c.vplzcntd(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vplzcntd_ymm_k1z_ymmm256b32, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vplzcntd_zmm_m() {
			TestAssembler(c => c.vplzcntd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vplzcntd_zmm_k1z_zmmm512b32, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vplzcntq_xmm_xmm() {
			TestAssembler(c => c.vplzcntq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vplzcntq_xmm_k1z_xmmm128b64, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vplzcntq_ymm_ymm() {
			TestAssembler(c => c.vplzcntq(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vplzcntq_ymm_k1z_ymmm256b64, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vplzcntq_zmm_zmm() {
			TestAssembler(c => c.vplzcntq(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vplzcntq_zmm_k1z_zmmm512b64, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vplzcntq_xmm_m() {
			TestAssembler(c => c.vplzcntq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vplzcntq_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vplzcntq_ymm_m() {
			TestAssembler(c => c.vplzcntq(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vplzcntq_ymm_k1z_ymmm256b64, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vplzcntq_zmm_m() {
			TestAssembler(c => c.vplzcntq(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vplzcntq_zmm_k1z_zmmm512b64, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmacsdd_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vpmacsdd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.XOP_Vpmacsdd_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vpmacsdd_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vpmacsdd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.XOP_Vpmacsdd_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vpmacsdqh_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vpmacsdqh(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.XOP_Vpmacsdqh_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vpmacsdqh_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vpmacsdqh(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.XOP_Vpmacsdqh_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vpmacsdql_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vpmacsdql(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.XOP_Vpmacsdql_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vpmacsdql_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vpmacsdql(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.XOP_Vpmacsdql_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vpmacssdd_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vpmacssdd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.XOP_Vpmacssdd_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vpmacssdd_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vpmacssdd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.XOP_Vpmacssdd_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vpmacssdqh_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vpmacssdqh(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.XOP_Vpmacssdqh_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vpmacssdqh_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vpmacssdqh(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.XOP_Vpmacssdqh_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vpmacssdql_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vpmacssdql(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.XOP_Vpmacssdql_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vpmacssdql_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vpmacssdql(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.XOP_Vpmacssdql_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vpmacsswd_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vpmacsswd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.XOP_Vpmacsswd_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vpmacsswd_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vpmacsswd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.XOP_Vpmacsswd_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vpmacssww_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vpmacssww(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.XOP_Vpmacssww_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vpmacssww_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vpmacssww(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.XOP_Vpmacssww_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vpmacswd_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vpmacswd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.XOP_Vpmacswd_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vpmacswd_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vpmacswd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.XOP_Vpmacswd_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vpmacsww_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vpmacsww(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.XOP_Vpmacsww_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vpmacsww_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vpmacsww(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.XOP_Vpmacsww_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vpmadcsswd_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vpmadcsswd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.XOP_Vpmadcsswd_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vpmadcsswd_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vpmadcsswd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.XOP_Vpmadcsswd_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vpmadcswd_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vpmadcswd(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.XOP_Vpmadcswd_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vpmadcswd_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vpmadcswd(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.XOP_Vpmadcswd_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vpmadd52huq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpmadd52huq(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmadd52huq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpmadd52huq_ymm_ymm_ymm() {
			TestAssembler(c => c.vpmadd52huq(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpmadd52huq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpmadd52huq_zmm_zmm_zmm() {
			TestAssembler(c => c.vpmadd52huq(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmadd52huq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpmadd52huq_xmm_xmm_m() {
			TestAssembler(c => c.vpmadd52huq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmadd52huq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmadd52huq_ymm_ymm_m() {
			TestAssembler(c => c.vpmadd52huq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmadd52huq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmadd52huq_zmm_zmm_m() {
			TestAssembler(c => c.vpmadd52huq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmadd52huq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmadd52luq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpmadd52luq(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmadd52luq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpmadd52luq_ymm_ymm_ymm() {
			TestAssembler(c => c.vpmadd52luq(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpmadd52luq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpmadd52luq_zmm_zmm_zmm() {
			TestAssembler(c => c.vpmadd52luq(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmadd52luq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpmadd52luq_xmm_xmm_m() {
			TestAssembler(c => c.vpmadd52luq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmadd52luq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmadd52luq_ymm_ymm_m() {
			TestAssembler(c => c.vpmadd52luq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmadd52luq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmadd52luq_zmm_zmm_m() {
			TestAssembler(c => c.vpmadd52luq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmadd52luq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmaddubsw_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaddubsw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpmaddubsw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaddubsw(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmaddubsw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaddubsw_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaddubsw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpmaddubsw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaddubsw(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpmaddubsw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaddubsw_zmm_zmm_zmm() {
			TestAssembler(c => c.vpmaddubsw(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmaddubsw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpmaddubsw_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaddubsw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaddubsw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaddubsw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaddubsw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaddubsw_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaddubsw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaddubsw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaddubsw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaddubsw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaddubsw_zmm_zmm_m() {
			TestAssembler(c => c.vpmaddubsw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaddubsw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmaddwd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaddwd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpmaddwd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaddwd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmaddwd_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaddwd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaddwd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpmaddwd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaddwd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpmaddwd_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaddwd_zmm_zmm_zmm() {
			TestAssembler(c => c.vpmaddwd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmaddwd_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpmaddwd_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaddwd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaddwd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaddwd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaddwd_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaddwd_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaddwd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaddwd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaddwd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaddwd_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaddwd_zmm_zmm_m() {
			TestAssembler(c => c.vpmaddwd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaddwd_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmaskmovd_m_xmm_xmm() {
			TestAssembler(c => c.vpmaskmovd(__[rcx], xmm3, xmm4), Instruction.Create(Code.VEX_Vpmaskmovd_m128_xmm_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vpmaskmovd_m_ymm_ymm() {
			TestAssembler(c => c.vpmaskmovd(__[rcx], ymm3, ymm4), Instruction.Create(Code.VEX_Vpmaskmovd_m256_ymm_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vpmaskmovd_xmm_xmm_m() {
			TestAssembler(c => c.vpmaskmovd(xmm2, xmm3, __[rcx]), Instruction.Create(Code.VEX_Vpmaskmovd_xmm_xmm_m128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpmaskmovd_ymm_ymm_m() {
			TestAssembler(c => c.vpmaskmovd(ymm2, ymm3, __[rcx]), Instruction.Create(Code.VEX_Vpmaskmovd_ymm_ymm_m256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpmaskmovq_m_xmm_xmm() {
			TestAssembler(c => c.vpmaskmovq(__[rcx], xmm3, xmm4), Instruction.Create(Code.VEX_Vpmaskmovq_m128_xmm_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vpmaskmovq_m_ymm_ymm() {
			TestAssembler(c => c.vpmaskmovq(__[rcx], ymm3, ymm4), Instruction.Create(Code.VEX_Vpmaskmovq_m256_ymm_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vpmaskmovq_xmm_xmm_m() {
			TestAssembler(c => c.vpmaskmovq(xmm2, xmm3, __[rcx]), Instruction.Create(Code.VEX_Vpmaskmovq_xmm_xmm_m128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpmaskmovq_ymm_ymm_m() {
			TestAssembler(c => c.vpmaskmovq(ymm2, ymm3, __[rcx]), Instruction.Create(Code.VEX_Vpmaskmovq_ymm_ymm_m256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpmaxsb_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaxsb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpmaxsb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxsb(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmaxsb_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaxsb_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaxsb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpmaxsb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxsb(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpmaxsb_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaxsb_zmm_zmm_zmm() {
			TestAssembler(c => c.vpmaxsb(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmaxsb_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpmaxsb_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaxsb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaxsb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxsb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaxsb_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaxsb_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaxsb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaxsb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxsb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaxsb_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaxsb_zmm_zmm_m() {
			TestAssembler(c => c.vpmaxsb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaxsb_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmaxsd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaxsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpmaxsd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxsd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmaxsd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaxsd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaxsd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpmaxsd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxsd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpmaxsd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaxsd_zmm_zmm_zmm() {
			TestAssembler(c => c.vpmaxsd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmaxsd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpmaxsd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpmaxsd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaxsd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaxsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaxsd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxsd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaxsd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaxsd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpmaxsd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaxsd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaxsd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaxsd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxsd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaxsd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaxsd_zmm_zmm_m() {
			TestAssembler(c => c.vpmaxsd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaxsd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmaxsq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpmaxsq(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmaxsq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpmaxsq_ymm_ymm_ymm() {
			TestAssembler(c => c.vpmaxsq(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpmaxsq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpmaxsq_zmm_zmm_zmm() {
			TestAssembler(c => c.vpmaxsq(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmaxsq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpmaxsq_xmm_xmm_m() {
			TestAssembler(c => c.vpmaxsq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaxsq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmaxsq_ymm_ymm_m() {
			TestAssembler(c => c.vpmaxsq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaxsq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmaxsq_zmm_zmm_m() {
			TestAssembler(c => c.vpmaxsq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaxsq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmaxsw_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaxsw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpmaxsw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxsw(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmaxsw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaxsw_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaxsw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpmaxsw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxsw(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpmaxsw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaxsw_zmm_zmm_zmm() {
			TestAssembler(c => c.vpmaxsw(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmaxsw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpmaxsw_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaxsw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaxsw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxsw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaxsw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaxsw_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaxsw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaxsw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxsw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaxsw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaxsw_zmm_zmm_m() {
			TestAssembler(c => c.vpmaxsw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaxsw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmaxub_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaxub(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpmaxub_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxub(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmaxub_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaxub_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaxub(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpmaxub_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxub(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpmaxub_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaxub_zmm_zmm_zmm() {
			TestAssembler(c => c.vpmaxub(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmaxub_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpmaxub_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaxub(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaxub_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxub(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaxub_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaxub_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaxub(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaxub_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxub(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaxub_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaxub_zmm_zmm_m() {
			TestAssembler(c => c.vpmaxub(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaxub_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmaxud_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaxud(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpmaxud_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxud(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmaxud_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaxud_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaxud(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpmaxud_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxud(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpmaxud_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaxud_zmm_zmm_zmm() {
			TestAssembler(c => c.vpmaxud(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmaxud_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpmaxud_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpmaxud(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaxud_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaxud(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaxud_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxud(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaxud_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaxud_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpmaxud(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaxud_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaxud(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaxud_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxud(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaxud_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaxud_zmm_zmm_m() {
			TestAssembler(c => c.vpmaxud(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaxud_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmaxuq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpmaxuq(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmaxuq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpmaxuq_ymm_ymm_ymm() {
			TestAssembler(c => c.vpmaxuq(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpmaxuq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpmaxuq_zmm_zmm_zmm() {
			TestAssembler(c => c.vpmaxuq(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmaxuq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpmaxuq_xmm_xmm_m() {
			TestAssembler(c => c.vpmaxuq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaxuq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmaxuq_ymm_ymm_m() {
			TestAssembler(c => c.vpmaxuq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaxuq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmaxuq_zmm_zmm_m() {
			TestAssembler(c => c.vpmaxuq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaxuq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmaxuw_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaxuw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpmaxuw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxuw(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmaxuw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaxuw_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaxuw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpmaxuw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxuw(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpmaxuw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaxuw_zmm_zmm_zmm() {
			TestAssembler(c => c.vpmaxuw(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmaxuw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpmaxuw_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaxuw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaxuw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxuw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaxuw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaxuw_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmaxuw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmaxuw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmaxuw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaxuw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmaxuw_zmm_zmm_m() {
			TestAssembler(c => c.vpmaxuw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmaxuw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpminsb_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpminsb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpminsb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminsb(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpminsb_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpminsb_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpminsb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpminsb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminsb(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpminsb_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpminsb_zmm_zmm_zmm() {
			TestAssembler(c => c.vpminsb(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpminsb_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpminsb_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpminsb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpminsb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminsb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpminsb_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpminsb_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpminsb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpminsb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminsb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpminsb_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpminsb_zmm_zmm_m() {
			TestAssembler(c => c.vpminsb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpminsb_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpminsd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpminsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpminsd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminsd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpminsd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpminsd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpminsd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpminsd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminsd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpminsd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpminsd_zmm_zmm_zmm() {
			TestAssembler(c => c.vpminsd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpminsd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpminsd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpminsd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpminsd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpminsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpminsd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminsd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpminsd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpminsd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpminsd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpminsd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpminsd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpminsd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminsd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpminsd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpminsd_zmm_zmm_m() {
			TestAssembler(c => c.vpminsd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpminsd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpminsq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpminsq(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpminsq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpminsq_ymm_ymm_ymm() {
			TestAssembler(c => c.vpminsq(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpminsq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpminsq_zmm_zmm_zmm() {
			TestAssembler(c => c.vpminsq(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpminsq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpminsq_xmm_xmm_m() {
			TestAssembler(c => c.vpminsq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpminsq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpminsq_ymm_ymm_m() {
			TestAssembler(c => c.vpminsq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpminsq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpminsq_zmm_zmm_m() {
			TestAssembler(c => c.vpminsq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpminsq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpminsw_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpminsw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpminsw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminsw(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpminsw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpminsw_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpminsw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpminsw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminsw(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpminsw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpminsw_zmm_zmm_zmm() {
			TestAssembler(c => c.vpminsw(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpminsw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpminsw_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpminsw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpminsw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminsw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpminsw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpminsw_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpminsw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpminsw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminsw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpminsw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpminsw_zmm_zmm_m() {
			TestAssembler(c => c.vpminsw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpminsw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpminub_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpminub(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpminub_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminub(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpminub_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpminub_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpminub(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpminub_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminub(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpminub_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpminub_zmm_zmm_zmm() {
			TestAssembler(c => c.vpminub(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpminub_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpminub_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpminub(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpminub_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminub(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpminub_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpminub_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpminub(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpminub_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminub(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpminub_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpminub_zmm_zmm_m() {
			TestAssembler(c => c.vpminub(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpminub_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpminud_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpminud(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpminud_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminud(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpminud_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpminud_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpminud(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpminud_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminud(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpminud_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpminud_zmm_zmm_zmm() {
			TestAssembler(c => c.vpminud(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpminud_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpminud_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpminud(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpminud_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpminud(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpminud_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminud(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpminud_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpminud_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpminud(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpminud_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpminud(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpminud_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminud(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpminud_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpminud_zmm_zmm_m() {
			TestAssembler(c => c.vpminud(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpminud_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpminuq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpminuq(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpminuq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpminuq_ymm_ymm_ymm() {
			TestAssembler(c => c.vpminuq(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpminuq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpminuq_zmm_zmm_zmm() {
			TestAssembler(c => c.vpminuq(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpminuq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpminuq_xmm_xmm_m() {
			TestAssembler(c => c.vpminuq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpminuq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpminuq_ymm_ymm_m() {
			TestAssembler(c => c.vpminuq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpminuq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpminuq_zmm_zmm_m() {
			TestAssembler(c => c.vpminuq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpminuq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpminuw_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpminuw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpminuw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminuw(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpminuw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpminuw_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpminuw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpminuw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminuw(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpminuw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpminuw_zmm_zmm_zmm() {
			TestAssembler(c => c.vpminuw(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpminuw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpminuw_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpminuw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpminuw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminuw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpminuw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpminuw_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpminuw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpminuw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpminuw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpminuw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpminuw_zmm_zmm_m() {
			TestAssembler(c => c.vpminuw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpminuw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmovb2m_kr_xmm() {
			TestAssembler(c => c.vpmovb2m(k2, xmm3), Instruction.Create(Code.EVEX_Vpmovb2m_kr_xmm, Register.K2, Register.XMM3));
		}

		[Fact]
		public void vpmovb2m_kr_ymm() {
			TestAssembler(c => c.vpmovb2m(k2, ymm3), Instruction.Create(Code.EVEX_Vpmovb2m_kr_ymm, Register.K2, Register.YMM3));
		}

		[Fact]
		public void vpmovb2m_kr_zmm() {
			TestAssembler(c => c.vpmovb2m(k2, zmm3), Instruction.Create(Code.EVEX_Vpmovb2m_kr_zmm, Register.K2, Register.ZMM3));
		}

		[Fact]
		public void vpmovd2m_kr_xmm() {
			TestAssembler(c => c.vpmovd2m(k2, xmm3), Instruction.Create(Code.EVEX_Vpmovd2m_kr_xmm, Register.K2, Register.XMM3));
		}

		[Fact]
		public void vpmovd2m_kr_ymm() {
			TestAssembler(c => c.vpmovd2m(k2, ymm3), Instruction.Create(Code.EVEX_Vpmovd2m_kr_ymm, Register.K2, Register.YMM3));
		}

		[Fact]
		public void vpmovd2m_kr_zmm() {
			TestAssembler(c => c.vpmovd2m(k2, zmm3), Instruction.Create(Code.EVEX_Vpmovd2m_kr_zmm, Register.K2, Register.ZMM3));
		}

		[Fact]
		public void vpmovdb_xmm_xmm() {
			TestAssembler(c => c.vpmovdb(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovdb_xmmm32_k1z_xmm, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovdb_m_xmm() {
			TestAssembler(c => c.vpmovdb(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovdb_xmmm32_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovdb_xmm_ymm() {
			TestAssembler(c => c.vpmovdb(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovdb_xmmm64_k1z_ymm, Register.XMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovdb_m_ymm() {
			TestAssembler(c => c.vpmovdb(__xmmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovdb_xmmm64_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovdb_xmm_zmm() {
			TestAssembler(c => c.vpmovdb(xmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovdb_xmmm128_k1z_zmm, Register.XMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovdb_m_zmm() {
			TestAssembler(c => c.vpmovdb(__xmmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovdb_xmmm128_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovdw_xmm_xmm() {
			TestAssembler(c => c.vpmovdw(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovdw_xmmm64_k1z_xmm, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovdw_m_xmm() {
			TestAssembler(c => c.vpmovdw(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovdw_xmmm64_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovdw_xmm_ymm() {
			TestAssembler(c => c.vpmovdw(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovdw_xmmm128_k1z_ymm, Register.XMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovdw_m_ymm() {
			TestAssembler(c => c.vpmovdw(__xmmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovdw_xmmm128_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovdw_ymm_zmm() {
			TestAssembler(c => c.vpmovdw(ymm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovdw_ymmm256_k1z_zmm, Register.YMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovdw_m_zmm() {
			TestAssembler(c => c.vpmovdw(__ymmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovdw_ymmm256_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovm2b_xmm_kr() {
			TestAssembler(c => c.vpmovm2b(xmm2, k3), Instruction.Create(Code.EVEX_Vpmovm2b_xmm_kr, Register.XMM2, Register.K3));
		}

		[Fact]
		public void vpmovm2b_ymm_kr() {
			TestAssembler(c => c.vpmovm2b(ymm2, k3), Instruction.Create(Code.EVEX_Vpmovm2b_ymm_kr, Register.YMM2, Register.K3));
		}

		[Fact]
		public void vpmovm2b_zmm_kr() {
			TestAssembler(c => c.vpmovm2b(zmm2, k3), Instruction.Create(Code.EVEX_Vpmovm2b_zmm_kr, Register.ZMM2, Register.K3));
		}

		[Fact]
		public void vpmovm2d_xmm_kr() {
			TestAssembler(c => c.vpmovm2d(xmm2, k3), Instruction.Create(Code.EVEX_Vpmovm2d_xmm_kr, Register.XMM2, Register.K3));
		}

		[Fact]
		public void vpmovm2d_ymm_kr() {
			TestAssembler(c => c.vpmovm2d(ymm2, k3), Instruction.Create(Code.EVEX_Vpmovm2d_ymm_kr, Register.YMM2, Register.K3));
		}

		[Fact]
		public void vpmovm2d_zmm_kr() {
			TestAssembler(c => c.vpmovm2d(zmm2, k3), Instruction.Create(Code.EVEX_Vpmovm2d_zmm_kr, Register.ZMM2, Register.K3));
		}

		[Fact]
		public void vpmovm2q_xmm_kr() {
			TestAssembler(c => c.vpmovm2q(xmm2, k3), Instruction.Create(Code.EVEX_Vpmovm2q_xmm_kr, Register.XMM2, Register.K3));
		}

		[Fact]
		public void vpmovm2q_ymm_kr() {
			TestAssembler(c => c.vpmovm2q(ymm2, k3), Instruction.Create(Code.EVEX_Vpmovm2q_ymm_kr, Register.YMM2, Register.K3));
		}

		[Fact]
		public void vpmovm2q_zmm_kr() {
			TestAssembler(c => c.vpmovm2q(zmm2, k3), Instruction.Create(Code.EVEX_Vpmovm2q_zmm_kr, Register.ZMM2, Register.K3));
		}

		[Fact]
		public void vpmovm2w_xmm_kr() {
			TestAssembler(c => c.vpmovm2w(xmm2, k3), Instruction.Create(Code.EVEX_Vpmovm2w_xmm_kr, Register.XMM2, Register.K3));
		}

		[Fact]
		public void vpmovm2w_ymm_kr() {
			TestAssembler(c => c.vpmovm2w(ymm2, k3), Instruction.Create(Code.EVEX_Vpmovm2w_ymm_kr, Register.YMM2, Register.K3));
		}

		[Fact]
		public void vpmovm2w_zmm_kr() {
			TestAssembler(c => c.vpmovm2w(zmm2, k3), Instruction.Create(Code.EVEX_Vpmovm2w_zmm_kr, Register.ZMM2, Register.K3));
		}

		[Fact]
		public void vpmovmskb_r32_xmm() {
			TestAssembler(c => c.vpmovmskb(edx, xmm3), Instruction.Create(Code.VEX_Vpmovmskb_r32_xmm, Register.EDX, Register.XMM3));
		}

		[Fact]
		public void vpmovmskb_r64_xmm() {
			TestAssembler(c => c.vpmovmskb(rdx, xmm3), Instruction.Create(Code.VEX_Vpmovmskb_r64_xmm, Register.RDX, Register.XMM3));
		}

		[Fact]
		public void vpmovmskb_r32_ymm() {
			TestAssembler(c => c.vpmovmskb(edx, ymm3), Instruction.Create(Code.VEX_Vpmovmskb_r32_ymm, Register.EDX, Register.YMM3));
		}

		[Fact]
		public void vpmovmskb_r64_ymm() {
			TestAssembler(c => c.vpmovmskb(rdx, ymm3), Instruction.Create(Code.VEX_Vpmovmskb_r64_ymm, Register.RDX, Register.YMM3));
		}

		[Fact]
		public void vpmovq2m_kr_xmm() {
			TestAssembler(c => c.vpmovq2m(k2, xmm3), Instruction.Create(Code.EVEX_Vpmovq2m_kr_xmm, Register.K2, Register.XMM3));
		}

		[Fact]
		public void vpmovq2m_kr_ymm() {
			TestAssembler(c => c.vpmovq2m(k2, ymm3), Instruction.Create(Code.EVEX_Vpmovq2m_kr_ymm, Register.K2, Register.YMM3));
		}

		[Fact]
		public void vpmovq2m_kr_zmm() {
			TestAssembler(c => c.vpmovq2m(k2, zmm3), Instruction.Create(Code.EVEX_Vpmovq2m_kr_zmm, Register.K2, Register.ZMM3));
		}

		[Fact]
		public void vpmovqb_xmm_xmm() {
			TestAssembler(c => c.vpmovqb(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovqb_xmmm16_k1z_xmm, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovqb_m_xmm() {
			TestAssembler(c => c.vpmovqb(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovqb_xmmm16_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovqb_xmm_ymm() {
			TestAssembler(c => c.vpmovqb(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovqb_xmmm32_k1z_ymm, Register.XMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovqb_m_ymm() {
			TestAssembler(c => c.vpmovqb(__xmmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovqb_xmmm32_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovqb_xmm_zmm() {
			TestAssembler(c => c.vpmovqb(xmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovqb_xmmm64_k1z_zmm, Register.XMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovqb_m_zmm() {
			TestAssembler(c => c.vpmovqb(__xmmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovqb_xmmm64_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovqd_xmm_xmm() {
			TestAssembler(c => c.vpmovqd(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovqd_xmmm64_k1z_xmm, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovqd_m_xmm() {
			TestAssembler(c => c.vpmovqd(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovqd_xmmm64_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovqd_xmm_ymm() {
			TestAssembler(c => c.vpmovqd(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovqd_xmmm128_k1z_ymm, Register.XMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovqd_m_ymm() {
			TestAssembler(c => c.vpmovqd(__xmmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovqd_xmmm128_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovqd_ymm_zmm() {
			TestAssembler(c => c.vpmovqd(ymm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovqd_ymmm256_k1z_zmm, Register.YMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovqd_m_zmm() {
			TestAssembler(c => c.vpmovqd(__ymmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovqd_ymmm256_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovqw_xmm_xmm() {
			TestAssembler(c => c.vpmovqw(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovqw_xmmm32_k1z_xmm, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovqw_m_xmm() {
			TestAssembler(c => c.vpmovqw(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovqw_xmmm32_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovqw_xmm_ymm() {
			TestAssembler(c => c.vpmovqw(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovqw_xmmm64_k1z_ymm, Register.XMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovqw_m_ymm() {
			TestAssembler(c => c.vpmovqw(__xmmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovqw_xmmm64_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovqw_xmm_zmm() {
			TestAssembler(c => c.vpmovqw(xmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovqw_xmmm128_k1z_zmm, Register.XMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovqw_m_zmm() {
			TestAssembler(c => c.vpmovqw(__xmmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovqw_xmmm128_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovsdb_xmm_xmm() {
			TestAssembler(c => c.vpmovsdb(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsdb_xmmm32_k1z_xmm, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovsdb_m_xmm() {
			TestAssembler(c => c.vpmovsdb(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsdb_xmmm32_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovsdb_xmm_ymm() {
			TestAssembler(c => c.vpmovsdb(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsdb_xmmm64_k1z_ymm, Register.XMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovsdb_m_ymm() {
			TestAssembler(c => c.vpmovsdb(__xmmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsdb_xmmm64_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovsdb_xmm_zmm() {
			TestAssembler(c => c.vpmovsdb(xmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsdb_xmmm128_k1z_zmm, Register.XMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovsdb_m_zmm() {
			TestAssembler(c => c.vpmovsdb(__xmmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsdb_xmmm128_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovsdw_xmm_xmm() {
			TestAssembler(c => c.vpmovsdw(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsdw_xmmm64_k1z_xmm, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovsdw_m_xmm() {
			TestAssembler(c => c.vpmovsdw(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsdw_xmmm64_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovsdw_xmm_ymm() {
			TestAssembler(c => c.vpmovsdw(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsdw_xmmm128_k1z_ymm, Register.XMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovsdw_m_ymm() {
			TestAssembler(c => c.vpmovsdw(__xmmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsdw_xmmm128_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovsdw_ymm_zmm() {
			TestAssembler(c => c.vpmovsdw(ymm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsdw_ymmm256_k1z_zmm, Register.YMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovsdw_m_zmm() {
			TestAssembler(c => c.vpmovsdw(__ymmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsdw_ymmm256_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovsqb_xmm_xmm() {
			TestAssembler(c => c.vpmovsqb(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsqb_xmmm16_k1z_xmm, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovsqb_m_xmm() {
			TestAssembler(c => c.vpmovsqb(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsqb_xmmm16_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovsqb_xmm_ymm() {
			TestAssembler(c => c.vpmovsqb(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsqb_xmmm32_k1z_ymm, Register.XMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovsqb_m_ymm() {
			TestAssembler(c => c.vpmovsqb(__xmmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsqb_xmmm32_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovsqb_xmm_zmm() {
			TestAssembler(c => c.vpmovsqb(xmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsqb_xmmm64_k1z_zmm, Register.XMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovsqb_m_zmm() {
			TestAssembler(c => c.vpmovsqb(__xmmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsqb_xmmm64_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovsqd_xmm_xmm() {
			TestAssembler(c => c.vpmovsqd(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsqd_xmmm64_k1z_xmm, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovsqd_m_xmm() {
			TestAssembler(c => c.vpmovsqd(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsqd_xmmm64_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovsqd_xmm_ymm() {
			TestAssembler(c => c.vpmovsqd(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsqd_xmmm128_k1z_ymm, Register.XMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovsqd_m_ymm() {
			TestAssembler(c => c.vpmovsqd(__xmmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsqd_xmmm128_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovsqd_ymm_zmm() {
			TestAssembler(c => c.vpmovsqd(ymm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsqd_ymmm256_k1z_zmm, Register.YMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovsqd_m_zmm() {
			TestAssembler(c => c.vpmovsqd(__ymmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsqd_ymmm256_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovsqw_xmm_xmm() {
			TestAssembler(c => c.vpmovsqw(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsqw_xmmm32_k1z_xmm, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovsqw_m_xmm() {
			TestAssembler(c => c.vpmovsqw(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsqw_xmmm32_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovsqw_xmm_ymm() {
			TestAssembler(c => c.vpmovsqw(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsqw_xmmm64_k1z_ymm, Register.XMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovsqw_m_ymm() {
			TestAssembler(c => c.vpmovsqw(__xmmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsqw_xmmm64_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovsqw_xmm_zmm() {
			TestAssembler(c => c.vpmovsqw(xmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsqw_xmmm128_k1z_zmm, Register.XMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovsqw_m_zmm() {
			TestAssembler(c => c.vpmovsqw(__xmmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsqw_xmmm128_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovswb_xmm_xmm() {
			TestAssembler(c => c.vpmovswb(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovswb_xmmm64_k1z_xmm, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovswb_m_xmm() {
			TestAssembler(c => c.vpmovswb(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovswb_xmmm64_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovswb_xmm_ymm() {
			TestAssembler(c => c.vpmovswb(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovswb_xmmm128_k1z_ymm, Register.XMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovswb_m_ymm() {
			TestAssembler(c => c.vpmovswb(__xmmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovswb_xmmm128_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovswb_ymm_zmm() {
			TestAssembler(c => c.vpmovswb(ymm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovswb_ymmm256_k1z_zmm, Register.YMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovswb_m_zmm() {
			TestAssembler(c => c.vpmovswb(__ymmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovswb_ymmm256_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovsxbd_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovsxbd(xmm2, xmm3), Instruction.Create(Code.VEX_Vpmovsxbd_xmm_xmmm32, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxbd(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxbd_xmm_k1z_xmmm32, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovsxbd_ymm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovsxbd(ymm2, xmm3), Instruction.Create(Code.VEX_Vpmovsxbd_ymm_xmmm64, Register.YMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxbd(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxbd_ymm_k1z_xmmm64, Register.YMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovsxbd_zmm_xmm() {
			TestAssembler(c => c.vpmovsxbd(zmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxbd_zmm_k1z_xmmm128, Register.ZMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovsxbd_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovsxbd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovsxbd_xmm_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxbd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxbd_xmm_k1z_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovsxbd_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovsxbd(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovsxbd_ymm_xmmm64, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxbd(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxbd_ymm_k1z_xmmm64, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovsxbd_zmm_m() {
			TestAssembler(c => c.vpmovsxbd(zmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxbd_zmm_k1z_xmmm128, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmovsxbq_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovsxbq(xmm2, xmm3), Instruction.Create(Code.VEX_Vpmovsxbq_xmm_xmmm16, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxbq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxbq_xmm_k1z_xmmm16, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovsxbq_ymm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovsxbq(ymm2, xmm3), Instruction.Create(Code.VEX_Vpmovsxbq_ymm_xmmm32, Register.YMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxbq(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxbq_ymm_k1z_xmmm32, Register.YMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovsxbq_zmm_xmm() {
			TestAssembler(c => c.vpmovsxbq(zmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxbq_zmm_k1z_xmmm64, Register.ZMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovsxbq_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovsxbq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovsxbq_xmm_xmmm16, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxbq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxbq_xmm_k1z_xmmm16, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovsxbq_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovsxbq(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovsxbq_ymm_xmmm32, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxbq(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxbq_ymm_k1z_xmmm32, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovsxbq_zmm_m() {
			TestAssembler(c => c.vpmovsxbq(zmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxbq_zmm_k1z_xmmm64, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmovsxbw_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovsxbw(xmm2, xmm3), Instruction.Create(Code.VEX_Vpmovsxbw_xmm_xmmm64, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxbw(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxbw_xmm_k1z_xmmm64, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovsxbw_ymm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovsxbw(ymm2, xmm3), Instruction.Create(Code.VEX_Vpmovsxbw_ymm_xmmm128, Register.YMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxbw(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxbw_ymm_k1z_xmmm128, Register.YMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovsxbw_zmm_ymm() {
			TestAssembler(c => c.vpmovsxbw(zmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxbw_zmm_k1z_ymmm256, Register.ZMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovsxbw_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovsxbw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovsxbw_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxbw(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxbw_xmm_k1z_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovsxbw_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovsxbw(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovsxbw_ymm_xmmm128, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxbw(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxbw_ymm_k1z_xmmm128, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovsxbw_zmm_m() {
			TestAssembler(c => c.vpmovsxbw(zmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxbw_zmm_k1z_ymmm256, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmovsxdq_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovsxdq(xmm2, xmm3), Instruction.Create(Code.VEX_Vpmovsxdq_xmm_xmmm64, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxdq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxdq_xmm_k1z_xmmm64, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovsxdq_ymm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovsxdq(ymm2, xmm3), Instruction.Create(Code.VEX_Vpmovsxdq_ymm_xmmm128, Register.YMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxdq(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxdq_ymm_k1z_xmmm128, Register.YMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovsxdq_zmm_ymm() {
			TestAssembler(c => c.vpmovsxdq(zmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxdq_zmm_k1z_ymmm256, Register.ZMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovsxdq_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovsxdq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovsxdq_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxdq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxdq_xmm_k1z_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovsxdq_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovsxdq(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovsxdq_ymm_xmmm128, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxdq(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxdq_ymm_k1z_xmmm128, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovsxdq_zmm_m() {
			TestAssembler(c => c.vpmovsxdq(zmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxdq_zmm_k1z_ymmm256, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmovsxwd_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovsxwd(xmm2, xmm3), Instruction.Create(Code.VEX_Vpmovsxwd_xmm_xmmm64, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxwd(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxwd_xmm_k1z_xmmm64, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovsxwd_ymm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovsxwd(ymm2, xmm3), Instruction.Create(Code.VEX_Vpmovsxwd_ymm_xmmm128, Register.YMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxwd(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxwd_ymm_k1z_xmmm128, Register.YMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovsxwd_zmm_ymm() {
			TestAssembler(c => c.vpmovsxwd(zmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxwd_zmm_k1z_ymmm256, Register.ZMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovsxwd_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovsxwd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovsxwd_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxwd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxwd_xmm_k1z_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovsxwd_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovsxwd(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovsxwd_ymm_xmmm128, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxwd(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxwd_ymm_k1z_xmmm128, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovsxwd_zmm_m() {
			TestAssembler(c => c.vpmovsxwd(zmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxwd_zmm_k1z_ymmm256, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmovsxwq_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovsxwq(xmm2, xmm3), Instruction.Create(Code.VEX_Vpmovsxwq_xmm_xmmm32, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxwq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxwq_xmm_k1z_xmmm32, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovsxwq_ymm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovsxwq(ymm2, xmm3), Instruction.Create(Code.VEX_Vpmovsxwq_ymm_xmmm64, Register.YMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxwq(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxwq_ymm_k1z_xmmm64, Register.YMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovsxwq_zmm_xmm() {
			TestAssembler(c => c.vpmovsxwq(zmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxwq_zmm_k1z_xmmm128, Register.ZMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovsxwq_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovsxwq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovsxwq_xmm_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxwq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxwq_xmm_k1z_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovsxwq_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovsxwq(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovsxwq_ymm_xmmm64, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovsxwq(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxwq_ymm_k1z_xmmm64, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovsxwq_zmm_m() {
			TestAssembler(c => c.vpmovsxwq(zmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovsxwq_zmm_k1z_xmmm128, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmovusdb_xmm_xmm() {
			TestAssembler(c => c.vpmovusdb(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovusdb_xmmm32_k1z_xmm, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovusdb_m_xmm() {
			TestAssembler(c => c.vpmovusdb(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovusdb_xmmm32_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovusdb_xmm_ymm() {
			TestAssembler(c => c.vpmovusdb(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovusdb_xmmm64_k1z_ymm, Register.XMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovusdb_m_ymm() {
			TestAssembler(c => c.vpmovusdb(__xmmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovusdb_xmmm64_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovusdb_xmm_zmm() {
			TestAssembler(c => c.vpmovusdb(xmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovusdb_xmmm128_k1z_zmm, Register.XMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovusdb_m_zmm() {
			TestAssembler(c => c.vpmovusdb(__xmmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovusdb_xmmm128_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovusdw_xmm_xmm() {
			TestAssembler(c => c.vpmovusdw(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovusdw_xmmm64_k1z_xmm, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovusdw_m_xmm() {
			TestAssembler(c => c.vpmovusdw(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovusdw_xmmm64_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovusdw_xmm_ymm() {
			TestAssembler(c => c.vpmovusdw(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovusdw_xmmm128_k1z_ymm, Register.XMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovusdw_m_ymm() {
			TestAssembler(c => c.vpmovusdw(__xmmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovusdw_xmmm128_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovusdw_ymm_zmm() {
			TestAssembler(c => c.vpmovusdw(ymm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovusdw_ymmm256_k1z_zmm, Register.YMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovusdw_m_zmm() {
			TestAssembler(c => c.vpmovusdw(__ymmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovusdw_ymmm256_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovusqb_xmm_xmm() {
			TestAssembler(c => c.vpmovusqb(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovusqb_xmmm16_k1z_xmm, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovusqb_m_xmm() {
			TestAssembler(c => c.vpmovusqb(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovusqb_xmmm16_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovusqb_xmm_ymm() {
			TestAssembler(c => c.vpmovusqb(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovusqb_xmmm32_k1z_ymm, Register.XMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovusqb_m_ymm() {
			TestAssembler(c => c.vpmovusqb(__xmmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovusqb_xmmm32_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovusqb_xmm_zmm() {
			TestAssembler(c => c.vpmovusqb(xmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovusqb_xmmm64_k1z_zmm, Register.XMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovusqb_m_zmm() {
			TestAssembler(c => c.vpmovusqb(__xmmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovusqb_xmmm64_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovusqd_xmm_xmm() {
			TestAssembler(c => c.vpmovusqd(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovusqd_xmmm64_k1z_xmm, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovusqd_m_xmm() {
			TestAssembler(c => c.vpmovusqd(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovusqd_xmmm64_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovusqd_xmm_ymm() {
			TestAssembler(c => c.vpmovusqd(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovusqd_xmmm128_k1z_ymm, Register.XMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovusqd_m_ymm() {
			TestAssembler(c => c.vpmovusqd(__xmmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovusqd_xmmm128_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovusqd_ymm_zmm() {
			TestAssembler(c => c.vpmovusqd(ymm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovusqd_ymmm256_k1z_zmm, Register.YMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovusqd_m_zmm() {
			TestAssembler(c => c.vpmovusqd(__ymmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovusqd_ymmm256_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovusqw_xmm_xmm() {
			TestAssembler(c => c.vpmovusqw(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovusqw_xmmm32_k1z_xmm, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovusqw_m_xmm() {
			TestAssembler(c => c.vpmovusqw(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovusqw_xmmm32_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovusqw_xmm_ymm() {
			TestAssembler(c => c.vpmovusqw(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovusqw_xmmm64_k1z_ymm, Register.XMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovusqw_m_ymm() {
			TestAssembler(c => c.vpmovusqw(__xmmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovusqw_xmmm64_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovusqw_xmm_zmm() {
			TestAssembler(c => c.vpmovusqw(xmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovusqw_xmmm128_k1z_zmm, Register.XMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovusqw_m_zmm() {
			TestAssembler(c => c.vpmovusqw(__xmmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovusqw_xmmm128_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovuswb_xmm_xmm() {
			TestAssembler(c => c.vpmovuswb(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovuswb_xmmm64_k1z_xmm, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovuswb_m_xmm() {
			TestAssembler(c => c.vpmovuswb(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovuswb_xmmm64_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovuswb_xmm_ymm() {
			TestAssembler(c => c.vpmovuswb(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovuswb_xmmm128_k1z_ymm, Register.XMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovuswb_m_ymm() {
			TestAssembler(c => c.vpmovuswb(__xmmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovuswb_xmmm128_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovuswb_ymm_zmm() {
			TestAssembler(c => c.vpmovuswb(ymm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovuswb_ymmm256_k1z_zmm, Register.YMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovuswb_m_zmm() {
			TestAssembler(c => c.vpmovuswb(__ymmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovuswb_ymmm256_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovw2m_kr_xmm() {
			TestAssembler(c => c.vpmovw2m(k2, xmm3), Instruction.Create(Code.EVEX_Vpmovw2m_kr_xmm, Register.K2, Register.XMM3));
		}

		[Fact]
		public void vpmovw2m_kr_ymm() {
			TestAssembler(c => c.vpmovw2m(k2, ymm3), Instruction.Create(Code.EVEX_Vpmovw2m_kr_ymm, Register.K2, Register.YMM3));
		}

		[Fact]
		public void vpmovw2m_kr_zmm() {
			TestAssembler(c => c.vpmovw2m(k2, zmm3), Instruction.Create(Code.EVEX_Vpmovw2m_kr_zmm, Register.K2, Register.ZMM3));
		}

		[Fact]
		public void vpmovwb_xmm_xmm() {
			TestAssembler(c => c.vpmovwb(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovwb_xmmm64_k1z_xmm, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovwb_m_xmm() {
			TestAssembler(c => c.vpmovwb(__xmmword_ptr[rcx].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovwb_xmmm64_k1z_xmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovwb_xmm_ymm() {
			TestAssembler(c => c.vpmovwb(xmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovwb_xmmm128_k1z_ymm, Register.XMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovwb_m_ymm() {
			TestAssembler(c => c.vpmovwb(__xmmword_ptr[rcx].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovwb_xmmm128_k1z_ymm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovwb_ymm_zmm() {
			TestAssembler(c => c.vpmovwb(ymm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovwb_ymmm256_k1z_zmm, Register.YMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovwb_m_zmm() {
			TestAssembler(c => c.vpmovwb(__ymmword_ptr[rcx].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovwb_ymmm256_k1z_zmm, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpmovzxbd_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovzxbd(xmm2, xmm3), Instruction.Create(Code.VEX_Vpmovzxbd_xmm_xmmm32, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxbd(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxbd_xmm_k1z_xmmm32, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovzxbd_ymm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovzxbd(ymm2, xmm3), Instruction.Create(Code.VEX_Vpmovzxbd_ymm_xmmm64, Register.YMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxbd(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxbd_ymm_k1z_xmmm64, Register.YMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovzxbd_zmm_xmm() {
			TestAssembler(c => c.vpmovzxbd(zmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxbd_zmm_k1z_xmmm128, Register.ZMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovzxbd_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovzxbd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovzxbd_xmm_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxbd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxbd_xmm_k1z_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovzxbd_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovzxbd(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovzxbd_ymm_xmmm64, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxbd(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxbd_ymm_k1z_xmmm64, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovzxbd_zmm_m() {
			TestAssembler(c => c.vpmovzxbd(zmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxbd_zmm_k1z_xmmm128, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmovzxbq_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovzxbq(xmm2, xmm3), Instruction.Create(Code.VEX_Vpmovzxbq_xmm_xmmm16, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxbq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxbq_xmm_k1z_xmmm16, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovzxbq_ymm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovzxbq(ymm2, xmm3), Instruction.Create(Code.VEX_Vpmovzxbq_ymm_xmmm32, Register.YMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxbq(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxbq_ymm_k1z_xmmm32, Register.YMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovzxbq_zmm_xmm() {
			TestAssembler(c => c.vpmovzxbq(zmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxbq_zmm_k1z_xmmm64, Register.ZMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovzxbq_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovzxbq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovzxbq_xmm_xmmm16, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxbq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxbq_xmm_k1z_xmmm16, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovzxbq_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovzxbq(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovzxbq_ymm_xmmm32, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxbq(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxbq_ymm_k1z_xmmm32, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovzxbq_zmm_m() {
			TestAssembler(c => c.vpmovzxbq(zmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxbq_zmm_k1z_xmmm64, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmovzxbw_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovzxbw(xmm2, xmm3), Instruction.Create(Code.VEX_Vpmovzxbw_xmm_xmmm64, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxbw(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxbw_xmm_k1z_xmmm64, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovzxbw_ymm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovzxbw(ymm2, xmm3), Instruction.Create(Code.VEX_Vpmovzxbw_ymm_xmmm128, Register.YMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxbw(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxbw_ymm_k1z_xmmm128, Register.YMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovzxbw_zmm_ymm() {
			TestAssembler(c => c.vpmovzxbw(zmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxbw_zmm_k1z_ymmm256, Register.ZMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovzxbw_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovzxbw(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovzxbw_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxbw(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxbw_xmm_k1z_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovzxbw_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovzxbw(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovzxbw_ymm_xmmm128, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxbw(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxbw_ymm_k1z_xmmm128, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovzxbw_zmm_m() {
			TestAssembler(c => c.vpmovzxbw(zmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxbw_zmm_k1z_ymmm256, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmovzxdq_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovzxdq(xmm2, xmm3), Instruction.Create(Code.VEX_Vpmovzxdq_xmm_xmmm64, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxdq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxdq_xmm_k1z_xmmm64, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovzxdq_ymm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovzxdq(ymm2, xmm3), Instruction.Create(Code.VEX_Vpmovzxdq_ymm_xmmm128, Register.YMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxdq(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxdq_ymm_k1z_xmmm128, Register.YMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovzxdq_zmm_ymm() {
			TestAssembler(c => c.vpmovzxdq(zmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxdq_zmm_k1z_ymmm256, Register.ZMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovzxdq_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovzxdq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovzxdq_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxdq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxdq_xmm_k1z_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovzxdq_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovzxdq(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovzxdq_ymm_xmmm128, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxdq(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxdq_ymm_k1z_xmmm128, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovzxdq_zmm_m() {
			TestAssembler(c => c.vpmovzxdq(zmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxdq_zmm_k1z_ymmm256, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmovzxwd_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovzxwd(xmm2, xmm3), Instruction.Create(Code.VEX_Vpmovzxwd_xmm_xmmm64, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxwd(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxwd_xmm_k1z_xmmm64, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovzxwd_ymm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovzxwd(ymm2, xmm3), Instruction.Create(Code.VEX_Vpmovzxwd_ymm_xmmm128, Register.YMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxwd(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxwd_ymm_k1z_xmmm128, Register.YMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovzxwd_zmm_ymm() {
			TestAssembler(c => c.vpmovzxwd(zmm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxwd_zmm_k1z_ymmm256, Register.ZMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpmovzxwd_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovzxwd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovzxwd_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxwd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxwd_xmm_k1z_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovzxwd_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovzxwd(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovzxwd_ymm_xmmm128, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxwd(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxwd_ymm_k1z_xmmm128, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovzxwd_zmm_m() {
			TestAssembler(c => c.vpmovzxwd(zmm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxwd_zmm_k1z_ymmm256, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmovzxwq_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovzxwq(xmm2, xmm3), Instruction.Create(Code.VEX_Vpmovzxwq_xmm_xmmm32, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxwq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxwq_xmm_k1z_xmmm32, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovzxwq_ymm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovzxwq(ymm2, xmm3), Instruction.Create(Code.VEX_Vpmovzxwq_ymm_xmmm64, Register.YMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxwq(ymm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxwq_ymm_k1z_xmmm64, Register.YMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovzxwq_zmm_xmm() {
			TestAssembler(c => c.vpmovzxwq(zmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxwq_zmm_k1z_xmmm128, Register.ZMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpmovzxwq_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovzxwq(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovzxwq_xmm_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxwq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxwq_xmm_k1z_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovzxwq_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmovzxwq(ymm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmovzxwq_ymm_xmmm64, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmovzxwq(ymm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxwq_ymm_k1z_xmmm64, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmovzxwq_zmm_m() {
			TestAssembler(c => c.vpmovzxwq(zmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmovzxwq_zmm_k1z_xmmm128, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmuldq_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmuldq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpmuldq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmuldq(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmuldq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmuldq_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmuldq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpmuldq_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmuldq(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpmuldq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmuldq_zmm_zmm_zmm() {
			TestAssembler(c => c.vpmuldq(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmuldq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpmuldq_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpmuldq(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpmuldq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmuldq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmuldq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmuldq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmuldq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmuldq_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpmuldq(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpmuldq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmuldq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmuldq_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmuldq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmuldq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmuldq_zmm_zmm_m() {
			TestAssembler(c => c.vpmuldq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmuldq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmulhrsw_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmulhrsw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpmulhrsw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulhrsw(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmulhrsw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmulhrsw_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmulhrsw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpmulhrsw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulhrsw(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpmulhrsw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmulhrsw_zmm_zmm_zmm() {
			TestAssembler(c => c.vpmulhrsw(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmulhrsw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpmulhrsw_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmulhrsw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmulhrsw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulhrsw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmulhrsw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmulhrsw_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmulhrsw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmulhrsw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulhrsw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmulhrsw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmulhrsw_zmm_zmm_m() {
			TestAssembler(c => c.vpmulhrsw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmulhrsw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmulhuw_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmulhuw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpmulhuw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulhuw(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmulhuw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmulhuw_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmulhuw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpmulhuw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulhuw(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpmulhuw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmulhuw_zmm_zmm_zmm() {
			TestAssembler(c => c.vpmulhuw(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmulhuw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpmulhuw_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmulhuw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmulhuw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulhuw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmulhuw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmulhuw_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmulhuw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmulhuw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulhuw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmulhuw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmulhuw_zmm_zmm_m() {
			TestAssembler(c => c.vpmulhuw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmulhuw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmulhw_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmulhw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpmulhw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulhw(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmulhw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmulhw_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmulhw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpmulhw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulhw(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpmulhw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmulhw_zmm_zmm_zmm() {
			TestAssembler(c => c.vpmulhw(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmulhw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpmulhw_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmulhw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmulhw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulhw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmulhw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmulhw_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmulhw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmulhw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulhw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmulhw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmulhw_zmm_zmm_m() {
			TestAssembler(c => c.vpmulhw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmulhw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmulld_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmulld(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpmulld_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulld(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmulld_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmulld_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmulld(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpmulld_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulld(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpmulld_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmulld_zmm_zmm_zmm() {
			TestAssembler(c => c.vpmulld(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmulld_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpmulld_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpmulld(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpmulld_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmulld(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmulld_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulld(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmulld_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmulld_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpmulld(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpmulld_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmulld(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmulld_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmulld(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmulld_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmulld_zmm_zmm_m() {
			TestAssembler(c => c.vpmulld(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmulld_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmullq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpmullq(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmullq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpmullq_ymm_ymm_ymm() {
			TestAssembler(c => c.vpmullq(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpmullq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpmullq_zmm_zmm_zmm() {
			TestAssembler(c => c.vpmullq(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmullq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpmullq_xmm_xmm_m() {
			TestAssembler(c => c.vpmullq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmullq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmullq_ymm_ymm_m() {
			TestAssembler(c => c.vpmullq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmullq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmullq_zmm_zmm_m() {
			TestAssembler(c => c.vpmullq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmullq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmullw_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmullw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpmullw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmullw(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmullw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmullw_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmullw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpmullw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmullw(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpmullw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmullw_zmm_zmm_zmm() {
			TestAssembler(c => c.vpmullw(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmullw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpmullw_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmullw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmullw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmullw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmullw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmullw_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmullw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmullw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmullw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmullw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmullw_zmm_zmm_m() {
			TestAssembler(c => c.vpmullw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmullw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmultishiftqb_xmm_xmm_xmm() {
			TestAssembler(c => c.vpmultishiftqb(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmultishiftqb_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpmultishiftqb_ymm_ymm_ymm() {
			TestAssembler(c => c.vpmultishiftqb(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpmultishiftqb_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpmultishiftqb_zmm_zmm_zmm() {
			TestAssembler(c => c.vpmultishiftqb(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmultishiftqb_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpmultishiftqb_xmm_xmm_m() {
			TestAssembler(c => c.vpmultishiftqb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmultishiftqb_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmultishiftqb_ymm_ymm_m() {
			TestAssembler(c => c.vpmultishiftqb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmultishiftqb_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmultishiftqb_zmm_zmm_m() {
			TestAssembler(c => c.vpmultishiftqb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmultishiftqb_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpmuludq_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmuludq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpmuludq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmuludq(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmuludq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmuludq_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmuludq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpmuludq_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmuludq(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpmuludq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmuludq_zmm_zmm_zmm() {
			TestAssembler(c => c.vpmuludq(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpmuludq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpmuludq_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpmuludq(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpmuludq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmuludq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmuludq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmuludq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmuludq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmuludq_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpmuludq(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpmuludq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpmuludq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpmuludq_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpmuludq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmuludq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpmuludq_zmm_zmm_m() {
			TestAssembler(c => c.vpmuludq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpmuludq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpopcntb_xmm_xmm() {
			TestAssembler(c => c.vpopcntb(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpopcntb_xmm_k1z_xmmm128, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpopcntb_ymm_ymm() {
			TestAssembler(c => c.vpopcntb(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpopcntb_ymm_k1z_ymmm256, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpopcntb_zmm_zmm() {
			TestAssembler(c => c.vpopcntb(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpopcntb_zmm_k1z_zmmm512, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpopcntb_xmm_m() {
			TestAssembler(c => c.vpopcntb(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpopcntb_xmm_k1z_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpopcntb_ymm_m() {
			TestAssembler(c => c.vpopcntb(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpopcntb_ymm_k1z_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpopcntb_zmm_m() {
			TestAssembler(c => c.vpopcntb(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpopcntb_zmm_k1z_zmmm512, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpopcntd_xmm_xmm() {
			TestAssembler(c => c.vpopcntd(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpopcntd_xmm_k1z_xmmm128b32, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpopcntd_ymm_ymm() {
			TestAssembler(c => c.vpopcntd(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpopcntd_ymm_k1z_ymmm256b32, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpopcntd_zmm_zmm() {
			TestAssembler(c => c.vpopcntd(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpopcntd_zmm_k1z_zmmm512b32, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpopcntd_xmm_m() {
			TestAssembler(c => c.vpopcntd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpopcntd_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpopcntd_ymm_m() {
			TestAssembler(c => c.vpopcntd(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpopcntd_ymm_k1z_ymmm256b32, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpopcntd_zmm_m() {
			TestAssembler(c => c.vpopcntd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpopcntd_zmm_k1z_zmmm512b32, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpopcntq_xmm_xmm() {
			TestAssembler(c => c.vpopcntq(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpopcntq_xmm_k1z_xmmm128b64, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpopcntq_ymm_ymm() {
			TestAssembler(c => c.vpopcntq(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpopcntq_ymm_k1z_ymmm256b64, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpopcntq_zmm_zmm() {
			TestAssembler(c => c.vpopcntq(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpopcntq_zmm_k1z_zmmm512b64, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpopcntq_xmm_m() {
			TestAssembler(c => c.vpopcntq(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpopcntq_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpopcntq_ymm_m() {
			TestAssembler(c => c.vpopcntq(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpopcntq_ymm_k1z_ymmm256b64, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpopcntq_zmm_m() {
			TestAssembler(c => c.vpopcntq(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpopcntq_zmm_k1z_zmmm512b64, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpopcntw_xmm_xmm() {
			TestAssembler(c => c.vpopcntw(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpopcntw_xmm_k1z_xmmm128, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpopcntw_ymm_ymm() {
			TestAssembler(c => c.vpopcntw(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpopcntw_ymm_k1z_ymmm256, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpopcntw_zmm_zmm() {
			TestAssembler(c => c.vpopcntw(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpopcntw_zmm_k1z_zmmm512, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpopcntw_xmm_m() {
			TestAssembler(c => c.vpopcntw(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpopcntw_xmm_k1z_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpopcntw_ymm_m() {
			TestAssembler(c => c.vpopcntw(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpopcntw_ymm_k1z_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpopcntw_zmm_m() {
			TestAssembler(c => c.vpopcntw(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpopcntw_zmm_k1z_zmmm512, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpor_xmm_xmm_xmm() {
			TestAssembler(c => c.vpor(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpor_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vpor_ymm_ymm_ymm() {
			TestAssembler(c => c.vpor(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpor_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vpor_xmm_xmm_m() {
			TestAssembler(c => c.vpor(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpor_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpor_ymm_ymm_m() {
			TestAssembler(c => c.vpor(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpor_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpord_xmm_xmm_xmm() {
			TestAssembler(c => c.vpord(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpord_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpord_ymm_ymm_ymm() {
			TestAssembler(c => c.vpord(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpord_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpord_zmm_zmm_zmm() {
			TestAssembler(c => c.vpord(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpord_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpord_xmm_xmm_m() {
			TestAssembler(c => c.vpord(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpord_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpord_ymm_ymm_m() {
			TestAssembler(c => c.vpord(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpord_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpord_zmm_zmm_m() {
			TestAssembler(c => c.vpord(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpord_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vporq_xmm_xmm_xmm() {
			TestAssembler(c => c.vporq(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vporq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vporq_ymm_ymm_ymm() {
			TestAssembler(c => c.vporq(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vporq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vporq_zmm_zmm_zmm() {
			TestAssembler(c => c.vporq(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vporq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vporq_xmm_xmm_m() {
			TestAssembler(c => c.vporq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vporq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vporq_ymm_ymm_m() {
			TestAssembler(c => c.vporq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vporq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vporq_zmm_zmm_m() {
			TestAssembler(c => c.vporq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vporq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpperm_xmm_xmm_xmm_xmm() {
			TestAssembler(c => c.vpperm(xmm2, xmm3, xmm4, xmm5), Instruction.Create(Code.XOP_Vpperm_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4, Register.XMM5));
		}

		[Fact]
		public void vpperm_xmm_xmm_m_xmm() {
			TestAssembler(c => c.vpperm(xmm2, xmm3, __xmmword_ptr[rcx], xmm5), Instruction.Create(Code.XOP_Vpperm_xmm_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM5));
		}

		[Fact]
		public void vpperm_xmm_xmm_xmm_m() {
			TestAssembler(c => c.vpperm(xmm2, xmm3, xmm4, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpperm_xmm_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vprold_xmm_xmm_i() {
			TestAssembler(c => c.vprold(xmm2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vprold_xmm_k1z_xmmm128b32_imm8, Register.XMM2, Register.XMM3, -5), Register.K1));
		}

		[Fact]
		public void vprold_ymm_ymm_i() {
			TestAssembler(c => c.vprold(ymm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vprold_ymm_k1z_ymmm256b32_imm8, Register.YMM2, Register.YMM3, -5), Register.K1));
		}

		[Fact]
		public void vprold_zmm_zmm_i() {
			TestAssembler(c => c.vprold(zmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vprold_zmm_k1z_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vprold_xmm_m_i() {
			TestAssembler(c => c.vprold(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vprold_xmm_k1z_xmmm128b32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vprold_ymm_m_i() {
			TestAssembler(c => c.vprold(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vprold_ymm_k1z_ymmm256b32_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vprold_zmm_m_i() {
			TestAssembler(c => c.vprold(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vprold_zmm_k1z_zmmm512b32_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vprold_xmm_xmm_u() {
			TestAssembler(c => c.vprold(xmm2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vprold_xmm_k1z_xmmm128b32_imm8, Register.XMM2, Register.XMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vprold_ymm_ymm_u() {
			TestAssembler(c => c.vprold(ymm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vprold_ymm_k1z_ymmm256b32_imm8, Register.YMM2, Register.YMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vprold_zmm_zmm_u() {
			TestAssembler(c => c.vprold(zmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vprold_zmm_k1z_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vprold_xmm_m_u() {
			TestAssembler(c => c.vprold(xmm2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vprold_xmm_k1z_xmmm128b32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vprold_ymm_m_u() {
			TestAssembler(c => c.vprold(ymm2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vprold_ymm_k1z_ymmm256b32_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vprold_zmm_m_u() {
			TestAssembler(c => c.vprold(zmm2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vprold_zmm_k1z_zmmm512b32_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vprolq_xmm_xmm_i() {
			TestAssembler(c => c.vprolq(xmm2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vprolq_xmm_k1z_xmmm128b64_imm8, Register.XMM2, Register.XMM3, -5), Register.K1));
		}

		[Fact]
		public void vprolq_ymm_ymm_i() {
			TestAssembler(c => c.vprolq(ymm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vprolq_ymm_k1z_ymmm256b64_imm8, Register.YMM2, Register.YMM3, -5), Register.K1));
		}

		[Fact]
		public void vprolq_zmm_zmm_i() {
			TestAssembler(c => c.vprolq(zmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vprolq_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vprolq_xmm_m_i() {
			TestAssembler(c => c.vprolq(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vprolq_xmm_k1z_xmmm128b64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vprolq_ymm_m_i() {
			TestAssembler(c => c.vprolq(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vprolq_ymm_k1z_ymmm256b64_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vprolq_zmm_m_i() {
			TestAssembler(c => c.vprolq(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vprolq_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vprolq_xmm_xmm_u() {
			TestAssembler(c => c.vprolq(xmm2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vprolq_xmm_k1z_xmmm128b64_imm8, Register.XMM2, Register.XMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vprolq_ymm_ymm_u() {
			TestAssembler(c => c.vprolq(ymm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vprolq_ymm_k1z_ymmm256b64_imm8, Register.YMM2, Register.YMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vprolq_zmm_zmm_u() {
			TestAssembler(c => c.vprolq(zmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vprolq_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vprolq_xmm_m_u() {
			TestAssembler(c => c.vprolq(xmm2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vprolq_xmm_k1z_xmmm128b64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vprolq_ymm_m_u() {
			TestAssembler(c => c.vprolq(ymm2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vprolq_ymm_k1z_ymmm256b64_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vprolq_zmm_m_u() {
			TestAssembler(c => c.vprolq(zmm2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vprolq_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vprolvd_xmm_xmm_xmm() {
			TestAssembler(c => c.vprolvd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vprolvd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vprolvd_ymm_ymm_ymm() {
			TestAssembler(c => c.vprolvd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vprolvd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vprolvd_zmm_zmm_zmm() {
			TestAssembler(c => c.vprolvd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vprolvd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vprolvd_xmm_xmm_m() {
			TestAssembler(c => c.vprolvd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vprolvd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vprolvd_ymm_ymm_m() {
			TestAssembler(c => c.vprolvd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vprolvd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vprolvd_zmm_zmm_m() {
			TestAssembler(c => c.vprolvd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vprolvd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vprolvq_xmm_xmm_xmm() {
			TestAssembler(c => c.vprolvq(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vprolvq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vprolvq_ymm_ymm_ymm() {
			TestAssembler(c => c.vprolvq(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vprolvq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vprolvq_zmm_zmm_zmm() {
			TestAssembler(c => c.vprolvq(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vprolvq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vprolvq_xmm_xmm_m() {
			TestAssembler(c => c.vprolvq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vprolvq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vprolvq_ymm_ymm_m() {
			TestAssembler(c => c.vprolvq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vprolvq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vprolvq_zmm_zmm_m() {
			TestAssembler(c => c.vprolvq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vprolvq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vprord_xmm_xmm_i() {
			TestAssembler(c => c.vprord(xmm2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vprord_xmm_k1z_xmmm128b32_imm8, Register.XMM2, Register.XMM3, -5), Register.K1));
		}

		[Fact]
		public void vprord_ymm_ymm_i() {
			TestAssembler(c => c.vprord(ymm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vprord_ymm_k1z_ymmm256b32_imm8, Register.YMM2, Register.YMM3, -5), Register.K1));
		}

		[Fact]
		public void vprord_zmm_zmm_i() {
			TestAssembler(c => c.vprord(zmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vprord_zmm_k1z_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vprord_xmm_m_i() {
			TestAssembler(c => c.vprord(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vprord_xmm_k1z_xmmm128b32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vprord_ymm_m_i() {
			TestAssembler(c => c.vprord(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vprord_ymm_k1z_ymmm256b32_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vprord_zmm_m_i() {
			TestAssembler(c => c.vprord(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vprord_zmm_k1z_zmmm512b32_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vprord_xmm_xmm_u() {
			TestAssembler(c => c.vprord(xmm2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vprord_xmm_k1z_xmmm128b32_imm8, Register.XMM2, Register.XMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vprord_ymm_ymm_u() {
			TestAssembler(c => c.vprord(ymm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vprord_ymm_k1z_ymmm256b32_imm8, Register.YMM2, Register.YMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vprord_zmm_zmm_u() {
			TestAssembler(c => c.vprord(zmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vprord_zmm_k1z_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vprord_xmm_m_u() {
			TestAssembler(c => c.vprord(xmm2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vprord_xmm_k1z_xmmm128b32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vprord_ymm_m_u() {
			TestAssembler(c => c.vprord(ymm2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vprord_ymm_k1z_ymmm256b32_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vprord_zmm_m_u() {
			TestAssembler(c => c.vprord(zmm2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vprord_zmm_k1z_zmmm512b32_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vprorq_xmm_xmm_i() {
			TestAssembler(c => c.vprorq(xmm2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vprorq_xmm_k1z_xmmm128b64_imm8, Register.XMM2, Register.XMM3, -5), Register.K1));
		}

		[Fact]
		public void vprorq_ymm_ymm_i() {
			TestAssembler(c => c.vprorq(ymm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vprorq_ymm_k1z_ymmm256b64_imm8, Register.YMM2, Register.YMM3, -5), Register.K1));
		}

		[Fact]
		public void vprorq_zmm_zmm_i() {
			TestAssembler(c => c.vprorq(zmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vprorq_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vprorq_xmm_m_i() {
			TestAssembler(c => c.vprorq(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vprorq_xmm_k1z_xmmm128b64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vprorq_ymm_m_i() {
			TestAssembler(c => c.vprorq(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vprorq_ymm_k1z_ymmm256b64_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vprorq_zmm_m_i() {
			TestAssembler(c => c.vprorq(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vprorq_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vprorq_xmm_xmm_u() {
			TestAssembler(c => c.vprorq(xmm2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vprorq_xmm_k1z_xmmm128b64_imm8, Register.XMM2, Register.XMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vprorq_ymm_ymm_u() {
			TestAssembler(c => c.vprorq(ymm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vprorq_ymm_k1z_ymmm256b64_imm8, Register.YMM2, Register.YMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vprorq_zmm_zmm_u() {
			TestAssembler(c => c.vprorq(zmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vprorq_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vprorq_xmm_m_u() {
			TestAssembler(c => c.vprorq(xmm2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vprorq_xmm_k1z_xmmm128b64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vprorq_ymm_m_u() {
			TestAssembler(c => c.vprorq(ymm2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vprorq_ymm_k1z_ymmm256b64_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vprorq_zmm_m_u() {
			TestAssembler(c => c.vprorq(zmm2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vprorq_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vprorvd_xmm_xmm_xmm() {
			TestAssembler(c => c.vprorvd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vprorvd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vprorvd_ymm_ymm_ymm() {
			TestAssembler(c => c.vprorvd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vprorvd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vprorvd_zmm_zmm_zmm() {
			TestAssembler(c => c.vprorvd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vprorvd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vprorvd_xmm_xmm_m() {
			TestAssembler(c => c.vprorvd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vprorvd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vprorvd_ymm_ymm_m() {
			TestAssembler(c => c.vprorvd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vprorvd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vprorvd_zmm_zmm_m() {
			TestAssembler(c => c.vprorvd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vprorvd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vprorvq_xmm_xmm_xmm() {
			TestAssembler(c => c.vprorvq(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vprorvq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vprorvq_ymm_ymm_ymm() {
			TestAssembler(c => c.vprorvq(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vprorvq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vprorvq_zmm_zmm_zmm() {
			TestAssembler(c => c.vprorvq(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vprorvq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vprorvq_xmm_xmm_m() {
			TestAssembler(c => c.vprorvq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vprorvq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vprorvq_ymm_ymm_m() {
			TestAssembler(c => c.vprorvq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vprorvq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vprorvq_zmm_zmm_m() {
			TestAssembler(c => c.vprorvq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vprorvq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vprotb_xmm_xmm_xmm() {
			TestAssembler(c => c.vprotb(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vprotb_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vprotb_xmm_m_xmm() {
			TestAssembler(c => c.vprotb(xmm2, __xmmword_ptr[rcx], xmm4), Instruction.Create(Code.XOP_Vprotb_xmm_xmmm128_xmm, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM4));
		}

		[Fact]
		public void vprotb_xmm_xmm_m() {
			TestAssembler(c => c.vprotb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vprotb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vprotb_xmm_xmm_i() {
			TestAssembler(c => c.vprotb(xmm2, xmm3, -5), Instruction.Create(Code.XOP_Vprotb_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void vprotb_xmm_m_i() {
			TestAssembler(c => c.vprotb(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.XOP_Vprotb_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vprotb_xmm_xmm_u() {
			TestAssembler(c => c.vprotb(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.XOP_Vprotb_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void vprotb_xmm_m_u() {
			TestAssembler(c => c.vprotb(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.XOP_Vprotb_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vprotd_xmm_xmm_xmm() {
			TestAssembler(c => c.vprotd(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vprotd_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vprotd_xmm_m_xmm() {
			TestAssembler(c => c.vprotd(xmm2, __xmmword_ptr[rcx], xmm4), Instruction.Create(Code.XOP_Vprotd_xmm_xmmm128_xmm, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM4));
		}

		[Fact]
		public void vprotd_xmm_xmm_m() {
			TestAssembler(c => c.vprotd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vprotd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vprotd_xmm_xmm_i() {
			TestAssembler(c => c.vprotd(xmm2, xmm3, -5), Instruction.Create(Code.XOP_Vprotd_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void vprotd_xmm_m_i() {
			TestAssembler(c => c.vprotd(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.XOP_Vprotd_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vprotd_xmm_xmm_u() {
			TestAssembler(c => c.vprotd(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.XOP_Vprotd_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void vprotd_xmm_m_u() {
			TestAssembler(c => c.vprotd(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.XOP_Vprotd_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vprotq_xmm_xmm_xmm() {
			TestAssembler(c => c.vprotq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vprotq_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vprotq_xmm_m_xmm() {
			TestAssembler(c => c.vprotq(xmm2, __xmmword_ptr[rcx], xmm4), Instruction.Create(Code.XOP_Vprotq_xmm_xmmm128_xmm, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM4));
		}

		[Fact]
		public void vprotq_xmm_xmm_m() {
			TestAssembler(c => c.vprotq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vprotq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vprotq_xmm_xmm_i() {
			TestAssembler(c => c.vprotq(xmm2, xmm3, -5), Instruction.Create(Code.XOP_Vprotq_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void vprotq_xmm_m_i() {
			TestAssembler(c => c.vprotq(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.XOP_Vprotq_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vprotq_xmm_xmm_u() {
			TestAssembler(c => c.vprotq(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.XOP_Vprotq_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void vprotq_xmm_m_u() {
			TestAssembler(c => c.vprotq(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.XOP_Vprotq_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vprotw_xmm_xmm_xmm() {
			TestAssembler(c => c.vprotw(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vprotw_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vprotw_xmm_m_xmm() {
			TestAssembler(c => c.vprotw(xmm2, __xmmword_ptr[rcx], xmm4), Instruction.Create(Code.XOP_Vprotw_xmm_xmmm128_xmm, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM4));
		}

		[Fact]
		public void vprotw_xmm_xmm_m() {
			TestAssembler(c => c.vprotw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vprotw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vprotw_xmm_xmm_i() {
			TestAssembler(c => c.vprotw(xmm2, xmm3, -5), Instruction.Create(Code.XOP_Vprotw_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void vprotw_xmm_m_i() {
			TestAssembler(c => c.vprotw(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.XOP_Vprotw_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vprotw_xmm_xmm_u() {
			TestAssembler(c => c.vprotw(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.XOP_Vprotw_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void vprotw_xmm_m_u() {
			TestAssembler(c => c.vprotw(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.XOP_Vprotw_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vpsadbw_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsadbw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsadbw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsadbw(xmm2, xmm3, xmm4), Instruction.Create(Code.EVEX_Vpsadbw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsadbw_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsadbw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsadbw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsadbw(ymm2, ymm3, ymm4), Instruction.Create(Code.EVEX_Vpsadbw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsadbw_zmm_zmm_zmm() {
			TestAssembler(c => c.vpsadbw(zmm2, zmm3, zmm4), Instruction.Create(Code.EVEX_Vpsadbw_zmm_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4));
		}

		[Fact]
		public void vpsadbw_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsadbw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsadbw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsadbw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vpsadbw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsadbw_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsadbw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsadbw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsadbw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vpsadbw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsadbw_zmm_zmm_m() {
			TestAssembler(c => c.vpsadbw(zmm2, zmm3, __zmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vpsadbw_zmm_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpscatterdd_m_xmm() {
			TestAssembler(c => c.vpscatterdd(__[rdx+xmm2].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpscatterdd_vm32x_k1_xmm, new MemoryOperand(Register.RDX, Register.XMM2, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpscatterdd_m_ymm() {
			TestAssembler(c => c.vpscatterdd(__[rdx+ymm2].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpscatterdd_vm32y_k1_ymm, new MemoryOperand(Register.RDX, Register.YMM2, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpscatterdd_m_zmm() {
			TestAssembler(c => c.vpscatterdd(__[rdx+zmm2].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpscatterdd_vm32z_k1_zmm, new MemoryOperand(Register.RDX, Register.ZMM2, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpscatterdq_m_xmm() {
			TestAssembler(c => c.vpscatterdq(__[rdx+xmm2].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpscatterdq_vm32x_k1_xmm, new MemoryOperand(Register.RDX, Register.XMM2, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpscatterdq_m_ymm() {
			TestAssembler(c => c.vpscatterdq(__[rdx+xmm2].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpscatterdq_vm32x_k1_ymm, new MemoryOperand(Register.RDX, Register.XMM2, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpscatterdq_m_zmm() {
			TestAssembler(c => c.vpscatterdq(__[rdx+ymm2].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpscatterdq_vm32y_k1_zmm, new MemoryOperand(Register.RDX, Register.YMM2, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpscatterqd_m_xmm() {
			{ /* if (dst.Index.IsXMM()) */
				TestAssembler(c => c.vpscatterqd(__[rdx+xmm2].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpscatterqd_vm64x_k1_xmm, new MemoryOperand(Register.RDX, Register.XMM2, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
			} /* else */ { /* if (dst.Index.IsYMM()) */
				TestAssembler(c => c.vpscatterqd(__[rdx+ymm2].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpscatterqd_vm64y_k1_xmm, new MemoryOperand(Register.RDX, Register.YMM2, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.vpscatterqd(__[rdx+zmm0].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpscatterqd_vm64y_k1_xmm, new MemoryOperand(Register.RDX, Register.ZMM0, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
				});
			}
		}

		[Fact]
		public void vpscatterqd_m_ymm() {
			TestAssembler(c => c.vpscatterqd(__[rdx+zmm2].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpscatterqd_vm64z_k1_ymm, new MemoryOperand(Register.RDX, Register.ZMM2, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpscatterqq_m_xmm() {
			TestAssembler(c => c.vpscatterqq(__[rdx+xmm2].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vpscatterqq_vm64x_k1_xmm, new MemoryOperand(Register.RDX, Register.XMM2, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vpscatterqq_m_ymm() {
			TestAssembler(c => c.vpscatterqq(__[rdx+ymm2].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vpscatterqq_vm64y_k1_ymm, new MemoryOperand(Register.RDX, Register.YMM2, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vpscatterqq_m_zmm() {
			TestAssembler(c => c.vpscatterqq(__[rdx+zmm2].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vpscatterqq_vm64z_k1_zmm, new MemoryOperand(Register.RDX, Register.ZMM2, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vpshab_xmm_xmm_xmm() {
			TestAssembler(c => c.vpshab(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpshab_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vpshab_xmm_m_xmm() {
			TestAssembler(c => c.vpshab(xmm2, __xmmword_ptr[rcx], xmm4), Instruction.Create(Code.XOP_Vpshab_xmm_xmmm128_xmm, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM4));
		}

		[Fact]
		public void vpshab_xmm_xmm_m() {
			TestAssembler(c => c.vpshab(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpshab_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpshad_xmm_xmm_xmm() {
			TestAssembler(c => c.vpshad(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpshad_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vpshad_xmm_m_xmm() {
			TestAssembler(c => c.vpshad(xmm2, __xmmword_ptr[rcx], xmm4), Instruction.Create(Code.XOP_Vpshad_xmm_xmmm128_xmm, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM4));
		}

		[Fact]
		public void vpshad_xmm_xmm_m() {
			TestAssembler(c => c.vpshad(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpshad_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpshaq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpshaq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpshaq_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vpshaq_xmm_m_xmm() {
			TestAssembler(c => c.vpshaq(xmm2, __xmmword_ptr[rcx], xmm4), Instruction.Create(Code.XOP_Vpshaq_xmm_xmmm128_xmm, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM4));
		}

		[Fact]
		public void vpshaq_xmm_xmm_m() {
			TestAssembler(c => c.vpshaq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpshaq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpshaw_xmm_xmm_xmm() {
			TestAssembler(c => c.vpshaw(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpshaw_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vpshaw_xmm_m_xmm() {
			TestAssembler(c => c.vpshaw(xmm2, __xmmword_ptr[rcx], xmm4), Instruction.Create(Code.XOP_Vpshaw_xmm_xmmm128_xmm, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM4));
		}

		[Fact]
		public void vpshaw_xmm_xmm_m() {
			TestAssembler(c => c.vpshaw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpshaw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpshlb_xmm_xmm_xmm() {
			TestAssembler(c => c.vpshlb(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpshlb_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vpshlb_xmm_m_xmm() {
			TestAssembler(c => c.vpshlb(xmm2, __xmmword_ptr[rcx], xmm4), Instruction.Create(Code.XOP_Vpshlb_xmm_xmmm128_xmm, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM4));
		}

		[Fact]
		public void vpshlb_xmm_xmm_m() {
			TestAssembler(c => c.vpshlb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpshlb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpshld_xmm_xmm_xmm() {
			TestAssembler(c => c.vpshld(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpshld_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vpshld_xmm_m_xmm() {
			TestAssembler(c => c.vpshld(xmm2, __xmmword_ptr[rcx], xmm4), Instruction.Create(Code.XOP_Vpshld_xmm_xmmm128_xmm, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM4));
		}

		[Fact]
		public void vpshld_xmm_xmm_m() {
			TestAssembler(c => c.vpshld(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpshld_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpshldd_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vpshldd(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpshldd_xmm_k1z_xmm_xmmm128b32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vpshldd_ymm_ymm_ymm_i() {
			TestAssembler(c => c.vpshldd(ymm2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpshldd_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vpshldd_zmm_zmm_zmm_i() {
			TestAssembler(c => c.vpshldd(zmm2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpshldd_zmm_k1z_zmm_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vpshldd_xmm_xmm_m_i() {
			TestAssembler(c => c.vpshldd(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpshldd_xmm_k1z_xmm_xmmm128b32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpshldd_ymm_ymm_m_i() {
			TestAssembler(c => c.vpshldd(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpshldd_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpshldd_zmm_zmm_m_i() {
			TestAssembler(c => c.vpshldd(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpshldd_zmm_k1z_zmm_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpshldd_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vpshldd(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshldd_xmm_k1z_xmm_xmmm128b32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshldd_ymm_ymm_ymm_u() {
			TestAssembler(c => c.vpshldd(ymm2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshldd_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshldd_zmm_zmm_zmm_u() {
			TestAssembler(c => c.vpshldd(zmm2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshldd_zmm_k1z_zmm_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshldd_xmm_xmm_m_u() {
			TestAssembler(c => c.vpshldd(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshldd_xmm_k1z_xmm_xmmm128b32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshldd_ymm_ymm_m_u() {
			TestAssembler(c => c.vpshldd(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshldd_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshldd_zmm_zmm_m_u() {
			TestAssembler(c => c.vpshldd(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshldd_zmm_k1z_zmm_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshldq_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vpshldq(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpshldq_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vpshldq_ymm_ymm_ymm_i() {
			TestAssembler(c => c.vpshldq(ymm2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpshldq_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vpshldq_zmm_zmm_zmm_i() {
			TestAssembler(c => c.vpshldq(zmm2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpshldq_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vpshldq_xmm_xmm_m_i() {
			TestAssembler(c => c.vpshldq(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpshldq_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpshldq_ymm_ymm_m_i() {
			TestAssembler(c => c.vpshldq(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpshldq_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpshldq_zmm_zmm_m_i() {
			TestAssembler(c => c.vpshldq(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpshldq_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpshldq_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vpshldq(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshldq_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshldq_ymm_ymm_ymm_u() {
			TestAssembler(c => c.vpshldq(ymm2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshldq_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshldq_zmm_zmm_zmm_u() {
			TestAssembler(c => c.vpshldq(zmm2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshldq_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshldq_xmm_xmm_m_u() {
			TestAssembler(c => c.vpshldq(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshldq_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshldq_ymm_ymm_m_u() {
			TestAssembler(c => c.vpshldq(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshldq_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshldq_zmm_zmm_m_u() {
			TestAssembler(c => c.vpshldq(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshldq_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshldvd_xmm_xmm_xmm() {
			TestAssembler(c => c.vpshldvd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpshldvd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpshldvd_ymm_ymm_ymm() {
			TestAssembler(c => c.vpshldvd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpshldvd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpshldvd_zmm_zmm_zmm() {
			TestAssembler(c => c.vpshldvd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpshldvd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpshldvd_xmm_xmm_m() {
			TestAssembler(c => c.vpshldvd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpshldvd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpshldvd_ymm_ymm_m() {
			TestAssembler(c => c.vpshldvd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpshldvd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpshldvd_zmm_zmm_m() {
			TestAssembler(c => c.vpshldvd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpshldvd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpshldvq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpshldvq(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpshldvq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpshldvq_ymm_ymm_ymm() {
			TestAssembler(c => c.vpshldvq(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpshldvq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpshldvq_zmm_zmm_zmm() {
			TestAssembler(c => c.vpshldvq(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpshldvq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpshldvq_xmm_xmm_m() {
			TestAssembler(c => c.vpshldvq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpshldvq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpshldvq_ymm_ymm_m() {
			TestAssembler(c => c.vpshldvq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpshldvq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpshldvq_zmm_zmm_m() {
			TestAssembler(c => c.vpshldvq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpshldvq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpshldvw_xmm_xmm_xmm() {
			TestAssembler(c => c.vpshldvw(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpshldvw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpshldvw_ymm_ymm_ymm() {
			TestAssembler(c => c.vpshldvw(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpshldvw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpshldvw_zmm_zmm_zmm() {
			TestAssembler(c => c.vpshldvw(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpshldvw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpshldvw_xmm_xmm_m() {
			TestAssembler(c => c.vpshldvw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpshldvw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpshldvw_ymm_ymm_m() {
			TestAssembler(c => c.vpshldvw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpshldvw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpshldvw_zmm_zmm_m() {
			TestAssembler(c => c.vpshldvw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpshldvw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpshldw_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vpshldw(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpshldw_xmm_k1z_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vpshldw_ymm_ymm_ymm_i() {
			TestAssembler(c => c.vpshldw(ymm2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpshldw_ymm_k1z_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vpshldw_zmm_zmm_zmm_i() {
			TestAssembler(c => c.vpshldw(zmm2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpshldw_zmm_k1z_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vpshldw_xmm_xmm_m_i() {
			TestAssembler(c => c.vpshldw(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpshldw_xmm_k1z_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpshldw_ymm_ymm_m_i() {
			TestAssembler(c => c.vpshldw(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpshldw_ymm_k1z_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpshldw_zmm_zmm_m_i() {
			TestAssembler(c => c.vpshldw(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpshldw_zmm_k1z_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpshldw_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vpshldw(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshldw_xmm_k1z_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshldw_ymm_ymm_ymm_u() {
			TestAssembler(c => c.vpshldw(ymm2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshldw_ymm_k1z_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshldw_zmm_zmm_zmm_u() {
			TestAssembler(c => c.vpshldw(zmm2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshldw_zmm_k1z_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshldw_xmm_xmm_m_u() {
			TestAssembler(c => c.vpshldw(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshldw_xmm_k1z_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshldw_ymm_ymm_m_u() {
			TestAssembler(c => c.vpshldw(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshldw_ymm_k1z_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshldw_zmm_zmm_m_u() {
			TestAssembler(c => c.vpshldw(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshldw_zmm_k1z_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshlq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpshlq(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpshlq_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vpshlq_xmm_m_xmm() {
			TestAssembler(c => c.vpshlq(xmm2, __xmmword_ptr[rcx], xmm4), Instruction.Create(Code.XOP_Vpshlq_xmm_xmmm128_xmm, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM4));
		}

		[Fact]
		public void vpshlq_xmm_xmm_m() {
			TestAssembler(c => c.vpshlq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpshlq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpshlw_xmm_xmm_xmm() {
			TestAssembler(c => c.vpshlw(xmm2, xmm3, xmm4), Instruction.Create(Code.XOP_Vpshlw_xmm_xmmm128_xmm, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vpshlw_xmm_m_xmm() {
			TestAssembler(c => c.vpshlw(xmm2, __xmmword_ptr[rcx], xmm4), Instruction.Create(Code.XOP_Vpshlw_xmm_xmmm128_xmm, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.XMM4));
		}

		[Fact]
		public void vpshlw_xmm_xmm_m() {
			TestAssembler(c => c.vpshlw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.XOP_Vpshlw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpshrdd_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vpshrdd(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpshrdd_xmm_k1z_xmm_xmmm128b32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vpshrdd_ymm_ymm_ymm_i() {
			TestAssembler(c => c.vpshrdd(ymm2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpshrdd_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vpshrdd_zmm_zmm_zmm_i() {
			TestAssembler(c => c.vpshrdd(zmm2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpshrdd_zmm_k1z_zmm_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vpshrdd_xmm_xmm_m_i() {
			TestAssembler(c => c.vpshrdd(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpshrdd_xmm_k1z_xmm_xmmm128b32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpshrdd_ymm_ymm_m_i() {
			TestAssembler(c => c.vpshrdd(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpshrdd_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpshrdd_zmm_zmm_m_i() {
			TestAssembler(c => c.vpshrdd(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpshrdd_zmm_k1z_zmm_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpshrdd_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vpshrdd(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshrdd_xmm_k1z_xmm_xmmm128b32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshrdd_ymm_ymm_ymm_u() {
			TestAssembler(c => c.vpshrdd(ymm2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshrdd_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshrdd_zmm_zmm_zmm_u() {
			TestAssembler(c => c.vpshrdd(zmm2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshrdd_zmm_k1z_zmm_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshrdd_xmm_xmm_m_u() {
			TestAssembler(c => c.vpshrdd(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshrdd_xmm_k1z_xmm_xmmm128b32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshrdd_ymm_ymm_m_u() {
			TestAssembler(c => c.vpshrdd(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshrdd_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshrdd_zmm_zmm_m_u() {
			TestAssembler(c => c.vpshrdd(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshrdd_zmm_k1z_zmm_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshrdq_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vpshrdq(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpshrdq_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vpshrdq_ymm_ymm_ymm_i() {
			TestAssembler(c => c.vpshrdq(ymm2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpshrdq_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vpshrdq_zmm_zmm_zmm_i() {
			TestAssembler(c => c.vpshrdq(zmm2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpshrdq_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vpshrdq_xmm_xmm_m_i() {
			TestAssembler(c => c.vpshrdq(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpshrdq_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpshrdq_ymm_ymm_m_i() {
			TestAssembler(c => c.vpshrdq(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpshrdq_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpshrdq_zmm_zmm_m_i() {
			TestAssembler(c => c.vpshrdq(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpshrdq_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpshrdq_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vpshrdq(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshrdq_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshrdq_ymm_ymm_ymm_u() {
			TestAssembler(c => c.vpshrdq(ymm2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshrdq_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshrdq_zmm_zmm_zmm_u() {
			TestAssembler(c => c.vpshrdq(zmm2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshrdq_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshrdq_xmm_xmm_m_u() {
			TestAssembler(c => c.vpshrdq(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshrdq_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshrdq_ymm_ymm_m_u() {
			TestAssembler(c => c.vpshrdq(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshrdq_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshrdq_zmm_zmm_m_u() {
			TestAssembler(c => c.vpshrdq(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshrdq_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshrdvd_xmm_xmm_xmm() {
			TestAssembler(c => c.vpshrdvd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpshrdvd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpshrdvd_ymm_ymm_ymm() {
			TestAssembler(c => c.vpshrdvd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpshrdvd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpshrdvd_zmm_zmm_zmm() {
			TestAssembler(c => c.vpshrdvd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpshrdvd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpshrdvd_xmm_xmm_m() {
			TestAssembler(c => c.vpshrdvd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpshrdvd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpshrdvd_ymm_ymm_m() {
			TestAssembler(c => c.vpshrdvd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpshrdvd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpshrdvd_zmm_zmm_m() {
			TestAssembler(c => c.vpshrdvd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpshrdvd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpshrdvq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpshrdvq(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpshrdvq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpshrdvq_ymm_ymm_ymm() {
			TestAssembler(c => c.vpshrdvq(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpshrdvq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpshrdvq_zmm_zmm_zmm() {
			TestAssembler(c => c.vpshrdvq(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpshrdvq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpshrdvq_xmm_xmm_m() {
			TestAssembler(c => c.vpshrdvq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpshrdvq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpshrdvq_ymm_ymm_m() {
			TestAssembler(c => c.vpshrdvq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpshrdvq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpshrdvq_zmm_zmm_m() {
			TestAssembler(c => c.vpshrdvq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpshrdvq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpshrdvw_xmm_xmm_xmm() {
			TestAssembler(c => c.vpshrdvw(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpshrdvw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpshrdvw_ymm_ymm_ymm() {
			TestAssembler(c => c.vpshrdvw(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpshrdvw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpshrdvw_zmm_zmm_zmm() {
			TestAssembler(c => c.vpshrdvw(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpshrdvw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpshrdvw_xmm_xmm_m() {
			TestAssembler(c => c.vpshrdvw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpshrdvw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpshrdvw_ymm_ymm_m() {
			TestAssembler(c => c.vpshrdvw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpshrdvw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpshrdvw_zmm_zmm_m() {
			TestAssembler(c => c.vpshrdvw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpshrdvw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpshrdw_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vpshrdw(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpshrdw_xmm_k1z_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vpshrdw_ymm_ymm_ymm_i() {
			TestAssembler(c => c.vpshrdw(ymm2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpshrdw_ymm_k1z_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vpshrdw_zmm_zmm_zmm_i() {
			TestAssembler(c => c.vpshrdw(zmm2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpshrdw_zmm_k1z_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vpshrdw_xmm_xmm_m_i() {
			TestAssembler(c => c.vpshrdw(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpshrdw_xmm_k1z_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpshrdw_ymm_ymm_m_i() {
			TestAssembler(c => c.vpshrdw(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpshrdw_ymm_k1z_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpshrdw_zmm_zmm_m_i() {
			TestAssembler(c => c.vpshrdw(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpshrdw_zmm_k1z_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpshrdw_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vpshrdw(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshrdw_xmm_k1z_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshrdw_ymm_ymm_ymm_u() {
			TestAssembler(c => c.vpshrdw(ymm2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshrdw_ymm_k1z_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshrdw_zmm_zmm_zmm_u() {
			TestAssembler(c => c.vpshrdw(zmm2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshrdw_zmm_k1z_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshrdw_xmm_xmm_m_u() {
			TestAssembler(c => c.vpshrdw(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshrdw_xmm_k1z_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshrdw_ymm_ymm_m_u() {
			TestAssembler(c => c.vpshrdw(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshrdw_ymm_k1z_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshrdw_zmm_zmm_m_u() {
			TestAssembler(c => c.vpshrdw(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshrdw_zmm_k1z_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshufb_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpshufb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpshufb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufb(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpshufb_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpshufb_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpshufb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpshufb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufb(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpshufb_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpshufb_zmm_zmm_zmm() {
			TestAssembler(c => c.vpshufb(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpshufb_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpshufb_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpshufb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpshufb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpshufb_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpshufb_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpshufb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpshufb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpshufb_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpshufb_zmm_zmm_m() {
			TestAssembler(c => c.vpshufb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpshufb_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpshufbitqmb_kr_xmm_xmm() {
			TestAssembler(c => c.vpshufbitqmb(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpshufbitqmb_kr_k1_xmm_xmmm128, Register.K2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpshufbitqmb_kr_ymm_ymm() {
			TestAssembler(c => c.vpshufbitqmb(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpshufbitqmb_kr_k1_ymm_ymmm256, Register.K2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpshufbitqmb_kr_zmm_zmm() {
			TestAssembler(c => c.vpshufbitqmb(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpshufbitqmb_kr_k1_zmm_zmmm512, Register.K2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpshufbitqmb_kr_xmm_m() {
			TestAssembler(c => c.vpshufbitqmb(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpshufbitqmb_kr_k1_xmm_xmmm128, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpshufbitqmb_kr_ymm_m() {
			TestAssembler(c => c.vpshufbitqmb(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpshufbitqmb_kr_k1_ymm_ymmm256, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpshufbitqmb_kr_zmm_m() {
			TestAssembler(c => c.vpshufbitqmb(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpshufbitqmb_kr_k1_zmm_zmmm512, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpshufd_xmm_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpshufd(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpshufd_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufd(xmm2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8, Register.XMM2, Register.XMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpshufd_ymm_ymm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpshufd(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpshufd_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufd(ymm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8, Register.YMM2, Register.YMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpshufd_zmm_zmm_i() {
			TestAssembler(c => c.vpshufd(zmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpshufd_zmm_k1z_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vpshufd_xmm_m_i() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpshufd(xmm2.k1, __dword_bcst[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpshufd(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpshufd_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufd(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpshufd_ymm_m_i() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpshufd(ymm2.k1, __dword_bcst[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8, Register.YMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpshufd(ymm2, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpshufd_ymm_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufd(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpshufd_zmm_m_i() {
			TestAssembler(c => c.vpshufd(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpshufd_zmm_k1z_zmmm512b32_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpshufd_xmm_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpshufd(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpshufd_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufd(xmm2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8, Register.XMM2, Register.XMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpshufd_ymm_ymm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpshufd(ymm2, ymm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpshufd_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufd(ymm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8, Register.YMM2, Register.YMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpshufd_zmm_zmm_u() {
			TestAssembler(c => c.vpshufd(zmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshufd_zmm_k1z_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshufd_xmm_m_u() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpshufd(xmm2.k1, __dword_bcst[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpshufd(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vpshufd_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufd(xmm2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshufd_xmm_k1z_xmmm128b32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpshufd_ymm_m_u() {
			{ /* if (src1.IsBroadcast) */
				TestAssembler(c => c.vpshufd(ymm2.k1, __dword_bcst[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8, Register.YMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpshufd(ymm2, __ymmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vpshufd_ymm_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufd(ymm2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshufd_ymm_k1z_ymmm256b32_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpshufd_zmm_m_u() {
			TestAssembler(c => c.vpshufd(zmm2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshufd_zmm_k1z_zmmm512b32_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshufhw_xmm_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpshufhw(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpshufhw_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufhw(xmm2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpshufhw_xmm_k1z_xmmm128_imm8, Register.XMM2, Register.XMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpshufhw_ymm_ymm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpshufhw(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpshufhw_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufhw(ymm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpshufhw_ymm_k1z_ymmm256_imm8, Register.YMM2, Register.YMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpshufhw_zmm_zmm_i() {
			TestAssembler(c => c.vpshufhw(zmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpshufhw_zmm_k1z_zmmm512_imm8, Register.ZMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vpshufhw_xmm_m_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpshufhw(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpshufhw_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufhw(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpshufhw_xmm_k1z_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpshufhw_ymm_m_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpshufhw(ymm2, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpshufhw_ymm_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufhw(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpshufhw_ymm_k1z_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpshufhw_zmm_m_i() {
			TestAssembler(c => c.vpshufhw(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpshufhw_zmm_k1z_zmmm512_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpshufhw_xmm_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpshufhw(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpshufhw_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufhw(xmm2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshufhw_xmm_k1z_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpshufhw_ymm_ymm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpshufhw(ymm2, ymm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpshufhw_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufhw(ymm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshufhw_ymm_k1z_ymmm256_imm8, Register.YMM2, Register.YMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpshufhw_zmm_zmm_u() {
			TestAssembler(c => c.vpshufhw(zmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshufhw_zmm_k1z_zmmm512_imm8, Register.ZMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshufhw_xmm_m_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpshufhw(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vpshufhw_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufhw(xmm2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshufhw_xmm_k1z_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpshufhw_ymm_m_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpshufhw(ymm2, __ymmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vpshufhw_ymm_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshufhw(ymm2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshufhw_ymm_k1z_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpshufhw_zmm_m_u() {
			TestAssembler(c => c.vpshufhw(zmm2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshufhw_zmm_k1z_zmmm512_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshuflw_xmm_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpshuflw(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpshuflw_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshuflw(xmm2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpshuflw_xmm_k1z_xmmm128_imm8, Register.XMM2, Register.XMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpshuflw_ymm_ymm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpshuflw(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpshuflw_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshuflw(ymm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpshuflw_ymm_k1z_ymmm256_imm8, Register.YMM2, Register.YMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpshuflw_zmm_zmm_i() {
			TestAssembler(c => c.vpshuflw(zmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpshuflw_zmm_k1z_zmmm512_imm8, Register.ZMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vpshuflw_xmm_m_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpshuflw(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpshuflw_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshuflw(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpshuflw_xmm_k1z_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpshuflw_ymm_m_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpshuflw(ymm2, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vpshuflw_ymm_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshuflw(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpshuflw_ymm_k1z_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpshuflw_zmm_m_i() {
			TestAssembler(c => c.vpshuflw(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpshuflw_zmm_k1z_zmmm512_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpshuflw_xmm_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpshuflw(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpshuflw_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshuflw(xmm2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshuflw_xmm_k1z_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpshuflw_ymm_ymm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpshuflw(ymm2, ymm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpshuflw_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshuflw(ymm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshuflw_ymm_k1z_ymmm256_imm8, Register.YMM2, Register.YMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpshuflw_zmm_zmm_u() {
			TestAssembler(c => c.vpshuflw(zmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshuflw_zmm_k1z_zmmm512_imm8, Register.ZMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpshuflw_xmm_m_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpshuflw(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vpshuflw_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshuflw(xmm2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshuflw_xmm_k1z_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpshuflw_ymm_m_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpshuflw(ymm2, __ymmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vpshuflw_ymm_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpshuflw(ymm2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshuflw_ymm_k1z_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpshuflw_zmm_m_u() {
			TestAssembler(c => c.vpshuflw(zmm2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpshuflw_zmm_k1z_zmmm512_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsignb_xmm_xmm_xmm() {
			TestAssembler(c => c.vpsignb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsignb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vpsignb_ymm_ymm_ymm() {
			TestAssembler(c => c.vpsignb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsignb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vpsignb_xmm_xmm_m() {
			TestAssembler(c => c.vpsignb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsignb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpsignb_ymm_ymm_m() {
			TestAssembler(c => c.vpsignb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsignb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpsignd_xmm_xmm_xmm() {
			TestAssembler(c => c.vpsignd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsignd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vpsignd_ymm_ymm_ymm() {
			TestAssembler(c => c.vpsignd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsignd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vpsignd_xmm_xmm_m() {
			TestAssembler(c => c.vpsignd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsignd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpsignd_ymm_ymm_m() {
			TestAssembler(c => c.vpsignd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsignd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpsignw_xmm_xmm_xmm() {
			TestAssembler(c => c.vpsignw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsignw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vpsignw_ymm_ymm_ymm() {
			TestAssembler(c => c.vpsignw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsignw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vpsignw_xmm_xmm_m() {
			TestAssembler(c => c.vpsignw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsignw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpsignw_ymm_ymm_m() {
			TestAssembler(c => c.vpsignw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsignw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpslld_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpslld(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpslld_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpslld(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpslld_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpslld_ymm_ymm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpslld(ymm2, ymm3, xmm4), Instruction.Create(Code.VEX_Vpslld_ymm_ymm_xmmm128, Register.YMM2, Register.YMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpslld(ymm2.k1, ymm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpslld_ymm_k1z_ymm_xmmm128, Register.YMM2, Register.YMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpslld_zmm_zmm_xmm() {
			TestAssembler(c => c.vpslld(zmm2.k1, zmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpslld_zmm_k1z_zmm_xmmm128, Register.ZMM2, Register.ZMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpslld_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpslld(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpslld_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpslld(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpslld_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpslld_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpslld(ymm2, ymm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpslld_ymm_ymm_xmmm128, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpslld(ymm2.k1, ymm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpslld_ymm_k1z_ymm_xmmm128, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpslld_zmm_zmm_m() {
			TestAssembler(c => c.vpslld(zmm2.k1, zmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpslld_zmm_k1z_zmm_xmmm128, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpslld_xmm_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpslld(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpslld_xmm_xmm_imm8, Register.XMM2, Register.XMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpslld(xmm2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpslld_xmm_k1z_xmmm128b32_imm8, Register.XMM2, Register.XMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpslld_ymm_ymm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpslld(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpslld_ymm_ymm_imm8, Register.YMM2, Register.YMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpslld(ymm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpslld_ymm_k1z_ymmm256b32_imm8, Register.YMM2, Register.YMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpslld_zmm_zmm_i() {
			TestAssembler(c => c.vpslld(zmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpslld_zmm_k1z_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vpslld_xmm_m_i() {
			TestAssembler(c => c.vpslld(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpslld_xmm_k1z_xmmm128b32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpslld_ymm_m_i() {
			TestAssembler(c => c.vpslld(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpslld_ymm_k1z_ymmm256b32_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpslld_zmm_m_i() {
			TestAssembler(c => c.vpslld(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpslld_zmm_k1z_zmmm512b32_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpslld_xmm_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpslld(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpslld_xmm_xmm_imm8, Register.XMM2, Register.XMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpslld(xmm2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpslld_xmm_k1z_xmmm128b32_imm8, Register.XMM2, Register.XMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpslld_ymm_ymm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpslld(ymm2, ymm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpslld_ymm_ymm_imm8, Register.YMM2, Register.YMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpslld(ymm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpslld_ymm_k1z_ymmm256b32_imm8, Register.YMM2, Register.YMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpslld_zmm_zmm_u() {
			TestAssembler(c => c.vpslld(zmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpslld_zmm_k1z_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpslld_xmm_m_u() {
			TestAssembler(c => c.vpslld(xmm2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpslld_xmm_k1z_xmmm128b32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpslld_ymm_m_u() {
			TestAssembler(c => c.vpslld(ymm2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpslld_ymm_k1z_ymmm256b32_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpslld_zmm_m_u() {
			TestAssembler(c => c.vpslld(zmm2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpslld_zmm_k1z_zmmm512b32_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpslldq_xmm_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpslldq(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpslldq_xmm_xmm_imm8, Register.XMM2, Register.XMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpslldq(xmm2, xmm3, -5), Instruction.Create(Code.EVEX_Vpslldq_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpslldq_ymm_ymm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpslldq(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpslldq_ymm_ymm_imm8, Register.YMM2, Register.YMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpslldq(ymm2, ymm3, -5), Instruction.Create(Code.EVEX_Vpslldq_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpslldq_zmm_zmm_i() {
			TestAssembler(c => c.vpslldq(zmm2, zmm3, -5), Instruction.Create(Code.EVEX_Vpslldq_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, -5));
		}

		[Fact]
		public void vpslldq_xmm_m_i() {
			TestAssembler(c => c.vpslldq(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.EVEX_Vpslldq_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vpslldq_ymm_m_i() {
			TestAssembler(c => c.vpslldq(ymm2, __ymmword_ptr[rcx], -5), Instruction.Create(Code.EVEX_Vpslldq_ymm_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vpslldq_zmm_m_i() {
			TestAssembler(c => c.vpslldq(zmm2, __zmmword_ptr[rcx], -5), Instruction.Create(Code.EVEX_Vpslldq_zmm_zmmm512_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vpslldq_xmm_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpslldq(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpslldq_xmm_xmm_imm8, Register.XMM2, Register.XMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpslldq(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.EVEX_Vpslldq_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpslldq_ymm_ymm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpslldq(ymm2, ymm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpslldq_ymm_ymm_imm8, Register.YMM2, Register.YMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpslldq(ymm2, ymm3, (byte)0x7F), Instruction.Create(Code.EVEX_Vpslldq_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpslldq_zmm_zmm_u() {
			TestAssembler(c => c.vpslldq(zmm2, zmm3, (byte)0x7F), Instruction.Create(Code.EVEX_Vpslldq_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, 0x7FU));
		}

		[Fact]
		public void vpslldq_xmm_m_u() {
			TestAssembler(c => c.vpslldq(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.EVEX_Vpslldq_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vpslldq_ymm_m_u() {
			TestAssembler(c => c.vpslldq(ymm2, __ymmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.EVEX_Vpslldq_ymm_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vpslldq_zmm_m_u() {
			TestAssembler(c => c.vpslldq(zmm2, __zmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.EVEX_Vpslldq_zmm_zmmm512_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vpsllq_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsllq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsllq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllq(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsllq_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsllq_ymm_ymm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsllq(ymm2, ymm3, xmm4), Instruction.Create(Code.VEX_Vpsllq_ymm_ymm_xmmm128, Register.YMM2, Register.YMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllq(ymm2.k1, ymm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsllq_ymm_k1z_ymm_xmmm128, Register.YMM2, Register.YMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsllq_zmm_zmm_xmm() {
			TestAssembler(c => c.vpsllq(zmm2.k1, zmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsllq_zmm_k1z_zmm_xmmm128, Register.ZMM2, Register.ZMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpsllq_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsllq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsllq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsllq_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsllq_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsllq(ymm2, ymm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsllq_ymm_ymm_xmmm128, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllq(ymm2.k1, ymm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsllq_ymm_k1z_ymm_xmmm128, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsllq_zmm_zmm_m() {
			TestAssembler(c => c.vpsllq(zmm2.k1, zmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsllq_zmm_k1z_zmm_xmmm128, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsllq_xmm_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsllq(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpsllq_xmm_xmm_imm8, Register.XMM2, Register.XMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllq(xmm2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpsllq_xmm_k1z_xmmm128b64_imm8, Register.XMM2, Register.XMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsllq_ymm_ymm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsllq(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpsllq_ymm_ymm_imm8, Register.YMM2, Register.YMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllq(ymm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpsllq_ymm_k1z_ymmm256b64_imm8, Register.YMM2, Register.YMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsllq_zmm_zmm_i() {
			TestAssembler(c => c.vpsllq(zmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpsllq_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vpsllq_xmm_m_i() {
			TestAssembler(c => c.vpsllq(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpsllq_xmm_k1z_xmmm128b64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpsllq_ymm_m_i() {
			TestAssembler(c => c.vpsllq(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpsllq_ymm_k1z_ymmm256b64_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpsllq_zmm_m_i() {
			TestAssembler(c => c.vpsllq(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpsllq_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpsllq_xmm_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsllq(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpsllq_xmm_xmm_imm8, Register.XMM2, Register.XMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllq(xmm2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsllq_xmm_k1z_xmmm128b64_imm8, Register.XMM2, Register.XMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsllq_ymm_ymm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsllq(ymm2, ymm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpsllq_ymm_ymm_imm8, Register.YMM2, Register.YMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllq(ymm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsllq_ymm_k1z_ymmm256b64_imm8, Register.YMM2, Register.YMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsllq_zmm_zmm_u() {
			TestAssembler(c => c.vpsllq(zmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsllq_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsllq_xmm_m_u() {
			TestAssembler(c => c.vpsllq(xmm2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsllq_xmm_k1z_xmmm128b64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsllq_ymm_m_u() {
			TestAssembler(c => c.vpsllq(ymm2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsllq_ymm_k1z_ymmm256b64_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsllq_zmm_m_u() {
			TestAssembler(c => c.vpsllq(zmm2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsllq_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsllvd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsllvd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsllvd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllvd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsllvd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsllvd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsllvd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsllvd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllvd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpsllvd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsllvd_zmm_zmm_zmm() {
			TestAssembler(c => c.vpsllvd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsllvd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpsllvd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpsllvd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpsllvd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsllvd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsllvd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllvd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsllvd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsllvd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpsllvd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpsllvd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsllvd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsllvd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllvd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsllvd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsllvd_zmm_zmm_m() {
			TestAssembler(c => c.vpsllvd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsllvd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsllvq_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsllvq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsllvq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllvq(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsllvq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsllvq_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsllvq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsllvq_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllvq(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpsllvq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsllvq_zmm_zmm_zmm() {
			TestAssembler(c => c.vpsllvq(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsllvq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpsllvq_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpsllvq(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpsllvq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsllvq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsllvq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllvq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsllvq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsllvq_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpsllvq(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpsllvq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsllvq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsllvq_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllvq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsllvq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsllvq_zmm_zmm_m() {
			TestAssembler(c => c.vpsllvq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsllvq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsllvw_xmm_xmm_xmm() {
			TestAssembler(c => c.vpsllvw(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsllvw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpsllvw_ymm_ymm_ymm() {
			TestAssembler(c => c.vpsllvw(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpsllvw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpsllvw_zmm_zmm_zmm() {
			TestAssembler(c => c.vpsllvw(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsllvw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpsllvw_xmm_xmm_m() {
			TestAssembler(c => c.vpsllvw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsllvw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsllvw_ymm_ymm_m() {
			TestAssembler(c => c.vpsllvw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsllvw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsllvw_zmm_zmm_m() {
			TestAssembler(c => c.vpsllvw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsllvw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsllw_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsllw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsllw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllw(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsllw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsllw_ymm_ymm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsllw(ymm2, ymm3, xmm4), Instruction.Create(Code.VEX_Vpsllw_ymm_ymm_xmmm128, Register.YMM2, Register.YMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllw(ymm2.k1, ymm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsllw_ymm_k1z_ymm_xmmm128, Register.YMM2, Register.YMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsllw_zmm_zmm_xmm() {
			TestAssembler(c => c.vpsllw(zmm2.k1, zmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsllw_zmm_k1z_zmm_xmmm128, Register.ZMM2, Register.ZMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpsllw_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsllw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsllw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsllw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsllw_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsllw(ymm2, ymm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsllw_ymm_ymm_xmmm128, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllw(ymm2.k1, ymm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsllw_ymm_k1z_ymm_xmmm128, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsllw_zmm_zmm_m() {
			TestAssembler(c => c.vpsllw(zmm2.k1, zmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsllw_zmm_k1z_zmm_xmmm128, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsllw_xmm_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsllw(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpsllw_xmm_xmm_imm8, Register.XMM2, Register.XMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllw(xmm2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpsllw_xmm_k1z_xmmm128_imm8, Register.XMM2, Register.XMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsllw_ymm_ymm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsllw(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpsllw_ymm_ymm_imm8, Register.YMM2, Register.YMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllw(ymm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpsllw_ymm_k1z_ymmm256_imm8, Register.YMM2, Register.YMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsllw_zmm_zmm_i() {
			TestAssembler(c => c.vpsllw(zmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpsllw_zmm_k1z_zmmm512_imm8, Register.ZMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vpsllw_xmm_m_i() {
			TestAssembler(c => c.vpsllw(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpsllw_xmm_k1z_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpsllw_ymm_m_i() {
			TestAssembler(c => c.vpsllw(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpsllw_ymm_k1z_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpsllw_zmm_m_i() {
			TestAssembler(c => c.vpsllw(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpsllw_zmm_k1z_zmmm512_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpsllw_xmm_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsllw(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpsllw_xmm_xmm_imm8, Register.XMM2, Register.XMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllw(xmm2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsllw_xmm_k1z_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsllw_ymm_ymm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsllw(ymm2, ymm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpsllw_ymm_ymm_imm8, Register.YMM2, Register.YMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsllw(ymm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsllw_ymm_k1z_ymmm256_imm8, Register.YMM2, Register.YMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsllw_zmm_zmm_u() {
			TestAssembler(c => c.vpsllw(zmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsllw_zmm_k1z_zmmm512_imm8, Register.ZMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsllw_xmm_m_u() {
			TestAssembler(c => c.vpsllw(xmm2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsllw_xmm_k1z_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsllw_ymm_m_u() {
			TestAssembler(c => c.vpsllw(ymm2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsllw_ymm_k1z_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsllw_zmm_m_u() {
			TestAssembler(c => c.vpsllw(zmm2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsllw_zmm_k1z_zmmm512_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsrad_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrad(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsrad_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrad(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsrad_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrad_ymm_ymm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrad(ymm2, ymm3, xmm4), Instruction.Create(Code.VEX_Vpsrad_ymm_ymm_xmmm128, Register.YMM2, Register.YMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrad(ymm2.k1, ymm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsrad_ymm_k1z_ymm_xmmm128, Register.YMM2, Register.YMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrad_zmm_zmm_xmm() {
			TestAssembler(c => c.vpsrad(zmm2.k1, zmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsrad_zmm_k1z_zmm_xmmm128, Register.ZMM2, Register.ZMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpsrad_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrad(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsrad_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrad(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsrad_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrad_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrad(ymm2, ymm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsrad_ymm_ymm_xmmm128, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrad(ymm2.k1, ymm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsrad_ymm_k1z_ymm_xmmm128, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrad_zmm_zmm_m() {
			TestAssembler(c => c.vpsrad(zmm2.k1, zmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsrad_zmm_k1z_zmm_xmmm128, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsrad_xmm_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrad(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpsrad_xmm_xmm_imm8, Register.XMM2, Register.XMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrad(xmm2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpsrad_xmm_k1z_xmmm128b32_imm8, Register.XMM2, Register.XMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrad_ymm_ymm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrad(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpsrad_ymm_ymm_imm8, Register.YMM2, Register.YMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrad(ymm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpsrad_ymm_k1z_ymmm256b32_imm8, Register.YMM2, Register.YMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrad_zmm_zmm_i() {
			TestAssembler(c => c.vpsrad(zmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpsrad_zmm_k1z_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vpsrad_xmm_m_i() {
			TestAssembler(c => c.vpsrad(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpsrad_xmm_k1z_xmmm128b32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpsrad_ymm_m_i() {
			TestAssembler(c => c.vpsrad(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpsrad_ymm_k1z_ymmm256b32_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpsrad_zmm_m_i() {
			TestAssembler(c => c.vpsrad(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpsrad_zmm_k1z_zmmm512b32_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpsrad_xmm_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrad(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpsrad_xmm_xmm_imm8, Register.XMM2, Register.XMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrad(xmm2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsrad_xmm_k1z_xmmm128b32_imm8, Register.XMM2, Register.XMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrad_ymm_ymm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrad(ymm2, ymm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpsrad_ymm_ymm_imm8, Register.YMM2, Register.YMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrad(ymm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsrad_ymm_k1z_ymmm256b32_imm8, Register.YMM2, Register.YMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrad_zmm_zmm_u() {
			TestAssembler(c => c.vpsrad(zmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsrad_zmm_k1z_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsrad_xmm_m_u() {
			TestAssembler(c => c.vpsrad(xmm2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsrad_xmm_k1z_xmmm128b32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsrad_ymm_m_u() {
			TestAssembler(c => c.vpsrad(ymm2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsrad_ymm_k1z_ymmm256b32_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsrad_zmm_m_u() {
			TestAssembler(c => c.vpsrad(zmm2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsrad_zmm_k1z_zmmm512b32_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsraq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpsraq(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsraq_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpsraq_ymm_ymm_xmm() {
			TestAssembler(c => c.vpsraq(ymm2.k1, ymm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsraq_ymm_k1z_ymm_xmmm128, Register.YMM2, Register.YMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpsraq_zmm_zmm_xmm() {
			TestAssembler(c => c.vpsraq(zmm2.k1, zmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsraq_zmm_k1z_zmm_xmmm128, Register.ZMM2, Register.ZMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpsraq_xmm_xmm_m() {
			TestAssembler(c => c.vpsraq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsraq_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsraq_ymm_ymm_m() {
			TestAssembler(c => c.vpsraq(ymm2.k1, ymm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsraq_ymm_k1z_ymm_xmmm128, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsraq_zmm_zmm_m() {
			TestAssembler(c => c.vpsraq(zmm2.k1, zmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsraq_zmm_k1z_zmm_xmmm128, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsraq_xmm_xmm_i() {
			TestAssembler(c => c.vpsraq(xmm2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpsraq_xmm_k1z_xmmm128b64_imm8, Register.XMM2, Register.XMM3, -5), Register.K1));
		}

		[Fact]
		public void vpsraq_ymm_ymm_i() {
			TestAssembler(c => c.vpsraq(ymm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpsraq_ymm_k1z_ymmm256b64_imm8, Register.YMM2, Register.YMM3, -5), Register.K1));
		}

		[Fact]
		public void vpsraq_zmm_zmm_i() {
			TestAssembler(c => c.vpsraq(zmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpsraq_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vpsraq_xmm_m_i() {
			TestAssembler(c => c.vpsraq(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpsraq_xmm_k1z_xmmm128b64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpsraq_ymm_m_i() {
			TestAssembler(c => c.vpsraq(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpsraq_ymm_k1z_ymmm256b64_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpsraq_zmm_m_i() {
			TestAssembler(c => c.vpsraq(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpsraq_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpsraq_xmm_xmm_u() {
			TestAssembler(c => c.vpsraq(xmm2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsraq_xmm_k1z_xmmm128b64_imm8, Register.XMM2, Register.XMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsraq_ymm_ymm_u() {
			TestAssembler(c => c.vpsraq(ymm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsraq_ymm_k1z_ymmm256b64_imm8, Register.YMM2, Register.YMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsraq_zmm_zmm_u() {
			TestAssembler(c => c.vpsraq(zmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsraq_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsraq_xmm_m_u() {
			TestAssembler(c => c.vpsraq(xmm2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsraq_xmm_k1z_xmmm128b64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsraq_ymm_m_u() {
			TestAssembler(c => c.vpsraq(ymm2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsraq_ymm_k1z_ymmm256b64_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsraq_zmm_m_u() {
			TestAssembler(c => c.vpsraq(zmm2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsraq_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsravd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsravd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsravd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsravd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsravd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsravd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsravd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsravd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsravd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpsravd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsravd_zmm_zmm_zmm() {
			TestAssembler(c => c.vpsravd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsravd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpsravd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpsravd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpsravd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsravd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsravd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsravd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsravd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsravd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpsravd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpsravd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsravd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsravd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsravd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsravd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsravd_zmm_zmm_m() {
			TestAssembler(c => c.vpsravd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsravd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsravq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpsravq(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsravq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpsravq_ymm_ymm_ymm() {
			TestAssembler(c => c.vpsravq(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpsravq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpsravq_zmm_zmm_zmm() {
			TestAssembler(c => c.vpsravq(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsravq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpsravq_xmm_xmm_m() {
			TestAssembler(c => c.vpsravq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsravq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsravq_ymm_ymm_m() {
			TestAssembler(c => c.vpsravq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsravq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsravq_zmm_zmm_m() {
			TestAssembler(c => c.vpsravq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsravq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsravw_xmm_xmm_xmm() {
			TestAssembler(c => c.vpsravw(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsravw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpsravw_ymm_ymm_ymm() {
			TestAssembler(c => c.vpsravw(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpsravw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpsravw_zmm_zmm_zmm() {
			TestAssembler(c => c.vpsravw(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsravw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpsravw_xmm_xmm_m() {
			TestAssembler(c => c.vpsravw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsravw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsravw_ymm_ymm_m() {
			TestAssembler(c => c.vpsravw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsravw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsravw_zmm_zmm_m() {
			TestAssembler(c => c.vpsravw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsravw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsraw_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsraw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsraw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsraw(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsraw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsraw_ymm_ymm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsraw(ymm2, ymm3, xmm4), Instruction.Create(Code.VEX_Vpsraw_ymm_ymm_xmmm128, Register.YMM2, Register.YMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsraw(ymm2.k1, ymm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsraw_ymm_k1z_ymm_xmmm128, Register.YMM2, Register.YMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsraw_zmm_zmm_xmm() {
			TestAssembler(c => c.vpsraw(zmm2.k1, zmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsraw_zmm_k1z_zmm_xmmm128, Register.ZMM2, Register.ZMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpsraw_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsraw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsraw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsraw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsraw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsraw_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsraw(ymm2, ymm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsraw_ymm_ymm_xmmm128, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsraw(ymm2.k1, ymm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsraw_ymm_k1z_ymm_xmmm128, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsraw_zmm_zmm_m() {
			TestAssembler(c => c.vpsraw(zmm2.k1, zmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsraw_zmm_k1z_zmm_xmmm128, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsraw_xmm_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsraw(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpsraw_xmm_xmm_imm8, Register.XMM2, Register.XMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsraw(xmm2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpsraw_xmm_k1z_xmmm128_imm8, Register.XMM2, Register.XMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsraw_ymm_ymm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsraw(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpsraw_ymm_ymm_imm8, Register.YMM2, Register.YMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsraw(ymm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpsraw_ymm_k1z_ymmm256_imm8, Register.YMM2, Register.YMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsraw_zmm_zmm_i() {
			TestAssembler(c => c.vpsraw(zmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpsraw_zmm_k1z_zmmm512_imm8, Register.ZMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vpsraw_xmm_m_i() {
			TestAssembler(c => c.vpsraw(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpsraw_xmm_k1z_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpsraw_ymm_m_i() {
			TestAssembler(c => c.vpsraw(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpsraw_ymm_k1z_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpsraw_zmm_m_i() {
			TestAssembler(c => c.vpsraw(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpsraw_zmm_k1z_zmmm512_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpsraw_xmm_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsraw(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpsraw_xmm_xmm_imm8, Register.XMM2, Register.XMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsraw(xmm2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsraw_xmm_k1z_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsraw_ymm_ymm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsraw(ymm2, ymm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpsraw_ymm_ymm_imm8, Register.YMM2, Register.YMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsraw(ymm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsraw_ymm_k1z_ymmm256_imm8, Register.YMM2, Register.YMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsraw_zmm_zmm_u() {
			TestAssembler(c => c.vpsraw(zmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsraw_zmm_k1z_zmmm512_imm8, Register.ZMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsraw_xmm_m_u() {
			TestAssembler(c => c.vpsraw(xmm2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsraw_xmm_k1z_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsraw_ymm_m_u() {
			TestAssembler(c => c.vpsraw(ymm2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsraw_ymm_k1z_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsraw_zmm_m_u() {
			TestAssembler(c => c.vpsraw(zmm2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsraw_zmm_k1z_zmmm512_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsrld_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrld(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsrld_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrld(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsrld_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrld_ymm_ymm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrld(ymm2, ymm3, xmm4), Instruction.Create(Code.VEX_Vpsrld_ymm_ymm_xmmm128, Register.YMM2, Register.YMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrld(ymm2.k1, ymm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsrld_ymm_k1z_ymm_xmmm128, Register.YMM2, Register.YMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrld_zmm_zmm_xmm() {
			TestAssembler(c => c.vpsrld(zmm2.k1, zmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsrld_zmm_k1z_zmm_xmmm128, Register.ZMM2, Register.ZMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpsrld_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrld(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsrld_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrld(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsrld_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrld_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrld(ymm2, ymm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsrld_ymm_ymm_xmmm128, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrld(ymm2.k1, ymm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsrld_ymm_k1z_ymm_xmmm128, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrld_zmm_zmm_m() {
			TestAssembler(c => c.vpsrld(zmm2.k1, zmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsrld_zmm_k1z_zmm_xmmm128, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsrld_xmm_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrld(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpsrld_xmm_xmm_imm8, Register.XMM2, Register.XMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrld(xmm2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpsrld_xmm_k1z_xmmm128b32_imm8, Register.XMM2, Register.XMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrld_ymm_ymm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrld(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpsrld_ymm_ymm_imm8, Register.YMM2, Register.YMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrld(ymm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpsrld_ymm_k1z_ymmm256b32_imm8, Register.YMM2, Register.YMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrld_zmm_zmm_i() {
			TestAssembler(c => c.vpsrld(zmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpsrld_zmm_k1z_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vpsrld_xmm_m_i() {
			TestAssembler(c => c.vpsrld(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpsrld_xmm_k1z_xmmm128b32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpsrld_ymm_m_i() {
			TestAssembler(c => c.vpsrld(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpsrld_ymm_k1z_ymmm256b32_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpsrld_zmm_m_i() {
			TestAssembler(c => c.vpsrld(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpsrld_zmm_k1z_zmmm512b32_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpsrld_xmm_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrld(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpsrld_xmm_xmm_imm8, Register.XMM2, Register.XMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrld(xmm2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsrld_xmm_k1z_xmmm128b32_imm8, Register.XMM2, Register.XMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrld_ymm_ymm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrld(ymm2, ymm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpsrld_ymm_ymm_imm8, Register.YMM2, Register.YMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrld(ymm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsrld_ymm_k1z_ymmm256b32_imm8, Register.YMM2, Register.YMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrld_zmm_zmm_u() {
			TestAssembler(c => c.vpsrld(zmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsrld_zmm_k1z_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsrld_xmm_m_u() {
			TestAssembler(c => c.vpsrld(xmm2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsrld_xmm_k1z_xmmm128b32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsrld_ymm_m_u() {
			TestAssembler(c => c.vpsrld(ymm2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsrld_ymm_k1z_ymmm256b32_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsrld_zmm_m_u() {
			TestAssembler(c => c.vpsrld(zmm2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsrld_zmm_k1z_zmmm512b32_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsrldq_xmm_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrldq(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpsrldq_xmm_xmm_imm8, Register.XMM2, Register.XMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrldq(xmm2, xmm3, -5), Instruction.Create(Code.EVEX_Vpsrldq_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrldq_ymm_ymm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrldq(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpsrldq_ymm_ymm_imm8, Register.YMM2, Register.YMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrldq(ymm2, ymm3, -5), Instruction.Create(Code.EVEX_Vpsrldq_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, -5), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrldq_zmm_zmm_i() {
			TestAssembler(c => c.vpsrldq(zmm2, zmm3, -5), Instruction.Create(Code.EVEX_Vpsrldq_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, -5));
		}

		[Fact]
		public void vpsrldq_xmm_m_i() {
			TestAssembler(c => c.vpsrldq(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.EVEX_Vpsrldq_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vpsrldq_ymm_m_i() {
			TestAssembler(c => c.vpsrldq(ymm2, __ymmword_ptr[rcx], -5), Instruction.Create(Code.EVEX_Vpsrldq_ymm_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vpsrldq_zmm_m_i() {
			TestAssembler(c => c.vpsrldq(zmm2, __zmmword_ptr[rcx], -5), Instruction.Create(Code.EVEX_Vpsrldq_zmm_zmmm512_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vpsrldq_xmm_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrldq(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpsrldq_xmm_xmm_imm8, Register.XMM2, Register.XMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrldq(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.EVEX_Vpsrldq_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrldq_ymm_ymm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrldq(ymm2, ymm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpsrldq_ymm_ymm_imm8, Register.YMM2, Register.YMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrldq(ymm2, ymm3, (byte)0x7F), Instruction.Create(Code.EVEX_Vpsrldq_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, 0x7FU), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrldq_zmm_zmm_u() {
			TestAssembler(c => c.vpsrldq(zmm2, zmm3, (byte)0x7F), Instruction.Create(Code.EVEX_Vpsrldq_zmm_zmmm512_imm8, Register.ZMM2, Register.ZMM3, 0x7FU));
		}

		[Fact]
		public void vpsrldq_xmm_m_u() {
			TestAssembler(c => c.vpsrldq(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.EVEX_Vpsrldq_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vpsrldq_ymm_m_u() {
			TestAssembler(c => c.vpsrldq(ymm2, __ymmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.EVEX_Vpsrldq_ymm_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vpsrldq_zmm_m_u() {
			TestAssembler(c => c.vpsrldq(zmm2, __zmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.EVEX_Vpsrldq_zmm_zmmm512_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vpsrlq_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrlq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsrlq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlq(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsrlq_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrlq_ymm_ymm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrlq(ymm2, ymm3, xmm4), Instruction.Create(Code.VEX_Vpsrlq_ymm_ymm_xmmm128, Register.YMM2, Register.YMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlq(ymm2.k1, ymm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsrlq_ymm_k1z_ymm_xmmm128, Register.YMM2, Register.YMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrlq_zmm_zmm_xmm() {
			TestAssembler(c => c.vpsrlq(zmm2.k1, zmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsrlq_zmm_k1z_zmm_xmmm128, Register.ZMM2, Register.ZMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpsrlq_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrlq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsrlq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsrlq_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrlq_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrlq(ymm2, ymm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsrlq_ymm_ymm_xmmm128, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlq(ymm2.k1, ymm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsrlq_ymm_k1z_ymm_xmmm128, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrlq_zmm_zmm_m() {
			TestAssembler(c => c.vpsrlq(zmm2.k1, zmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsrlq_zmm_k1z_zmm_xmmm128, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsrlq_xmm_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrlq(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpsrlq_xmm_xmm_imm8, Register.XMM2, Register.XMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlq(xmm2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpsrlq_xmm_k1z_xmmm128b64_imm8, Register.XMM2, Register.XMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrlq_ymm_ymm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrlq(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpsrlq_ymm_ymm_imm8, Register.YMM2, Register.YMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlq(ymm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpsrlq_ymm_k1z_ymmm256b64_imm8, Register.YMM2, Register.YMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrlq_zmm_zmm_i() {
			TestAssembler(c => c.vpsrlq(zmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpsrlq_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vpsrlq_xmm_m_i() {
			TestAssembler(c => c.vpsrlq(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpsrlq_xmm_k1z_xmmm128b64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpsrlq_ymm_m_i() {
			TestAssembler(c => c.vpsrlq(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpsrlq_ymm_k1z_ymmm256b64_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpsrlq_zmm_m_i() {
			TestAssembler(c => c.vpsrlq(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpsrlq_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpsrlq_xmm_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrlq(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpsrlq_xmm_xmm_imm8, Register.XMM2, Register.XMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlq(xmm2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsrlq_xmm_k1z_xmmm128b64_imm8, Register.XMM2, Register.XMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrlq_ymm_ymm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrlq(ymm2, ymm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpsrlq_ymm_ymm_imm8, Register.YMM2, Register.YMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlq(ymm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsrlq_ymm_k1z_ymmm256b64_imm8, Register.YMM2, Register.YMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrlq_zmm_zmm_u() {
			TestAssembler(c => c.vpsrlq(zmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsrlq_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsrlq_xmm_m_u() {
			TestAssembler(c => c.vpsrlq(xmm2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsrlq_xmm_k1z_xmmm128b64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsrlq_ymm_m_u() {
			TestAssembler(c => c.vpsrlq(ymm2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsrlq_ymm_k1z_ymmm256b64_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsrlq_zmm_m_u() {
			TestAssembler(c => c.vpsrlq(zmm2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsrlq_zmm_k1z_zmmm512b64_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsrlvd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrlvd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsrlvd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlvd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsrlvd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrlvd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrlvd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsrlvd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlvd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpsrlvd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrlvd_zmm_zmm_zmm() {
			TestAssembler(c => c.vpsrlvd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsrlvd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpsrlvd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpsrlvd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpsrlvd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrlvd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsrlvd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlvd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsrlvd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrlvd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpsrlvd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpsrlvd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrlvd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsrlvd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlvd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsrlvd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrlvd_zmm_zmm_m() {
			TestAssembler(c => c.vpsrlvd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsrlvd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsrlvq_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrlvq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsrlvq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlvq(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsrlvq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrlvq_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrlvq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsrlvq_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlvq(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpsrlvq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrlvq_zmm_zmm_zmm() {
			TestAssembler(c => c.vpsrlvq(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsrlvq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpsrlvq_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpsrlvq(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpsrlvq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrlvq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsrlvq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlvq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsrlvq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrlvq_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpsrlvq(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpsrlvq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrlvq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsrlvq_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlvq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsrlvq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrlvq_zmm_zmm_m() {
			TestAssembler(c => c.vpsrlvq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsrlvq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsrlvw_xmm_xmm_xmm() {
			TestAssembler(c => c.vpsrlvw(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsrlvw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpsrlvw_ymm_ymm_ymm() {
			TestAssembler(c => c.vpsrlvw(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpsrlvw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpsrlvw_zmm_zmm_zmm() {
			TestAssembler(c => c.vpsrlvw(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsrlvw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpsrlvw_xmm_xmm_m() {
			TestAssembler(c => c.vpsrlvw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsrlvw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsrlvw_ymm_ymm_m() {
			TestAssembler(c => c.vpsrlvw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsrlvw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsrlvw_zmm_zmm_m() {
			TestAssembler(c => c.vpsrlvw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsrlvw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsrlw_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrlw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsrlw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlw(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsrlw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrlw_ymm_ymm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrlw(ymm2, ymm3, xmm4), Instruction.Create(Code.VEX_Vpsrlw_ymm_ymm_xmmm128, Register.YMM2, Register.YMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlw(ymm2.k1, ymm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsrlw_ymm_k1z_ymm_xmmm128, Register.YMM2, Register.YMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrlw_zmm_zmm_xmm() {
			TestAssembler(c => c.vpsrlw(zmm2.k1, zmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsrlw_zmm_k1z_zmm_xmmm128, Register.ZMM2, Register.ZMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpsrlw_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrlw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsrlw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsrlw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrlw_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrlw(ymm2, ymm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsrlw_ymm_ymm_xmmm128, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlw(ymm2.k1, ymm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsrlw_ymm_k1z_ymm_xmmm128, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrlw_zmm_zmm_m() {
			TestAssembler(c => c.vpsrlw(zmm2.k1, zmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsrlw_zmm_k1z_zmm_xmmm128, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsrlw_xmm_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrlw(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vpsrlw_xmm_xmm_imm8, Register.XMM2, Register.XMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlw(xmm2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpsrlw_xmm_k1z_xmmm128_imm8, Register.XMM2, Register.XMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrlw_ymm_ymm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrlw(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vpsrlw_ymm_ymm_imm8, Register.YMM2, Register.YMM3, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlw(ymm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpsrlw_ymm_k1z_ymmm256_imm8, Register.YMM2, Register.YMM3, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrlw_zmm_zmm_i() {
			TestAssembler(c => c.vpsrlw(zmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vpsrlw_zmm_k1z_zmmm512_imm8, Register.ZMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vpsrlw_xmm_m_i() {
			TestAssembler(c => c.vpsrlw(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpsrlw_xmm_k1z_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpsrlw_ymm_m_i() {
			TestAssembler(c => c.vpsrlw(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpsrlw_ymm_k1z_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpsrlw_zmm_m_i() {
			TestAssembler(c => c.vpsrlw(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpsrlw_zmm_k1z_zmmm512_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpsrlw_xmm_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrlw(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpsrlw_xmm_xmm_imm8, Register.XMM2, Register.XMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlw(xmm2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsrlw_xmm_k1z_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrlw_ymm_ymm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsrlw(ymm2, ymm3, (byte)0x7F), Instruction.Create(Code.VEX_Vpsrlw_ymm_ymm_imm8, Register.YMM2, Register.YMM3, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsrlw(ymm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsrlw_ymm_k1z_ymmm256_imm8, Register.YMM2, Register.YMM3, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsrlw_zmm_zmm_u() {
			TestAssembler(c => c.vpsrlw(zmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsrlw_zmm_k1z_zmmm512_imm8, Register.ZMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsrlw_xmm_m_u() {
			TestAssembler(c => c.vpsrlw(xmm2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsrlw_xmm_k1z_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsrlw_ymm_m_u() {
			TestAssembler(c => c.vpsrlw(ymm2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsrlw_ymm_k1z_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsrlw_zmm_m_u() {
			TestAssembler(c => c.vpsrlw(zmm2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpsrlw_zmm_k1z_zmmm512_imm8, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpsubb_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsubb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubb(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsubb_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubb_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsubb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubb(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpsubb_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubb_zmm_zmm_zmm() {
			TestAssembler(c => c.vpsubb(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsubb_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpsubb_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsubb_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubb_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsubb_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubb_zmm_zmm_m() {
			TestAssembler(c => c.vpsubb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsubb_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsubd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsubd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsubd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsubd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpsubd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubd_zmm_zmm_zmm() {
			TestAssembler(c => c.vpsubd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsubd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpsubd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpsubd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpsubd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsubd_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpsubd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpsubd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsubd_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubd_zmm_zmm_m() {
			TestAssembler(c => c.vpsubd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsubd_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsubq_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsubq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubq(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsubq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubq_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsubq_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubq(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpsubq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubq_zmm_zmm_zmm() {
			TestAssembler(c => c.vpsubq(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsubq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpsubq_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpsubq(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpsubq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsubq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubq_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpsubq(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpsubq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubq_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsubq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubq_zmm_zmm_m() {
			TestAssembler(c => c.vpsubq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsubq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsubsb_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubsb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsubsb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubsb(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsubsb_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubsb_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubsb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsubsb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubsb(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpsubsb_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubsb_zmm_zmm_zmm() {
			TestAssembler(c => c.vpsubsb(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsubsb_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpsubsb_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubsb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubsb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubsb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsubsb_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubsb_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubsb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubsb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubsb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsubsb_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubsb_zmm_zmm_m() {
			TestAssembler(c => c.vpsubsb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsubsb_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsubsw_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubsw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsubsw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubsw(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsubsw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubsw_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubsw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsubsw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubsw(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpsubsw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubsw_zmm_zmm_zmm() {
			TestAssembler(c => c.vpsubsw(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsubsw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpsubsw_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubsw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubsw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubsw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsubsw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubsw_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubsw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubsw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubsw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsubsw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubsw_zmm_zmm_m() {
			TestAssembler(c => c.vpsubsw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsubsw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsubusb_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubusb(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsubusb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubusb(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsubusb_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubusb_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubusb(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsubusb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubusb(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpsubusb_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubusb_zmm_zmm_zmm() {
			TestAssembler(c => c.vpsubusb(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsubusb_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpsubusb_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubusb(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubusb_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubusb(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsubusb_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubusb_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubusb(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubusb_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubusb(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsubusb_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubusb_zmm_zmm_m() {
			TestAssembler(c => c.vpsubusb(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsubusb_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsubusw_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubusw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsubusw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubusw(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsubusw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubusw_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubusw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsubusw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubusw(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpsubusw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubusw_zmm_zmm_zmm() {
			TestAssembler(c => c.vpsubusw(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsubusw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpsubusw_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubusw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubusw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubusw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsubusw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubusw_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubusw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubusw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubusw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsubusw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubusw_zmm_zmm_m() {
			TestAssembler(c => c.vpsubusw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsubusw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpsubw_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpsubw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubw(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsubw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubw_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpsubw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubw(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpsubw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubw_zmm_zmm_zmm() {
			TestAssembler(c => c.vpsubw(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpsubw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpsubw_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsubw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubw_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpsubw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpsubw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpsubw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsubw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpsubw_zmm_zmm_m() {
			TestAssembler(c => c.vpsubw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpsubw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpternlogd_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vpternlogd(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpternlogd_xmm_k1z_xmm_xmmm128b32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vpternlogd_ymm_ymm_ymm_i() {
			TestAssembler(c => c.vpternlogd(ymm2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpternlogd_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vpternlogd_zmm_zmm_zmm_i() {
			TestAssembler(c => c.vpternlogd(zmm2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpternlogd_zmm_k1z_zmm_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vpternlogd_xmm_xmm_m_i() {
			TestAssembler(c => c.vpternlogd(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpternlogd_xmm_k1z_xmm_xmmm128b32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpternlogd_ymm_ymm_m_i() {
			TestAssembler(c => c.vpternlogd(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpternlogd_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpternlogd_zmm_zmm_m_i() {
			TestAssembler(c => c.vpternlogd(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpternlogd_zmm_k1z_zmm_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpternlogd_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vpternlogd(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpternlogd_xmm_k1z_xmm_xmmm128b32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpternlogd_ymm_ymm_ymm_u() {
			TestAssembler(c => c.vpternlogd(ymm2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpternlogd_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpternlogd_zmm_zmm_zmm_u() {
			TestAssembler(c => c.vpternlogd(zmm2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpternlogd_zmm_k1z_zmm_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpternlogd_xmm_xmm_m_u() {
			TestAssembler(c => c.vpternlogd(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpternlogd_xmm_k1z_xmm_xmmm128b32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpternlogd_ymm_ymm_m_u() {
			TestAssembler(c => c.vpternlogd(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpternlogd_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpternlogd_zmm_zmm_m_u() {
			TestAssembler(c => c.vpternlogd(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpternlogd_zmm_k1z_zmm_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpternlogq_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vpternlogq(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpternlogq_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vpternlogq_ymm_ymm_ymm_i() {
			TestAssembler(c => c.vpternlogq(ymm2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpternlogq_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vpternlogq_zmm_zmm_zmm_i() {
			TestAssembler(c => c.vpternlogq(zmm2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vpternlogq_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vpternlogq_xmm_xmm_m_i() {
			TestAssembler(c => c.vpternlogq(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpternlogq_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpternlogq_ymm_ymm_m_i() {
			TestAssembler(c => c.vpternlogq(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpternlogq_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpternlogq_zmm_zmm_m_i() {
			TestAssembler(c => c.vpternlogq(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vpternlogq_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vpternlogq_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vpternlogq(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpternlogq_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpternlogq_ymm_ymm_ymm_u() {
			TestAssembler(c => c.vpternlogq(ymm2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpternlogq_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpternlogq_zmm_zmm_zmm_u() {
			TestAssembler(c => c.vpternlogq(zmm2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpternlogq_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vpternlogq_xmm_xmm_m_u() {
			TestAssembler(c => c.vpternlogq(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpternlogq_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpternlogq_ymm_ymm_m_u() {
			TestAssembler(c => c.vpternlogq(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpternlogq_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vpternlogq_zmm_zmm_m_u() {
			TestAssembler(c => c.vpternlogq(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vpternlogq_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vptest_xmm_xmm() {
			TestAssembler(c => c.vptest(xmm2, xmm3), Instruction.Create(Code.VEX_Vptest_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vptest_ymm_ymm() {
			TestAssembler(c => c.vptest(ymm2, ymm3), Instruction.Create(Code.VEX_Vptest_ymm_ymmm256, Register.YMM2, Register.YMM3));
		}

		[Fact]
		public void vptest_xmm_m() {
			TestAssembler(c => c.vptest(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vptest_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vptest_ymm_m() {
			TestAssembler(c => c.vptest(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vptest_ymm_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vptestmb_kr_xmm_xmm() {
			TestAssembler(c => c.vptestmb(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vptestmb_kr_k1_xmm_xmmm128, Register.K2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vptestmb_kr_ymm_ymm() {
			TestAssembler(c => c.vptestmb(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vptestmb_kr_k1_ymm_ymmm256, Register.K2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vptestmb_kr_zmm_zmm() {
			TestAssembler(c => c.vptestmb(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vptestmb_kr_k1_zmm_zmmm512, Register.K2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vptestmb_kr_xmm_m() {
			TestAssembler(c => c.vptestmb(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vptestmb_kr_k1_xmm_xmmm128, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vptestmb_kr_ymm_m() {
			TestAssembler(c => c.vptestmb(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vptestmb_kr_k1_ymm_ymmm256, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vptestmb_kr_zmm_m() {
			TestAssembler(c => c.vptestmb(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vptestmb_kr_k1_zmm_zmmm512, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vptestmd_kr_xmm_xmm() {
			TestAssembler(c => c.vptestmd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vptestmd_kr_k1_xmm_xmmm128b32, Register.K2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vptestmd_kr_ymm_ymm() {
			TestAssembler(c => c.vptestmd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vptestmd_kr_k1_ymm_ymmm256b32, Register.K2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vptestmd_kr_zmm_zmm() {
			TestAssembler(c => c.vptestmd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vptestmd_kr_k1_zmm_zmmm512b32, Register.K2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vptestmd_kr_xmm_m() {
			TestAssembler(c => c.vptestmd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vptestmd_kr_k1_xmm_xmmm128b32, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vptestmd_kr_ymm_m() {
			TestAssembler(c => c.vptestmd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vptestmd_kr_k1_ymm_ymmm256b32, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vptestmd_kr_zmm_m() {
			TestAssembler(c => c.vptestmd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vptestmd_kr_k1_zmm_zmmm512b32, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vptestmq_kr_xmm_xmm() {
			TestAssembler(c => c.vptestmq(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vptestmq_kr_k1_xmm_xmmm128b64, Register.K2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vptestmq_kr_ymm_ymm() {
			TestAssembler(c => c.vptestmq(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vptestmq_kr_k1_ymm_ymmm256b64, Register.K2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vptestmq_kr_zmm_zmm() {
			TestAssembler(c => c.vptestmq(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vptestmq_kr_k1_zmm_zmmm512b64, Register.K2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vptestmq_kr_xmm_m() {
			TestAssembler(c => c.vptestmq(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vptestmq_kr_k1_xmm_xmmm128b64, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vptestmq_kr_ymm_m() {
			TestAssembler(c => c.vptestmq(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vptestmq_kr_k1_ymm_ymmm256b64, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vptestmq_kr_zmm_m() {
			TestAssembler(c => c.vptestmq(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vptestmq_kr_k1_zmm_zmmm512b64, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vptestmw_kr_xmm_xmm() {
			TestAssembler(c => c.vptestmw(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vptestmw_kr_k1_xmm_xmmm128, Register.K2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vptestmw_kr_ymm_ymm() {
			TestAssembler(c => c.vptestmw(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vptestmw_kr_k1_ymm_ymmm256, Register.K2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vptestmw_kr_zmm_zmm() {
			TestAssembler(c => c.vptestmw(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vptestmw_kr_k1_zmm_zmmm512, Register.K2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vptestmw_kr_xmm_m() {
			TestAssembler(c => c.vptestmw(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vptestmw_kr_k1_xmm_xmmm128, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vptestmw_kr_ymm_m() {
			TestAssembler(c => c.vptestmw(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vptestmw_kr_k1_ymm_ymmm256, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vptestmw_kr_zmm_m() {
			TestAssembler(c => c.vptestmw(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vptestmw_kr_k1_zmm_zmmm512, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vptestnmb_kr_xmm_xmm() {
			TestAssembler(c => c.vptestnmb(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vptestnmb_kr_k1_xmm_xmmm128, Register.K2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vptestnmb_kr_ymm_ymm() {
			TestAssembler(c => c.vptestnmb(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vptestnmb_kr_k1_ymm_ymmm256, Register.K2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vptestnmb_kr_zmm_zmm() {
			TestAssembler(c => c.vptestnmb(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vptestnmb_kr_k1_zmm_zmmm512, Register.K2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vptestnmb_kr_xmm_m() {
			TestAssembler(c => c.vptestnmb(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vptestnmb_kr_k1_xmm_xmmm128, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vptestnmb_kr_ymm_m() {
			TestAssembler(c => c.vptestnmb(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vptestnmb_kr_k1_ymm_ymmm256, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vptestnmb_kr_zmm_m() {
			TestAssembler(c => c.vptestnmb(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vptestnmb_kr_k1_zmm_zmmm512, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vptestnmd_kr_xmm_xmm() {
			TestAssembler(c => c.vptestnmd(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vptestnmd_kr_k1_xmm_xmmm128b32, Register.K2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vptestnmd_kr_ymm_ymm() {
			TestAssembler(c => c.vptestnmd(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vptestnmd_kr_k1_ymm_ymmm256b32, Register.K2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vptestnmd_kr_zmm_zmm() {
			TestAssembler(c => c.vptestnmd(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vptestnmd_kr_k1_zmm_zmmm512b32, Register.K2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vptestnmd_kr_xmm_m() {
			TestAssembler(c => c.vptestnmd(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vptestnmd_kr_k1_xmm_xmmm128b32, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vptestnmd_kr_ymm_m() {
			TestAssembler(c => c.vptestnmd(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vptestnmd_kr_k1_ymm_ymmm256b32, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vptestnmd_kr_zmm_m() {
			TestAssembler(c => c.vptestnmd(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vptestnmd_kr_k1_zmm_zmmm512b32, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vptestnmq_kr_xmm_xmm() {
			TestAssembler(c => c.vptestnmq(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vptestnmq_kr_k1_xmm_xmmm128b64, Register.K2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vptestnmq_kr_ymm_ymm() {
			TestAssembler(c => c.vptestnmq(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vptestnmq_kr_k1_ymm_ymmm256b64, Register.K2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vptestnmq_kr_zmm_zmm() {
			TestAssembler(c => c.vptestnmq(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vptestnmq_kr_k1_zmm_zmmm512b64, Register.K2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vptestnmq_kr_xmm_m() {
			TestAssembler(c => c.vptestnmq(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vptestnmq_kr_k1_xmm_xmmm128b64, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vptestnmq_kr_ymm_m() {
			TestAssembler(c => c.vptestnmq(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vptestnmq_kr_k1_ymm_ymmm256b64, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vptestnmq_kr_zmm_m() {
			TestAssembler(c => c.vptestnmq(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vptestnmq_kr_k1_zmm_zmmm512b64, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vptestnmw_kr_xmm_xmm() {
			TestAssembler(c => c.vptestnmw(k2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vptestnmw_kr_k1_xmm_xmmm128, Register.K2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vptestnmw_kr_ymm_ymm() {
			TestAssembler(c => c.vptestnmw(k2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vptestnmw_kr_k1_ymm_ymmm256, Register.K2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vptestnmw_kr_zmm_zmm() {
			TestAssembler(c => c.vptestnmw(k2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vptestnmw_kr_k1_zmm_zmmm512, Register.K2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vptestnmw_kr_xmm_m() {
			TestAssembler(c => c.vptestnmw(k2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vptestnmw_kr_k1_xmm_xmmm128, Register.K2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vptestnmw_kr_ymm_m() {
			TestAssembler(c => c.vptestnmw(k2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vptestnmw_kr_k1_ymm_ymmm256, Register.K2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vptestnmw_kr_zmm_m() {
			TestAssembler(c => c.vptestnmw(k2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vptestnmw_kr_k1_zmm_zmmm512, Register.K2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpunpckhbw_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpckhbw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpunpckhbw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhbw(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpunpckhbw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpckhbw_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpckhbw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpunpckhbw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhbw(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpunpckhbw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpckhbw_zmm_zmm_zmm() {
			TestAssembler(c => c.vpunpckhbw(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpunpckhbw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpunpckhbw_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpckhbw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpckhbw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhbw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpckhbw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpckhbw_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpckhbw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpckhbw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhbw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpckhbw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpckhbw_zmm_zmm_m() {
			TestAssembler(c => c.vpunpckhbw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpckhbw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpunpckhdq_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpckhdq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpunpckhdq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhdq(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpunpckhdq_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpckhdq_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpckhdq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpunpckhdq_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhdq(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpunpckhdq_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpckhdq_zmm_zmm_zmm() {
			TestAssembler(c => c.vpunpckhdq(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpunpckhdq_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpunpckhdq_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpunpckhdq(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpckhdq_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpckhdq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpckhdq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhdq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpckhdq_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpckhdq_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpunpckhdq(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpckhdq_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpckhdq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpckhdq_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhdq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpckhdq_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpckhdq_zmm_zmm_m() {
			TestAssembler(c => c.vpunpckhdq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpckhdq_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpunpckhqdq_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpckhqdq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpunpckhqdq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhqdq(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpunpckhqdq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpckhqdq_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpckhqdq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpunpckhqdq_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhqdq(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpunpckhqdq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpckhqdq_zmm_zmm_zmm() {
			TestAssembler(c => c.vpunpckhqdq(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpunpckhqdq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpunpckhqdq_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpunpckhqdq(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpckhqdq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpckhqdq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpckhqdq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhqdq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpckhqdq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpckhqdq_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpunpckhqdq(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpckhqdq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpckhqdq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpckhqdq_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhqdq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpckhqdq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpckhqdq_zmm_zmm_m() {
			TestAssembler(c => c.vpunpckhqdq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpckhqdq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpunpckhwd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpckhwd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpunpckhwd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhwd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpunpckhwd_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpckhwd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpckhwd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpunpckhwd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhwd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpunpckhwd_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpckhwd_zmm_zmm_zmm() {
			TestAssembler(c => c.vpunpckhwd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpunpckhwd_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpunpckhwd_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpckhwd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpckhwd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhwd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpckhwd_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpckhwd_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpckhwd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpckhwd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckhwd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpckhwd_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpckhwd_zmm_zmm_m() {
			TestAssembler(c => c.vpunpckhwd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpckhwd_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpunpcklbw_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpcklbw(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpunpcklbw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpcklbw(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpunpcklbw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpcklbw_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpcklbw(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpunpcklbw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpcklbw(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpunpcklbw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpcklbw_zmm_zmm_zmm() {
			TestAssembler(c => c.vpunpcklbw(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpunpcklbw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpunpcklbw_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpcklbw(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpcklbw_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpcklbw(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpcklbw_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpcklbw_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpcklbw(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpcklbw_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpcklbw(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpcklbw_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpcklbw_zmm_zmm_m() {
			TestAssembler(c => c.vpunpcklbw(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpcklbw_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpunpckldq_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpckldq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpunpckldq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckldq(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpunpckldq_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpckldq_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpckldq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpunpckldq_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckldq(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpunpckldq_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpckldq_zmm_zmm_zmm() {
			TestAssembler(c => c.vpunpckldq(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpunpckldq_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpunpckldq_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpunpckldq(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpckldq_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpckldq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpckldq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckldq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpckldq_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpckldq_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpunpckldq(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpckldq_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpckldq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpckldq_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpckldq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpckldq_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpckldq_zmm_zmm_m() {
			TestAssembler(c => c.vpunpckldq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpckldq_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpunpcklqdq_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpcklqdq(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpunpcklqdq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpcklqdq(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpunpcklqdq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpcklqdq_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpcklqdq(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpunpcklqdq_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpcklqdq(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpunpcklqdq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpcklqdq_zmm_zmm_zmm() {
			TestAssembler(c => c.vpunpcklqdq(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpunpcklqdq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpunpcklqdq_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpunpcklqdq(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpcklqdq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpcklqdq(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpcklqdq_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpcklqdq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpcklqdq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpcklqdq_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vpunpcklqdq(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpcklqdq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpcklqdq(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpcklqdq_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpcklqdq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpcklqdq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpcklqdq_zmm_zmm_m() {
			TestAssembler(c => c.vpunpcklqdq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpcklqdq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpunpcklwd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpcklwd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpunpcklwd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpcklwd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpunpcklwd_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpcklwd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpcklwd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpunpcklwd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpcklwd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpunpcklwd_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpcklwd_zmm_zmm_zmm() {
			TestAssembler(c => c.vpunpcklwd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpunpcklwd_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpunpcklwd_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpcklwd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpcklwd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpcklwd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpcklwd_xmm_k1z_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpcklwd_ymm_ymm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vpunpcklwd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpunpcklwd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vpunpcklwd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpcklwd_ymm_k1z_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vpunpcklwd_zmm_zmm_m() {
			TestAssembler(c => c.vpunpcklwd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpunpcklwd_zmm_k1z_zmm_zmmm512, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpxor_xmm_xmm_xmm() {
			TestAssembler(c => c.vpxor(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vpxor_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vpxor_ymm_ymm_ymm() {
			TestAssembler(c => c.vpxor(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vpxor_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4));
		}

		[Fact]
		public void vpxor_xmm_xmm_m() {
			TestAssembler(c => c.vpxor(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpxor_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpxor_ymm_ymm_m() {
			TestAssembler(c => c.vpxor(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vpxor_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vpxord_xmm_xmm_xmm() {
			TestAssembler(c => c.vpxord(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpxord_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpxord_ymm_ymm_ymm() {
			TestAssembler(c => c.vpxord(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpxord_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpxord_zmm_zmm_zmm() {
			TestAssembler(c => c.vpxord(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpxord_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpxord_xmm_xmm_m() {
			TestAssembler(c => c.vpxord(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpxord_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpxord_ymm_ymm_m() {
			TestAssembler(c => c.vpxord(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpxord_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpxord_zmm_zmm_m() {
			TestAssembler(c => c.vpxord(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpxord_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpxorq_xmm_xmm_xmm() {
			TestAssembler(c => c.vpxorq(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vpxorq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vpxorq_ymm_ymm_ymm() {
			TestAssembler(c => c.vpxorq(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vpxorq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vpxorq_zmm_zmm_zmm() {
			TestAssembler(c => c.vpxorq(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vpxorq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vpxorq_xmm_xmm_m() {
			TestAssembler(c => c.vpxorq(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpxorq_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpxorq_ymm_ymm_m() {
			TestAssembler(c => c.vpxorq(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpxorq_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vpxorq_zmm_zmm_m() {
			TestAssembler(c => c.vpxorq(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vpxorq_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrangepd_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vrangepd(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vrangepd_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vrangepd_ymm_ymm_ymm_i() {
			TestAssembler(c => c.vrangepd(ymm2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vrangepd_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vrangepd_zmm_zmm_zmm_i() {
			TestAssembler(c => c.vrangepd(zmm2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vrangepd_zmm_k1z_zmm_zmmm512b64_imm8_sae, Register.ZMM2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vrangepd_xmm_xmm_m_i() {
			TestAssembler(c => c.vrangepd(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vrangepd_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vrangepd_ymm_ymm_m_i() {
			TestAssembler(c => c.vrangepd(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vrangepd_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vrangepd_zmm_zmm_m_i() {
			TestAssembler(c => c.vrangepd(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vrangepd_zmm_k1z_zmm_zmmm512b64_imm8_sae, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vrangepd_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vrangepd(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrangepd_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vrangepd_ymm_ymm_ymm_u() {
			TestAssembler(c => c.vrangepd(ymm2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrangepd_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vrangepd_zmm_zmm_zmm_u() {
			TestAssembler(c => c.vrangepd(zmm2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrangepd_zmm_k1z_zmm_zmmm512b64_imm8_sae, Register.ZMM2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vrangepd_xmm_xmm_m_u() {
			TestAssembler(c => c.vrangepd(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrangepd_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vrangepd_ymm_ymm_m_u() {
			TestAssembler(c => c.vrangepd(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrangepd_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vrangepd_zmm_zmm_m_u() {
			TestAssembler(c => c.vrangepd(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrangepd_zmm_k1z_zmm_zmmm512b64_imm8_sae, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vrangeps_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vrangeps(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vrangeps_xmm_k1z_xmm_xmmm128b32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vrangeps_ymm_ymm_ymm_i() {
			TestAssembler(c => c.vrangeps(ymm2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vrangeps_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vrangeps_zmm_zmm_zmm_i() {
			TestAssembler(c => c.vrangeps(zmm2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vrangeps_zmm_k1z_zmm_zmmm512b32_imm8_sae, Register.ZMM2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vrangeps_xmm_xmm_m_i() {
			TestAssembler(c => c.vrangeps(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vrangeps_xmm_k1z_xmm_xmmm128b32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vrangeps_ymm_ymm_m_i() {
			TestAssembler(c => c.vrangeps(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vrangeps_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vrangeps_zmm_zmm_m_i() {
			TestAssembler(c => c.vrangeps(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vrangeps_zmm_k1z_zmm_zmmm512b32_imm8_sae, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vrangeps_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vrangeps(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrangeps_xmm_k1z_xmm_xmmm128b32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vrangeps_ymm_ymm_ymm_u() {
			TestAssembler(c => c.vrangeps(ymm2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrangeps_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vrangeps_zmm_zmm_zmm_u() {
			TestAssembler(c => c.vrangeps(zmm2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrangeps_zmm_k1z_zmm_zmmm512b32_imm8_sae, Register.ZMM2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vrangeps_xmm_xmm_m_u() {
			TestAssembler(c => c.vrangeps(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrangeps_xmm_k1z_xmm_xmmm128b32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vrangeps_ymm_ymm_m_u() {
			TestAssembler(c => c.vrangeps(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrangeps_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vrangeps_zmm_zmm_m_u() {
			TestAssembler(c => c.vrangeps(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrangeps_zmm_k1z_zmm_zmmm512b32_imm8_sae, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vrangesd_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vrangesd(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vrangesd_xmm_k1z_xmm_xmmm64_imm8_sae, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vrangesd_xmm_xmm_m_i() {
			TestAssembler(c => c.vrangesd(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vrangesd_xmm_k1z_xmm_xmmm64_imm8_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vrangesd_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vrangesd(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrangesd_xmm_k1z_xmm_xmmm64_imm8_sae, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vrangesd_xmm_xmm_m_u() {
			TestAssembler(c => c.vrangesd(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrangesd_xmm_k1z_xmm_xmmm64_imm8_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vrangess_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vrangess(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vrangess_xmm_k1z_xmm_xmmm32_imm8_sae, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vrangess_xmm_xmm_m_i() {
			TestAssembler(c => c.vrangess(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vrangess_xmm_k1z_xmm_xmmm32_imm8_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vrangess_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vrangess(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrangess_xmm_k1z_xmm_xmmm32_imm8_sae, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vrangess_xmm_xmm_m_u() {
			TestAssembler(c => c.vrangess(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrangess_xmm_k1z_xmm_xmmm32_imm8_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vrcp14pd_xmm_xmm() {
			TestAssembler(c => c.vrcp14pd(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vrcp14pd_xmm_k1z_xmmm128b64, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vrcp14pd_ymm_ymm() {
			TestAssembler(c => c.vrcp14pd(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vrcp14pd_ymm_k1z_ymmm256b64, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vrcp14pd_zmm_zmm() {
			TestAssembler(c => c.vrcp14pd(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vrcp14pd_zmm_k1z_zmmm512b64, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vrcp14pd_xmm_m() {
			TestAssembler(c => c.vrcp14pd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrcp14pd_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrcp14pd_ymm_m() {
			TestAssembler(c => c.vrcp14pd(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrcp14pd_ymm_k1z_ymmm256b64, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrcp14pd_zmm_m() {
			TestAssembler(c => c.vrcp14pd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrcp14pd_zmm_k1z_zmmm512b64, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrcp14ps_xmm_xmm() {
			TestAssembler(c => c.vrcp14ps(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vrcp14ps_xmm_k1z_xmmm128b32, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vrcp14ps_ymm_ymm() {
			TestAssembler(c => c.vrcp14ps(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vrcp14ps_ymm_k1z_ymmm256b32, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vrcp14ps_zmm_zmm() {
			TestAssembler(c => c.vrcp14ps(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vrcp14ps_zmm_k1z_zmmm512b32, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vrcp14ps_xmm_m() {
			TestAssembler(c => c.vrcp14ps(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrcp14ps_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrcp14ps_ymm_m() {
			TestAssembler(c => c.vrcp14ps(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrcp14ps_ymm_k1z_ymmm256b32, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrcp14ps_zmm_m() {
			TestAssembler(c => c.vrcp14ps(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrcp14ps_zmm_k1z_zmmm512b32, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrcp14sd_xmm_xmm_xmm() {
			TestAssembler(c => c.vrcp14sd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vrcp14sd_xmm_k1z_xmm_xmmm64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vrcp14sd_xmm_xmm_m() {
			TestAssembler(c => c.vrcp14sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrcp14sd_xmm_k1z_xmm_xmmm64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrcp14ss_xmm_xmm_xmm() {
			TestAssembler(c => c.vrcp14ss(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vrcp14ss_xmm_k1z_xmm_xmmm32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vrcp14ss_xmm_xmm_m() {
			TestAssembler(c => c.vrcp14ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrcp14ss_xmm_k1z_xmm_xmmm32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrcp28pd_zmm_zmm() {
			TestAssembler(c => c.vrcp28pd(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vrcp28pd_zmm_k1z_zmmm512b64_sae, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vrcp28pd_zmm_m() {
			TestAssembler(c => c.vrcp28pd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrcp28pd_zmm_k1z_zmmm512b64_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrcp28ps_zmm_zmm() {
			TestAssembler(c => c.vrcp28ps(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vrcp28ps_zmm_k1z_zmmm512b32_sae, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vrcp28ps_zmm_m() {
			TestAssembler(c => c.vrcp28ps(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrcp28ps_zmm_k1z_zmmm512b32_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrcp28sd_xmm_xmm_xmm() {
			TestAssembler(c => c.vrcp28sd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vrcp28sd_xmm_k1z_xmm_xmmm64_sae, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vrcp28sd_xmm_xmm_m() {
			TestAssembler(c => c.vrcp28sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrcp28sd_xmm_k1z_xmm_xmmm64_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrcp28ss_xmm_xmm_xmm() {
			TestAssembler(c => c.vrcp28ss(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vrcp28ss_xmm_k1z_xmm_xmmm32_sae, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vrcp28ss_xmm_xmm_m() {
			TestAssembler(c => c.vrcp28ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrcp28ss_xmm_k1z_xmm_xmmm32_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrcpph_xmm_xmm() {
			TestAssembler(c => c.vrcpph(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vrcpph_xmm_k1z_xmmm128b16, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vrcpph_ymm_ymm() {
			TestAssembler(c => c.vrcpph(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vrcpph_ymm_k1z_ymmm256b16, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vrcpph_zmm_zmm() {
			TestAssembler(c => c.vrcpph(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vrcpph_zmm_k1z_zmmm512b16, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vrcpph_xmm_m() {
			TestAssembler(c => c.vrcpph(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrcpph_xmm_k1z_xmmm128b16, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrcpph_ymm_m() {
			TestAssembler(c => c.vrcpph(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrcpph_ymm_k1z_ymmm256b16, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrcpph_zmm_m() {
			TestAssembler(c => c.vrcpph(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrcpph_zmm_k1z_zmmm512b16, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrcpps_xmm_xmm() {
			TestAssembler(c => c.vrcpps(xmm2, xmm3), Instruction.Create(Code.VEX_Vrcpps_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vrcpps_ymm_ymm() {
			TestAssembler(c => c.vrcpps(ymm2, ymm3), Instruction.Create(Code.VEX_Vrcpps_ymm_ymmm256, Register.YMM2, Register.YMM3));
		}

		[Fact]
		public void vrcpps_xmm_m() {
			TestAssembler(c => c.vrcpps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vrcpps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vrcpps_ymm_m() {
			TestAssembler(c => c.vrcpps(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vrcpps_ymm_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vrcpsh_xmm_xmm_xmm() {
			TestAssembler(c => c.vrcpsh(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vrcpsh_xmm_k1z_xmm_xmmm16, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vrcpsh_xmm_xmm_m() {
			TestAssembler(c => c.vrcpsh(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrcpsh_xmm_k1z_xmm_xmmm16, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrcpss_xmm_xmm_xmm() {
			TestAssembler(c => c.vrcpss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vrcpss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vrcpss_xmm_xmm_m() {
			TestAssembler(c => c.vrcpss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vrcpss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vreducepd_xmm_xmm_i() {
			TestAssembler(c => c.vreducepd(xmm2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vreducepd_xmm_k1z_xmmm128b64_imm8, Register.XMM2, Register.XMM3, -5), Register.K1));
		}

		[Fact]
		public void vreducepd_ymm_ymm_i() {
			TestAssembler(c => c.vreducepd(ymm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vreducepd_ymm_k1z_ymmm256b64_imm8, Register.YMM2, Register.YMM3, -5), Register.K1));
		}

		[Fact]
		public void vreducepd_zmm_zmm_i() {
			TestAssembler(c => c.vreducepd(zmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vreducepd_zmm_k1z_zmmm512b64_imm8_sae, Register.ZMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vreducepd_xmm_m_i() {
			TestAssembler(c => c.vreducepd(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vreducepd_xmm_k1z_xmmm128b64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vreducepd_ymm_m_i() {
			TestAssembler(c => c.vreducepd(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vreducepd_ymm_k1z_ymmm256b64_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vreducepd_zmm_m_i() {
			TestAssembler(c => c.vreducepd(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vreducepd_zmm_k1z_zmmm512b64_imm8_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vreducepd_xmm_xmm_u() {
			TestAssembler(c => c.vreducepd(xmm2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vreducepd_xmm_k1z_xmmm128b64_imm8, Register.XMM2, Register.XMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vreducepd_ymm_ymm_u() {
			TestAssembler(c => c.vreducepd(ymm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vreducepd_ymm_k1z_ymmm256b64_imm8, Register.YMM2, Register.YMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vreducepd_zmm_zmm_u() {
			TestAssembler(c => c.vreducepd(zmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vreducepd_zmm_k1z_zmmm512b64_imm8_sae, Register.ZMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vreducepd_xmm_m_u() {
			TestAssembler(c => c.vreducepd(xmm2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vreducepd_xmm_k1z_xmmm128b64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vreducepd_ymm_m_u() {
			TestAssembler(c => c.vreducepd(ymm2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vreducepd_ymm_k1z_ymmm256b64_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vreducepd_zmm_m_u() {
			TestAssembler(c => c.vreducepd(zmm2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vreducepd_zmm_k1z_zmmm512b64_imm8_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vreduceph_xmm_xmm_i() {
			TestAssembler(c => c.vreduceph(xmm2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vreduceph_xmm_k1z_xmmm128b16_imm8, Register.XMM2, Register.XMM3, -5), Register.K1));
		}

		[Fact]
		public void vreduceph_ymm_ymm_i() {
			TestAssembler(c => c.vreduceph(ymm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vreduceph_ymm_k1z_ymmm256b16_imm8, Register.YMM2, Register.YMM3, -5), Register.K1));
		}

		[Fact]
		public void vreduceph_zmm_zmm_i() {
			TestAssembler(c => c.vreduceph(zmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vreduceph_zmm_k1z_zmmm512b16_imm8_sae, Register.ZMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vreduceph_xmm_m_i() {
			TestAssembler(c => c.vreduceph(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vreduceph_xmm_k1z_xmmm128b16_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vreduceph_ymm_m_i() {
			TestAssembler(c => c.vreduceph(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vreduceph_ymm_k1z_ymmm256b16_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vreduceph_zmm_m_i() {
			TestAssembler(c => c.vreduceph(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vreduceph_zmm_k1z_zmmm512b16_imm8_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vreduceph_xmm_xmm_u() {
			TestAssembler(c => c.vreduceph(xmm2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vreduceph_xmm_k1z_xmmm128b16_imm8, Register.XMM2, Register.XMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vreduceph_ymm_ymm_u() {
			TestAssembler(c => c.vreduceph(ymm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vreduceph_ymm_k1z_ymmm256b16_imm8, Register.YMM2, Register.YMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vreduceph_zmm_zmm_u() {
			TestAssembler(c => c.vreduceph(zmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vreduceph_zmm_k1z_zmmm512b16_imm8_sae, Register.ZMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vreduceph_xmm_m_u() {
			TestAssembler(c => c.vreduceph(xmm2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vreduceph_xmm_k1z_xmmm128b16_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vreduceph_ymm_m_u() {
			TestAssembler(c => c.vreduceph(ymm2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vreduceph_ymm_k1z_ymmm256b16_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vreduceph_zmm_m_u() {
			TestAssembler(c => c.vreduceph(zmm2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vreduceph_zmm_k1z_zmmm512b16_imm8_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vreduceps_xmm_xmm_i() {
			TestAssembler(c => c.vreduceps(xmm2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vreduceps_xmm_k1z_xmmm128b32_imm8, Register.XMM2, Register.XMM3, -5), Register.K1));
		}

		[Fact]
		public void vreduceps_ymm_ymm_i() {
			TestAssembler(c => c.vreduceps(ymm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vreduceps_ymm_k1z_ymmm256b32_imm8, Register.YMM2, Register.YMM3, -5), Register.K1));
		}

		[Fact]
		public void vreduceps_zmm_zmm_i() {
			TestAssembler(c => c.vreduceps(zmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vreduceps_zmm_k1z_zmmm512b32_imm8_sae, Register.ZMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vreduceps_xmm_m_i() {
			TestAssembler(c => c.vreduceps(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vreduceps_xmm_k1z_xmmm128b32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vreduceps_ymm_m_i() {
			TestAssembler(c => c.vreduceps(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vreduceps_ymm_k1z_ymmm256b32_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vreduceps_zmm_m_i() {
			TestAssembler(c => c.vreduceps(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vreduceps_zmm_k1z_zmmm512b32_imm8_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vreduceps_xmm_xmm_u() {
			TestAssembler(c => c.vreduceps(xmm2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vreduceps_xmm_k1z_xmmm128b32_imm8, Register.XMM2, Register.XMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vreduceps_ymm_ymm_u() {
			TestAssembler(c => c.vreduceps(ymm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vreduceps_ymm_k1z_ymmm256b32_imm8, Register.YMM2, Register.YMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vreduceps_zmm_zmm_u() {
			TestAssembler(c => c.vreduceps(zmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vreduceps_zmm_k1z_zmmm512b32_imm8_sae, Register.ZMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vreduceps_xmm_m_u() {
			TestAssembler(c => c.vreduceps(xmm2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vreduceps_xmm_k1z_xmmm128b32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vreduceps_ymm_m_u() {
			TestAssembler(c => c.vreduceps(ymm2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vreduceps_ymm_k1z_ymmm256b32_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vreduceps_zmm_m_u() {
			TestAssembler(c => c.vreduceps(zmm2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vreduceps_zmm_k1z_zmmm512b32_imm8_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vreducesd_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vreducesd(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vreducesd_xmm_k1z_xmm_xmmm64_imm8_sae, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vreducesd_xmm_xmm_m_i() {
			TestAssembler(c => c.vreducesd(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vreducesd_xmm_k1z_xmm_xmmm64_imm8_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vreducesd_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vreducesd(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vreducesd_xmm_k1z_xmm_xmmm64_imm8_sae, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vreducesd_xmm_xmm_m_u() {
			TestAssembler(c => c.vreducesd(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vreducesd_xmm_k1z_xmm_xmmm64_imm8_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vreducesh_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vreducesh(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vreducesh_xmm_k1z_xmm_xmmm16_imm8_sae, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vreducesh_xmm_xmm_m_i() {
			TestAssembler(c => c.vreducesh(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vreducesh_xmm_k1z_xmm_xmmm16_imm8_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vreducesh_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vreducesh(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vreducesh_xmm_k1z_xmm_xmmm16_imm8_sae, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vreducesh_xmm_xmm_m_u() {
			TestAssembler(c => c.vreducesh(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vreducesh_xmm_k1z_xmm_xmmm16_imm8_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vreducess_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vreducess(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vreducess_xmm_k1z_xmm_xmmm32_imm8_sae, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vreducess_xmm_xmm_m_i() {
			TestAssembler(c => c.vreducess(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vreducess_xmm_k1z_xmm_xmmm32_imm8_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vreducess_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vreducess(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vreducess_xmm_k1z_xmm_xmmm32_imm8_sae, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vreducess_xmm_xmm_m_u() {
			TestAssembler(c => c.vreducess(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vreducess_xmm_k1z_xmm_xmmm32_imm8_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vrndscalepd_xmm_xmm_i() {
			TestAssembler(c => c.vrndscalepd(xmm2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vrndscalepd_xmm_k1z_xmmm128b64_imm8, Register.XMM2, Register.XMM3, -5), Register.K1));
		}

		[Fact]
		public void vrndscalepd_ymm_ymm_i() {
			TestAssembler(c => c.vrndscalepd(ymm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vrndscalepd_ymm_k1z_ymmm256b64_imm8, Register.YMM2, Register.YMM3, -5), Register.K1));
		}

		[Fact]
		public void vrndscalepd_zmm_zmm_i() {
			TestAssembler(c => c.vrndscalepd(zmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vrndscalepd_zmm_k1z_zmmm512b64_imm8_sae, Register.ZMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vrndscalepd_xmm_m_i() {
			TestAssembler(c => c.vrndscalepd(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vrndscalepd_xmm_k1z_xmmm128b64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vrndscalepd_ymm_m_i() {
			TestAssembler(c => c.vrndscalepd(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vrndscalepd_ymm_k1z_ymmm256b64_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vrndscalepd_zmm_m_i() {
			TestAssembler(c => c.vrndscalepd(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vrndscalepd_zmm_k1z_zmmm512b64_imm8_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vrndscalepd_xmm_xmm_u() {
			TestAssembler(c => c.vrndscalepd(xmm2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrndscalepd_xmm_k1z_xmmm128b64_imm8, Register.XMM2, Register.XMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vrndscalepd_ymm_ymm_u() {
			TestAssembler(c => c.vrndscalepd(ymm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrndscalepd_ymm_k1z_ymmm256b64_imm8, Register.YMM2, Register.YMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vrndscalepd_zmm_zmm_u() {
			TestAssembler(c => c.vrndscalepd(zmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrndscalepd_zmm_k1z_zmmm512b64_imm8_sae, Register.ZMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vrndscalepd_xmm_m_u() {
			TestAssembler(c => c.vrndscalepd(xmm2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrndscalepd_xmm_k1z_xmmm128b64_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vrndscalepd_ymm_m_u() {
			TestAssembler(c => c.vrndscalepd(ymm2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrndscalepd_ymm_k1z_ymmm256b64_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vrndscalepd_zmm_m_u() {
			TestAssembler(c => c.vrndscalepd(zmm2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrndscalepd_zmm_k1z_zmmm512b64_imm8_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vrndscaleph_xmm_xmm_i() {
			TestAssembler(c => c.vrndscaleph(xmm2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vrndscaleph_xmm_k1z_xmmm128b16_imm8, Register.XMM2, Register.XMM3, -5), Register.K1));
		}

		[Fact]
		public void vrndscaleph_ymm_ymm_i() {
			TestAssembler(c => c.vrndscaleph(ymm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vrndscaleph_ymm_k1z_ymmm256b16_imm8, Register.YMM2, Register.YMM3, -5), Register.K1));
		}

		[Fact]
		public void vrndscaleph_zmm_zmm_i() {
			TestAssembler(c => c.vrndscaleph(zmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vrndscaleph_zmm_k1z_zmmm512b16_imm8_sae, Register.ZMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vrndscaleph_xmm_m_i() {
			TestAssembler(c => c.vrndscaleph(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vrndscaleph_xmm_k1z_xmmm128b16_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vrndscaleph_ymm_m_i() {
			TestAssembler(c => c.vrndscaleph(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vrndscaleph_ymm_k1z_ymmm256b16_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vrndscaleph_zmm_m_i() {
			TestAssembler(c => c.vrndscaleph(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vrndscaleph_zmm_k1z_zmmm512b16_imm8_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vrndscaleph_xmm_xmm_u() {
			TestAssembler(c => c.vrndscaleph(xmm2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrndscaleph_xmm_k1z_xmmm128b16_imm8, Register.XMM2, Register.XMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vrndscaleph_ymm_ymm_u() {
			TestAssembler(c => c.vrndscaleph(ymm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrndscaleph_ymm_k1z_ymmm256b16_imm8, Register.YMM2, Register.YMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vrndscaleph_zmm_zmm_u() {
			TestAssembler(c => c.vrndscaleph(zmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrndscaleph_zmm_k1z_zmmm512b16_imm8_sae, Register.ZMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vrndscaleph_xmm_m_u() {
			TestAssembler(c => c.vrndscaleph(xmm2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrndscaleph_xmm_k1z_xmmm128b16_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vrndscaleph_ymm_m_u() {
			TestAssembler(c => c.vrndscaleph(ymm2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrndscaleph_ymm_k1z_ymmm256b16_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vrndscaleph_zmm_m_u() {
			TestAssembler(c => c.vrndscaleph(zmm2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrndscaleph_zmm_k1z_zmmm512b16_imm8_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vrndscaleps_xmm_xmm_i() {
			TestAssembler(c => c.vrndscaleps(xmm2.k1, xmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vrndscaleps_xmm_k1z_xmmm128b32_imm8, Register.XMM2, Register.XMM3, -5), Register.K1));
		}

		[Fact]
		public void vrndscaleps_ymm_ymm_i() {
			TestAssembler(c => c.vrndscaleps(ymm2.k1, ymm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vrndscaleps_ymm_k1z_ymmm256b32_imm8, Register.YMM2, Register.YMM3, -5), Register.K1));
		}

		[Fact]
		public void vrndscaleps_zmm_zmm_i() {
			TestAssembler(c => c.vrndscaleps(zmm2.k1, zmm3, -5), ApplyK(Instruction.Create(Code.EVEX_Vrndscaleps_zmm_k1z_zmmm512b32_imm8_sae, Register.ZMM2, Register.ZMM3, -5), Register.K1));
		}

		[Fact]
		public void vrndscaleps_xmm_m_i() {
			TestAssembler(c => c.vrndscaleps(xmm2.k1, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vrndscaleps_xmm_k1z_xmmm128b32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vrndscaleps_ymm_m_i() {
			TestAssembler(c => c.vrndscaleps(ymm2.k1, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vrndscaleps_ymm_k1z_ymmm256b32_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vrndscaleps_zmm_m_i() {
			TestAssembler(c => c.vrndscaleps(zmm2.k1, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vrndscaleps_zmm_k1z_zmmm512b32_imm8_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vrndscaleps_xmm_xmm_u() {
			TestAssembler(c => c.vrndscaleps(xmm2.k1, xmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrndscaleps_xmm_k1z_xmmm128b32_imm8, Register.XMM2, Register.XMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vrndscaleps_ymm_ymm_u() {
			TestAssembler(c => c.vrndscaleps(ymm2.k1, ymm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrndscaleps_ymm_k1z_ymmm256b32_imm8, Register.YMM2, Register.YMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vrndscaleps_zmm_zmm_u() {
			TestAssembler(c => c.vrndscaleps(zmm2.k1, zmm3, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrndscaleps_zmm_k1z_zmmm512b32_imm8_sae, Register.ZMM2, Register.ZMM3, 0x7FU), Register.K1));
		}

		[Fact]
		public void vrndscaleps_xmm_m_u() {
			TestAssembler(c => c.vrndscaleps(xmm2.k1, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrndscaleps_xmm_k1z_xmmm128b32_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vrndscaleps_ymm_m_u() {
			TestAssembler(c => c.vrndscaleps(ymm2.k1, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrndscaleps_ymm_k1z_ymmm256b32_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vrndscaleps_zmm_m_u() {
			TestAssembler(c => c.vrndscaleps(zmm2.k1, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrndscaleps_zmm_k1z_zmmm512b32_imm8_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vrndscalesd_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vrndscalesd(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vrndscalesd_xmm_k1z_xmm_xmmm64_imm8_sae, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vrndscalesd_xmm_xmm_m_i() {
			TestAssembler(c => c.vrndscalesd(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vrndscalesd_xmm_k1z_xmm_xmmm64_imm8_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vrndscalesd_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vrndscalesd(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrndscalesd_xmm_k1z_xmm_xmmm64_imm8_sae, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vrndscalesd_xmm_xmm_m_u() {
			TestAssembler(c => c.vrndscalesd(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrndscalesd_xmm_k1z_xmm_xmmm64_imm8_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vrndscalesh_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vrndscalesh(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vrndscalesh_xmm_k1z_xmm_xmmm16_imm8_sae, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vrndscalesh_xmm_xmm_m_i() {
			TestAssembler(c => c.vrndscalesh(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vrndscalesh_xmm_k1z_xmm_xmmm16_imm8_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vrndscalesh_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vrndscalesh(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrndscalesh_xmm_k1z_xmm_xmmm16_imm8_sae, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vrndscalesh_xmm_xmm_m_u() {
			TestAssembler(c => c.vrndscalesh(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrndscalesh_xmm_k1z_xmm_xmmm16_imm8_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vrndscaless_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vrndscaless(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vrndscaless_xmm_k1z_xmm_xmmm32_imm8_sae, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1));
		}

		[Fact]
		public void vrndscaless_xmm_xmm_m_i() {
			TestAssembler(c => c.vrndscaless(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vrndscaless_xmm_k1z_xmm_xmmm32_imm8_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vrndscaless_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vrndscaless(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrndscaless_xmm_k1z_xmm_xmmm32_imm8_sae, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vrndscaless_xmm_xmm_m_u() {
			TestAssembler(c => c.vrndscaless(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vrndscaless_xmm_k1z_xmm_xmmm32_imm8_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vroundpd_xmm_xmm_i() {
			TestAssembler(c => c.vroundpd(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vroundpd_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void vroundpd_ymm_ymm_i() {
			TestAssembler(c => c.vroundpd(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vroundpd_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, -5));
		}

		[Fact]
		public void vroundpd_xmm_m_i() {
			TestAssembler(c => c.vroundpd(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vroundpd_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vroundpd_ymm_m_i() {
			TestAssembler(c => c.vroundpd(ymm2, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vroundpd_ymm_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vroundpd_xmm_xmm_u() {
			TestAssembler(c => c.vroundpd(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vroundpd_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void vroundpd_ymm_ymm_u() {
			TestAssembler(c => c.vroundpd(ymm2, ymm3, (byte)0x7F), Instruction.Create(Code.VEX_Vroundpd_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, 0x7FU));
		}

		[Fact]
		public void vroundpd_xmm_m_u() {
			TestAssembler(c => c.vroundpd(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vroundpd_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vroundpd_ymm_m_u() {
			TestAssembler(c => c.vroundpd(ymm2, __ymmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vroundpd_ymm_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vroundps_xmm_xmm_i() {
			TestAssembler(c => c.vroundps(xmm2, xmm3, -5), Instruction.Create(Code.VEX_Vroundps_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, -5));
		}

		[Fact]
		public void vroundps_ymm_ymm_i() {
			TestAssembler(c => c.vroundps(ymm2, ymm3, -5), Instruction.Create(Code.VEX_Vroundps_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, -5));
		}

		[Fact]
		public void vroundps_xmm_m_i() {
			TestAssembler(c => c.vroundps(xmm2, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vroundps_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vroundps_ymm_m_i() {
			TestAssembler(c => c.vroundps(ymm2, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vroundps_ymm_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vroundps_xmm_xmm_u() {
			TestAssembler(c => c.vroundps(xmm2, xmm3, (byte)0x7F), Instruction.Create(Code.VEX_Vroundps_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, 0x7FU));
		}

		[Fact]
		public void vroundps_ymm_ymm_u() {
			TestAssembler(c => c.vroundps(ymm2, ymm3, (byte)0x7F), Instruction.Create(Code.VEX_Vroundps_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, 0x7FU));
		}

		[Fact]
		public void vroundps_xmm_m_u() {
			TestAssembler(c => c.vroundps(xmm2, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vroundps_xmm_xmmm128_imm8, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vroundps_ymm_m_u() {
			TestAssembler(c => c.vroundps(ymm2, __ymmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vroundps_ymm_ymmm256_imm8, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vroundsd_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vroundsd(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vroundsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5));
		}

		[Fact]
		public void vroundsd_xmm_xmm_m_i() {
			TestAssembler(c => c.vroundsd(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vroundsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vroundsd_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vroundsd(xmm2, xmm3, xmm4, (byte)0x7F), Instruction.Create(Code.VEX_Vroundsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU));
		}

		[Fact]
		public void vroundsd_xmm_xmm_m_u() {
			TestAssembler(c => c.vroundsd(xmm2, xmm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vroundsd_xmm_xmm_xmmm64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vroundss_xmm_xmm_xmm_i() {
			TestAssembler(c => c.vroundss(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vroundss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5));
		}

		[Fact]
		public void vroundss_xmm_xmm_m_i() {
			TestAssembler(c => c.vroundss(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vroundss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5));
		}

		[Fact]
		public void vroundss_xmm_xmm_xmm_u() {
			TestAssembler(c => c.vroundss(xmm2, xmm3, xmm4, (byte)0x7F), Instruction.Create(Code.VEX_Vroundss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU));
		}

		[Fact]
		public void vroundss_xmm_xmm_m_u() {
			TestAssembler(c => c.vroundss(xmm2, xmm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vroundss_xmm_xmm_xmmm32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
		}

		[Fact]
		public void vrsqrt14pd_xmm_xmm() {
			TestAssembler(c => c.vrsqrt14pd(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vrsqrt14pd_xmm_k1z_xmmm128b64, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vrsqrt14pd_ymm_ymm() {
			TestAssembler(c => c.vrsqrt14pd(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vrsqrt14pd_ymm_k1z_ymmm256b64, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vrsqrt14pd_zmm_zmm() {
			TestAssembler(c => c.vrsqrt14pd(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vrsqrt14pd_zmm_k1z_zmmm512b64, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vrsqrt14pd_xmm_m() {
			TestAssembler(c => c.vrsqrt14pd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrsqrt14pd_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrsqrt14pd_ymm_m() {
			TestAssembler(c => c.vrsqrt14pd(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrsqrt14pd_ymm_k1z_ymmm256b64, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrsqrt14pd_zmm_m() {
			TestAssembler(c => c.vrsqrt14pd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrsqrt14pd_zmm_k1z_zmmm512b64, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrsqrt14ps_xmm_xmm() {
			TestAssembler(c => c.vrsqrt14ps(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vrsqrt14ps_xmm_k1z_xmmm128b32, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vrsqrt14ps_ymm_ymm() {
			TestAssembler(c => c.vrsqrt14ps(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vrsqrt14ps_ymm_k1z_ymmm256b32, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vrsqrt14ps_zmm_zmm() {
			TestAssembler(c => c.vrsqrt14ps(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vrsqrt14ps_zmm_k1z_zmmm512b32, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vrsqrt14ps_xmm_m() {
			TestAssembler(c => c.vrsqrt14ps(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrsqrt14ps_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrsqrt14ps_ymm_m() {
			TestAssembler(c => c.vrsqrt14ps(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrsqrt14ps_ymm_k1z_ymmm256b32, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrsqrt14ps_zmm_m() {
			TestAssembler(c => c.vrsqrt14ps(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrsqrt14ps_zmm_k1z_zmmm512b32, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrsqrt14sd_xmm_xmm_xmm() {
			TestAssembler(c => c.vrsqrt14sd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vrsqrt14sd_xmm_k1z_xmm_xmmm64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vrsqrt14sd_xmm_xmm_m() {
			TestAssembler(c => c.vrsqrt14sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrsqrt14sd_xmm_k1z_xmm_xmmm64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrsqrt14ss_xmm_xmm_xmm() {
			TestAssembler(c => c.vrsqrt14ss(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vrsqrt14ss_xmm_k1z_xmm_xmmm32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vrsqrt14ss_xmm_xmm_m() {
			TestAssembler(c => c.vrsqrt14ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrsqrt14ss_xmm_k1z_xmm_xmmm32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrsqrt28pd_zmm_zmm() {
			TestAssembler(c => c.vrsqrt28pd(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vrsqrt28pd_zmm_k1z_zmmm512b64_sae, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vrsqrt28pd_zmm_m() {
			TestAssembler(c => c.vrsqrt28pd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrsqrt28pd_zmm_k1z_zmmm512b64_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrsqrt28ps_zmm_zmm() {
			TestAssembler(c => c.vrsqrt28ps(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vrsqrt28ps_zmm_k1z_zmmm512b32_sae, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vrsqrt28ps_zmm_m() {
			TestAssembler(c => c.vrsqrt28ps(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrsqrt28ps_zmm_k1z_zmmm512b32_sae, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrsqrt28sd_xmm_xmm_xmm() {
			TestAssembler(c => c.vrsqrt28sd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vrsqrt28sd_xmm_k1z_xmm_xmmm64_sae, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vrsqrt28sd_xmm_xmm_m() {
			TestAssembler(c => c.vrsqrt28sd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrsqrt28sd_xmm_k1z_xmm_xmmm64_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrsqrt28ss_xmm_xmm_xmm() {
			TestAssembler(c => c.vrsqrt28ss(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vrsqrt28ss_xmm_k1z_xmm_xmmm32_sae, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vrsqrt28ss_xmm_xmm_m() {
			TestAssembler(c => c.vrsqrt28ss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrsqrt28ss_xmm_k1z_xmm_xmmm32_sae, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrsqrtph_xmm_xmm() {
			TestAssembler(c => c.vrsqrtph(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vrsqrtph_xmm_k1z_xmmm128b16, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vrsqrtph_ymm_ymm() {
			TestAssembler(c => c.vrsqrtph(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vrsqrtph_ymm_k1z_ymmm256b16, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vrsqrtph_zmm_zmm() {
			TestAssembler(c => c.vrsqrtph(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vrsqrtph_zmm_k1z_zmmm512b16, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vrsqrtph_xmm_m() {
			TestAssembler(c => c.vrsqrtph(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrsqrtph_xmm_k1z_xmmm128b16, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrsqrtph_ymm_m() {
			TestAssembler(c => c.vrsqrtph(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrsqrtph_ymm_k1z_ymmm256b16, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrsqrtph_zmm_m() {
			TestAssembler(c => c.vrsqrtph(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrsqrtph_zmm_k1z_zmmm512b16, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrsqrtps_xmm_xmm() {
			TestAssembler(c => c.vrsqrtps(xmm2, xmm3), Instruction.Create(Code.VEX_Vrsqrtps_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vrsqrtps_ymm_ymm() {
			TestAssembler(c => c.vrsqrtps(ymm2, ymm3), Instruction.Create(Code.VEX_Vrsqrtps_ymm_ymmm256, Register.YMM2, Register.YMM3));
		}

		[Fact]
		public void vrsqrtps_xmm_m() {
			TestAssembler(c => c.vrsqrtps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vrsqrtps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vrsqrtps_ymm_m() {
			TestAssembler(c => c.vrsqrtps(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vrsqrtps_ymm_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vrsqrtsh_xmm_xmm_xmm() {
			TestAssembler(c => c.vrsqrtsh(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vrsqrtsh_xmm_k1z_xmm_xmmm16, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vrsqrtsh_xmm_xmm_m() {
			TestAssembler(c => c.vrsqrtsh(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vrsqrtsh_xmm_k1z_xmm_xmmm16, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vrsqrtss_xmm_xmm_xmm() {
			TestAssembler(c => c.vrsqrtss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vrsqrtss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, Register.XMM4));
		}

		[Fact]
		public void vrsqrtss_xmm_xmm_m() {
			TestAssembler(c => c.vrsqrtss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vrsqrtss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vscalefpd_xmm_xmm_xmm() {
			TestAssembler(c => c.vscalefpd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vscalefpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vscalefpd_ymm_ymm_ymm() {
			TestAssembler(c => c.vscalefpd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vscalefpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vscalefpd_zmm_zmm_zmm() {
			TestAssembler(c => c.vscalefpd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vscalefpd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vscalefpd_xmm_xmm_m() {
			TestAssembler(c => c.vscalefpd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vscalefpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vscalefpd_ymm_ymm_m() {
			TestAssembler(c => c.vscalefpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vscalefpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vscalefpd_zmm_zmm_m() {
			TestAssembler(c => c.vscalefpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vscalefpd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vscalefph_xmm_xmm_xmm() {
			TestAssembler(c => c.vscalefph(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vscalefph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vscalefph_ymm_ymm_ymm() {
			TestAssembler(c => c.vscalefph(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vscalefph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vscalefph_zmm_zmm_zmm() {
			TestAssembler(c => c.vscalefph(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vscalefph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vscalefph_xmm_xmm_m() {
			TestAssembler(c => c.vscalefph(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vscalefph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vscalefph_ymm_ymm_m() {
			TestAssembler(c => c.vscalefph(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vscalefph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vscalefph_zmm_zmm_m() {
			TestAssembler(c => c.vscalefph(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vscalefph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vscalefps_xmm_xmm_xmm() {
			TestAssembler(c => c.vscalefps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vscalefps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vscalefps_ymm_ymm_ymm() {
			TestAssembler(c => c.vscalefps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vscalefps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vscalefps_zmm_zmm_zmm() {
			TestAssembler(c => c.vscalefps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vscalefps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vscalefps_xmm_xmm_m() {
			TestAssembler(c => c.vscalefps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vscalefps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vscalefps_ymm_ymm_m() {
			TestAssembler(c => c.vscalefps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vscalefps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vscalefps_zmm_zmm_m() {
			TestAssembler(c => c.vscalefps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vscalefps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vscalefsd_xmm_xmm_xmm() {
			TestAssembler(c => c.vscalefsd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vscalefsd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vscalefsd_xmm_xmm_m() {
			TestAssembler(c => c.vscalefsd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vscalefsd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vscalefsh_xmm_xmm_xmm() {
			TestAssembler(c => c.vscalefsh(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vscalefsh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vscalefsh_xmm_xmm_m() {
			TestAssembler(c => c.vscalefsh(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vscalefsh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vscalefss_xmm_xmm_xmm() {
			TestAssembler(c => c.vscalefss(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vscalefss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vscalefss_xmm_xmm_m() {
			TestAssembler(c => c.vscalefss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vscalefss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vscatterdpd_m_xmm() {
			TestAssembler(c => c.vscatterdpd(__[rdx+xmm2].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vscatterdpd_vm32x_k1_xmm, new MemoryOperand(Register.RDX, Register.XMM2, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vscatterdpd_m_ymm() {
			TestAssembler(c => c.vscatterdpd(__[rdx+xmm2].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vscatterdpd_vm32x_k1_ymm, new MemoryOperand(Register.RDX, Register.XMM2, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vscatterdpd_m_zmm() {
			TestAssembler(c => c.vscatterdpd(__[rdx+ymm2].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vscatterdpd_vm32y_k1_zmm, new MemoryOperand(Register.RDX, Register.YMM2, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vscatterdps_m_xmm() {
			TestAssembler(c => c.vscatterdps(__[rdx+xmm2].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vscatterdps_vm32x_k1_xmm, new MemoryOperand(Register.RDX, Register.XMM2, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vscatterdps_m_ymm() {
			TestAssembler(c => c.vscatterdps(__[rdx+ymm2].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vscatterdps_vm32y_k1_ymm, new MemoryOperand(Register.RDX, Register.YMM2, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vscatterdps_m_zmm() {
			TestAssembler(c => c.vscatterdps(__[rdx+zmm2].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vscatterdps_vm32z_k1_zmm, new MemoryOperand(Register.RDX, Register.ZMM2, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vscatterpf0dpd_m() {
			TestAssembler(c => c.vscatterpf0dpd(__[rdx+ymm2].k1), ApplyK(Instruction.Create(Code.EVEX_Vscatterpf0dpd_vm32y_k1, new MemoryOperand(Register.RDX, Register.YMM2, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vscatterpf0dps_m() {
			TestAssembler(c => c.vscatterpf0dps(__[rdx+zmm2].k1), ApplyK(Instruction.Create(Code.EVEX_Vscatterpf0dps_vm32z_k1, new MemoryOperand(Register.RDX, Register.ZMM2, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vscatterpf0qpd_m() {
			TestAssembler(c => c.vscatterpf0qpd(__[rdx+zmm2].k1), ApplyK(Instruction.Create(Code.EVEX_Vscatterpf0qpd_vm64z_k1, new MemoryOperand(Register.RDX, Register.ZMM2, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vscatterpf0qps_m() {
			TestAssembler(c => c.vscatterpf0qps(__[rdx+zmm2].k1), ApplyK(Instruction.Create(Code.EVEX_Vscatterpf0qps_vm64z_k1, new MemoryOperand(Register.RDX, Register.ZMM2, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vscatterpf1dpd_m() {
			TestAssembler(c => c.vscatterpf1dpd(__[rdx+ymm2].k1), ApplyK(Instruction.Create(Code.EVEX_Vscatterpf1dpd_vm32y_k1, new MemoryOperand(Register.RDX, Register.YMM2, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vscatterpf1dps_m() {
			TestAssembler(c => c.vscatterpf1dps(__[rdx+zmm2].k1), ApplyK(Instruction.Create(Code.EVEX_Vscatterpf1dps_vm32z_k1, new MemoryOperand(Register.RDX, Register.ZMM2, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vscatterpf1qpd_m() {
			TestAssembler(c => c.vscatterpf1qpd(__[rdx+zmm2].k1), ApplyK(Instruction.Create(Code.EVEX_Vscatterpf1qpd_vm64z_k1, new MemoryOperand(Register.RDX, Register.ZMM2, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vscatterpf1qps_m() {
			TestAssembler(c => c.vscatterpf1qps(__[rdx+zmm2].k1), ApplyK(Instruction.Create(Code.EVEX_Vscatterpf1qps_vm64z_k1, new MemoryOperand(Register.RDX, Register.ZMM2, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vscatterqpd_m_xmm() {
			TestAssembler(c => c.vscatterqpd(__[rdx+xmm2].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vscatterqpd_vm64x_k1_xmm, new MemoryOperand(Register.RDX, Register.XMM2, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
		}

		[Fact]
		public void vscatterqpd_m_ymm() {
			TestAssembler(c => c.vscatterqpd(__[rdx+ymm2].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vscatterqpd_vm64y_k1_ymm, new MemoryOperand(Register.RDX, Register.YMM2, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vscatterqpd_m_zmm() {
			TestAssembler(c => c.vscatterqpd(__[rdx+zmm2].k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vscatterqpd_vm64z_k1_zmm, new MemoryOperand(Register.RDX, Register.ZMM2, 1, 0x0, 0, false, Register.None), Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vscatterqps_m_xmm() {
			{ /* if (dst.Index.IsXMM()) */
				TestAssembler(c => c.vscatterqps(__[rdx+xmm2].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vscatterqps_vm64x_k1_xmm, new MemoryOperand(Register.RDX, Register.XMM2, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
			} /* else */ { /* if (dst.Index.IsYMM()) */
				TestAssembler(c => c.vscatterqps(__[rdx+ymm2].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vscatterqps_vm64y_k1_xmm, new MemoryOperand(Register.RDX, Register.YMM2, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.vscatterqps(__[rdx+zmm0].k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vscatterqps_vm64y_k1_xmm, new MemoryOperand(Register.RDX, Register.ZMM0, 1, 0x0, 0, false, Register.None), Register.XMM3), Register.K1));
				});
			}
		}

		[Fact]
		public void vscatterqps_m_ymm() {
			TestAssembler(c => c.vscatterqps(__[rdx+zmm2].k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vscatterqps_vm64z_k1_ymm, new MemoryOperand(Register.RDX, Register.ZMM2, 1, 0x0, 0, false, Register.None), Register.YMM3), Register.K1));
		}

		[Fact]
		public void vshuff32x4_ymm_ymm_ymm_i() {
			TestAssembler(c => c.vshuff32x4(ymm2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vshuff32x4_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vshuff32x4_zmm_zmm_zmm_i() {
			TestAssembler(c => c.vshuff32x4(zmm2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vshuff32x4_zmm_k1z_zmm_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vshuff32x4_ymm_ymm_m_i() {
			TestAssembler(c => c.vshuff32x4(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vshuff32x4_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vshuff32x4_zmm_zmm_m_i() {
			TestAssembler(c => c.vshuff32x4(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vshuff32x4_zmm_k1z_zmm_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vshuff32x4_ymm_ymm_ymm_u() {
			TestAssembler(c => c.vshuff32x4(ymm2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshuff32x4_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vshuff32x4_zmm_zmm_zmm_u() {
			TestAssembler(c => c.vshuff32x4(zmm2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshuff32x4_zmm_k1z_zmm_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vshuff32x4_ymm_ymm_m_u() {
			TestAssembler(c => c.vshuff32x4(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshuff32x4_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vshuff32x4_zmm_zmm_m_u() {
			TestAssembler(c => c.vshuff32x4(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshuff32x4_zmm_k1z_zmm_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vshuff64x2_ymm_ymm_ymm_i() {
			TestAssembler(c => c.vshuff64x2(ymm2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vshuff64x2_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vshuff64x2_zmm_zmm_zmm_i() {
			TestAssembler(c => c.vshuff64x2(zmm2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vshuff64x2_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vshuff64x2_ymm_ymm_m_i() {
			TestAssembler(c => c.vshuff64x2(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vshuff64x2_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vshuff64x2_zmm_zmm_m_i() {
			TestAssembler(c => c.vshuff64x2(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vshuff64x2_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vshuff64x2_ymm_ymm_ymm_u() {
			TestAssembler(c => c.vshuff64x2(ymm2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshuff64x2_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vshuff64x2_zmm_zmm_zmm_u() {
			TestAssembler(c => c.vshuff64x2(zmm2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshuff64x2_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vshuff64x2_ymm_ymm_m_u() {
			TestAssembler(c => c.vshuff64x2(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshuff64x2_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vshuff64x2_zmm_zmm_m_u() {
			TestAssembler(c => c.vshuff64x2(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshuff64x2_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vshufi32x4_ymm_ymm_ymm_i() {
			TestAssembler(c => c.vshufi32x4(ymm2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vshufi32x4_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vshufi32x4_zmm_zmm_zmm_i() {
			TestAssembler(c => c.vshufi32x4(zmm2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vshufi32x4_zmm_k1z_zmm_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vshufi32x4_ymm_ymm_m_i() {
			TestAssembler(c => c.vshufi32x4(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vshufi32x4_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vshufi32x4_zmm_zmm_m_i() {
			TestAssembler(c => c.vshufi32x4(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vshufi32x4_zmm_k1z_zmm_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vshufi32x4_ymm_ymm_ymm_u() {
			TestAssembler(c => c.vshufi32x4(ymm2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshufi32x4_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vshufi32x4_zmm_zmm_zmm_u() {
			TestAssembler(c => c.vshufi32x4(zmm2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshufi32x4_zmm_k1z_zmm_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vshufi32x4_ymm_ymm_m_u() {
			TestAssembler(c => c.vshufi32x4(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshufi32x4_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vshufi32x4_zmm_zmm_m_u() {
			TestAssembler(c => c.vshufi32x4(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshufi32x4_zmm_k1z_zmm_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vshufi64x2_ymm_ymm_ymm_i() {
			TestAssembler(c => c.vshufi64x2(ymm2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vshufi64x2_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), Register.K1));
		}

		[Fact]
		public void vshufi64x2_zmm_zmm_zmm_i() {
			TestAssembler(c => c.vshufi64x2(zmm2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vshufi64x2_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vshufi64x2_ymm_ymm_m_i() {
			TestAssembler(c => c.vshufi64x2(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vshufi64x2_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vshufi64x2_zmm_zmm_m_i() {
			TestAssembler(c => c.vshufi64x2(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vshufi64x2_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vshufi64x2_ymm_ymm_ymm_u() {
			TestAssembler(c => c.vshufi64x2(ymm2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshufi64x2_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vshufi64x2_zmm_zmm_zmm_u() {
			TestAssembler(c => c.vshufi64x2(zmm2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshufi64x2_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vshufi64x2_ymm_ymm_m_u() {
			TestAssembler(c => c.vshufi64x2(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshufi64x2_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vshufi64x2_zmm_zmm_m_u() {
			TestAssembler(c => c.vshufi64x2(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshufi64x2_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vshufpd_xmm_xmm_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vshufpd(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vshufpd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufpd(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vshufpd_ymm_ymm_ymm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vshufpd(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vshufpd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufpd(ymm2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vshufpd_zmm_zmm_zmm_i() {
			TestAssembler(c => c.vshufpd(zmm2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vshufpd_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vshufpd_xmm_xmm_m_i() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vshufpd(xmm2.k1, xmm3, __dword_bcst[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vshufpd(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vshufpd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufpd(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vshufpd_ymm_ymm_m_i() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vshufpd(ymm2.k1, ymm3, __dword_bcst[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vshufpd(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vshufpd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufpd(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vshufpd_zmm_zmm_m_i() {
			TestAssembler(c => c.vshufpd(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vshufpd_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vshufpd_xmm_xmm_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vshufpd(xmm2, xmm3, xmm4, (byte)0x7F), Instruction.Create(Code.VEX_Vshufpd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufpd(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vshufpd_ymm_ymm_ymm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vshufpd(ymm2, ymm3, ymm4, (byte)0x7F), Instruction.Create(Code.VEX_Vshufpd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufpd(ymm2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vshufpd_zmm_zmm_zmm_u() {
			TestAssembler(c => c.vshufpd(zmm2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshufpd_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vshufpd_xmm_xmm_m_u() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vshufpd(xmm2.k1, xmm3, __dword_bcst[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vshufpd(xmm2, xmm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vshufpd_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufpd(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshufpd_xmm_k1z_xmm_xmmm128b64_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vshufpd_ymm_ymm_m_u() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vshufpd(ymm2.k1, ymm3, __dword_bcst[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vshufpd(ymm2, ymm3, __ymmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vshufpd_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufpd(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshufpd_ymm_k1z_ymm_ymmm256b64_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vshufpd_zmm_zmm_m_u() {
			TestAssembler(c => c.vshufpd(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshufpd_zmm_k1z_zmm_zmmm512b64_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vshufps_xmm_xmm_xmm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vshufps(xmm2, xmm3, xmm4, -5), Instruction.Create(Code.VEX_Vshufps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufps(xmm2.k1, xmm3, xmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vshufps_ymm_ymm_ymm_i() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vshufps(ymm2, ymm3, ymm4, -5), Instruction.Create(Code.VEX_Vshufps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufps(ymm2.k1, ymm3, ymm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, Register.YMM4, -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vshufps_zmm_zmm_zmm_i() {
			TestAssembler(c => c.vshufps(zmm2.k1, zmm3, zmm4, -5), ApplyK(Instruction.Create(Code.EVEX_Vshufps_zmm_k1z_zmm_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, -5), Register.K1));
		}

		[Fact]
		public void vshufps_xmm_xmm_m_i() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vshufps(xmm2.k1, xmm3, __dword_bcst[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vshufps(xmm2, xmm3, __xmmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vshufps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufps(xmm2.k1, xmm3, __xmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vshufps_ymm_ymm_m_i() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vshufps(ymm2.k1, ymm3, __dword_bcst[rdx], -5), ApplyK(Instruction.Create(Code.EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vshufps(ymm2, ymm3, __ymmword_ptr[rcx], -5), Instruction.Create(Code.VEX_Vshufps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufps(ymm2.k1, ymm3, __ymmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vshufps_zmm_zmm_m_i() {
			TestAssembler(c => c.vshufps(zmm2.k1, zmm3, __zmmword_ptr[rcx], -5), ApplyK(Instruction.Create(Code.EVEX_Vshufps_zmm_k1z_zmm_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), -5), Register.K1));
		}

		[Fact]
		public void vshufps_xmm_xmm_xmm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vshufps(xmm2, xmm3, xmm4, (byte)0x7F), Instruction.Create(Code.VEX_Vshufps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufps(xmm2.k1, xmm3, xmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8, Register.XMM2, Register.XMM3, Register.XMM4, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vshufps_ymm_ymm_ymm_u() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vshufps(ymm2, ymm3, ymm4, (byte)0x7F), Instruction.Create(Code.VEX_Vshufps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufps(ymm2.k1, ymm3, ymm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, Register.YMM4, 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vshufps_zmm_zmm_zmm_u() {
			TestAssembler(c => c.vshufps(zmm2.k1, zmm3, zmm4, (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshufps_zmm_k1z_zmm_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, Register.ZMM4, 0x7FU), Register.K1));
		}

		[Fact]
		public void vshufps_xmm_xmm_m_u() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vshufps(xmm2.k1, xmm3, __dword_bcst[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vshufps(xmm2, xmm3, __xmmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vshufps_xmm_xmm_xmmm128_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufps(xmm2.k1, xmm3, __xmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshufps_xmm_k1z_xmm_xmmm128b32_imm8, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vshufps_ymm_ymm_m_u() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vshufps(ymm2.k1, ymm3, __dword_bcst[rdx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vshufps(ymm2, ymm3, __ymmword_ptr[rcx], (byte)0x7F), Instruction.Create(Code.VEX_Vshufps_ymm_ymm_ymmm256_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vshufps(ymm2.k1, ymm3, __ymmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshufps_ymm_k1z_ymm_ymmm256b32_imm8, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vshufps_zmm_zmm_m_u() {
			TestAssembler(c => c.vshufps(zmm2.k1, zmm3, __zmmword_ptr[rcx], (byte)0x7F), ApplyK(Instruction.Create(Code.EVEX_Vshufps_zmm_k1z_zmm_zmmm512b32_imm8, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU), Register.K1));
		}

		[Fact]
		public void vsqrtpd_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vsqrtpd(xmm2, xmm3), Instruction.Create(Code.VEX_Vsqrtpd_xmm_xmmm128, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsqrtpd(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vsqrtpd_xmm_k1z_xmmm128b64, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vsqrtpd_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vsqrtpd(ymm2, ymm3), Instruction.Create(Code.VEX_Vsqrtpd_ymm_ymmm256, Register.YMM2, Register.YMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsqrtpd(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vsqrtpd_ymm_k1z_ymmm256b64, Register.YMM2, Register.YMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vsqrtpd_zmm_zmm() {
			TestAssembler(c => c.vsqrtpd(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vsqrtpd_zmm_k1z_zmmm512b64_er, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vsqrtpd_xmm_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vsqrtpd(xmm2.k1, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vsqrtpd_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vsqrtpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vsqrtpd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsqrtpd(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vsqrtpd_xmm_k1z_xmmm128b64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vsqrtpd_ymm_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vsqrtpd(ymm2.k1, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vsqrtpd_ymm_k1z_ymmm256b64, Register.YMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vsqrtpd(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vsqrtpd_ymm_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsqrtpd(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vsqrtpd_ymm_k1z_ymmm256b64, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vsqrtpd_zmm_m() {
			TestAssembler(c => c.vsqrtpd(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vsqrtpd_zmm_k1z_zmmm512b64_er, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vsqrtph_xmm_xmm() {
			TestAssembler(c => c.vsqrtph(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vsqrtph_xmm_k1z_xmmm128b16, Register.XMM2, Register.XMM3), Register.K1));
		}

		[Fact]
		public void vsqrtph_ymm_ymm() {
			TestAssembler(c => c.vsqrtph(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vsqrtph_ymm_k1z_ymmm256b16, Register.YMM2, Register.YMM3), Register.K1));
		}

		[Fact]
		public void vsqrtph_zmm_zmm() {
			TestAssembler(c => c.vsqrtph(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vsqrtph_zmm_k1z_zmmm512b16_er, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vsqrtph_xmm_m() {
			TestAssembler(c => c.vsqrtph(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vsqrtph_xmm_k1z_xmmm128b16, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vsqrtph_ymm_m() {
			TestAssembler(c => c.vsqrtph(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vsqrtph_ymm_k1z_ymmm256b16, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vsqrtph_zmm_m() {
			TestAssembler(c => c.vsqrtph(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vsqrtph_zmm_k1z_zmmm512b16_er, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vsqrtps_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vsqrtps(xmm2, xmm3), Instruction.Create(Code.VEX_Vsqrtps_xmm_xmmm128, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsqrtps(xmm2.k1, xmm3), ApplyK(Instruction.Create(Code.EVEX_Vsqrtps_xmm_k1z_xmmm128b32, Register.XMM2, Register.XMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vsqrtps_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vsqrtps(ymm2, ymm3), Instruction.Create(Code.VEX_Vsqrtps_ymm_ymmm256, Register.YMM2, Register.YMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsqrtps(ymm2.k1, ymm3), ApplyK(Instruction.Create(Code.EVEX_Vsqrtps_ymm_k1z_ymmm256b32, Register.YMM2, Register.YMM3), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vsqrtps_zmm_zmm() {
			TestAssembler(c => c.vsqrtps(zmm2.k1, zmm3), ApplyK(Instruction.Create(Code.EVEX_Vsqrtps_zmm_k1z_zmmm512b32_er, Register.ZMM2, Register.ZMM3), Register.K1));
		}

		[Fact]
		public void vsqrtps_xmm_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vsqrtps(xmm2.k1, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vsqrtps_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vsqrtps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vsqrtps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsqrtps(xmm2.k1, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vsqrtps_xmm_k1z_xmmm128b32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vsqrtps_ymm_m() {
			{ /* if (src.IsBroadcast) */
				TestAssembler(c => c.vsqrtps(ymm2.k1, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vsqrtps_ymm_k1z_ymmm256b32, Register.YMM2, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vsqrtps(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vsqrtps_ymm_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsqrtps(ymm2.k1, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vsqrtps_ymm_k1z_ymmm256b32, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vsqrtps_zmm_m() {
			TestAssembler(c => c.vsqrtps(zmm2.k1, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vsqrtps_zmm_k1z_zmmm512b32_er, Register.ZMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vsqrtsd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vsqrtsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vsqrtsd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsqrtsd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vsqrtsd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vsqrtsd_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vsqrtsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vsqrtsd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsqrtsd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vsqrtsd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vsqrtsh_xmm_xmm_xmm() {
			TestAssembler(c => c.vsqrtsh(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vsqrtsh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vsqrtsh_xmm_xmm_m() {
			TestAssembler(c => c.vsqrtsh(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vsqrtsh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vsqrtss_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vsqrtss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vsqrtss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsqrtss(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vsqrtss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vsqrtss_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vsqrtss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vsqrtss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsqrtss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vsqrtss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vstmxcsr_m() {
			TestAssembler(c => c.vstmxcsr(__[rcx]), Instruction.Create(Code.VEX_Vstmxcsr_m32, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vsubpd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vsubpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vsubpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsubpd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vsubpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vsubpd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vsubpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vsubpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsubpd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vsubpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vsubpd_zmm_zmm_zmm() {
			TestAssembler(c => c.vsubpd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vsubpd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vsubpd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vsubpd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vsubpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vsubpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vsubpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsubpd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vsubpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vsubpd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vsubpd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vsubpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vsubpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vsubpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsubpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vsubpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vsubpd_zmm_zmm_m() {
			TestAssembler(c => c.vsubpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vsubpd_zmm_k1z_zmm_zmmm512b64_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vsubph_xmm_xmm_xmm() {
			TestAssembler(c => c.vsubph(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vsubph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vsubph_ymm_ymm_ymm() {
			TestAssembler(c => c.vsubph(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vsubph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1));
		}

		[Fact]
		public void vsubph_zmm_zmm_zmm() {
			TestAssembler(c => c.vsubph(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vsubph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vsubph_xmm_xmm_m() {
			TestAssembler(c => c.vsubph(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vsubph_xmm_k1z_xmm_xmmm128b16, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vsubph_ymm_ymm_m() {
			TestAssembler(c => c.vsubph(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vsubph_ymm_k1z_ymm_ymmm256b16, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vsubph_zmm_zmm_m() {
			TestAssembler(c => c.vsubph(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vsubph_zmm_k1z_zmm_zmmm512b16_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vsubps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vsubps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vsubps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsubps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vsubps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vsubps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vsubps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vsubps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsubps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vsubps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vsubps_zmm_zmm_zmm() {
			TestAssembler(c => c.vsubps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vsubps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vsubps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vsubps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vsubps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vsubps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vsubps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsubps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vsubps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vsubps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vsubps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vsubps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vsubps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vsubps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsubps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vsubps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vsubps_zmm_zmm_m() {
			TestAssembler(c => c.vsubps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vsubps_zmm_k1z_zmm_zmmm512b32_er, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vsubsd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vsubsd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vsubsd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsubsd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vsubsd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vsubsd_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vsubsd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vsubsd_xmm_xmm_xmmm64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsubsd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vsubsd_xmm_k1z_xmm_xmmm64_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vsubsh_xmm_xmm_xmm() {
			TestAssembler(c => c.vsubsh(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vsubsh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1));
		}

		[Fact]
		public void vsubsh_xmm_xmm_m() {
			TestAssembler(c => c.vsubsh(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vsubsh_xmm_k1z_xmm_xmmm16_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vsubss_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vsubss(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vsubss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsubss(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vsubss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vsubss_xmm_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vsubss(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vsubss_xmm_xmm_xmmm32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vsubss(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vsubss_xmm_k1z_xmm_xmmm32_er, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vtestpd_xmm_xmm() {
			TestAssembler(c => c.vtestpd(xmm2, xmm3), Instruction.Create(Code.VEX_Vtestpd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vtestpd_ymm_ymm() {
			TestAssembler(c => c.vtestpd(ymm2, ymm3), Instruction.Create(Code.VEX_Vtestpd_ymm_ymmm256, Register.YMM2, Register.YMM3));
		}

		[Fact]
		public void vtestpd_xmm_m() {
			TestAssembler(c => c.vtestpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vtestpd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vtestpd_ymm_m() {
			TestAssembler(c => c.vtestpd(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vtestpd_ymm_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vtestps_xmm_xmm() {
			TestAssembler(c => c.vtestps(xmm2, xmm3), Instruction.Create(Code.VEX_Vtestps_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vtestps_ymm_ymm() {
			TestAssembler(c => c.vtestps(ymm2, ymm3), Instruction.Create(Code.VEX_Vtestps_ymm_ymmm256, Register.YMM2, Register.YMM3));
		}

		[Fact]
		public void vtestps_xmm_m() {
			TestAssembler(c => c.vtestps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vtestps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vtestps_ymm_m() {
			TestAssembler(c => c.vtestps(ymm2, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vtestps_ymm_ymmm256, Register.YMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vucomisd_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vucomisd(xmm2, xmm3), Instruction.Create(Code.VEX_Vucomisd_xmm_xmmm64, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vucomisd(xmm2, xmm3), Instruction.Create(Code.EVEX_Vucomisd_xmm_xmmm64_sae, Register.XMM2, Register.XMM3), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vucomisd_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vucomisd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vucomisd_xmm_xmmm64, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vucomisd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vucomisd_xmm_xmmm64_sae, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vucomish_xmm_xmm() {
			TestAssembler(c => c.vucomish(xmm2, xmm3), Instruction.Create(Code.EVEX_Vucomish_xmm_xmmm16_sae, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void vucomish_xmm_m() {
			TestAssembler(c => c.vucomish(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vucomish_xmm_xmmm16_sae, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void vucomiss_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vucomiss(xmm2, xmm3), Instruction.Create(Code.VEX_Vucomiss_xmm_xmmm32, Register.XMM2, Register.XMM3), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vucomiss(xmm2, xmm3), Instruction.Create(Code.EVEX_Vucomiss_xmm_xmmm32_sae, Register.XMM2, Register.XMM3), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vucomiss_xmm_m() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vucomiss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vucomiss_xmm_xmmm32, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vucomiss(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.EVEX_Vucomiss_xmm_xmmm32_sae, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vunpckhpd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vunpckhpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vunpckhpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpckhpd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vunpckhpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vunpckhpd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vunpckhpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vunpckhpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpckhpd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vunpckhpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vunpckhpd_zmm_zmm_zmm() {
			TestAssembler(c => c.vunpckhpd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vunpckhpd_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vunpckhpd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vunpckhpd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vunpckhpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vunpckhpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vunpckhpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpckhpd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vunpckhpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vunpckhpd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vunpckhpd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vunpckhpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vunpckhpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vunpckhpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpckhpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vunpckhpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vunpckhpd_zmm_zmm_m() {
			TestAssembler(c => c.vunpckhpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vunpckhpd_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vunpckhps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vunpckhps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vunpckhps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpckhps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vunpckhps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vunpckhps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vunpckhps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vunpckhps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpckhps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vunpckhps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vunpckhps_zmm_zmm_zmm() {
			TestAssembler(c => c.vunpckhps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vunpckhps_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vunpckhps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vunpckhps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vunpckhps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vunpckhps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vunpckhps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpckhps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vunpckhps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vunpckhps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vunpckhps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vunpckhps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vunpckhps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vunpckhps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpckhps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vunpckhps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vunpckhps_zmm_zmm_m() {
			TestAssembler(c => c.vunpckhps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vunpckhps_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vunpcklpd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vunpcklpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vunpcklpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpcklpd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vunpcklpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vunpcklpd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vunpcklpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vunpcklpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpcklpd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vunpcklpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vunpcklpd_zmm_zmm_zmm() {
			TestAssembler(c => c.vunpcklpd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vunpcklpd_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vunpcklpd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vunpcklpd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vunpcklpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vunpcklpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vunpcklpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpcklpd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vunpcklpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vunpcklpd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vunpcklpd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vunpcklpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vunpcklpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vunpcklpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpcklpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vunpcklpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vunpcklpd_zmm_zmm_m() {
			TestAssembler(c => c.vunpcklpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vunpcklpd_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vunpcklps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vunpcklps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vunpcklps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpcklps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vunpcklps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vunpcklps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vunpcklps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vunpcklps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpcklps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vunpcklps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vunpcklps_zmm_zmm_zmm() {
			TestAssembler(c => c.vunpcklps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vunpcklps_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vunpcklps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vunpcklps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vunpcklps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vunpcklps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vunpcklps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpcklps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vunpcklps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vunpcklps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vunpcklps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vunpcklps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vunpcklps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vunpcklps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vunpcklps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vunpcklps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vunpcklps_zmm_zmm_m() {
			TestAssembler(c => c.vunpcklps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vunpcklps_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vxorpd_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vxorpd(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vxorpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vxorpd(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vxorpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vxorpd_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vxorpd(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vxorpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vxorpd(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vxorpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vxorpd_zmm_zmm_zmm() {
			TestAssembler(c => c.vxorpd(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vxorpd_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vxorpd_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vxorpd(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vxorpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vxorpd(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vxorpd_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vxorpd(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vxorpd_xmm_k1z_xmm_xmmm128b64, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vxorpd_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vxorpd(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vxorpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vxorpd(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vxorpd_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vxorpd(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vxorpd_ymm_k1z_ymm_ymmm256b64, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vxorpd_zmm_zmm_m() {
			TestAssembler(c => c.vxorpd(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vxorpd_zmm_k1z_zmm_zmmm512b64, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vxorps_xmm_xmm_xmm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vxorps(xmm2, xmm3, xmm4), Instruction.Create(Code.VEX_Vxorps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, Register.XMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vxorps(xmm2.k1, xmm3, xmm4), ApplyK(Instruction.Create(Code.EVEX_Vxorps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, Register.XMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vxorps_ymm_ymm_ymm() {
			{ /* if (InstructionPreferVex) */
				TestAssembler(c => c.vxorps(ymm2, ymm3, ymm4), Instruction.Create(Code.VEX_Vxorps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, Register.YMM4), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vxorps(ymm2.k1, ymm3, ymm4), ApplyK(Instruction.Create(Code.EVEX_Vxorps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, Register.YMM4), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vxorps_zmm_zmm_zmm() {
			TestAssembler(c => c.vxorps(zmm2.k1, zmm3, zmm4), ApplyK(Instruction.Create(Code.EVEX_Vxorps_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, Register.ZMM4), Register.K1));
		}

		[Fact]
		public void vxorps_xmm_xmm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vxorps(xmm2.k1, xmm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vxorps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vxorps(xmm2, xmm3, __xmmword_ptr[rcx]), Instruction.Create(Code.VEX_Vxorps_xmm_xmm_xmmm128, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vxorps(xmm2.k1, xmm3, __xmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vxorps_xmm_k1z_xmm_xmmm128b32, Register.XMM2, Register.XMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vxorps_ymm_ymm_m() {
			{ /* if (src2.IsBroadcast) */
				TestAssembler(c => c.vxorps(ymm2.k1, ymm3, __dword_bcst[rdx]), ApplyK(Instruction.Create(Code.EVEX_Vxorps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, true, Register.None)), Register.K1), TestInstrFlags.PreferEvex | TestInstrFlags.Broadcast);
			} /* else */ { /* if (InstructionPreferVex) */
				TestAssembler(c => c.vxorps(ymm2, ymm3, __ymmword_ptr[rcx]), Instruction.Create(Code.VEX_Vxorps_ymm_ymm_ymmm256, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), TestInstrFlags.PreferVex);
			} /* else */ TestAssembler(c => c.vxorps(ymm2.k1, ymm3, __ymmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vxorps_ymm_k1z_ymm_ymmm256b32, Register.YMM2, Register.YMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1), TestInstrFlags.PreferEvex);
		}

		[Fact]
		public void vxorps_zmm_zmm_m() {
			TestAssembler(c => c.vxorps(zmm2.k1, zmm3, __zmmword_ptr[rcx]), ApplyK(Instruction.Create(Code.EVEX_Vxorps_zmm_k1z_zmm_zmmm512b32, Register.ZMM2, Register.ZMM3, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)), Register.K1));
		}

		[Fact]
		public void vzeroall() {
			TestAssembler(c => c.vzeroall(), Instruction.Create(Code.VEX_Vzeroall));
		}

		[Fact]
		public void vzeroupper() {
			TestAssembler(c => c.vzeroupper(), Instruction.Create(Code.VEX_Vzeroupper));
		}

		[Fact]
		public void wait() {
			TestAssembler(c => c.wait(), Instruction.Create(Code.Wait));
		}

		[Fact]
		public void wbinvd() {
			TestAssembler(c => c.wbinvd(), Instruction.Create(Code.Wbinvd));
		}

		[Fact]
		public void wbnoinvd() {
			TestAssembler(c => c.wbnoinvd(), Instruction.Create(Code.Wbnoinvd));
		}

		[Fact]
		public void wrfsbase_r32() {
			TestAssembler(c => c.wrfsbase(edx), Instruction.Create(Code.Wrfsbase_r32, Register.EDX));
		}

		[Fact]
		public void wrfsbase_r64() {
			TestAssembler(c => c.wrfsbase(rdx), Instruction.Create(Code.Wrfsbase_r64, Register.RDX));
		}

		[Fact]
		public void wrgsbase_r32() {
			TestAssembler(c => c.wrgsbase(edx), Instruction.Create(Code.Wrgsbase_r32, Register.EDX));
		}

		[Fact]
		public void wrgsbase_r64() {
			TestAssembler(c => c.wrgsbase(rdx), Instruction.Create(Code.Wrgsbase_r64, Register.RDX));
		}

		[Fact]
		public void wrmsr() {
			TestAssembler(c => c.wrmsr(), Instruction.Create(Code.Wrmsr));
		}

		[Fact]
		public void wrpkru() {
			TestAssembler(c => c.wrpkru(), Instruction.Create(Code.Wrpkru));
		}

		[Fact]
		public void wrssd_m_r32() {
			TestAssembler(c => c.wrssd(__[rcx], ebx), Instruction.Create(Code.Wrssd_m32_r32, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX));
		}

		[Fact]
		public void wrssq_m_r64() {
			TestAssembler(c => c.wrssq(__[rcx], rbx), Instruction.Create(Code.Wrssq_m64_r64, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX));
		}

		[Fact]
		public void wrudbg() {
			TestAssembler(c => c.wrudbg(), Instruction.Create(Code.Wrudbg), decoderOptions: DecoderOptions.Udbg);
		}

		[Fact]
		public void wrussd_m_r32() {
			TestAssembler(c => c.wrussd(__[rcx], ebx), Instruction.Create(Code.Wrussd_m32_r32, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX));
		}

		[Fact]
		public void wrussq_m_r64() {
			TestAssembler(c => c.wrussq(__[rcx], rbx), Instruction.Create(Code.Wrussq_m64_r64, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX));
		}

		[Fact]
		public void xabort_i() {
			TestAssembler(c => c.xabort(-5), Instruction.Create(Code.Xabort_imm8, -5));
		}

		[Fact]
		public void xabort_u() {
			TestAssembler(c => c.xabort((byte)0x7F), Instruction.Create(Code.Xabort_imm8, 0x7FU));
		}

		[Fact]
		public void xadd_r8_r8() {
			TestAssembler(c => c.xadd(dl, bl), Instruction.Create(Code.Xadd_rm8_r8, Register.DL, Register.BL));
		}

		[Fact]
		public void xadd_m_r8() {
			TestAssembler(c => c.xadd(__byte_ptr[rcx], bl), Instruction.Create(Code.Xadd_rm8_r8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BL));
		}

		[Fact]
		public void xadd_r16_r16() {
			TestAssembler(c => c.xadd(dx, bx), Instruction.Create(Code.Xadd_rm16_r16, Register.DX, Register.BX));
		}

		[Fact]
		public void xadd_m_r16() {
			TestAssembler(c => c.xadd(__word_ptr[rcx], bx), Instruction.Create(Code.Xadd_rm16_r16, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX));
		}

		[Fact]
		public void xadd_r32_r32() {
			TestAssembler(c => c.xadd(edx, ebx), Instruction.Create(Code.Xadd_rm32_r32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void xadd_m_r32() {
			TestAssembler(c => c.xadd(__dword_ptr[rcx], ebx), Instruction.Create(Code.Xadd_rm32_r32, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX));
		}

		[Fact]
		public void xadd_r64_r64() {
			TestAssembler(c => c.xadd(rdx, rbx), Instruction.Create(Code.Xadd_rm64_r64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void xadd_m_r64() {
			TestAssembler(c => c.xadd(__qword_ptr[rcx], rbx), Instruction.Create(Code.Xadd_rm64_r64, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX));
		}

		[Fact]
		public void xchg_r8_r8() {
			TestAssembler(c => c.xchg(dl, bl), Instruction.Create(Code.Xchg_rm8_r8, Register.DL, Register.BL));
		}

		[Fact]
		public void xchg_m_r8() {
			TestAssembler(c => c.xchg(__byte_ptr[rcx], bl), Instruction.Create(Code.Xchg_rm8_r8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BL));
		}

		[Fact]
		public void xchg_r16_r16() {
			{ /* if (src == Register.AX) */
				TestAssembler(c => c.xchg(dx, ax), Instruction.Create(Code.Xchg_r16_AX, Register.DX, Register.AX));
			} /* else */ TestAssembler(c => c.xchg(dx, bx), Instruction.Create(Code.Xchg_rm16_r16, Register.DX, Register.BX));
		}

		[Fact]
		public void xchg_m_r16() {
			TestAssembler(c => c.xchg(__word_ptr[rcx], bx), Instruction.Create(Code.Xchg_rm16_r16, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX));
		}

		[Fact]
		public void xchg_r32_r32() {
			{ /* if (src == Register.EAX) */
				TestAssembler(c => c.xchg(edx, eax), Instruction.Create(Code.Xchg_r32_EAX, Register.EDX, Register.EAX));
			} /* else */ TestAssembler(c => c.xchg(edx, ebx), Instruction.Create(Code.Xchg_rm32_r32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void xchg_m_r32() {
			TestAssembler(c => c.xchg(__dword_ptr[rcx], ebx), Instruction.Create(Code.Xchg_rm32_r32, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX));
		}

		[Fact]
		public void xchg_r64_r64() {
			{ /* if (src == Register.RAX) */
				TestAssembler(c => c.xchg(rdx, rax), Instruction.Create(Code.Xchg_r64_RAX, Register.RDX, Register.RAX));
			} /* else */ TestAssembler(c => c.xchg(rdx, rbx), Instruction.Create(Code.Xchg_rm64_r64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void xchg_m_r64() {
			TestAssembler(c => c.xchg(__qword_ptr[rcx], rbx), Instruction.Create(Code.Xchg_rm64_r64, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX));
		}

		[Fact]
		public void xcryptcbc() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.xcryptcbc(), Instruction.Create(Code.Xcryptcbc_64), TestInstrFlags.RemoveRepRepnePrefixes);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void xcryptcfb() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.xcryptcfb(), Instruction.Create(Code.Xcryptcfb_64), TestInstrFlags.RemoveRepRepnePrefixes);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void xcryptctr() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.xcryptctr(), Instruction.Create(Code.Xcryptctr_64), TestInstrFlags.RemoveRepRepnePrefixes);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void xcryptecb() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.xcryptecb(), Instruction.Create(Code.Xcryptecb_64), TestInstrFlags.RemoveRepRepnePrefixes);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void xcryptofb() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.xcryptofb(), Instruction.Create(Code.Xcryptofb_64), TestInstrFlags.RemoveRepRepnePrefixes);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void xend() {
			TestAssembler(c => c.xend(), Instruction.Create(Code.Xend));
		}

		[Fact]
		public void xgetbv() {
			TestAssembler(c => c.xgetbv(), Instruction.Create(Code.Xgetbv));
		}

		[Fact]
		public void xor_r8_r8() {
			TestAssembler(c => c.xor(dl, bl), Instruction.Create(Code.Xor_rm8_r8, Register.DL, Register.BL));
		}

		[Fact]
		public void xor_m_r8() {
			TestAssembler(c => c.xor(__byte_ptr[rcx], bl), Instruction.Create(Code.Xor_rm8_r8, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BL));
		}

		[Fact]
		public void xor_r16_r16() {
			TestAssembler(c => c.xor(dx, bx), Instruction.Create(Code.Xor_rm16_r16, Register.DX, Register.BX));
		}

		[Fact]
		public void xor_m_r16() {
			TestAssembler(c => c.xor(__word_ptr[rcx], bx), Instruction.Create(Code.Xor_rm16_r16, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.BX));
		}

		[Fact]
		public void xor_r32_r32() {
			TestAssembler(c => c.xor(edx, ebx), Instruction.Create(Code.Xor_rm32_r32, Register.EDX, Register.EBX));
		}

		[Fact]
		public void xor_m_r32() {
			TestAssembler(c => c.xor(__dword_ptr[rcx], ebx), Instruction.Create(Code.Xor_rm32_r32, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.EBX));
		}

		[Fact]
		public void xor_r64_r64() {
			TestAssembler(c => c.xor(rdx, rbx), Instruction.Create(Code.Xor_rm64_r64, Register.RDX, Register.RBX));
		}

		[Fact]
		public void xor_m_r64() {
			TestAssembler(c => c.xor(__qword_ptr[rcx], rbx), Instruction.Create(Code.Xor_rm64_r64, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None), Register.RBX));
		}

		[Fact]
		public void xor_r8_m() {
			TestAssembler(c => c.xor(dl, __byte_ptr[rcx]), Instruction.Create(Code.Xor_r8_rm8, Register.DL, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void xor_r16_m() {
			TestAssembler(c => c.xor(dx, __word_ptr[rcx]), Instruction.Create(Code.Xor_r16_rm16, Register.DX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void xor_r32_m() {
			TestAssembler(c => c.xor(edx, __dword_ptr[rcx]), Instruction.Create(Code.Xor_r32_rm32, Register.EDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void xor_r64_m() {
			TestAssembler(c => c.xor(rdx, __qword_ptr[rcx]), Instruction.Create(Code.Xor_r64_rm64, Register.RDX, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void xor_r8_i() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.xor(al, -5), Instruction.Create(Code.Xor_AL_imm8, Register.AL, -5));
			} /* else */ TestAssembler(c => c.xor(dl, -5), Instruction.Create(Code.Xor_rm8_imm8, Register.DL, -5));
		}

		[Fact]
		public void xor_r16_i() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.xor(ax, 0x40B7), Instruction.Create(Code.Xor_AX_imm16, Register.AX, 0x40B7));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.xor(dx, -0x80), Instruction.Create(Code.Xor_rm16_imm8, Register.DX, -0x80));
				TestAssembler(c => c.xor(dx, 0x7F), Instruction.Create(Code.Xor_rm16_imm8, Register.DX, 0x7F));
			} /* else */ TestAssembler(c => c.xor(dx, 0x40B7), Instruction.Create(Code.Xor_rm16_imm16, Register.DX, 0x40B7));
		}

		[Fact]
		public void xor_r32_i() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.xor(eax, 0x7FFFFFFF), Instruction.Create(Code.Xor_EAX_imm32, Register.EAX, 0x7FFFFFFF));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.xor(edx, -0x80), Instruction.Create(Code.Xor_rm32_imm8, Register.EDX, -0x80));
				TestAssembler(c => c.xor(edx, 0x7F), Instruction.Create(Code.Xor_rm32_imm8, Register.EDX, 0x7F));
			} /* else */ TestAssembler(c => c.xor(edx, 0x7FFFFFFF), Instruction.Create(Code.Xor_rm32_imm32, Register.EDX, 0x7FFFFFFF));
		}

		[Fact]
		public void xor_r64_i() {
			{ /* if (dst == Register.RAX) */
				TestAssembler(c => c.xor(rax, -0x80000000), Instruction.Create(Code.Xor_RAX_imm32, Register.RAX, -0x80000000));
			} /* else */ { /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
				TestAssembler(c => c.xor(rdx, -0x80), Instruction.Create(Code.Xor_rm64_imm8, Register.RDX, -0x80));
				TestAssembler(c => c.xor(rdx, 0x7F), Instruction.Create(Code.Xor_rm64_imm8, Register.RDX, 0x7F));
			} /* else */ TestAssembler(c => c.xor(rdx, -0x80000000), Instruction.Create(Code.Xor_rm64_imm32, Register.RDX, -0x80000000));
		}

		[Fact]
		public void xor_m_i() {
			{ /* if (dst.Size == MemoryOperandSize.Qword) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.xor(__qword_ptr[rdx], -0x80), Instruction.Create(Code.Xor_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80));
					TestAssembler(c => c.xor(__qword_ptr[rdx], 0x7F), Instruction.Create(Code.Xor_rm64_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7F));
				} /* else */ TestAssembler(c => c.xor(__qword_ptr[rdx], -0x80000000), Instruction.Create(Code.Xor_rm64_imm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80000000));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Dword) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.xor(__dword_ptr[rdx], -0x80), Instruction.Create(Code.Xor_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80));
					TestAssembler(c => c.xor(__dword_ptr[rdx], 0x7F), Instruction.Create(Code.Xor_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7F));
				} /* else */ TestAssembler(c => c.xor(__dword_ptr[rdx], 0x7FFFFFFF), Instruction.Create(Code.Xor_rm32_imm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFF));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				{ /* if (imm >= sbyte.MinValue && imm <= sbyte.MaxValue) */
					TestAssembler(c => c.xor(__word_ptr[rdx], -0x80), Instruction.Create(Code.Xor_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -0x80));
					TestAssembler(c => c.xor(__word_ptr[rdx], 0x7F), Instruction.Create(Code.Xor_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7F));
				} /* else */ TestAssembler(c => c.xor(__word_ptr[rdx], 0x40B7), Instruction.Create(Code.Xor_rm16_imm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x40B7));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.xor(__byte_ptr[rdx], -5), Instruction.Create(Code.Xor_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.xor(__zmmword_ptr[rdx], -5), Instruction.Create(Code.Xor_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), -5));
				});
			}
		}

		[Fact]
		public void xor_r8_u() {
			{ /* if (dst == Register.AL) */
				TestAssembler(c => c.xor(al, (byte)0x7F), Instruction.Create(Code.Xor_AL_imm8, Register.AL, 0x7FU));
			} /* else */ TestAssembler(c => c.xor(dl, (byte)0x7F), Instruction.Create(Code.Xor_rm8_imm8, Register.DL, 0x7FU));
		}

		[Fact]
		public void xor_r16_u() {
			{ /* if (dst == Register.AX) */
				TestAssembler(c => c.xor(ax, (ushort)0x40B7), Instruction.Create(Code.Xor_AX_imm16, Register.AX, 0x40B7U));
			} /* else */ { /* if (imm <= (ushort)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
				TestAssembler(c => c.xor(dx, (ushort)0xFF80), Instruction.Create(Code.Xor_rm16_imm8, Register.DX, 0xFF80U));
				TestAssembler(c => c.xor(dx, (ushort)0x7F), Instruction.Create(Code.Xor_rm16_imm8, Register.DX, 0x7FU));
			} /* else */ TestAssembler(c => c.xor(dx, (ushort)0x40B7), Instruction.Create(Code.Xor_rm16_imm16, Register.DX, 0x40B7U));
		}

		[Fact]
		public void xor_r32_u() {
			{ /* if (dst == Register.EAX) */
				TestAssembler(c => c.xor(eax, 0x7FFFFFFFU), Instruction.Create(Code.Xor_EAX_imm32, Register.EAX, 0x7FFFFFFFU));
			} /* else */ { /* if (imm <= (uint)sbyte.MaxValue || 0xFFFF_FF80 <= imm) */
				TestAssembler(c => c.xor(edx, 0xFFFFFF80U), Instruction.Create(Code.Xor_rm32_imm8, Register.EDX, 0xFFFFFF80U));
				TestAssembler(c => c.xor(edx, 0x7FU), Instruction.Create(Code.Xor_rm32_imm8, Register.EDX, 0x7FU));
			} /* else */ TestAssembler(c => c.xor(edx, 0x7FFFFFFFU), Instruction.Create(Code.Xor_rm32_imm32, Register.EDX, 0x7FFFFFFFU));
		}

		[Fact]
		public void xor_m_u() {
			{ /* if (dst.Size == MemoryOperandSize.Dword) */
				{ /* if (imm <= (uint)sbyte.MaxValue || 0xFFFF_FF80 <= imm) */
					TestAssembler(c => c.xor(__dword_ptr[rdx], 0xFFFFFF80U), Instruction.Create(Code.Xor_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0xFFFFFF80U));
					TestAssembler(c => c.xor(__dword_ptr[rdx], 0x7FU), Instruction.Create(Code.Xor_rm32_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
				} /* else */ TestAssembler(c => c.xor(__dword_ptr[rdx], 0x7FFFFFFFU), Instruction.Create(Code.Xor_rm32_imm32, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FFFFFFFU));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Word) */
				{ /* if (imm <= (uint)sbyte.MaxValue || (0xFF80 <= imm && imm <= 0xFFFF)) */
					TestAssembler(c => c.xor(__word_ptr[rdx], 0xFF80U), Instruction.Create(Code.Xor_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0xFF80U));
					TestAssembler(c => c.xor(__word_ptr[rdx], 0x7FU), Instruction.Create(Code.Xor_rm16_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
				} /* else */ TestAssembler(c => c.xor(__word_ptr[rdx], 0x40B7U), Instruction.Create(Code.Xor_rm16_imm16, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x40B7U));
			} /* else */ { /* if (dst.Size == MemoryOperandSize.Byte) */
				TestAssembler(c => c.xor(__byte_ptr[rdx], 0x7FU), Instruction.Create(Code.Xor_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
			}
			{
				AssertInvalid(() => {
					TestAssembler(c => c.xor(__zmmword_ptr[rdx], 0x7FU), Instruction.Create(Code.Xor_rm8_imm8, new MemoryOperand(Register.RDX, Register.None, 1, 0x0, 0, false, Register.None), 0x7FU));
				});
			}
		}

		[Fact]
		public void xorpd_xmm_xmm() {
			TestAssembler(c => c.xorpd(xmm2, xmm3), Instruction.Create(Code.Xorpd_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void xorpd_xmm_m() {
			TestAssembler(c => c.xorpd(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Xorpd_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void xorps_xmm_xmm() {
			TestAssembler(c => c.xorps(xmm2, xmm3), Instruction.Create(Code.Xorps_xmm_xmmm128, Register.XMM2, Register.XMM3));
		}

		[Fact]
		public void xorps_xmm_m() {
			TestAssembler(c => c.xorps(xmm2, __xmmword_ptr[rcx]), Instruction.Create(Code.Xorps_xmm_xmmm128, Register.XMM2, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void xresldtrk() {
			TestAssembler(c => c.xresldtrk(), Instruction.Create(Code.Xresldtrk));
		}

		[Fact]
		public void xrstor_m() {
			TestAssembler(c => c.xrstor(__[rcx]), Instruction.Create(Code.Xrstor_mem, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void xrstor64_m() {
			TestAssembler(c => c.xrstor64(__[rcx]), Instruction.Create(Code.Xrstor64_mem, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void xrstors_m() {
			TestAssembler(c => c.xrstors(__[rcx]), Instruction.Create(Code.Xrstors_mem, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void xrstors64_m() {
			TestAssembler(c => c.xrstors64(__[rcx]), Instruction.Create(Code.Xrstors64_mem, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void xsave_m() {
			TestAssembler(c => c.xsave(__[rcx]), Instruction.Create(Code.Xsave_mem, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void xsave64_m() {
			TestAssembler(c => c.xsave64(__[rcx]), Instruction.Create(Code.Xsave64_mem, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void xsavec_m() {
			TestAssembler(c => c.xsavec(__[rcx]), Instruction.Create(Code.Xsavec_mem, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void xsavec64_m() {
			TestAssembler(c => c.xsavec64(__[rcx]), Instruction.Create(Code.Xsavec64_mem, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void xsaveopt_m() {
			TestAssembler(c => c.xsaveopt(__[rcx]), Instruction.Create(Code.Xsaveopt_mem, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void xsaveopt64_m() {
			TestAssembler(c => c.xsaveopt64(__[rcx]), Instruction.Create(Code.Xsaveopt64_mem, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void xsaves_m() {
			TestAssembler(c => c.xsaves(__[rcx]), Instruction.Create(Code.Xsaves_mem, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void xsaves64_m() {
			TestAssembler(c => c.xsaves64(__[rcx]), Instruction.Create(Code.Xsaves64_mem, new MemoryOperand(Register.RCX, Register.None, 1, 0x0, 0, false, Register.None)));
		}

		[Fact]
		public void xsetbv() {
			TestAssembler(c => c.xsetbv(), Instruction.Create(Code.Xsetbv));
		}

		[Fact]
		public void xsha1() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.xsha1(), Instruction.Create(Code.Xsha1_64), TestInstrFlags.RemoveRepRepnePrefixes);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void xsha256() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.xsha256(), Instruction.Create(Code.Xsha256_64), TestInstrFlags.RemoveRepRepnePrefixes);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void xsha512() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.xsha512(), Instruction.Create(Code.Xsha512_64), TestInstrFlags.RemoveRepRepnePrefixes);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void xsha512_alt() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.xsha512_alt(), Instruction.Create(Code.Xsha512_alt_64), TestInstrFlags.RemoveRepRepnePrefixes);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void xstore() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.xstore(), Instruction.Create(Code.Xstore_64), TestInstrFlags.RemoveRepRepnePrefixes);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void xstore_alt() {
			{ /* if (Bitness == 64) */
				TestAssembler(c => c.xstore_alt(), Instruction.Create(Code.Xstore_alt_64), TestInstrFlags.RemoveRepRepnePrefixes);
			} /* else skip !(Bitness == 64) not supported by this Assembler bitness */
		}

		[Fact]
		public void xsusldtrk() {
			TestAssembler(c => c.xsusldtrk(), Instruction.Create(Code.Xsusldtrk));
		}

		[Fact]
		public void xtest() {
			TestAssembler(c => c.xtest(), Instruction.Create(Code.Xtest));
		}

		[Fact]
		public void zero_bytes() {
			TestAssembler(c => c.zero_bytes(), Instruction.Create(Code.Zero_bytes));
		}

	/// <summary>Creates a db Asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_1() {
		TestAssemblerDeclareData(c => c.db((byte)1), new byte[] {(byte)1});
	}
	/// <summary>Creates a db Asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_2() {
		TestAssemblerDeclareData(c => c.db((byte)1, (byte)2), new byte[] {(byte)1, (byte)2});
	}
	/// <summary>Creates a db Asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_3() {
		TestAssemblerDeclareData(c => c.db((byte)1, (byte)2, (byte)3), new byte[] {(byte)1, (byte)2, (byte)3});
	}
	/// <summary>Creates a db Asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_4() {
		TestAssemblerDeclareData(c => c.db((byte)1, (byte)2, (byte)3, (byte)4), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4});
	}
	/// <summary>Creates a db Asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_5() {
		TestAssemblerDeclareData(c => c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5});
	}
	/// <summary>Creates a db Asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_6() {
		TestAssemblerDeclareData(c => c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6});
	}
	/// <summary>Creates a db Asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_7() {
		TestAssemblerDeclareData(c => c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7});
	}
	/// <summary>Creates a db Asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_8() {
		TestAssemblerDeclareData(c => c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8});
	}
	/// <summary>Creates a db Asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_9() {
		TestAssemblerDeclareData(c => c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9});
	}
	/// <summary>Creates a db Asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_10() {
		TestAssemblerDeclareData(c => c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10});
	}
	/// <summary>Creates a db Asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_11() {
		TestAssemblerDeclareData(c => c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11});
	}
	/// <summary>Creates a db Asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_12() {
		TestAssemblerDeclareData(c => c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12});
	}
	/// <summary>Creates a db Asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_13() {
		TestAssemblerDeclareData(c => c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13});
	}
	/// <summary>Creates a db Asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_14() {
		TestAssemblerDeclareData(c => c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14});
	}
	/// <summary>Creates a db Asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_15() {
		TestAssemblerDeclareData(c => c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14, (byte)15), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14, (byte)15});
	}
	/// <summary>Creates a db Asm directive with the type byte.</summary>
	[Fact]
	public void TestDeclareData_db_byte_16() {
		TestAssemblerDeclareData(c => c.db((byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14, (byte)15, (byte)16), new byte[] {(byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9, (byte)10, (byte)11, (byte)12, (byte)13, (byte)14, (byte)15, (byte)16});
	}
	/// <summary>Creates a db Asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_1() {
		TestAssemblerDeclareData(c => c.db((sbyte)1), new sbyte[] {(sbyte)1});
	}
	/// <summary>Creates a db Asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_2() {
		TestAssemblerDeclareData(c => c.db((sbyte)1, (sbyte)2), new sbyte[] {(sbyte)1, (sbyte)2});
	}
	/// <summary>Creates a db Asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_3() {
		TestAssemblerDeclareData(c => c.db((sbyte)1, (sbyte)2, (sbyte)3), new sbyte[] {(sbyte)1, (sbyte)2, (sbyte)3});
	}
	/// <summary>Creates a db Asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_4() {
		TestAssemblerDeclareData(c => c.db((sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4), new sbyte[] {(sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4});
	}
	/// <summary>Creates a db Asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_5() {
		TestAssemblerDeclareData(c => c.db((sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5), new sbyte[] {(sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5});
	}
	/// <summary>Creates a db Asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_6() {
		TestAssemblerDeclareData(c => c.db((sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6), new sbyte[] {(sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6});
	}
	/// <summary>Creates a db Asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_7() {
		TestAssemblerDeclareData(c => c.db((sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7), new sbyte[] {(sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7});
	}
	/// <summary>Creates a db Asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_8() {
		TestAssemblerDeclareData(c => c.db((sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8), new sbyte[] {(sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8});
	}
	/// <summary>Creates a db Asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_9() {
		TestAssemblerDeclareData(c => c.db((sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9), new sbyte[] {(sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9});
	}
	/// <summary>Creates a db Asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_10() {
		TestAssemblerDeclareData(c => c.db((sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9, (sbyte)10), new sbyte[] {(sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9, (sbyte)10});
	}
	/// <summary>Creates a db Asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_11() {
		TestAssemblerDeclareData(c => c.db((sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9, (sbyte)10, (sbyte)11), new sbyte[] {(sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9, (sbyte)10, (sbyte)11});
	}
	/// <summary>Creates a db Asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_12() {
		TestAssemblerDeclareData(c => c.db((sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9, (sbyte)10, (sbyte)11, (sbyte)12), new sbyte[] {(sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9, (sbyte)10, (sbyte)11, (sbyte)12});
	}
	/// <summary>Creates a db Asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_13() {
		TestAssemblerDeclareData(c => c.db((sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9, (sbyte)10, (sbyte)11, (sbyte)12, (sbyte)13), new sbyte[] {(sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9, (sbyte)10, (sbyte)11, (sbyte)12, (sbyte)13});
	}
	/// <summary>Creates a db Asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_14() {
		TestAssemblerDeclareData(c => c.db((sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9, (sbyte)10, (sbyte)11, (sbyte)12, (sbyte)13, (sbyte)14), new sbyte[] {(sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9, (sbyte)10, (sbyte)11, (sbyte)12, (sbyte)13, (sbyte)14});
	}
	/// <summary>Creates a db Asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_15() {
		TestAssemblerDeclareData(c => c.db((sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9, (sbyte)10, (sbyte)11, (sbyte)12, (sbyte)13, (sbyte)14, (sbyte)15), new sbyte[] {(sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9, (sbyte)10, (sbyte)11, (sbyte)12, (sbyte)13, (sbyte)14, (sbyte)15});
	}
	/// <summary>Creates a db Asm directive with the type sbyte.</summary>
	[Fact]
	public void TestDeclareData_db_sbyte_16() {
		TestAssemblerDeclareData(c => c.db((sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9, (sbyte)10, (sbyte)11, (sbyte)12, (sbyte)13, (sbyte)14, (sbyte)15, (sbyte)16), new sbyte[] {(sbyte)1, (sbyte)2, (sbyte)3, (sbyte)4, (sbyte)5, (sbyte)6, (sbyte)7, (sbyte)8, (sbyte)9, (sbyte)10, (sbyte)11, (sbyte)12, (sbyte)13, (sbyte)14, (sbyte)15, (sbyte)16});
	}
	/// <summary>Creates a dw Asm directive with the type ushort.</summary>
	[Fact]
	public void TestDeclareData_dw_ushort_1() {
		TestAssemblerDeclareData(c => c.dw((ushort)1), new ushort[] {(ushort)1});
	}
	/// <summary>Creates a dw Asm directive with the type ushort.</summary>
	[Fact]
	public void TestDeclareData_dw_ushort_2() {
		TestAssemblerDeclareData(c => c.dw((ushort)1, (ushort)2), new ushort[] {(ushort)1, (ushort)2});
	}
	/// <summary>Creates a dw Asm directive with the type ushort.</summary>
	[Fact]
	public void TestDeclareData_dw_ushort_3() {
		TestAssemblerDeclareData(c => c.dw((ushort)1, (ushort)2, (ushort)3), new ushort[] {(ushort)1, (ushort)2, (ushort)3});
	}
	/// <summary>Creates a dw Asm directive with the type ushort.</summary>
	[Fact]
	public void TestDeclareData_dw_ushort_4() {
		TestAssemblerDeclareData(c => c.dw((ushort)1, (ushort)2, (ushort)3, (ushort)4), new ushort[] {(ushort)1, (ushort)2, (ushort)3, (ushort)4});
	}
	/// <summary>Creates a dw Asm directive with the type ushort.</summary>
	[Fact]
	public void TestDeclareData_dw_ushort_5() {
		TestAssemblerDeclareData(c => c.dw((ushort)1, (ushort)2, (ushort)3, (ushort)4, (ushort)5), new ushort[] {(ushort)1, (ushort)2, (ushort)3, (ushort)4, (ushort)5});
	}
	/// <summary>Creates a dw Asm directive with the type ushort.</summary>
	[Fact]
	public void TestDeclareData_dw_ushort_6() {
		TestAssemblerDeclareData(c => c.dw((ushort)1, (ushort)2, (ushort)3, (ushort)4, (ushort)5, (ushort)6), new ushort[] {(ushort)1, (ushort)2, (ushort)3, (ushort)4, (ushort)5, (ushort)6});
	}
	/// <summary>Creates a dw Asm directive with the type ushort.</summary>
	[Fact]
	public void TestDeclareData_dw_ushort_7() {
		TestAssemblerDeclareData(c => c.dw((ushort)1, (ushort)2, (ushort)3, (ushort)4, (ushort)5, (ushort)6, (ushort)7), new ushort[] {(ushort)1, (ushort)2, (ushort)3, (ushort)4, (ushort)5, (ushort)6, (ushort)7});
	}
	/// <summary>Creates a dw Asm directive with the type ushort.</summary>
	[Fact]
	public void TestDeclareData_dw_ushort_8() {
		TestAssemblerDeclareData(c => c.dw((ushort)1, (ushort)2, (ushort)3, (ushort)4, (ushort)5, (ushort)6, (ushort)7, (ushort)8), new ushort[] {(ushort)1, (ushort)2, (ushort)3, (ushort)4, (ushort)5, (ushort)6, (ushort)7, (ushort)8});
	}
	/// <summary>Creates a dw Asm directive with the type short.</summary>
	[Fact]
	public void TestDeclareData_dw_short_1() {
		TestAssemblerDeclareData(c => c.dw((short)1), new short[] {(short)1});
	}
	/// <summary>Creates a dw Asm directive with the type short.</summary>
	[Fact]
	public void TestDeclareData_dw_short_2() {
		TestAssemblerDeclareData(c => c.dw((short)1, (short)2), new short[] {(short)1, (short)2});
	}
	/// <summary>Creates a dw Asm directive with the type short.</summary>
	[Fact]
	public void TestDeclareData_dw_short_3() {
		TestAssemblerDeclareData(c => c.dw((short)1, (short)2, (short)3), new short[] {(short)1, (short)2, (short)3});
	}
	/// <summary>Creates a dw Asm directive with the type short.</summary>
	[Fact]
	public void TestDeclareData_dw_short_4() {
		TestAssemblerDeclareData(c => c.dw((short)1, (short)2, (short)3, (short)4), new short[] {(short)1, (short)2, (short)3, (short)4});
	}
	/// <summary>Creates a dw Asm directive with the type short.</summary>
	[Fact]
	public void TestDeclareData_dw_short_5() {
		TestAssemblerDeclareData(c => c.dw((short)1, (short)2, (short)3, (short)4, (short)5), new short[] {(short)1, (short)2, (short)3, (short)4, (short)5});
	}
	/// <summary>Creates a dw Asm directive with the type short.</summary>
	[Fact]
	public void TestDeclareData_dw_short_6() {
		TestAssemblerDeclareData(c => c.dw((short)1, (short)2, (short)3, (short)4, (short)5, (short)6), new short[] {(short)1, (short)2, (short)3, (short)4, (short)5, (short)6});
	}
	/// <summary>Creates a dw Asm directive with the type short.</summary>
	[Fact]
	public void TestDeclareData_dw_short_7() {
		TestAssemblerDeclareData(c => c.dw((short)1, (short)2, (short)3, (short)4, (short)5, (short)6, (short)7), new short[] {(short)1, (short)2, (short)3, (short)4, (short)5, (short)6, (short)7});
	}
	/// <summary>Creates a dw Asm directive with the type short.</summary>
	[Fact]
	public void TestDeclareData_dw_short_8() {
		TestAssemblerDeclareData(c => c.dw((short)1, (short)2, (short)3, (short)4, (short)5, (short)6, (short)7, (short)8), new short[] {(short)1, (short)2, (short)3, (short)4, (short)5, (short)6, (short)7, (short)8});
	}
	/// <summary>Creates a dd Asm directive with the type uint.</summary>
	[Fact]
	public void TestDeclareData_dd_uint_1() {
		TestAssemblerDeclareData(c => c.dd((uint)1), new uint[] {(uint)1});
	}
	/// <summary>Creates a dd Asm directive with the type uint.</summary>
	[Fact]
	public void TestDeclareData_dd_uint_2() {
		TestAssemblerDeclareData(c => c.dd((uint)1, (uint)2), new uint[] {(uint)1, (uint)2});
	}
	/// <summary>Creates a dd Asm directive with the type uint.</summary>
	[Fact]
	public void TestDeclareData_dd_uint_3() {
		TestAssemblerDeclareData(c => c.dd((uint)1, (uint)2, (uint)3), new uint[] {(uint)1, (uint)2, (uint)3});
	}
	/// <summary>Creates a dd Asm directive with the type uint.</summary>
	[Fact]
	public void TestDeclareData_dd_uint_4() {
		TestAssemblerDeclareData(c => c.dd((uint)1, (uint)2, (uint)3, (uint)4), new uint[] {(uint)1, (uint)2, (uint)3, (uint)4});
	}
	/// <summary>Creates a dd Asm directive with the type int.</summary>
	[Fact]
	public void TestDeclareData_dd_int_1() {
		TestAssemblerDeclareData(c => c.dd((int)1), new int[] {(int)1});
	}
	/// <summary>Creates a dd Asm directive with the type int.</summary>
	[Fact]
	public void TestDeclareData_dd_int_2() {
		TestAssemblerDeclareData(c => c.dd((int)1, (int)2), new int[] {(int)1, (int)2});
	}
	/// <summary>Creates a dd Asm directive with the type int.</summary>
	[Fact]
	public void TestDeclareData_dd_int_3() {
		TestAssemblerDeclareData(c => c.dd((int)1, (int)2, (int)3), new int[] {(int)1, (int)2, (int)3});
	}
	/// <summary>Creates a dd Asm directive with the type int.</summary>
	[Fact]
	public void TestDeclareData_dd_int_4() {
		TestAssemblerDeclareData(c => c.dd((int)1, (int)2, (int)3, (int)4), new int[] {(int)1, (int)2, (int)3, (int)4});
	}
	/// <summary>Creates a dd Asm directive with the type float.</summary>
	[Fact]
	public void TestDeclareData_dd_float_1() {
		TestAssemblerDeclareData(c => c.dd((float)1), new float[] {(float)1});
	}
	/// <summary>Creates a dd Asm directive with the type float.</summary>
	[Fact]
	public void TestDeclareData_dd_float_2() {
		TestAssemblerDeclareData(c => c.dd((float)1, (float)2), new float[] {(float)1, (float)2});
	}
	/// <summary>Creates a dd Asm directive with the type float.</summary>
	[Fact]
	public void TestDeclareData_dd_float_3() {
		TestAssemblerDeclareData(c => c.dd((float)1, (float)2, (float)3), new float[] {(float)1, (float)2, (float)3});
	}
	/// <summary>Creates a dd Asm directive with the type float.</summary>
	[Fact]
	public void TestDeclareData_dd_float_4() {
		TestAssemblerDeclareData(c => c.dd((float)1, (float)2, (float)3, (float)4), new float[] {(float)1, (float)2, (float)3, (float)4});
	}
	/// <summary>Creates a dq Asm directive with the type ulong.</summary>
	[Fact]
	public void TestDeclareData_dq_ulong_1() {
		TestAssemblerDeclareData(c => c.dq((ulong)1), new ulong[] {(ulong)1});
	}
	/// <summary>Creates a dq Asm directive with the type ulong.</summary>
	[Fact]
	public void TestDeclareData_dq_ulong_2() {
		TestAssemblerDeclareData(c => c.dq((ulong)1, (ulong)2), new ulong[] {(ulong)1, (ulong)2});
	}
	/// <summary>Creates a dq Asm directive with the type long.</summary>
	[Fact]
	public void TestDeclareData_dq_long_1() {
		TestAssemblerDeclareData(c => c.dq((long)1), new long[] {(long)1});
	}
	/// <summary>Creates a dq Asm directive with the type long.</summary>
	[Fact]
	public void TestDeclareData_dq_long_2() {
		TestAssemblerDeclareData(c => c.dq((long)1, (long)2), new long[] {(long)1, (long)2});
	}
	/// <summary>Creates a dq Asm directive with the type double.</summary>
	[Fact]
	public void TestDeclareData_dq_double_1() {
		TestAssemblerDeclareData(c => c.dq((double)1), new double[] {(double)1});
	}
	/// <summary>Creates a dq Asm directive with the type double.</summary>
	[Fact]
	public void TestDeclareData_dq_double_2() {
		TestAssemblerDeclareData(c => c.dq((double)1, (double)2), new double[] {(double)1, (double)2});
	}
	}
}
#endif
